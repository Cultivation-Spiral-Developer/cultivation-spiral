import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.awt.event.ComponentEvent;
import java.awt.event.KeyEvent;
import java.awt.event.ActionEvent;
import java.awt.event.ComponentAdapter;
import java.awt.Color;
import java.awt.GridBagLayout;
import java.awt.Image;
import java.awt.Insets;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.GradientPaint;
import java.awt.Point;
import java.awt.ComponentOrientation;
import java.awt.MouseInfo;
import java.awt.Toolkit;
import java.awt.event.AWTEventListener;
import java.awt.AWTEvent;
import java.awt.event.FocusEvent;
import java.awt.event.WindowEvent;
import java.awt.image.BufferedImage;
import java.awt.RenderingHints;
import java.awt.event.ActionListener;
import java.awt.event.MouseListener;
import java.awt.event.MouseEvent;
import java.awt.AlphaComposite;

import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextPane;
import javax.swing.KeyStroke;
import javax.swing.BoxLayout;
import javax.swing.JProgressBar;
import javax.swing.plaf.basic.BasicProgressBarUI;
import javax.swing.JButton;
import javax.swing.Box;
import javax.swing.AbstractAction;
import javax.swing.JList;
import javax.swing.DefaultListCellRenderer;
import javax.swing.DefaultButtonModel;
import javax.swing.SwingUtilities;
import javax.swing.text.DefaultHighlighter;
import javax.swing.text.Highlighter.HighlightPainter;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.StyleConstants;
import javax.swing.SwingWorker;
import javax.swing.ToolTipManager;
import javax.swing.text.StyledDocument;
import javax.swing.ImageIcon;
import javax.swing.UIManager;
import javax.swing.BorderFactory;
import javax.swing.JOptionPane;
import javax.swing.border.Border;

import java.io.*;
import java.util.HashMap;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import java.math.BigInteger;
import java.net.URLDecoder;

import javax.imageio.ImageIO;

import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.DataLine;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.AudioFormat;
import javax.sound.sampled.SourceDataLine;
import javax.sound.sampled.FloatControl;

public class Game {

    public static final String version = "1d";
	public static final JFrame frame = new JFrame("Cultivation Spiral");
	public static final JPanel mainPanel = new JPanel();
	public static final JPanel headerDisplay = new JPanel();
	public static final JPanel timeDisplay = new JPanel();
	public static final SpecialJLabel dateDisplay = new SpecialJLabel();
	public static final SpecialJLabel durationDisplay = new SpecialJLabel();
	public static final SpecialJLabel deadlineDisplay = new SpecialJLabel();
	public static final JPanel resourceDisplay = new JPanel();
	public static final SpecialJProgressBar staminaDisplay = new SpecialJProgressBar(0, 1000);
	public static final SpecialJProgressBar healthDisplay = new SpecialJProgressBar(0, 1000);
	public static final SpecialJProgressBar sanityDisplay = new SpecialJProgressBar(0, 1000);
	public static final SpecialJProgressBar qiDisplay = new SpecialJProgressBar(0, 100);
	public static final Box.Filler firstFiller = new Box.Filler(new Dimension(1, 1), new Dimension(1, 1), new Dimension(1, 1));
	public static final Box.Filler secondFiller = new Box.Filler(new Dimension(1, 1), new Dimension(1, 1), new Dimension(1, 1));
	public static final JPanel interfacePanel = new JPanel();
	public static final JScrollPane leftHalfPane = new JScrollPane();
	public static final JScrollPane rightHalfPane = new JScrollPane();
	public static final JTextPane leftFullArea = new JTextPane();
	public static final JTextPane rightFullArea = new JTextPane();
	public static final JScrollPane leftFullPane = new JScrollPane(leftFullArea);
	public static final JScrollPane rightFullPane = new JScrollPane(rightFullArea);
	public static final SimpleAttributeSet leftFullAttributes = new SimpleAttributeSet();
	public static final StyledDocument leftStyledDoc = leftFullArea.getStyledDocument();
	public static final SimpleAttributeSet rightFullAttributes = new SimpleAttributeSet();
	public static final StyledDocument rightStyledDoc = rightFullArea.getStyledDocument();
	public static final SpecialJProgressBar goalProgressBar = new SpecialJProgressBar(0, 1000);
	public static final JTextPane[] weekDayLabels = new JTextPane[7];
	public static final JPanel storyPanel = new JPanel();
	public static final JTextPane storyArea = new JTextPane();
	public static final JScrollPane storyPane = new JScrollPane(storyArea);
	public static final SimpleAttributeSet storyAttributes = new SimpleAttributeSet();
	public static final StyledDocument storyStyledDoc = storyArea.getStyledDocument();
	public static final JPanel storyContainer = new JPanel();
	public static final JLabel storyBackground = new JLabel();
	public static JLabel[] storyChar = new JLabel[0];
	public static int upgradeScroll = 0;
	public static int upgradeGoal = 0;
	public static int selectedUpgrade = 0;
	public static int describedUpgrade = -1;
	public static int lastUpgradeColumn = 0;
	public static boolean blockLoopUpgradeMovement;
	public static float upgradeImageAlpha = 1.0f;
	public static boolean nextLoopArmed = false;
	public static final JPanel upgradePanel = new JPanel();
	public static final JPanel upgradeContainer = new JPanel();
	public static SpecialJButton[][] upgradeButtons = null;
	public static final SpecialJButton nextLoopButton = new SpecialJButton();
	public static final SpecialJButton upgradeResetButton = new SpecialJButton();
	public static final JPanel upgradeArt = new JPanel();
	public static final JLabel upgradeArtBackground = new JLabel() {
		@Override
        public void paint(Graphics g) {
            Graphics2D g2d = (Graphics2D) g.create();
            float usedAlpha = upgradeImageAlpha;
            if (usedAlpha < 0f) {
            	usedAlpha = 0f;
            }
            g2d.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, usedAlpha));
            super.paint(g2d);
            g2d.dispose();
        }
		@Override
        protected void paintComponent(Graphics g) {
            //if (background != null) {
                g.drawImage(new BufferedImage(getIcon().getIconWidth(), getIcon().getIconHeight(), BufferedImage.TYPE_INT_RGB), 0, 0, this);
            //}
            super.paintComponent(g);
        }
		/*@Override
		    protected void paintComponent(Graphics g) {
			super.paintComponent(g);
			 
			Graphics2D g2 = (Graphics2D) g;
	        Composite old = g2.getComposite();
	        g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 0.5f));
	        g2.drawRenderedImage(new BufferedImage(getIcon().getIconWidth(), getIcon().getIconHeight(), BufferedImage.TYPE_INT_RGB), AffineTransform.getTranslateInstance(0, 0));
	        g2.setComposite(old);
		}*/
	};
	public static final JTextPane upgradeDescriptionArea = new JTextPane();
	public static final JScrollPane upgradeDescriptionPane = new JScrollPane(upgradeDescriptionArea);
	public static final SimpleAttributeSet upgradeAttributes = new SimpleAttributeSet();
	public static final StyledDocument upgradeStyledDoc = upgradeDescriptionArea.getStyledDocument();
	public static final JPanel bottomPanel = new JPanel();
	public static final JPanel relationshipPanel = new JPanel();
	public static final JLabel characters = new JLabel("Characters");
	public static final JLabel players = new JLabel("Players");
	public static final JLabel attributeSpacer = new JLabel(" ");
	public static final JPanel centerBottom = new JPanel();
	public static final JPanel stateSummary = new JPanel();
	public static final JPanel stateFields = new JPanel();
	public static final JLabel[] attributeBlanks = new JLabel[21];
	public static final JLabel[] relationshipBlanks = new JLabel[21];
	public static final JLabel[] timeSlotFields = new JLabel[TimeSlot.values().length];
	public static final JLabel staminaSummaryField = new JLabel("Total:");
	public static final JLabel[] routineFields = new JLabel[RoutineSettings.values().length];
	public static final JPanel stateContents = new JPanel();
	public static final JLabel[] timeSlotContents = new JLabel[TimeSlot.values().length];
	public static final JLabel staminaSummaryContents = new JLabel();
	public static final JLabel[] routineContents = new JLabel[RoutineSettings.values().length];
	public static final JPanel mainControls = new JPanel();
	public static final JPanel buttonSet = new JPanel();
	public static final SpecialJButton interfaceSwap = new SpecialJButton();
	public static final SpecialJButton back = new SpecialJButton();
	public static final SpecialJButton forward = new SpecialJButton();
	public static final SpecialJButton auto = new SpecialJButton();
	public static final SpecialJButton options = new SpecialJButton();
    public static final SpecialJButton routineButton = new SpecialJButton();
    public static final SpecialJButton achievementButton = new SpecialJButton();
    public static final SpecialJButton plannerButton = new SpecialJButton();
    public static final SpecialJButton statsButton = new SpecialJButton();
	public static final JPanel attributePanel = new JPanel();
	public static final JLabel meaning = new JLabel();
	public static final JLabel totalMeaning = new JLabel();
	public static final SpecialJProgressBar[] relationshipProgress = new SpecialJProgressBar[21];
	public static final SpecialJProgressBar[] attributeProgress = new SpecialJProgressBar[21];
	public static final DisplayArea RIGHT = DisplayArea.RIGHT;
	public static final DisplayArea LEFT = DisplayArea.LEFT;
	public static final DisplayArea STORY = DisplayArea.STORY;
	public static final DisplayArea UPGRADE = DisplayArea.UPGRADE;
	public static final int MORNING = TimeSlot.MORNING.placement;
	public static final int NOON = TimeSlot.NOON.placement;
	public static final int AFTERNOON = TimeSlot.AFTERNOON.placement;
	public static final int EVENING = TimeSlot.EVENING.placement;
	public static final int MIDNIGHT = TimeSlot.MIDNIGHT.placement;
	public static final int PREDAWN = TimeSlot.PREDAWN.placement;
	
	public static final JComponent[] fadeComponents = new JComponent[]{dateDisplay, durationDisplay, deadlineDisplay, totalMeaning};
	
	public static String dateFont = "Haettenschweiler";
	public static String subheaderFont = "Franklin Gothic Medium";
    public static String buttonSymbolFont = "Segoe UI Symbol";
	public static Color newThingColor = new Color(200, 255, 200);
	public static Color defaultButtonColor = new Color(190, 200, 220);
	public static Color newButtonColor = new Color(100, 225, 100);
	public static HighlightPainter leftAreaPainter = null;
	public static HighlightPainter storyAreaPainter = null;
	
	public static BigInteger[] levelRequirements = new BigInteger[10];
	public static BigInteger[] earlyLevelSums = new BigInteger[50];
	public static final BigInteger levelConstant =   new BigInteger("1258925412");
	public static final BigInteger levelSum = new BigInteger("4862116094");
	public static int totalGoals = 29;
	
	public static MiddleDisplay currentMiddleDisplay = MiddleDisplay.NEWDAY;
	public static MiddleDisplay lastMiddleDisplay = MiddleDisplay.NEWDAY;
	
	static Playthrough currentPlaythrough = null;
	static Game currentGame = null;
	static SpotMenu currentSpotMenu = null;
	static JList<Spot> currentSpotList = null;
	static ActionMenu currentActionMenu = null;
	static JList<Action> currentActionList = null;
	static RoutineSettings currentRoutineSettings = null;
	static JList<RoutineSettings> currentRoutineList = null;
	static RoutineMenu currentRoutineMenu = null;
	static JList<RoutineElements> currentRoutineElementsList = null;
	static RoutineElementMenu currentRoutineElementMenu = null;
	static OptionSettings currentOptionSettings = OptionSettings.values()[0];
	static JList<OptionSettings> currentOptionList = null;
	static OptionMenu currentOptionMenu = null;
	static JList<OptionElements> currentOptionElementsList = null;
	static OptionElementMenu currentOptionElementMenu = null;
	static AchievementCategory currentAchievementCategory = AchievementCategory.values()[0];
	static JList<AchievementCategory> currentAchievementCategoryList = null;
	static AchievementCategoryMenu currentAchievementCategoryMenu = null;
	static JList<Achievement> currentAchievementList = null;
	static AchievementMenu currentAchievementMenu = null;
	static StatsCategory currentStatsCategory = StatsCategory.values()[0];
	static JList<StatsCategory> currentStatsList = null;
	static StatsCategoryMenu currentStatsCategoryMenu = null;
	static JList<StatsElements> currentStatsElementsList = null;
	static StatsMenu currentStatsMenu = null;
	static TimeSlot currentTimeSlot = null;
	static boolean autoOn = false;
    static boolean skippingStory = false;
    static int skipFactor = 1;
	static Task autoTask = null;
	static BGM bgmTask = null;
	static GamePhase currentPhase = GamePhase.RESULTSPHASE;
	static AutoStopReason currentStopReason = AutoStopReason.NOSTOP;
	static Goal currentGoal;
	public static boolean slowDown = false;
	
	static BigInteger simulatedStamina = Game.TEN_THOUSAND;
	static BigInteger simulatedHealth = Game.TEN_THOUSAND;
	static BigInteger simulatedSanity = new BigInteger("100");
	static BigInteger simulatedQi = new BigInteger("100");
	static BigInteger[] simulatedRelationships = new BigInteger[21];
	static BigInteger[] simulatedAttributes = new BigInteger[21];
	static BigInteger[] simulatedGoals = new BigInteger[Game.totalGoals];
    static boolean startingRomance = false;
	
	public static String[] monthNames = new String[]{"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"};
	public static int[] monthLengths = new int[]{31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
	public static String[] prefixes = new String[]{"k", "M", "G", "T", "P", "E", "Z", "Y", "R", "Q"};
	public static final BigInteger HUNDRED = BigInteger.TEN.multiply(BigInteger.TEN);
	public static final BigInteger THOUSAND = HUNDRED.multiply(BigInteger.TEN);
	public static final BigInteger TEN_THOUSAND = THOUSAND.multiply(BigInteger.TEN);
	public static final BigInteger HUNDRED_THOUSAND = TEN_THOUSAND.multiply(BigInteger.TEN);
	public static final BigInteger MILLION = THOUSAND.multiply(THOUSAND);
	public static final BigInteger LOW_LEVEL_CONSTANT = MILLION.multiply(BigInteger.TEN);
	public static final BigInteger BILLION = MILLION.multiply(THOUSAND);
	public static final BigInteger TRILLION = BILLION.multiply(THOUSAND);
	public static final BigInteger QUADRILLION = TRILLION.multiply(THOUSAND);
	public static final BigInteger QUINTILLION = QUADRILLION.multiply(THOUSAND);
	public static final BigInteger SEXTILLION = QUINTILLION.multiply(THOUSAND);
	public static final BigInteger SEPTILLION = SEXTILLION.multiply(THOUSAND);
	public static final BigInteger OCTILLION = SEPTILLION.multiply(THOUSAND);
	public static final BigInteger NONILLION = OCTILLION.multiply(THOUSAND);
	public static String[] defaultNames = new String[]{"Hashimoto", "Yumeno", "DuMont", "Jackal", "Heilig", "Tanaka", "Lancia", "Paladin", "Lophii", "Roulette", "Shishi", "Garmr", "Hel", "Xuannu", "Lamashtu", "Elohim", "Shivani", "Artemis", "Amaterasu", "Ma'at", "Achamoth"};
	public static Locale[] startingStatus = new Locale[]{Locale.COLLEGETOWN, Locale.COLLEGETOWN, Locale.COLLEGETOWN, Locale.COLLEGETOWN, Locale.COLLEGETOWN, Locale.COLLEGETOWN, Locale.METROPOLIS, Locale.METROPOLIS, Locale.CITYOFSIN, Locale.WILDERNESS, Locale.WILDERNESS, Locale.BEYOND, Locale.BEYOND, Locale.WILDERNESS, Locale.CITYOFSIN, Locale.COLLEGETOWN, Locale.SPACE, Locale.METROPOLIS, Locale.VESTA, Locale.VESTA, Locale.VESTA};
	public static String[] attributeNames = new String[]{"Vitality", "Focus", "Finances", "Wetwork", "Academics", "Charisma", "Power", "Mindfulness", "Hacking", "Arithmancy", "Xiuxian", "Soulbinding", "Continuity", "Qigong", "Politics", "Simulation", "Engineering", "Tzimtzum", "Synchronization", "Transcendence", "Wisdom"};
	public static String[] personSymbols = new String[]{"\u221E", "\uD83D\uDD6E", "\uD83D\uDCB8", "\u265A", "\u271A", "\u2661", "\uD83D\uDE97", "\uD83D\uDDE1", "\uD83D\uDCA1", "\u2699", "\uD83D\uDC31", "\u26D3", "\uD83D\uDC80", "\uD83C\uDF76", "\uD83D\uDE08", "\uD83C\uDFF0", "\u2605", "\uD83C\uDF19", "\uD83D\uDD06", "\uD83C\uDFBA", "\uD83C\uDF0E"};
	public static Color[] attributeColors = new Color[]{
			new Color(0, 180, 0),
			new Color(150, 150, 255),
			new Color(150, 0, 150),
			new Color(200, 0, 0),
			new Color(50, 50, 50),
			new Color(250, 100, 100),
			new Color(50, 100, 0),
			new Color(0, 0, 200),
			new Color(100, 50, 50),
			new Color(50, 255, 50),
			new Color (150, 150, 150),
			new Color(25, 50, 0),
			new Color(0, 200, 200),
			new Color(0, 0, 0),
			new Color(200, 50, 200),
			new Color(150, 50, 50),
			new Color(100, 100, 0),
			new Color(0, 40, 80),
			new Color(200, 200, 100),
			new Color(50, 25, 25),
			new Color(255, 255, 255),
	};
	public static Color[] attributeTextColors = new Color[]{
		new Color(255, 255, 255),
		new Color(25, 25, 0),
		new Color(255, 255, 255),
		new Color(255, 255, 255),
		new Color(255, 255, 255),
		new Color(0, 25, 25),
		new Color(255, 255, 255),
		new Color(255, 255, 255),
		new Color(255, 255, 255),
		new Color(25, 0, 25),
		new Color(0, 0, 0),
		new Color(255, 255, 255),
		new Color(25, 0, 0),
		new Color(255, 255, 255),
		new Color(0, 25, 0),
		new Color(255, 255, 255),
		new Color(255, 255, 255),
		new Color(255, 255, 255),
		new Color(0, 0, 0),
		new Color(255, 255, 255),
		new Color(0, 0, 0),
	};
	public static Color[] speechColors = new Color[]{
			new Color(0, 180, 0),
			new Color(0, 0, 100),
			new Color(150, 0, 150),
			new Color(200, 0, 0),
			new Color(50, 50, 50),
			new Color(150, 0, 0),
			new Color(50, 100, 0),
			new Color(0, 0, 200),
			new Color(100, 50, 50),
			new Color(0, 200, 0),
			new Color (125, 125, 125),
			new Color(25, 50, 0),
			new Color(0, 100, 100),
			new Color(0, 0, 0),
			new Color(150, 0, 150),
			new Color(150, 50, 50),
			new Color(100, 100, 0),
			new Color(0, 40, 80),
			new Color(100, 100, 0),
			new Color(50, 25, 25),
			new Color(50, 50, 50),
	};
	public static Color[] darkSpeechColors = new Color[]{
			new Color(0, 200, 0),
			new Color(150, 150, 250),
			new Color(250, 0, 250),
			new Color(250, 50, 50),
			new Color(175, 175, 175),
			new Color(250, 150, 150),
			new Color(100, 200, 0),
			new Color(75, 75, 250),
			new Color(200, 100, 0),
			new Color(100, 250, 100),
			new Color(225, 225, 225),
			new Color(100, 150, 50),
			new Color(0, 200, 200), 
			new Color(100, 100, 100), 
			new Color(175, 0, 175), 
			new Color(150, 100, 50), 
			new Color(150, 150, 0), 
			new Color(0, 150, 200), 
			new Color(200, 200, 0),
			new Color(150, 100, 50), 
			new Color(135, 135, 135)
	};
	static String[] upgradeNames = new String[] {
			"Athletics", //0
			"Drive", //1
			"Frugality", //2
			"Instinct", //3
			"Intelligence", //4, 
			"Magnetism", //5
			"", //6
			"", //7
			"", //8
			"", //9
			"", //10
			"", //11
			"", //12
			"", //13
			"", //14
			"", //15
			"", //16
			"", //17
			"", //18
			"", //19
			"", //20
			"Impatience", //21
			"", //22
			"", //23
			"Adrenaline", //24
			"", //25
			"Confidence", //26
			"", //27
			"", //28
			"", //29
			"", //30
			"", //31
			"", //32
			"", //33
			"", //34
			"", //35
			"", //36
			"", //37
			"", //38
			"", //39
			"", //40
			"", //41
	};
	static BigInteger[] upgradeBaseCosts = new BigInteger[42];
	static int[] upgradeMaxLevels = new int[42];
	static Color textBackground = Color.WHITE;
	static Color defaultBackground = new Color(210, 240, 240);
	static Color badEndBackground = new Color(90, 0, 0);
	static Color deadBackground = new Color(0, 0, 0);
    static Color romanceColor = new Color(255, 220, 220);
	static int classStartDay = 31;
	
	static BigInteger todayMOL = BigInteger.ZERO;
	static BigInteger remainingMOL = BigInteger.ZERO;
	static Scene currentScene = new Scene(0);
	static int sceneProgress = 0;
	
	static String upgradeHeaderOne;
	static String upgradeHeaderTwo;
	static String upgradeHeaderThree;
	
	static BigInteger simulatorCost = THOUSAND;
	static int simulatorType = 0;

    static Playthrough examinedSave;
	static String[] saveNames = new String[0];
	static int selectedSave;
	static boolean deleting;
	static boolean verifying;
	static Playthrough tested;
	static int devLoop = 3;
	static int devDay = 99;
	
	static boolean recentCompletion;
	static Music currentMusic;
	static FloatControl musicControl = null;
	static FloatControl effectsControl;
	static float fadedVolume = 0;
	static boolean musicFading = false;
    static boolean resetMusic = false;
    static boolean recentLoad = false;

    static String lastBackground = "";
    static BufferedImage savedBackground;
    static BufferedImage nextLoopBackground;
    static Image resizedNextLoopBackground;
	
	public enum TimeSlot {
		MORNING,
		NOON,
		AFTERNOON,
		EVENING,
		MIDNIGHT,
		PREDAWN;
		
		String name;
		TimeSlot Next;
		TimeSlot Previous;
		int placement;
		
		static {
			MORNING.name = "Morning";
			NOON.name = "Noon";
			AFTERNOON.name = "Afternoon";
			EVENING.name = "Evening";
			MIDNIGHT.name = "Midnight";
			PREDAWN.name = "Predawn";
			
			for (int i = 0; i < TimeSlot.values().length; i++) {
				if (i == 0) {
					TimeSlot.values()[i].Previous = TimeSlot.values()[TimeSlot.values().length-1];
				} else {
					TimeSlot.values()[i].Previous = TimeSlot.values()[i-1];
				}
				if (i == TimeSlot.values().length-1) {
					TimeSlot.values()[i].Next = TimeSlot.values()[0];
				} else {
					TimeSlot.values()[i].Next = TimeSlot.values()[i+1];
				}
				TimeSlot.values()[i].placement = i;
			}
		}
	}
	
	public enum WeekDay {
		SUNDAY("Sunday"),
		MONDAY("Monday"),
		TUESDAY("Tuesday"),
		WEDNESDAY("Wednesday"),
		THURSDAY("Thursday"),
		FRIDAY("Friday"),
		SATURDAY("Saturday");
		
		final String name;
		
		private WeekDay(String s) {
			name = s;
		}
	}
	
	public enum MiddleDisplay {
		ROUTINE,
		ACHIEVEMENTS,
		PLANNER,
		STATS,
		ACTION,
		RESULTS,
		NEWDAY,
		OPTIONS,
		STORY,
		NEXTLOOP;
		
		MiddleDisplay Next;
		MiddleDisplay Previous;
		String display;
		boolean bigScreen;
		
		static {
			int cyclingScreens = 4;
			for (int i = 0; i < cyclingScreens; i++) {
				if (i == cyclingScreens-1) {
					MiddleDisplay.values()[i].Next = MiddleDisplay.values()[0];
					MiddleDisplay.values()[i].Previous = MiddleDisplay.values()[i-1];
				} else if (i == 0) {
					MiddleDisplay.values()[i].Next = MiddleDisplay.values()[1];
					MiddleDisplay.values()[i].Previous = ACTION;
				} else {
					MiddleDisplay.values()[i].Next = MiddleDisplay.values()[i+1];
					MiddleDisplay.values()[i].Previous = MiddleDisplay.values()[i-1];
				}
			}
			ACTION.display = "Actions";
			ACTION.Next = ROUTINE;
			ROUTINE.display = "Routine";
			ROUTINE.Previous = ACTION;
			ACHIEVEMENTS.display = "Achievements";
			PLANNER.display = "Planner";
			PLANNER.Previous = ROUTINE;
			STATS.display = "Stats";
			STATS.Previous = PLANNER;
			OPTIONS.display = "Options";
			NEWDAY.display = "Day Start";
			NEXTLOOP.display = "Upgrades";
			
			STORY.bigScreen = true;
		}
	}
	
	public enum GamePhase {
		ACTIONPHASE,
		RESULTSPHASE,
		NEXTLOOPPHASE;
		
		GamePhase Next;
		
		static {
			ACTIONPHASE.Next = RESULTSPHASE;
			RESULTSPHASE.Next = ACTIONPHASE;
		}
	}
	
	public enum AutoStopReason {
		NOSTOP,
		ACTIONIMPOSSIBLE,
		ROUTINEIMPOSSIBLE,
		NEWFLAVOR,
		NEWUNLOCK,
		ALWAYSSTOP;
		
		RoutineElements relatedRoutine;
		Action relatedAction;
		TimeSlot relatedTimeSlot;
	}
	
	public enum OptionSettings {
		
		DEFAULTACTION("Default action choice", 0, new OptionElements[]{OptionElements.DAILYSCHEDULE, OptionElements.WEEKLYSCHEDULE, OptionElements.LOOPLYSCHEDULE}),
		RESULTSKIP("Action results skip", 1, new OptionElements[]{OptionElements.RESULTSKIPOFF, OptionElements.RESULTSKIPUNSEEN, OptionElements.RESULTSKIPUNLOCK, OptionElements.RESULTSKIPALWAYS}),
		GENDERS("Character genders", 2, new OptionElements[]{OptionElements.PLAYERGENDER, OptionElements.GENDER0, OptionElements.GENDER1, OptionElements.GENDER2, OptionElements.GENDER3, OptionElements.GENDER4, OptionElements.GENDER5, OptionElements.GENDER6, OptionElements.GENDER7, OptionElements.GENDER8, OptionElements.GENDER9, OptionElements.GENDER10, OptionElements.GENDER11, OptionElements.GENDER12, OptionElements.GENDER13, OptionElements.GENDER14, OptionElements.GENDER15, OptionElements.GENDER16, OptionElements.GENDER17, OptionElements.GENDER18, OptionElements.GENDER19, OptionElements.GENDER20, OptionElements.UNMETGENDER}),
        AUDIO("Audio", 3, new OptionElements[]{OptionElements.BGMVOLUME, OptionElements.SFXVOLUME}),
		SAVES("Save Data", 4, new OptionElements[0]),
        SUPPORT("About", 5, new OptionElements[]{OptionElements.SUPPORTONE, OptionElements.SUPPORTTWO}),
        AUTOFUNCTION("Auto function", 6, new OptionElements[]{OptionElements.CONTINUOUS, OptionElements.ONEDAY});
		
		final String name;
		final int index;
		final OptionElements[] allElements;
		
		OptionSettings(String s, int i, OptionElements[] o) {
			name = s;
			index = i;
			allElements = o;
			for (int j = 0; j < allElements.length; j++) {
				allElements[j].placement = j;
                allElements[j].ownOptionSettings = this;
			}
		}
		
	}
	
	public enum OptionElements implements Serializable {
		WEEKLYSCHEDULE("Weekly",
				"Each day's actions will default to the ones used for that day last week."),
		DAILYSCHEDULE("Daily",
				"Each day's actions will default to the ones used on the previous day."),
        LOOPLYSCHEDULE("Looply",
                "Each day's actions will default to the ones used on the same day in the previous loop."),
		
		RESULTSKIPOFF("Off",
				"When not using Auto-Continue, the results of every action will be shown individually."),
		RESULTSKIPUNSEEN("Unseen",
				"The results of an action will only be shown if they differ in some way from what's been seen before."),
		RESULTSKIPUNLOCK("Unlock",
				"The results of an action will only be shown if they unlock a new option or feature."),
		RESULTSKIPALWAYS("Always",
				"The action results screen will never be shown."),

        PLAYERGENDER("Protagonist: ", ""),
        GENDER0("", ""),
        GENDER1("", ""),
        GENDER2("", ""),
        GENDER3("", ""),
        GENDER4("", ""),
        GENDER5("", ""),
        GENDER6("", ""),
        GENDER7("", ""),
        GENDER8("", ""),
        GENDER9("", ""),
        GENDER10("", ""),
        GENDER11("", ""),
        GENDER12("", ""),
        GENDER13("", ""),
        GENDER14("", ""),
        GENDER15("", ""),
        GENDER16("", ""),
        GENDER17("", ""),
        GENDER18("", ""),
        GENDER19("", ""),
        GENDER20("", ""),
        UNMETGENDER("Unmet Characters", ""),

        BGMVOLUME("Music volume", "Set the volume of the background music."),
		SFXVOLUME("Sound effects volume", "Set the volume of sound effects."),

        SUPPORTONE("Support", "If you like this game, please share it and discuss it so that it can be further enjoyed and improved!  There is a good chance that the developer reads whatever forum you found it on.  Direct feedback can also be sent to cultivationspiral@gmail.com\n\nThe latest version of this game is always released for free, but monetary support is greatly appreciated.  The most recent game version and the developer's tip jar can both be found at patreon.com/cultivationspiral"),
		SUPPORTTWO("License", "Copyright 2024-2025 by CSdev. Cultivation Spiral and its art assets are licensed under the Creative Commons Attribution-ShareAlike 4.0 International License.  To view a copy of this license, visit http://creativecommons.org/licenses/by-sa/4.0/.\n\nThe music and sound effects are created by various artists under multiple licenses.  For more information, see the credits.txt files in the /assets/music/ and /assets/effects/ folders."),

        CONTINUOUS("Continuous", "The Auto button sets a toggle which causes the game to automatically advance through the days."),
        ONEDAY("One Day", "Every time the Auto button is pressed, the game automatically advances through all of the time slots before reaching the next day.");

		final String name;
		final String description;
		int placement;
        OptionSettings ownOptionSettings;
		
		OptionElements(String n, String d) {
			name = n;
			description = d;
		}
	}
	
	public enum RoutineSettings {
		DIET("Diet", 0, new RoutineElements[]{RoutineElements.FASTFOOD, RoutineElements.HOMECOOKING, 
				RoutineElements.MOSTLYCOFFEE, RoutineElements.FINEDINING, RoutineElements.RESTAURANT, RoutineElements.CANCERJUICE}),
		EQUIPMENT("Equipment", 1, new RoutineElements[]{RoutineElements.CHEAPCLOTHES, RoutineElements.EYECATCHING, 
				RoutineElements.HANDHELDGAMES, RoutineElements.LARCENY, RoutineElements.BODYARMOR, 
				RoutineElements.OSTENTATIOUS}),
		STANCE("Stance", 2, new RoutineElements[]{RoutineElements.UNASSUMING, RoutineElements.TOUGH, 
				RoutineElements.VULNERABLE, RoutineElements.GENEROUS, RoutineElements.FOCUSED, 
				RoutineElements.SELFDESTRUCTIVE, RoutineElements.TRIUMPHANT, RoutineElements.LONER, RoutineElements.ADAPTIVE}),
		BODY("Body", 3, new RoutineElements[]{RoutineElements.HEALTHY, RoutineElements.TRAINED, RoutineElements.SCARRED});
		
		final String name;
		final int placement;
		final RoutineElements[] allElements;
		RoutineElements currentElement;
		
		public static String[] allNames() {
			String[] result = new String[values().length];
			for (int i = 0; i < values().length; i++) {
				result[i] = values()[i].name;
			}
			return result;
		}
		
		private RoutineSettings(String s, int j, RoutineElements[] members) {
			name = s;
			placement = j;
			allElements = members;
			for (int i = 0; i < members.length; i++) {
				allElements[i].ownRoutineSettings = this;
				allElements[i].placement = i;
			}
		}
	}
	
	public enum RoutineElements implements Serializable {
		FASTFOOD("fast food", BigInteger.valueOf(0), -1, -1, Effect.SPLAT),
		HOMECOOKING("home cooking", BigInteger.valueOf(500), 8, 1, Effect.SIZZLE),
		MOSTLYCOFFEE("mostly coffee", BigInteger.valueOf(5000), 10, 1, Effect.SIP),
		FINEDINING("premium ingredients", BigInteger.valueOf(1500), 11, 2, Effect.PAN),
		RESTAURANT("classy restaurant", BigInteger.ZERO, 20, 1, null),
		CANCERJUICE("cancer juice", BigInteger.valueOf(3000), 18, 1, Effect.BUBBLE),
		
		CHEAPCLOTHES("cheap clothes", BigInteger.valueOf(0), -1, -1, Effect.RUSTLE),
		EYECATCHING("eye-catching attire", BigInteger.valueOf(700), 5, 1, Effect.ZIPPER),
		HANDHELDGAMES("handheld games", BigInteger.valueOf(500), 9, 1, Effect.POWERUP),
		LARCENY("larceny kit", BigInteger.valueOf(1500), 10, 3, Effect.SHATTER),
		BODYARMOR("body armor", BigInteger.valueOf(2000), 15, 1, Effect.HAUL),
		OSTENTATIOUS("ostentatious clothes", BigInteger.valueOf(2000), 11, 4, null),
		
		UNASSUMING("unassuming", BigInteger.valueOf(0), -1, -1, Effect.CLICK),
		TOUGH("tough", BigInteger.valueOf(300), 3, 2, Effect.PUNCH),
		VULNERABLE("vulnerable", BigInteger.valueOf(500), 1, 3, Effect.REVERB),
		GENEROUS("generous", BigInteger.valueOf(500), 6, 1, Effect.COINS),
		FOCUSED("focused", BigInteger.valueOf(1000), 2, 5, Effect.PING),
		SELFDESTRUCTIVE("self-destructive", BigInteger.valueOf(3000), 27, 1, Effect.REV),
		TRIUMPHANT("triumphant", BigInteger.valueOf(4000), 28, 1, Effect.TADA),
        LONER("loner", BigInteger.valueOf(4000), 23, 1, null),
		ADAPTIVE("adaptive", BigInteger.valueOf(5000), 15, 5, null),
		
		HEALTHY("healthy", BigInteger.valueOf(0), -1, -1, null),
		TRAINED("trained", BigInteger.valueOf(0), 22, 1, Effect.RUN),
		SCARRED("scarred", BigInteger.valueOf(1000), 16, 1, Effect.RELOAD);
		
		//TWITCHY("twitchy", BigInteger.valueOf(3000), 
		
		RoutineSettings ownRoutineSettings;
		final String name;
		final BigInteger maxStaminaCost;
		final int requiredGoal;
		final int requiredLevel;
		final Effect ownEffect;
		
		int requiredFinances = 0;
		BigInteger financesCost = BigInteger.ZERO;
		
		int placement;
		
		static {
			BigInteger HUNDRED = BigInteger.valueOf(100);
			
			GENEROUS.requiredFinances = 1;
			GENEROUS.financesCost = HUNDRED.multiply(BigInteger.valueOf(30));
			LARCENY.requiredFinances = 2;
			FINEDINING.requiredFinances = 3;
			FINEDINING.financesCost = HUNDRED.multiply(BigInteger.valueOf(100));
			OSTENTATIOUS.requiredFinances = 6;
			OSTENTATIOUS.financesCost = HUNDRED.multiply(BigInteger.valueOf(300));
			RESTAURANT.requiredFinances = 7;
			RESTAURANT.financesCost = HUNDRED.multiply(BigInteger.valueOf(400));
		}
		
		private RoutineElements(String s, BigInteger n, int goal, int level, Effect x) {
			name = s;
			maxStaminaCost = n;
			requiredGoal = goal;
			requiredLevel = level;
			ownEffect = x;
		}
	}
	
	public enum AchievementCategory {
		FULFILLMENT("Fulfillment", 0, new Achievement[]{Achievement.DAYDREAM, Achievement.DEVELOPMENT}),
		PROGRESSION("Progression", 1, new Achievement[]{Achievement.BELOVED, Achievement.POLYMATH}),
		WEALTH("Wealth", 2, new Achievement[]{Achievement.INDEPENDENCE, Achievement.UPPERMIDDLE, Achievement.MILLIONAIRE}),
		FEATS("Feats", 3, new Achievement[]{Achievement.BLUEBLOOD, Achievement.BATTLETESTED, Achievement.ASSISTANT, Achievement.CHARMING, Achievement.INVESTIGATOR, Achievement.SAVIOR, Achievement.TRUTHSEEKER}),
		ENDINGS("Events", 4, new Achievement[]{Achievement.COLLEGETOWNDESTROYED, Achievement.METROPOLISFALLEN});
		
		final String name;
		final int placement;
		final Achievement[] allAchievements;
		Achievement currentAchievement;
		BigInteger lastRecordedScore = BigInteger.ZERO;
		String lastRecordedDisplay;
		
		private AchievementCategory(String s, int i, Achievement[] members) {
			name = s;
			placement = i;
			allAchievements = members;
			for (int j = 0; j < allAchievements.length; j++) {
				allAchievements[j].placement = j;
				allAchievements[j].ownCategory = this;
			}
		}
	}
	
	public enum Achievement {
		DAYDREAM("Dreamer"),
		DEVELOPMENT("Developer"),
		
		BELOVED("Beloved"),
		POLYMATH("Polymath"),
		
		BLUEBLOOD("Budget Blue-Blood"),
		BATTLETESTED("Battle Tested"),
		ASSISTANT("Research Assistant"),
		CHARMING("Reliable"),
		INVESTIGATOR("Investigator"),
		SAVIOR("Savior"),
        TRUTHSEEKER("Truthseeker"),
		
		INDEPENDENCE("Financially Independent"),
		UPPERMIDDLE("Upper Middle Class"),
		MILLIONAIRE("Millionaire"),
		
		COLLEGETOWNDESTROYED("Doomed Hometown"),
		METROPOLISFALLEN("World in Chaos");
		
		final String name;
		int placement;
		AchievementCategory ownCategory;
		BigInteger lastRecordedScore = BigInteger.ZERO;
		String lastRecordedDisplay;
		boolean nonBlocking = false;
		Achievement otherRequirement;
		
		static {
			BELOVED.nonBlocking = true;
			BLUEBLOOD.nonBlocking = true;
			BATTLETESTED.nonBlocking = true;
			ASSISTANT.nonBlocking = true;
			
			INVESTIGATOR.otherRequirement = COLLEGETOWNDESTROYED;
		}
		
		private Achievement(String s) {
			name = s;
		}
	}
	
	public enum StatsCategory {
		RECORDS("Records"),
		SIMULATOR("Simulator"),
		UPGRADES("Upgrades");
		
		final String name;
		int placement;
		StatsElements[] allStats = new StatsElements[0];
		StatsElements currentStats;
		
		static {
			RECORDS.allStats = new StatsElements[]{StatsElements.EXPENDITURES};
			SIMULATOR.allStats = new StatsElements[22];
			UPGRADES.allStats = new StatsElements[42];
			int offset = 0;
			boolean found = false;
			for (int i = 0; i < StatsElements.values().length && UPGRADES.allStats[41] == null; i++) {
				if (i < 21) {
					SIMULATOR.allStats[i] = StatsElements.values()[i];
				}
				if (StatsElements.values()[i] == StatsElements.UPGRADEZERO) {
					found = true;
				} else if (!found) {
					offset++;
				}
				if (found) {
					UPGRADES.allStats[i-offset] = StatsElements.values()[i];
				}
			}
			SIMULATOR.allStats[21] = StatsElements.OTHER;
			for (int i = 0; i < values().length; i++) {
				values()[i].placement = i;
				for (int j = 0; j < values()[i].allStats.length; j++) {
					values()[i].allStats[j].placement = j;
					values()[i].allStats[j].ownCategory = values()[i];
				}
			}
		}
		
		private StatsCategory(String s) {
			name = s;
		}
	}
	
	public enum StatsElements {
		VITALITY(-1),
		FOCUS(-1),
		FINANCES(-1),
		WETWORK(-1),
		ACADEMICS(-1),
		CHARISMA(-1),
		POWER(-1),
		MINDFULNESS(-1),
		HACKING(-1),
		ARITHMANCY(-1),
		XIUXIAN(-1),
		SOULBINDING(-1),
		CONTINUITY(-1),
		QIGONG(-1),
		POLITICS(-1),
		SIMULATION(-1),
		ENGINEERING(-1),
		TZIMTZUM(-1),
		SYNCHRONIZATION(-1),
		TRANSCENDANCE(-1),
		WISDOM(-1),
		OTHER(-1),
		EXPENDITURES(-1),
		UPGRADEZERO(0),
		UPGRADEONE(1),
		UPGRADETWO(2),
		UPGRADETHREE(3),
		UPGRADEFOUR(4),
		UPGRADEFIVE(5),
		UPGRADESIX(6),
		UPGRADESEVEN(7),
		UPGRADEEIGHT(8),
		UPGRADENINE(9),
		UPGRADETEN(10),
		UPGRADEELEVEN(11),
		UPGRADETWELVE(12),
		UPGRADETHIRTEEN(13),
		UPGRADEFOURTEEN(14),
		UPGRADEFIFTEEN(15),
		UPGRADESIXTEEN(16),
		UPGRADESEVENTEEN(17),
		UPGRADEEIGHTEEN(18),
		UPGRADENINETEEN(19),
		UPGRADETWENTY(20),
		UPGRADETWENTYONE(21),
		UPGRADETWENTYTWO(22),
		UPGRADETWENTYTHREE(23),
		UPGRADETWENTYFOUR(24),
		UPGRADETWENTYFIVE(25),
		UGPRADETWENTYSIX(26),
		UPGRADETWENTYSEVEN(27),
		UPGRADETWENTYEIGHT(28),
		UPGRADETWENTYNINE(29),
		UPGRADETHIRTY(30),
		UPGRADETHIRTYONE(31),
		UPGRADETHIRTYTWO(32),
		UPGRADETHIRTYTHREE(33),
		UPGRADETHIRTYFOUR(34),
		UPGRADETHIRTYFIVE(35),
		UPGRADETHIRTYSIX(36),
		UPGRADETHIRTYSEVEN(37),
		UPGRADETHIRTYEIGHT(38),
		UGPRADETHIRTYNINE(39),
		UPGRADEFORTY(40),
		UPGRADEFORTYONE(41);
		
		String name;
		final int associatedUpgrade;
		int placement;
		StatsCategory ownCategory;
		
		private StatsElements (int i) {
			associatedUpgrade = i;
		}
		
		static {
			EXPENDITURES.name = "Expenditures";
		}
	}
	
	public enum Locale {
		
		COLLEGETOWN("The College Town", new Spot[]{Spot.HOME, Spot.DOWNTOWN, Spot.ARCADE, Spot.TANAKASHOUSE, Spot.NIGHTCLUB, 
				Spot.YUMENOSHOUSE, Spot.DUMONTSMANSION, Spot.HISTORYCLASS, Spot.MATHCLASS, Spot.GYMCLASS, 
				Spot.HASHIMOTOSHOUSE, Spot.SLUMS, Spot.TOWER, Spot.COUNTRYCLUB, Spot.JACKALSHACK, Spot.AIRPORT, 
				Spot.COLLEGETOWNFLIGHT}),
		METROPOLIS("The Metropolis", new Spot[]{Spot.METAPARTMENT, Spot.METAIRPORT, Spot.SYNDICATE, Spot.HOTEL, Spot.MARKET,
				Spot.STREETS, Spot.RAVECLUB, Spot.MEGACORP, Spot.METFLIGHT}),
		WILDERNESS("The Mountains", new Spot[]{}),
		CITYOFSIN("The City of Sin", new Spot[]{}), 
		ATLANTIS("Atlantis", new Spot[]{}),
		BEYOND("The Underworld", new Spot[]{}), 
		SPACE("Low Earth Orbit", new Spot[]{}), 
		VESTA("Asteroid 4 Vesta", new Spot[]{}), 
		TRANSIT("In Transit", new Spot[]{Spot.BETWEENCITIES});
		
		final String name;
		final Spot[] allSpots;
		Spot currentSpot;
		
		private Locale(String s, Spot[] p) {
			name = s;
			allSpots = p;
			for (int i = 0; i < p.length; i++) {
				p[i].ownLocale = this;
			}
		}
	}
	
	public enum Spot {
		
		HOME("Your Dorm", new Action[]{Action.SLEEPIN, Action.SLEEPDEEPLY, Action.SLEEP, Action.LAZEAROUND, Action.NAP, 
				Action.TRYTOSLEEP, Action.DAYDREAMMORNING, Action.DAYDREAMAFTERNOON, Action.DAYDREAMEVENING, 
				Action.DAYDREAMNOON, Action.DOORUNLOCKED, Action.DOORUNLOCKEDVACATION, Action.LANGUAGEMORNING, 
				Action.LANGUAGENOON, Action.LANGUAGEAFTERNOON, Action.LANGUAGEEVENING, Action.LANGUAGEMIDNIGHT, 
				Action.LANGUAGEPREDAWN}),
		DOWNTOWN("Downtown", new Action[]{Action.HANGOUT, Action.LOITER, Action.VANDALISM, Action.VANDALISMLATE, 
				Action.RESCUETANAKA, Action.COMBATTHEORYMORNING, Action.COMBATTHEORYNOON, Action.COMBATTHEORYAFTERNOON, 
				Action.COMBATTHEORYEVENING, Action.EXTRATHEORYMORNING, Action.EXTRATHEORYNOON, Action.EXTRATHEORYAFTERNOON, 
				Action.EXTRATHEORYMIDNIGHT, Action.EXTRATHEORYPREDAWN, Action.LANGUAGECOURSE, Action.DUMONTAFTERNOON, 
				Action.DATE}),
		ARCADE("Arcade Infinity", new Action[]{Action.PLAYTOGETHER, Action.PLAYLATE, Action.GETBULLIED, Action.PICKAFIGHT}),
		TANAKASHOUSE("Tanaka's House", new Action[]{Action.MEETUP}),
		YUMENOSHOUSE("Yumeno's House", new Action[]{Action.PLAYCONSOLE, Action.CONSOLEEARLY, Action.CLEANUP, 
				Action.CLEANEARLY, Action.SLEEPOVER, Action.GAMEDESIGN}),
		NIGHTCLUB("The Nightclub", new Action[]{Action.DANCE, Action.BARTEND, Action.BARTENDEARLY, Action.BARTENDLATE, 
				Action.HIREFIXER, Action.ASKFORHELP, Action.JACKALTRAINING, Action.DANCEEARLY, Action.DANCELATE}),
		DUMONTSMANSION("DuMont's Mansion", new Action[]{Action.MANSIONMORNING, Action.MANSIONNOON, Action.MANSIONAFTERNOON, 
				Action.MANSIONEVENING, Action.MANSIONMIDNIGHT, Action.MANSIONPREDAWN, Action.DUMONTNOON, Action.DUMONTEVENING}),
		HISTORYCLASS("History Class", new Action[]{Action.HISTORY, Action.HISTORYSNOOZE}), 
		MATHCLASS("Math Class", new Action[]{Action.MATH}), 
		GYMCLASS("Gym Class", new Action[]{Action.GYM, Action.ALLOUT, Action.GYMREGULAR}),
		HASHIMOTOSHOUSE("Hashimoto's Hideout", new Action[]{Action.ARGUE}),
		SLUMS("Skid Row", new Action[]{Action.STANDGUARD, Action.SEARCHTOGETHER, Action.VIPESCORT, Action.WORKTOGETHER, 
				Action.SERIOUSTRAINING}),
		TOWER("The Tower", new Action[]{Action.RECEIVETREATMENT, Action.PERSONALTREATMENT, Action.VOLUNTEER, 
				Action.INFILTRATE, Action.INFILTRATEEARLY, Action.INFILTRATELATE, Action.ENDURANCE}),
		COUNTRYCLUB("Country Club", new Action[]{Action.HOBNOB, Action.FIXERTALK, Action.DUMONTSPA, Action.SPAALONE}),
		JACKALSHACK("Jackal's Shack", new Action[]{Action.WARSTORIES}),
		AIRPORT("The Airport", new Action[]{Action.AIRPORT, Action.FLYTOMETROPOLIS, Action.HOMELANDING}),
		COLLEGETOWNFLIGHT("Flight plan", new Action[]{Action.METROPOLISFLIGHTONE, Action.METROPOLISFLIGHTTWO, 
				Action.METROPOLISFLIGHTTHREE, Action.METROPOLISFLIGHTFOUR}),
		
		METAIRPORT("The Airport", new Action[]{Action.METROPOLISLANDING, Action.METAIRPORT, Action.FLYHOME}),
		METAPARTMENT("Your Apartment", new Action[]{Action.METSLEEPMORNING, Action.METSLEEPNOON, Action.METSLEEPAFTERNOON, 
				Action.METSLEEPEVENING, Action.METSLEEPMIDNIGHT, Action.METSLEEPPREDAWN, Action.METDREAMMORNING, 
				Action.METDREAMNOON, Action.METDREAMAFTERNOON, Action.METDREAMEVENING}),
		SYNDICATE("Lunar Syndicate", new Action[]{Action.RENDEZVOUS}),
		HOTEL("Upscale Hotel", new Action[]{Action.HOTELMORNING, Action.HOTELNOON, Action.HOTELCHECKEVENING, 
				Action.HOTELMIDNIGHT, Action.HOTELCHECKMIDNIGHT, Action.HOTELPREDAWN, Action.HOTELCHECKPREDAWN}),
		MARKET("The Marketplace", new Action[]{Action.LABOREARLY, Action.LABORLATE}),
		STREETS("City Streets", new Action[]{Action.JOGEARLY, Action.JOGLATE}),
		RAVECLUB("Rave Club", new Action[]{Action.CLUBEARLY, Action.CLUB, Action.CLUBLATE}),
		MEGACORP("Megacorp HQ", new Action[]{Action.OFFICEMORNING, Action.OFFICENOON, Action.OFFICEAFTERNOON, 
				Action.OFFICEEVENING, Action.PARTYEARLY, Action.PARTYLATE}),
		METFLIGHT("Flight plan", new Action[]{Action.HOMEFLIGHTONE, Action.HOMEFLIGHTTWO, Action.HOMEFLIGHTTHREE, 
				Action.HOMEFLIGHTFOUR}),
		
		BETWEENCITIES("Flight plan", new Action[]{Action.METROPOLISFLIGHTFIVE, Action.METROPOLISFLIGHTSIX, 
				Action.METROPOLISFLIGHTSEVEN, Action.METROPOLISFLIGHTEIGHT, Action.METROPOLISFLIGHTNINE, 
				Action.METROPOLISFLIGHTTEN, Action.HOMEFLIGHTFIVE, Action.HOMEFLIGHTSIX, Action.HOMEFLIGHTSEVEN, 
				Action.HOMEFLIGHTEIGHT, Action.HOMEFLIGHTNINE, Action.HOMEFLIGHTTEN});
		
		/*HERE("here", new Action[]{Action.THIS, Action.THAT, Action.ANOTHERTHING}),
		THERE("there", new Action[]{Action.FOO, Action.BAR, Action.BAZ}),
		ANOTHERPLACE("another place", new Action[]{Action.SNAP, Action.CRACKLE, Action.POP}),
		SOMEWHEREELSE("somewhere else", new Action[]{Action.ONE, Action.TWO, Action.THREE});*/
		
		final String name;
		final Action[] allActions;
		Action currentAction;
		Locale ownLocale;
		
		private Spot(String s, Action[] a) {
			name = s;
			allActions = a;
			for (int i = 0; i < allActions.length; i++) {
				allActions[i].ownSpot = this;
			}
		}
		
	}
	
	public enum Action implements Serializable {
		
		EVERYDAYACTION("Every day action - unselectable", BigInteger.ZERO, null, -1, -1, MORNING, 
				new boolean[]{true, true, true, true, true, true, true}, 
				-1, -1),
		WEEKDAYACTION("Weekday action - unselectable", BigInteger.ZERO, null, -1, -1, MORNING, 
				new boolean[]{false, true, true, true, true, true, false}, 
				-1, -1),
		WEEKENDACTION("Weekend action - unselectable", BigInteger.ZERO, null, -1, -1, MORNING, 
				new boolean[]{true, false, false, false, false, false, true},
				-1, -1),
		
		SLEEPIN("Sleep in", BigInteger.valueOf(-15), null, -1, -1, MORNING,
				EVERYDAYACTION.availableDays,
				-1, -1),
		LAZEAROUND("Doze in bed", BigInteger.valueOf(-10), null, -1, -1, NOON, 
				EVERYDAYACTION.availableDays, 
				-1, -1),
		NAP("Take a nap", BigInteger.valueOf(-10), null, -1, -1, AFTERNOON, 
				EVERYDAYACTION.availableDays, 
				-1, -1),
		TRYTOSLEEP("Try to sleep", BigInteger.valueOf(-15), null, -1, -1, EVENING, 
				EVERYDAYACTION.availableDays, 
				-1, -1),
		SLEEP("Sleep", BigInteger.valueOf(-20), null, -1, -1, MIDNIGHT,
				EVERYDAYACTION.availableDays,
				-1, -1),
		SLEEPDEEPLY("Deep Sleep", BigInteger.valueOf(-30), null, -1, -1, PREDAWN,
				EVERYDAYACTION.availableDays,
				-1, -1),
		
		METSLEEPMORNING("Sleep in", BigInteger.valueOf(-10), null, -1, -1, MORNING, 
				EVERYDAYACTION.availableDays, 
				-1, -1),
		METSLEEPNOON("Stay inside", BigInteger.valueOf(-5), null, -1, -1, NOON, 
				EVERYDAYACTION.availableDays, 
				-1, -1),
		METSLEEPAFTERNOON("Relax", BigInteger.valueOf(-5), null, -1, -1, AFTERNOON, 
				EVERYDAYACTION.availableDays, 
				-1, -1),
		METSLEEPEVENING("Evening nap", BigInteger.valueOf(-10), null, -1, -1, EVENING,
				EVERYDAYACTION.availableDays, 
				-1, -1),
		METSLEEPMIDNIGHT("Get some sleep", BigInteger.valueOf(-15), null, -1, -1, MIDNIGHT, 
				EVERYDAYACTION.availableDays, 
				-1, -1),
		METSLEEPPREDAWN("Sleep until dawn", BigInteger.valueOf(-20), null, -1, -1, PREDAWN, 
				EVERYDAYACTION.availableDays, 
				-1, -1),
		
		DAYDREAMMORNING("Daydream", BigInteger.ZERO, null, -1, -1, MORNING,
				EVERYDAYACTION.availableDays,
				-1, -1),
		DAYDREAMNOON("Daydream", BigInteger.ZERO, null, -1, -1, NOON,
				EVERYDAYACTION.availableDays,
				-1, -1),
		DAYDREAMAFTERNOON("Daydream", BigInteger.ZERO, null, -1, -1, AFTERNOON,
				EVERYDAYACTION.availableDays,
				-1, -1),
		DAYDREAMEVENING("Daydream", BigInteger.ZERO, null, -1, -1, EVENING, 
				EVERYDAYACTION.availableDays,
				-1, -1),
		
		METDREAMMORNING("Daydream", BigInteger.ZERO, null, -1, -1, MORNING, 
				EVERYDAYACTION.availableDays, 
				-1, -1),
		METDREAMNOON("Daydream", BigInteger.ZERO, null, -1, -1, NOON, 
				EVERYDAYACTION.availableDays, 
				-1, -1), 
		METDREAMAFTERNOON("Daydream", BigInteger.ZERO, null, -1, -1, AFTERNOON, 
				EVERYDAYACTION.availableDays, 
				-1, -1), 
		METDREAMEVENING("Daydream", BigInteger.ZERO, null, -1, -1, EVENING, 
				EVERYDAYACTION.availableDays,
				-1, -1),
		
		MEETUP("Meet up", BigInteger.valueOf(500), 
				new Goal("Pick up some tips", 5, BigInteger.valueOf(2000), 
						"New Equipment unlocked: " + RoutineElements.EYECATCHING.name, 
						"Unlock a new passive ability"), 
				5, 5, MORNING, 
				EVERYDAYACTION.availableDays, 
				1, 2),
		
		BARTEND("Bartend", BigInteger.valueOf(2500), 
				new Goal("Get to know the regulars", 7, THOUSAND.multiply(BigInteger.valueOf(5)),
						"Action upgraded!", 
						"Increase how much this job pays"),
				-1, 2, MIDNIGHT, 
				EVERYDAYACTION.availableDays, 
				6, 1),
		BARTENDEARLY("Bartend early", BigInteger.valueOf(2500), 
				BARTEND.ownGoal, 
				-1, 2, EVENING, 
				EVERYDAYACTION.availableDays, 
				6, 1),
		BARTENDLATE("Bartend late", BigInteger.valueOf(2000), 
				BARTEND.ownGoal, 
				-1, 2, PREDAWN, 
				EVERYDAYACTION.availableDays, 
				6, 1),
		DANCE("Dance", BigInteger.valueOf(2000), 
				new Goal("Attract a benefactor", 6, BigInteger.valueOf(500), 
						"New Relationship and Attribute unlocked!\nNew Action unlocked: " + BARTEND.name + " at the Nightclub\nNew Stance unlocked: " + RoutineElements.GENEROUS.name, 
						"Unlock a new Relationship and Attribute"), 
				2, 5, MIDNIGHT, 
				EVERYDAYACTION.availableDays, 
				4, 1),
		DANCEEARLY("Dance w/ friends", BigInteger.valueOf(2000), 
				new Goal("Master your popularity", 19, TEN_THOUSAND.multiply(BigInteger.valueOf(30)),
						"Per-level bonus from relationships increased by 0.01 times Charisma level!",
						"Get another bonus which becomes stronger with higher Charisma level"),
				-1, 5, EVENING, 
				EVERYDAYACTION.availableDays, 
				6, 1),
		DANCELATE("Dance before closing", BigInteger.valueOf(2000), 
				DANCEEARLY.ownGoal, 
				-1, 5, PREDAWN, 
				EVERYDAYACTION.availableDays, 
				6, 1),
		ASKFORHELP("Ask for help", BigInteger.valueOf(1000), 
				DANCE.ownGoal, 
				2, 2, MIDNIGHT, 
				EVERYDAYACTION.availableDays, 
				-1, -1),
		
		LOITER("Loiter", BigInteger.valueOf(500),
				new Goal("Become popular", 4, THOUSAND.multiply(BigInteger.valueOf(15)),
						"New Action unlocked: " + DANCE.name + " at the Nightclub", 
						"Unlock a new location"),
				-1, 5, MORNING,
				EVERYDAYACTION.availableDays,
				1, 1),
		HANGOUT("Hang out", BigInteger.valueOf(1500), 
				new Goal("Strengthen a connection", 1, BigInteger.valueOf(1000), 
						"New Relationship and Attribute unlocked!\nNew Action unlocked: " + LOITER.name + " Downtown", 
						"Unlock a new Relationship and Attribute"), 
				5, 5, NOON,
				EVERYDAYACTION.availableDays,
				0, 0),
		DATE("Get courted", BigInteger.valueOf(3000),
				HANGOUT.ownGoal, 
				5, 5, EVENING, 
				EVERYDAYACTION.availableDays, 
				1, 4),
		
		PLAYTOGETHER("Play games", BigInteger.valueOf(1500),
				new Goal("Make a friend", 2, BigInteger.valueOf(1000),
						"New Relationship and Attribute unlocked!\nNew Action unlocked: Play late at Arcade Infinity", 
						"Unlock a new Relationship and Attribute"),
				1, 1, AFTERNOON, 
				EVERYDAYACTION.availableDays,
				0, 0),
		PLAYLATE("Play late", BigInteger.valueOf(1500), 
				PLAYTOGETHER.ownGoal, 
				1, 1, EVENING, 
				EVERYDAYACTION.availableDays, 
				2, 1),
		
		PLAYCONSOLE("Console games", BigInteger.valueOf(1000), 
				new Goal("Learn some skills", 8, THOUSAND.multiply(BigInteger.valueOf(8)),
						"New Diet unlocked: " + RoutineElements.HOMECOOKING.name, 
						"Unlock a new passive ability"), 
				1, 1, NOON, 
				EVERYDAYACTION.availableDays, 
				2, 2),
		CONSOLEEARLY("Warmup gaming", BigInteger.valueOf(1000), 
				PLAYCONSOLE.ownGoal, 
				1, 1, MORNING, 
				EVERYDAYACTION.availableDays, 
				2, 2),
		CLEANUP("Clean before leaving", BigInteger.valueOf(2000), 
				new Goal("Receive a gift", 9, THOUSAND.multiply(BigInteger.valueOf(25)),
						"New Equipment unlocked: " + RoutineElements.HANDHELDGAMES.name, 
						"Unlock a new Equipment"), 
				1, 0, NOON, 
				EVERYDAYACTION.availableDays, 
				2, 3), 
		CLEANEARLY("Clean up", BigInteger.valueOf(2000), 
				CLEANUP.ownGoal, 
				1, 0, MORNING, 
				EVERYDAYACTION.availableDays, 
				2, 3),
		SLEEPOVER("Sleep over", BigInteger.valueOf(-20), 
				null, 
				1, -1, PREDAWN, 
				EVERYDAYACTION.availableDays, 
				2, 4),
		
		GETBULLIED("Get bullied", BigInteger.valueOf(3000),
				new Goal("Meet a rival", 3, BigInteger.valueOf(1000),
						"New Relationship and Attribute unlocked!\nNew Action unlocked: Pick a fight at Arcade Infinity", 
						"Unlock a new Relationship and Attribute"),
				0, 0, EVENING, 
				EVERYDAYACTION.availableDays, 
				0, 0),
		PICKAFIGHT("Pick a fight", BigInteger.valueOf(5000), 
				GETBULLIED.ownGoal, 
				0, 0, EVENING, 
				EVERYDAYACTION.availableDays, 
				3, 1),
		VANDALISM("Vandalism", BigInteger.valueOf(2000), 
				new Goal("Learn how to keep up", 10, THOUSAND.multiply(BigInteger.valueOf(25)),
						"New Diet unlocked: " + RoutineElements.MOSTLYCOFFEE.name, 
						"Unlock a new Diet"),
				0, 0, MIDNIGHT, 
				EVERYDAYACTION.availableDays, 
				3, 3),
		VANDALISMLATE("Make some noise", BigInteger.valueOf(2000), 
				VANDALISM.ownGoal, 
				0, 0, PREDAWN, 
				EVERYDAYACTION.availableDays, 
				3, 3),
		
		RESCUETANAKA("Walk Tanaka home", BigInteger.valueOf(5000), 
				new Goal("Seize hold of a clue", 12, BigInteger.valueOf(1000), 
						"Clues equal to excess goal progress found!", 
						"Find out where they came from - extra goal progress will make the search shorter"),
				5, 0, EVENING, 
				WEEKDAYACTION.availableDays, 
				0, 0),
		
		HISTORY("Show up to class", BigInteger.valueOf(1000), 
				null, 
				-1, 1, MORNING, 
				WEEKDAYACTION.availableDays, 
				0, 0),
		HISTORYSNOOZE("Snooze together", BigInteger.valueOf(-10), 
				null, 
				0, -1, MORNING, 
				WEEKDAYACTION.availableDays, 
				10, 2),
		DOORUNLOCKED("Leave door unlocked", BigInteger.valueOf(-10), 
				null, 
				0, -1, MORNING, 
				WEEKENDACTION.availableDays, 
				10, 2),
		DOORUNLOCKEDVACATION("Leave door unlocked", BigInteger.valueOf(-10), 
				null, 
				0, -1, MORNING, 
				EVERYDAYACTION.availableDays, 
				10, 2),
		MATH("Attend class", BigInteger.valueOf(1000), 
				PLAYTOGETHER.ownGoal, 
				1, 1, NOON, 
				WEEKDAYACTION.availableDays, 
				0, 0),
		GYM("Conserve your strength", BigInteger.valueOf(500), 
				HANGOUT.ownGoal, 
				5, 0, AFTERNOON, 
				WEEKDAYACTION.availableDays, 
				0, 0),
		ALLOUT("Go all-out", BigInteger.valueOf(3000), 
				HANGOUT.ownGoal, 
				5, 0, AFTERNOON, 
				WEEKDAYACTION.availableDays, 
				0, 0),
		GYMREGULAR("Run around", BigInteger.valueOf(1500), 
				null, 
				-1, 0, AFTERNOON, 
				WEEKDAYACTION.availableDays, 
				0, 0),
		
		DUMONTAFTERNOON("Attend DuMont", BigInteger.valueOf(3000), 
				DANCE.ownGoal, 
				2, 2, AFTERNOON, 
				EVERYDAYACTION.availableDays, 
				11, 1),
		DUMONTNOON("Serve breakfast", BigInteger.valueOf(2000), 
				DANCE.ownGoal, 
				2, 2, NOON, 
				EVERYDAYACTION.availableDays, 
				11, 3),
		DUMONTEVENING("Work security", BigInteger.valueOf(2000), 
				DANCE.ownGoal, 
				2, 2, EVENING, 
				EVERYDAYACTION.availableDays, 
				11, 5),
		MANSIONMORNING("Servant work", BigInteger.valueOf(2500), 
				new Goal("Learn the ropes", 11, hundred(5), 
						"New Action unlocked: " + DUMONTAFTERNOON.name + " Downtown", 
						"Unlock a new Action involving DuMont"), 
				-1, 2, MORNING, 
				EVERYDAYACTION.availableDays, 
				6, 2),
		MANSIONNOON("Clean the mansion", BigInteger.valueOf(2500), 
				MANSIONMORNING.ownGoal, 
				-1, 2, NOON, 
				EVERYDAYACTION.availableDays, 
				6, 2),
		MANSIONAFTERNOON("Prepare for evening", BigInteger.valueOf(2500), 
				MANSIONMORNING.ownGoal, 
				-1, 2, AFTERNOON, 
				EVERYDAYACTION.availableDays, 
				6, 2),
		MANSIONEVENING("Serve guests", BigInteger.valueOf(2500), 
				MANSIONMORNING.ownGoal, 
				-1, 2, EVENING, 
				EVERYDAYACTION.availableDays, 
				6, 2),
		MANSIONMIDNIGHT("Night shift", BigInteger.valueOf(2500), 
				MANSIONMORNING.ownGoal, 
				-1, 2, MIDNIGHT, 
				EVERYDAYACTION.availableDays, 
				6, 2), 
		MANSIONPREDAWN("Prepare for tomorrow", BigInteger.valueOf(2500), 
				MANSIONMORNING.ownGoal, 
				-1, 2, PREDAWN, 
				EVERYDAYACTION.availableDays, 
				6, 2),
		
		/*FILESEARLY("Pore over the files", BigInteger.valueOf(3000),
				new Goal("Read every file", 24, BILLION,
						"New Stance unlocked: ", 
						"Unlock a new Stance"), 
				0, 4, MIDNIGHT, 
				EVERYDAYACTION.availableDays, 
				23, 1),
		FILESLATE("Study through the night", BigInteger.valueOf(3000),
				FILESEARLY.ownGoal, 
				0, 4, PREDAWN, 
				EVERYDAYACTION.availableDays, 
				23, 1),*/
		
		ARGUE("Debate", BigInteger.valueOf(4000),
				new Goal("Exchange some ideas", 27, thousand(8),
						"New Stance unlocked: " + Game.RoutineElements.SELFDESTRUCTIVE.name,
						"Unlock a new Stance"),
				0, 5, AFTERNOON, 
				EVERYDAYACTION.availableDays, 
				10, 4),
		INFILTRATE("Conduct experiments", BigInteger.valueOf(4000),
				new Goal("Find what you're here for", 23, thousand(200),
						"New Stance unlocked: " + RoutineElements.LONER.name,
						"Unlock a new Stance"),
				-1, 4, MIDNIGHT, 
				EVERYDAYACTION.availableDays, 
				27, 2),
		INFILTRATEEARLY("Impersonate a scientist", BigInteger.valueOf(4000), 
				INFILTRATE.ownGoal, 
				-1, 4, EVENING, 
				EVERYDAYACTION.availableDays, 
				27, 2),
		INFILTRATELATE("Sift through data", BigInteger.valueOf(4000), 
				INFILTRATE.ownGoal, 
				-1, 4, PREDAWN,
				EVERYDAYACTION.availableDays, 
				27, 2),
		
		GAMEDESIGN("Game design", BigInteger.valueOf(5000), 
				new Goal("Release a game", 26, MILLION,
						"+10 Meaning of Life", 
						"Gain some Meaning of Life"), 
				1, 1, EVENING, 
				EVERYDAYACTION.availableDays, 
				2, 6),
		
		COMBATTHEORYMORNING("Warmup drill", THOUSAND.multiply(BigInteger.valueOf(4)),
				PLAYTOGETHER.ownGoal, 
				1, 3, MORNING, 
				WEEKENDACTION.availableDays, 
				2, 7),
		COMBATTHEORYNOON("Daytime drill", THOUSAND.multiply(BigInteger.valueOf(4)),
				PLAYTOGETHER.ownGoal, 
				1, 3, NOON, 
				WEEKENDACTION.availableDays, 
				2, 7),
		COMBATTHEORYAFTERNOON("Lateday drill", THOUSAND.multiply(BigInteger.valueOf(4)),
				PLAYTOGETHER.ownGoal, 
				1, 3, AFTERNOON, 
				WEEKENDACTION.availableDays, 
				2, 7), 
		COMBATTHEORYEVENING("Evening drill", THOUSAND.multiply(BigInteger.valueOf(4)),
				PLAYTOGETHER.ownGoal, 
				1, 3, EVENING, 
				EVERYDAYACTION.availableDays, 
				2, 7),
		EXTRATHEORYMORNING("Class-skipping drill", THOUSAND.multiply(BigInteger.valueOf(4)),
				PLAYTOGETHER.ownGoal, 
				1, 3, MORNING, 
				WEEKDAYACTION.availableDays, 
				2, 8),
		EXTRATHEORYNOON("Lunchtime drill", THOUSAND.multiply(BigInteger.valueOf(4)),
				PLAYTOGETHER.ownGoal, 
				1, 3, NOON, 
				WEEKDAYACTION.availableDays, 
				2, 8),
		EXTRATHEORYAFTERNOON("After-class drill", THOUSAND.multiply(BigInteger.valueOf(4)),
				PLAYTOGETHER.ownGoal, 
				1, 3, AFTERNOON, 
				WEEKDAYACTION.availableDays, 
				2, 8), 
		EXTRATHEORYMIDNIGHT("Latenight drill", THOUSAND.multiply(BigInteger.valueOf(4)),
				PLAYTOGETHER.ownGoal, 
				1, 3, MIDNIGHT, 
				EVERYDAYACTION.availableDays, 
				2, 8),
		EXTRATHEORYPREDAWN("Early morning drill", THOUSAND.multiply(BigInteger.valueOf(4)),
				PLAYTOGETHER.ownGoal, 
				1, 3, PREDAWN, 
				EVERYDAYACTION.availableDays, 
				2, 8),
		
		STANDGUARD("Stand guard", THOUSAND,
				new Goal("Take some hits", 16, TEN_THOUSAND.multiply(BigInteger.valueOf(40)),
						"New Body state unlocked: " + RoutineElements.SCARRED.name, 
						"Unlock a new type of passive ability"), 
				-1, 2, NOON, 
				EVERYDAYACTION.availableDays, 
				15, 1),
		VIPESCORT("Escort a VIP", THOUSAND,
				STANDGUARD.ownGoal, 
				-1, 2, MORNING, 
				EVERYDAYACTION.availableDays, 
				16, 2),
		
		JACKALTRAINING("Combat training", THOUSAND.multiply(BigInteger.valueOf(6)),
				new Goal("Prove that you'll be able to take care of yourself", 15, TEN_THOUSAND.multiply(BigInteger.valueOf(25)),
						"New Action unlocked: " + STANDGUARD.name + " on Skid Row\nNew Equipment unlocked: " + RoutineElements.BODYARMOR.name, 
						"Unlock a new career-related Action and relevant Equipment"), 
				3, 3, AFTERNOON, 
				EVERYDAYACTION.availableDays, 
				13, 1),
		HIREFIXER("Hire a fixer", BigInteger.valueOf(500), 
				new Goal("Meet the fixer", 13, BigInteger.valueOf(500), 
						"New Relationship and Attribute unlocked!\nNew Action unlocked: " + JACKALTRAINING.name + " at the Nightclub", 
						"Unlock a new Relationship and Attribute"), 
				3, 1, EVENING, 
				EVERYDAYACTION.availableDays, 
				6, 1),
		SEARCHTOGETHER("Work together", BigInteger.valueOf(6000), 
				HIREFIXER.ownGoal, 
				3, 3, EVENING, 
				EVERYDAYACTION.availableDays, 
				15, 2),
		WORKTOGETHER("Work together", BigInteger.valueOf(6000),
				JACKALTRAINING.ownGoal, 
				3, 2, EVENING, 
				EVERYDAYACTION.availableDays, 
				14, 1),
		SERIOUSTRAINING("Neighborhood cleanup", BigInteger.valueOf(6000), 
				JACKALTRAINING.ownGoal, 
				3, 3, EVENING, 
				EVERYDAYACTION.availableDays, 
				14, 1),
		WARSTORIES("Listen to stories", BigInteger.valueOf(1000), 
				JACKALTRAINING.ownGoal, 
				3, 3, NOON, 
				EVERYDAYACTION.availableDays, 
				15, 4),
		
		VOLUNTEER("Volunteer for experiment", BigInteger.valueOf(2000), 
				new Goal("Find someone willing to do more", 18, THOUSAND,
						"New Relationship and Attribute unlocked!\nNew Diet unlocked: " + RoutineElements.CANCERJUICE.name, 
						"Unlock new Relationship, Attribute, and Diet"), 
				4, 4, MIDNIGHT, 
				EVERYDAYACTION.availableDays, 
				17, 1),
		RECEIVETREATMENT("Receive treatment", BigInteger.valueOf(-15),
				new Goal("Try out the standard treatment", 17, TEN_THOUSAND.multiply(BigInteger.valueOf(20)),
						"New Action unlocked: " + VOLUNTEER.name + " at The Tower", 
						"Unlock a new Action"),
				-1, -1, MIDNIGHT, 
				EVERYDAYACTION.availableDays, 
				15, 3),
		PERSONALTREATMENT("Personal treatment", BigInteger.valueOf(20), 
				VOLUNTEER.ownGoal, 
				4, 4, MIDNIGHT, 
				EVERYDAYACTION.availableDays, 
				18, 3),
		ENDURANCE("Endurance testing", BigInteger.valueOf(8000), 
				new Goal("Push your limits", 22, HUNDRED.multiply(THOUSAND.multiply(BigInteger.valueOf(150))),
						"New Body status unlocked: " + RoutineElements.TRAINED.name, 
						"Unlock a new Body status"),
				4, 0, EVENING, 
				EVERYDAYACTION.availableDays, 
				18, 2),
		
		HOBNOB("Charity luncheon", BigInteger.valueOf(2000), 
				new Goal("Be granted membership", 20, HUNDRED.multiply(HUNDRED.multiply(BigInteger.valueOf(125))),
						"New Diet unlocked: ", 
						"Unlock a new Diet"),
				2, 5, AFTERNOON, 
				WEEKDAYACTION.availableDays, 
				6, 3),
		FIXERTALK("Talk with security", BigInteger.valueOf(2000), 
				new Goal("Learn about another line of work", 21, BigInteger.valueOf(1000), 
						"New Relationship and Attribute unlocked!\nNew Action unlocked: " + JACKALTRAINING.name + " at the Nightclub", 
						"Unlock a new Relationship and Attribute"), 
				3, 3, AFTERNOON, 
				WEEKDAYACTION.availableDays, 
				6, 3),
		DUMONTSPA("Relax together", BigInteger.valueOf(-15), 
				null, 
				2, 2, AFTERNOON, 
				WEEKENDACTION.availableDays, 
				6, 4),
		SPAALONE("Relax alone", BigInteger.valueOf(-40), 
				null, 
				-1, -1, AFTERNOON, 
				EVERYDAYACTION.availableDays, 
				6, 4),
		
		AIRPORT("Go through security", BigInteger.valueOf(2000), 
				null, 
				-1, -1, MORNING, 
				EVERYDAYACTION.availableDays, 
				-1, -1),
		FLYTOMETROPOLIS("Flight to the Metropolis", BigInteger.valueOf(2000), 
				null, 
				-1, -1, NOON, 
				EVERYDAYACTION.availableDays, 
				25, 1),
		METROPOLISFLIGHTONE("In flight", BigInteger.valueOf(2000), 
				null, 
				-1, -1, AFTERNOON, 
				EVERYDAYACTION.availableDays, 
				-1, -1),
		METROPOLISFLIGHTTWO("In flight", BigInteger.valueOf(2000), 
				null, 
				-1, -1, EVENING, 
				EVERYDAYACTION.availableDays, 
				-1, -1),
		METROPOLISFLIGHTTHREE("Sleep on plane", BigInteger.valueOf(-15), 
				null, 
				-1, -1, MIDNIGHT, 
				EVERYDAYACTION.availableDays, 
				-1, -1),
		METROPOLISFLIGHTFOUR("Sleep on plane", BigInteger.valueOf(-15), 
				null, 
				-1, -1, PREDAWN, 
				EVERYDAYACTION.availableDays, 
				-1, -1),
		METROPOLISFLIGHTFIVE("Wake up on plane", BigInteger.valueOf(2000), 
				null, 
				-1, -1, MORNING, 
				EVERYDAYACTION.availableDays, 
				-1, -1),
		METROPOLISFLIGHTSIX("Land at airport", BigInteger.valueOf(2000), 
				null, 
				-1, -1, NOON, 
				EVERYDAYACTION.availableDays, 
				-1, -1), 
		METROPOLISFLIGHTSEVEN("Wait at airport", BigInteger.valueOf(2000), 
				null, 
				-1, -1, AFTERNOON, 
				EVERYDAYACTION.availableDays, 
				-1, -1), 
		METROPOLISFLIGHTEIGHT("Take connecting flight", BigInteger.valueOf(2000), 
				null, 
				-1, -1, EVENING, 
				EVERYDAYACTION.availableDays, 
				-1, -1),
		METROPOLISFLIGHTNINE("Sleep on plane", BigInteger.valueOf(-15), 
				null, 
				-1, -1, MIDNIGHT, 
				EVERYDAYACTION.availableDays, 
				-1, -1),
		METROPOLISFLIGHTTEN("Sleep on plane", BigInteger.valueOf(-15), 
				null, 
				-1, -1, PREDAWN, 
				EVERYDAYACTION.availableDays, 
				-1, -1),
		METAIRPORT("Go through security", BigInteger.valueOf(2000), 
				null, 
				-1, -1, MORNING, 
				EVERYDAYACTION.availableDays, 
				-1, -1),
		METROPOLISLANDING("Land at airport", BigInteger.valueOf(2000), 
				null, 
				-1, -1, MORNING, 
				EVERYDAYACTION.availableDays, 
				-1, -1),
		FLYHOME("Fly back home", BigInteger.valueOf(2000), 
				null, 
				-1, -1, NOON, 
				EVERYDAYACTION.availableDays, 
				-1, -1),
		HOMEFLIGHTONE("In flight", BigInteger.valueOf(2000), 
				null, 
				-1, -1, AFTERNOON, 
				EVERYDAYACTION.availableDays, 
				-1, -1),
		HOMEFLIGHTTWO("In flight", BigInteger.valueOf(2000), 
				null, 
				-1, -1, EVENING, 
				EVERYDAYACTION.availableDays, 
				-1, -1),
		HOMEFLIGHTTHREE("Sleep on plane", BigInteger.valueOf(-15), 
				null, 
				-1, -1, MIDNIGHT, 
				EVERYDAYACTION.availableDays, 
				-1, -1),
		HOMEFLIGHTFOUR("Sleep on plane", BigInteger.valueOf(-15), 
				null, 
				-1, -1, PREDAWN, 
				EVERYDAYACTION.availableDays, 
				-1, -1),
		HOMEFLIGHTFIVE("Wake up on plane", BigInteger.valueOf(2000), 
				null, 
				-1, -1, MORNING, 
				EVERYDAYACTION.availableDays, 
				-1, -1),
		HOMEFLIGHTSIX("Land at airport", BigInteger.valueOf(2000), 
				null, 
				-1, -1, NOON, 
				EVERYDAYACTION.availableDays, 
				-1, -1), 
		HOMEFLIGHTSEVEN("Wait at airport", BigInteger.valueOf(2000), 
				null, 
				-1, -1, AFTERNOON, 
				EVERYDAYACTION.availableDays, 
				-1, -1), 
		HOMEFLIGHTEIGHT("Take connecting flight", BigInteger.valueOf(2000), 
				null, 
				-1, -1, EVENING, 
				EVERYDAYACTION.availableDays, 
				-1, -1),
		HOMEFLIGHTNINE("Sleep on plane", BigInteger.valueOf(-15), 
				null, 
				-1, -1, MIDNIGHT, 
				EVERYDAYACTION.availableDays, 
				-1, -1),
		HOMEFLIGHTTEN("Sleep on plane", BigInteger.valueOf(-15), 
				null, 
				-1, -1, PREDAWN, 
				EVERYDAYACTION.availableDays, 
				-1, -1),
		HOMELANDING("Land at airport", BigInteger.valueOf(2000), 
				null, 
				-1, -1, MORNING, 
				EVERYDAYACTION.availableDays, 
				-1, -1),
		
		
		LANGUAGEMORNING("Start studying", BigInteger.valueOf(2000), 
				new Goal("Learn the language", 25, HUNDRED.multiply(BigInteger.valueOf(30000)),
						"New Action unlocked: " + FLYTOMETROPOLIS.name, 
						"Gain the ability to travel to a new city"), 
				-1, 1, MORNING, 
				EVERYDAYACTION.availableDays, 
				14, 1),
		LANGUAGENOON("Daytime studying", BigInteger.valueOf(2000), 
				LANGUAGEMORNING.ownGoal, 
				-1, 1, NOON, 
				EVERYDAYACTION.availableDays, 
				14, 1),
		LANGUAGEAFTERNOON("Study all day", BigInteger.valueOf(2000), 
				LANGUAGEMORNING.ownGoal, 
				-1, 1, AFTERNOON, 
				EVERYDAYACTION.availableDays, 
				14, 1),
		LANGUAGEEVENING("Keep studying", BigInteger.valueOf(2000), 
				LANGUAGEMORNING.ownGoal, 
				-1, 1, EVENING, 
				EVERYDAYACTION.availableDays, 
				14, 1),
		LANGUAGEMIDNIGHT("Study all night", BigInteger.valueOf(2000), 
				LANGUAGEMORNING.ownGoal, 
				-1, 1, MIDNIGHT, 
				EVERYDAYACTION.availableDays, 
				14, 1),
		LANGUAGEPREDAWN("Study until dawn", BigInteger.valueOf(2000), 
				LANGUAGEMORNING.ownGoal,
				-1, 1, PREDAWN, 
				EVERYDAYACTION.availableDays, 
				14, 1),
		LANGUAGECOURSE("Language course", BigInteger.valueOf(3000), 
				LANGUAGEMORNING.ownGoal, 
				-1, 1, AFTERNOON, 
				WEEKDAYACTION.availableDays, 
				20, 2),
		
		RENDEZVOUS("Find Tanaka", BigInteger.valueOf(2500),
				new Goal("Learn what happened to " + Game.himHer(5), 28, THOUSAND,
						"New Stance unlocked: " + RoutineElements.TRIUMPHANT.name, 
						"Unlock a new Stance"),
				5, 5, MIDNIGHT, 
				EVERYDAYACTION.availableDays, 
				14, 1),
		
		HOTELCHECKEVENING("Check in early", BigInteger.valueOf(-20), 
				null, 
				-1, -1, EVENING, 
				EVERYDAYACTION.availableDays, 
				-1, -1),
		HOTELCHECKMIDNIGHT("Check in", BigInteger.valueOf(-25), 
				null, 
				-1, -1, MIDNIGHT, 
				EVERYDAYACTION.availableDays, 
				-1, -1),
		HOTELMIDNIGHT("Sleep in suite", BigInteger.valueOf(-25), 
				null, 
				-1, -1, MIDNIGHT, 
				EVERYDAYACTION.availableDays, 
				-1, -1),
		HOTELCHECKPREDAWN("Check in late", BigInteger.valueOf(-35), 
				null, 
				-1, -1, PREDAWN, 
				EVERYDAYACTION.availableDays, 
				-1, -1),
		HOTELPREDAWN("Sleep comfortably", BigInteger.valueOf(-35), 
				null, 
				-1, -1, PREDAWN, 
				EVERYDAYACTION.availableDays, 
				-1, -1),
		HOTELMORNING("Forego wake-up call", BigInteger.valueOf(-20), 
				null, 
				-1, -1, MORNING, 
				EVERYDAYACTION.availableDays, 
				-1, -1),
		HOTELNOON("Enjoy the amenities", BigInteger.valueOf(-15), 
				null, 
				-1, -1, NOON,
				EVERYDAYACTION.availableDays, 
				-1, -1),
		
		LABOREARLY("Manual labor", BigInteger.valueOf(8000), 
				null, 
				-1, 2, NOON, 
				EVERYDAYACTION.availableDays, 
				-1, -1),
		LABORLATE("Work hard", BigInteger.valueOf(8000), 
				null, 
				-1, 2, AFTERNOON, 
				EVERYDAYACTION.availableDays, 
				-1, -1),
		JOGEARLY("Jog around", BigInteger.valueOf(5000), 
				null, 
				-1, 0, MORNING, 
				EVERYDAYACTION.availableDays, 
				-1, -1),
		JOGLATE("Go for a jog", BigInteger.valueOf(5000), 
				null, 
				-1, 0, NOON, 
				EVERYDAYACTION.availableDays, 
				-1, -1),
		CLUBEARLY("Go clubbing", BigInteger.valueOf(3000), 
				null, 
				-1, 5, EVENING, 
				EVERYDAYACTION.availableDays, 
				-1, -1),
		CLUB("Party", BigInteger.valueOf(3000), 
				null, 
				-1, 5, MIDNIGHT, 
				EVERYDAYACTION.availableDays, 
				-1, -1),
		CLUBLATE("Have some drinks", BigInteger.valueOf(3000), 
				null, 
				-1, 5, PREDAWN, 
				EVERYDAYACTION.availableDays, 
				-1, -1),
		
		OFFICEMORNING("Head in early", BigInteger.valueOf(3000), 
				null, 
				-1, 2, MORNING, 
				WEEKDAYACTION.availableDays, 
				20, 3),
		OFFICENOON("Attend meeting", BigInteger.valueOf(3000), 
				null, 
				-1, 2, NOON, 
				WEEKDAYACTION.availableDays, 
				20, 3),
		OFFICEAFTERNOON("Office work", BigInteger.valueOf(3000), 
				null, 
				-1, 2, AFTERNOON, 
				WEEKDAYACTION.availableDays, 
				20, 3),
		OFFICEEVENING("Work late", BigInteger.valueOf(3000), 
				null, 
				-1, 2, EVENING, 
				WEEKDAYACTION.availableDays, 
				20, 3),
		PARTYEARLY("Office party", BigInteger.valueOf(3000), 
				null, 
				-1, 5, EVENING, 
				WEEKENDACTION.availableDays, 
				20, 3),
		PARTYLATE("Party late", BigInteger.valueOf(3000), 
				null, 
				-1, 5, MIDNIGHT, 
				WEEKENDACTION.availableDays,
				20, 3),
		
		HANDHELDACTION("Handheld games - unselectable", THOUSAND.multiply(BigInteger.valueOf(10)),
				null, 
				-1, 1, PREDAWN, 
				EVERYDAYACTION.availableDays, 
				-1, -1),
		LARCENYACTION("Larceny kit - unselectable", THOUSAND.multiply(BigInteger.valueOf(4)),
				null, 
				-1, 2, PREDAWN, 
				EVERYDAYACTION.availableDays, 
				-1, -1),
		FINDTANAKAACTION("Find Tanaka - unselectable", BigInteger.ZERO, 
				new Goal("Stop the abduction", 14, HUNDRED.multiply((BigInteger.valueOf(8000))),
						"Tanaka rescued!", 
						"Keep Tanaka here in the College Town"), 
				-1, -1, PREDAWN, 
				EVERYDAYACTION.availableDays, 
				-1, -1),
		OSTENTATIOUSACTION("Ostentatious - unselectable", BigInteger.ZERO, 
				null, 
				0, -1, PREDAWN, 
				EVERYDAYACTION.availableDays, 
				-1, -1),
		ADAPTIVEACTION("Adaptive - unselectable", BigInteger.ZERO, 
				null, 
				-1, 3, PREDAWN, 
				EVERYDAYACTION.availableDays, 
				-1, -1),
		
		LOOPENDACTION("End of Loop - unselectable", BigInteger.ZERO, 
				null, 
				-1, -1, MORNING, 
				EVERYDAYACTION.availableDays, 
				-1, -1);
		
		/*THIS("this", thousand.multiply(BigInteger.valueOf(2)), new Goal("do a thing", 0, tenThousand, "a thing has been done!"), 0, 0, 0,
				new boolean[]{true, false, true, false, true, false, true}),
		THAT("that", thousand.negate(), null, 1, 2, 1, 
				new boolean[]{false, true, false, true, false, true, true}),
		ANOTHERTHING("another thing", thousand, new Goal("be super derpy", 2, thousand, "another thing has been done!"), 2, -1, 2, 
				new boolean[]{true, false, true, false, true, false, true}),
		
		FOO("foo", thousand, null, -1, 3, 3, 
				new boolean[]{false, true, false, true, false, true, true}),
		BAR("bar", thousand, null, -1, -1, 4, 
				new boolean[]{true, false, true, false, true, false, true}),
		BAZ("baz", thousand, null, -1, -1, 5, 
				new boolean[]{true, true, true, true, true, true, true}),
		
		SNAP("snap", thousand, null, -1, -1, 6, 
				new boolean[]{true, true, true, true, true, true, true}),
		CRACKLE("crackle", thousand, null, -1, -1, 0, 
				new boolean[]{false, true, false, true, false, true, true}),
		POP("pop", thousand, null, -1, -1, 1, 
				new boolean[]{true, false, true, false, true, false, true}),
		
		ONE("one", thousand, THIS.ownGoal, -1, -1, 2, 
				new boolean[]{false, true, false, true, false, true, true}),
		TWO("two", thousand, null, -1, -1, 3, 
				new boolean[]{true, false, true, false, true, false, true}),
		THREE("three", thousand, null, -1, -1, 4, 
				new boolean[]{false, true, false, true, false, true, true});*/
		
		String name;
		Spot ownSpot;
		boolean sleep;
		boolean forbidden;
		final Goal ownGoal;
		final int relationship;
		final int attribute;
		
		final BigInteger baseCost;
		final int availableSlot;
		final boolean[] availableDays;
		final int requiredGoal;
		final int requiredGoalLevel;
		int alternativeGoal = -1;
		int alternativeRequiredLevel;
		
		BigInteger healthCost = BigInteger.ZERO;
		BigInteger financesCost = BigInteger.ZERO;
		int requiredFinances;
		
		BigInteger relationshipMultiplier = HUNDRED;
		BigInteger attributeMultiplier = HUNDRED;
		BigInteger goalMultiplier = HUNDRED;
		
		Action previousAction;
		Action alternativePrevious;
        Action backup;
		boolean setNext;
		
		String resolutionText = "";
		
		static {
			EVERYDAYACTION.forbidden = true;
			WEEKDAYACTION.forbidden = true;
			WEEKENDACTION.forbidden = true;
			HANDHELDACTION.forbidden = true;
			LARCENYACTION.forbidden = true;
			FINDTANAKAACTION.forbidden = true;
			OSTENTATIOUSACTION.forbidden = true;
			ADAPTIVEACTION.forbidden = true;
			LOOPENDACTION.forbidden = true;

            DOORUNLOCKED.backup = HISTORYSNOOZE;
            HISTORYSNOOZE.backup = DOORUNLOCKED;
			
			DATE.attributeMultiplier = one(2);
            DATE.relationshipMultiplier = one(3);
			
			DANCEEARLY.attributeMultiplier = BigInteger.valueOf(200);
			DANCELATE.attributeMultiplier = BigInteger.valueOf(200);
			
			HIREFIXER.financesCost = hundred(5);
			HIREFIXER.requiredFinances = 4;
			SEARCHTOGETHER.financesCost = HIREFIXER.financesCost;
			SEARCHTOGETHER.requiredFinances = HIREFIXER.requiredFinances;
			SEARCHTOGETHER.healthCost = ten(3);
            SEARCHTOGETHER.backup = SERIOUSTRAINING;
            PLAYCONSOLE.backup = MATH;
			JACKALTRAINING.alternativeGoal = 21;
			JACKALTRAINING.alternativeRequiredLevel = 1;
			JACKALTRAINING.healthCost = one(2);
			WARSTORIES.attributeMultiplier = one(2);
			WARSTORIES.relationshipMultiplier = one(2);
			WARSTORIES.goalMultiplier = one(2);
			WORKTOGETHER.healthCost = ten(3);
			WORKTOGETHER.attributeMultiplier = one(3);
			SERIOUSTRAINING.healthCost = ten(3);
			
			HISTORY.attributeMultiplier = BigInteger.valueOf(200);
			MATH.attributeMultiplier = BigInteger.valueOf(200);
			ALLOUT.attributeMultiplier = BigInteger.valueOf(200);
			RESCUETANAKA.relationshipMultiplier = BigInteger.valueOf(300);
			GYMREGULAR.attributeMultiplier = BigInteger.valueOf(200);
			
			MANSIONMORNING.attributeMultiplier = BigInteger.valueOf(200);
			MANSIONNOON.attributeMultiplier = BigInteger.valueOf(200);
			MANSIONAFTERNOON.attributeMultiplier = BigInteger.valueOf(200);
			MANSIONEVENING.attributeMultiplier = BigInteger.valueOf(200);
			MANSIONMIDNIGHT.attributeMultiplier = BigInteger.valueOf(250);
			MANSIONPREDAWN.attributeMultiplier = BigInteger.valueOf(250);
			DUMONTNOON.attributeMultiplier = BigInteger.valueOf(300);
			DUMONTNOON.relationshipMultiplier = BigInteger.valueOf(200);
			DUMONTAFTERNOON.attributeMultiplier = BigInteger.valueOf(200);
			DUMONTEVENING.healthCost = ten(1);
			DUMONTEVENING.attributeMultiplier = BigInteger.valueOf(500);
			DUMONTEVENING.relationshipMultiplier = BigInteger.valueOf(250);
			DUMONTSPA.attributeMultiplier = one(3);
			SPAALONE.requiredFinances = 12;
			SPAALONE.financesCost = thousand(12);
			
			STANDGUARD.attributeMultiplier = ten(1);
			STANDGUARD.healthCost = one(20);
			VIPESCORT.attributeMultiplier = ten(2);
			VIPESCORT.goalMultiplier = one(2);
			VIPESCORT.healthCost = one(40);
			
			RECEIVETREATMENT.healthCost = one(3).negate();
			RECEIVETREATMENT.requiredFinances = 5;
			RECEIVETREATMENT.financesCost = one(800);
			PERSONALTREATMENT.healthCost = one(8).negate();
			PERSONALTREATMENT.requiredFinances = 8;
			PERSONALTREATMENT.financesCost = one(2500);
			PERSONALTREATMENT.attributeMultiplier = one(2);
			PERSONALTREATMENT.relationshipMultiplier = one(2);
			PERSONALTREATMENT.goalMultiplier = one(2);
			
			ARGUE.attributeMultiplier = one(2);
			
			INFILTRATE.attributeMultiplier = BigInteger.valueOf(200);
			INFILTRATEEARLY.attributeMultiplier = BigInteger.valueOf(200);
			INFILTRATELATE.attributeMultiplier = BigInteger.valueOf(200);
			
			LANGUAGECOURSE.requiredFinances = 9;
			LANGUAGECOURSE.financesCost = thousand(4);
			LANGUAGECOURSE.goalMultiplier = one(10);
			
			FLYTOMETROPOLIS.requiredFinances = 11;
			FLYTOMETROPOLIS.financesCost = thousand(8);
			FLYTOMETROPOLIS.previousAction = AIRPORT;
			FLYTOMETROPOLIS.setNext = true;
			METROPOLISFLIGHTONE.previousAction = FLYTOMETROPOLIS;
			METROPOLISFLIGHTONE.setNext = true;
			METROPOLISFLIGHTTWO.previousAction = METROPOLISFLIGHTONE;
			METROPOLISFLIGHTTWO.setNext = true;
			METROPOLISFLIGHTTHREE.previousAction = METROPOLISFLIGHTTWO;
			METROPOLISFLIGHTTHREE.setNext = true;
			METROPOLISFLIGHTFOUR.previousAction = METROPOLISFLIGHTTHREE;
			METROPOLISFLIGHTFOUR.setNext = true;
			METROPOLISFLIGHTFIVE.previousAction = METROPOLISFLIGHTFOUR;
			METROPOLISFLIGHTFIVE.setNext = true;
			METROPOLISFLIGHTSIX.previousAction = METROPOLISFLIGHTFIVE;
			METROPOLISFLIGHTSIX.setNext = true;
			METROPOLISFLIGHTSEVEN.previousAction = METROPOLISFLIGHTSIX;
			METROPOLISFLIGHTSEVEN.setNext = true;
			METROPOLISFLIGHTEIGHT.previousAction = METROPOLISFLIGHTSEVEN;
			METROPOLISFLIGHTEIGHT.setNext = true;
			METROPOLISFLIGHTNINE.previousAction = METROPOLISFLIGHTEIGHT;
			METROPOLISFLIGHTNINE.setNext = true;
			METROPOLISFLIGHTTEN.previousAction = METROPOLISFLIGHTNINE;
			METROPOLISFLIGHTTEN.setNext = true;
			METROPOLISLANDING.previousAction = METROPOLISFLIGHTTEN;
			FLYHOME.financesCost = thousand(8);
			FLYHOME.previousAction = METAIRPORT;
			FLYHOME.setNext = true;
			HOMEFLIGHTONE.previousAction = FLYHOME;
			HOMEFLIGHTONE.setNext = true;
			HOMEFLIGHTTWO.previousAction = HOMEFLIGHTONE;
			HOMEFLIGHTTWO.setNext = true;
			HOMEFLIGHTTHREE.previousAction = HOMEFLIGHTTWO;
			HOMEFLIGHTTHREE.setNext = true;
			HOMEFLIGHTFOUR.previousAction = HOMEFLIGHTTHREE;
			HOMEFLIGHTFOUR.setNext = true;
			HOMEFLIGHTFIVE.previousAction = HOMEFLIGHTFOUR;
			HOMEFLIGHTFIVE.setNext = true;
			HOMEFLIGHTSIX.previousAction = HOMEFLIGHTFIVE;
			HOMEFLIGHTSIX.setNext = true;
			HOMEFLIGHTSEVEN.previousAction = HOMEFLIGHTSIX;
			HOMEFLIGHTSEVEN.setNext = true;
			HOMEFLIGHTEIGHT.previousAction = HOMEFLIGHTSEVEN;
			HOMEFLIGHTEIGHT.setNext = true;
			HOMEFLIGHTNINE.previousAction = HOMEFLIGHTEIGHT;
			HOMEFLIGHTNINE.setNext = true;
			HOMEFLIGHTTEN.previousAction = HOMEFLIGHTNINE;
			HOMEFLIGHTTEN.setNext = true;
			HOMELANDING.previousAction = HOMEFLIGHTTEN;
			
			HOTELCHECKEVENING.requiredFinances = 13;
			HOTELCHECKEVENING.financesCost = thousand(15);
			HOTELCHECKMIDNIGHT.requiredFinances = 13;
			HOTELCHECKMIDNIGHT.financesCost = thousand(15);
			HOTELCHECKPREDAWN.requiredFinances = 13;
			HOTELCHECKPREDAWN.financesCost = thousand(15);
			
			OFFICEMORNING.attributeMultiplier = one(4);
			OFFICENOON.attributeMultiplier = one(4);
			OFFICEAFTERNOON.attributeMultiplier = one(4);
			OFFICEEVENING.attributeMultiplier = one(4);
			PARTYEARLY.attributeMultiplier = one(3);
			PARTYLATE.attributeMultiplier = one(3);
		}
		
		private Action(String s, BigInteger c, Goal g, int r, int a, int t, boolean[] d, int goalReq, int goalLevel) {
			name = s;
			ownGoal = g;
			relationship = r;
			attribute = a;
			baseCost = c;
			if (baseCost.compareTo(BigInteger.ZERO) < 0) {
				sleep = true;
			}
			availableSlot = t;
			availableDays = d;
			requiredGoal = goalReq;
			requiredGoalLevel = goalLevel;
		}
		
		public Boolean isDaydream() {
            return this == DAYDREAMMORNING || this == DAYDREAMNOON || this == DAYDREAMAFTERNOON || this == DAYDREAMEVENING || this == METDREAMMORNING || this == METDREAMNOON || this == METDREAMAFTERNOON || this == METDREAMEVENING;
        }
		
		public Boolean isBartending() {
            return this == BARTEND || this == BARTENDEARLY || this == BARTENDLATE;
        }
		
		public Boolean isLanguage() {
            return this == LANGUAGEMORNING || this == LANGUAGENOON || this == LANGUAGEAFTERNOON || this == LANGUAGEEVENING || this == LANGUAGEMIDNIGHT || this == LANGUAGEPREDAWN;
        }
		
	}
	
	public enum DisplayArea {
		LEFT(leftFullArea, leftFullAttributes, leftStyledDoc),
		RIGHT(rightFullArea, rightFullAttributes, rightStyledDoc),
		STORY(storyArea, storyAttributes, storyStyledDoc),
		UPGRADE(upgradeDescriptionArea, upgradeAttributes, upgradeStyledDoc);
		
		final JTextPane ownPane;
		final SimpleAttributeSet set;
		final StyledDocument doc;
		
		private DisplayArea(JTextPane p, SimpleAttributeSet s, StyledDocument d) {
			ownPane = p;
			set = s;
			doc = d;
		}
	}
	
	public enum Gender {
		MALE,
		FEMALE,
		FUTANARI,
        MALEACE,
        FEMALEACE;

        boolean sexScenes = true;
        String description = "";
        Gender next;

        static {
            MALEACE.sexScenes = false;
            FEMALEACE.sexScenes = false;
            MALE.description = "male";
            FEMALE.description = "female";
            FUTANARI.description = "futanari";
            MALEACE.description = "male, no sex";
            FEMALEACE.description = "female, no sex";
            for (int i = 1; i < Gender.values().length; i++) {
                Gender.values()[i-1].next = Gender.values()[i];
            }
            Gender.values()[Gender.values().length-1].next = Gender.values()[0];
        }
		
		public Gender presentation() {
			if (this == MALE || this == MALEACE) {
				return MALE;
			} else {
				return FEMALE;
			}
		}

        public Gender inverse() {
            if (presentation() == MALE) {
                return FEMALE;
            } else {
                return MALE;
            }
        }

        public String manWoman() {
            if (presentation() == MALE) {
                return "man";
            } else {
                return "woman";
            }
        }

        public String hisHer() {
            if (presentation() == MALE) {
                return "his";
            } else {
                return "her";
            }
        }

        public String himHer() {
            if (presentation() == MALE) {
                return "him";
            } else {
                return "her";
            }
        }
	}
	
	public enum PlotEvent {
		ABDUCTIONMISSED,
		COLLEGETOWNDESTRUCTION,
		HELINTRO,
		METROPOLISINVASION,

        HASHIMOTOROMANCE1,
        YUMENOROMANCE1
	}
	
	public enum Epoch {
		NEWLOOP(), 
		DAILYLIFE(), 
		ABDUCTION(),
		DEAD(),
		PURSUIT(),
		NEWCITY();
		
		Music defaultMusic;
		
		public boolean musicChangeNeeded() {
            if (musicFading) {
                fadedVolume = currentPlaythrough.bgmVolume;
                musicFading = false;
                return true;
            }
            if (currentPlaythrough != null && currentPlaythrough.currentLocale == Locale.TRANSIT) {
                return false;
            }
			if (currentMusic != null) {
				for (int i = 0; i < currentMusic.allowedEpochs.length; i++) {
					if (currentMusic.allowedEpochs[i] == this) {
						return false;
					}
				}
			}
			return true;
		}
	}
	
	public enum Music {
		WIND("batchbug-playing-in-the-wind(chosic.com).wav", new Epoch[]{Epoch.NEWLOOP}), 
		ADVERTISING("Advertising-Long-Version(chosic.com).wav", new Epoch[]{Epoch.DAILYLIFE}),
		REPORTING("Reporting-From-The-Scene(chosic.com).wav", new Epoch[]{Epoch.ABDUCTION}),
		BEACH("Sakura-Girl-Beach-chosic.com_.wav", new Epoch[]{Epoch.DAILYLIFE}),
		HOME("Pathway-Home(chosic.com).wav", new Epoch[]{Epoch.DAILYLIFE}),
		DARKNESS("DARKNESS(chosic.com).wav", new Epoch[]{Epoch.DAILYLIFE, Epoch.ABDUCTION}),
		LIFE("LifeInMotion-chosic.com_.wav", new Epoch[]{Epoch.DAILYLIFE}),
		DESERT("Komiku_-_08_-_Un_dsert(chosic.com).wav", new Epoch[]{Epoch.DAILYLIFE, Epoch.ABDUCTION}),
		POWER("the-power-above-godheavenly-instrumental-171762.wav", new Epoch[]{Epoch.DAILYLIFE, Epoch.ABDUCTION}),
		NEON("Neon-Underworld_MASTER_FINAL(chosic.com).wav", new Epoch[]{Epoch.PURSUIT}),
        WAY("On-My-Way-Lofi-Study-Music(chosic.com).wav", new Epoch[]{Epoch.NEWCITY}),
        MOMENTS("Sappheiros-Moments(chosic.com).wav", new Epoch[]{Epoch.DAILYLIFE}),
		SILENCE("", new Epoch[]{Epoch.DEAD});
		
		final Epoch[] allowedEpochs;
		final String fileName;
		
		private Music(String s, Epoch[] e) {
			fileName = s;
			allowedEpochs = e;
		}
	}
	
	public enum Effect {
		PUNCH("573376__johnloser__cyber-punch-01.wav"),
		COINS("324760__petervh__coin-drop-on-concrete.wav"),
		CLICK("623175__aphom000__button-click-selection.wav"),
		SPLAT("394872__deleted_user_6479820__various-mushy-impacts-or-wet-splats.wav"), 
		RUSTLE("66774__kevinkace__canvas-tent-2.wav"),
		HAUL("697827__magnuswaker__haulage.wav"),
		ZIPPER("390168__megashroom__zipping-up-pencil-case-170427_1467.wav"),
		SIZZLE("81205__mirors__frypansizlzlongrelease.wav"),
		SIP("575734__lexyismarchhare__sip.wav"),
		POWERUP("582690__ironcross32__rising-activate-08.wav"),
		WHOOSH("430076__skyernaklea__whoosh-raw.wav"),
		PAN("735329__slv443__closing-the-pan.wav"),
		SHATTER("41348__datasoundsample__glass-shatter.wav"),
		PING("266947__ulfhubert__tiny-ping.wav"),
		REVERB("577680__mistakeless__reverb-piano-chord-2.wav"),
		RELOAD("449612__dasbutcher84__sxp_shotgun_rack_03.wav"),
		BUBBLE("317656__bernalchaves__bubbles-10032015_1.wav"),
		GROWL("670474__neopolitansixth__robot-growl.wav"),
		EXPLOSION("114046__klerrp__kl_ex2.wav"),
		REV("386801__richiemcmullen__engine_rev_jump.wav"),
		RUN("316922__rudmer_rotteveel__footsteps-running-away-fading-2.wav"),
        GUNFIRE("201672__franki-01234__mp5-submachine-gun-down-the-block.wav"),
        TADA("397354__plasterbrain__tada-fanfare-f.wav");
		
		final String fileName;
		
		private Effect(String s) {
			fileName = s;
		}
	}
	
	public enum Modifier {
		CLOSEUP,
		SHORT
	}
	
	/*public enum Goal {
		DOANOTHERTHING("do another thing", 1, new BigInteger("2000"), null),
		DOATHING("do a thing", 0, thousand, DOANOTHERTHING),
		SUPERDERP("be super derpy", 2, thousand, null);
		
		final String name;
		final int index;
		final BigInteger requirement;
		final Goal nextGoal;
		
		int barDisplay = 1000;
		String storedString;
		String previousString;
		
		private Goal(String s, int i, BigInteger n, Goal g) {
			name = s;
			index = i;
			requirement = n;
			nextGoal = g;
			storedString = s + ": 0/" + format(n);
			previousString = storedString;
		}
	}*/
	
	static class FullscreenToggleAction extends AbstractAction {

		  final private JFrame frame;
		  final private GraphicsDevice fullscreenDevice;

		  public FullscreenToggleAction (JFrame frame) {
			  	this(frame, GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice());
		  }

		  public FullscreenToggleAction (JFrame frame, GraphicsDevice fullscreenDevice) {
			  	this.frame = frame;
			    this.fullscreenDevice = fullscreenDevice;
		  }

		  @Override
		  public void actionPerformed(ActionEvent e) {
			    frame.dispose();

			    if (frame.isUndecorated()) {
				      fullscreenDevice.setFullScreenWindow(null);
				      frame.setUndecorated(false);
			    } else {
				      frame.setUndecorated(true);
				      fullscreenDevice.setFullScreenWindow(frame);
			    }

			    frame.setVisible(true);
			    frame.repaint();
		  }
	}
	
	static class LeftUp extends AbstractAction {
		public LeftUp() {
			
		}
		
		public void actionPerformed(ActionEvent e) {
			if (currentMiddleDisplay == MiddleDisplay.ACTION) {
				int newIndex = currentSpotList.getSelectedIndex() - 1;
				if (newIndex < 0) {
					newIndex = getAllowedSpots(currentPlaythrough.currentLocale, currentTimeSlot).length-1;
				}
				currentSpotMenu.updateLabel(getAllowedSpots(currentPlaythrough.currentLocale, currentTimeSlot)[newIndex]);
				updateGoalTooltip();
			} else if (currentMiddleDisplay == MiddleDisplay.ROUTINE) {
				int newIndex = currentRoutineList.getSelectedIndex() - 1;
				if (newIndex < 0) {
					newIndex = getAllowedRoutineSettings().length-1;
				}
				currentRoutineMenu.updateLabel(getAllowedRoutineSettings()[newIndex]);
			} else if (currentMiddleDisplay == MiddleDisplay.ACHIEVEMENTS) {
				int newIndex = currentAchievementCategoryList.getSelectedIndex() - 1;
				if (newIndex < 0) {
					newIndex = AchievementCategory.values().length-1;
				}
				currentAchievementCategoryMenu.updateLabel(AchievementCategory.values()[newIndex]);
			} else if (currentMiddleDisplay == MiddleDisplay.OPTIONS) {
				int newIndex = currentOptionList.getSelectedIndex() - 1;
				if (newIndex < 0) {
					newIndex = OptionSettings.values().length-1;
				}
				currentOptionMenu.updateLabel(OptionSettings.values()[newIndex]);
			} else if (currentMiddleDisplay == MiddleDisplay.NEXTLOOP) {
				nextLoopArmed = false;
				upgradeImageAlpha = -30f;
				for (int i = 0; i < upgradeButtons.length; i++) {
					for (int j = 0; j < upgradeButtons[i].length; j++) {
						if (upgradeButtons[i][j].upgradeID == selectedUpgrade) {
							if (i == 0) {
								selectedUpgrade = nextLoopButton.upgradeID;
							} else {
								if (upgradeButtons[(i+2)%3].length > lastUpgradeColumn) {
									selectedUpgrade = upgradeButtons[(i+2)%3][lastUpgradeColumn].upgradeID;
								} else if (upgradeButtons[(i+2)%3].length > 0) {
									selectedUpgrade = upgradeButtons[(i+2)%3][upgradeButtons[(i+2)%3].length-1].upgradeID;
								} else {
									selectedUpgrade = nextLoopButton.upgradeID;
								}
							}
							i = upgradeButtons.length;
							break;
						}
					}
				}
				assembleWindow();
			} else if (currentMiddleDisplay == MiddleDisplay.STATS) {
				int newIndex = currentStatsList.getSelectedIndex() - 1;
				if (newIndex < 0) {
					newIndex = getAllowedStats().length-1;
				}
				currentStatsCategoryMenu.updateLabel(getAllowedStats()[newIndex]);
			}
			mainPanel.repaint();
		}
	}
	
	static class RightUp extends AbstractAction {
		public RightUp() {
			
		}
		
		public void actionPerformed(ActionEvent e) {
			if (currentMiddleDisplay == MiddleDisplay.ACTION) {
				int newIndex = currentActionList.getSelectedIndex() - 1;
				if (newIndex < 0) {
					newIndex = getVisibleActions(currentPlaythrough.currentLocale.currentSpot, currentTimeSlot).length-1;
				}
				currentActionMenu.updateLabel(getVisibleActions(currentPlaythrough.currentLocale.currentSpot, currentTimeSlot)[newIndex]);
				updateGoalTooltip();
			} else if (currentMiddleDisplay == MiddleDisplay.ROUTINE) {
				int newIndex = currentRoutineElementsList.getSelectedIndex() - 1;
				if (newIndex < 0) {
					newIndex = getKnownRoutineElements(currentRoutineSettings).length-1;
				}
				currentRoutineElementMenu.updateLabel(getKnownRoutineElements(currentRoutineSettings)[newIndex]);
			} else if (currentMiddleDisplay == MiddleDisplay.ACHIEVEMENTS) {
				int newIndex = currentAchievementList.getSelectedIndex() - 1;
				if (newIndex < 0) {
					newIndex = getKnownAchievements(currentAchievementCategory).length - 1;
				}
				currentAchievementMenu.updateLabel(getKnownAchievements(currentAchievementCategory)[newIndex]);
			} else if (currentMiddleDisplay == MiddleDisplay.OPTIONS) {
				int newIndex = currentOptionElementsList.getSelectedIndex() - 1;
				if (currentOptionSettings == Game.OptionSettings.SAVES) {
					if (newIndex < 0) {
						newIndex = saveNames.length-1;
					}
					if (Game.selectedSave != newIndex) {
		        		Game.selectedSave =  newIndex;
                        examinedSave = selectSave(newIndex);
		        		Game.assembleMiddlePanel();
		        		Game.mainPanel.repaint();
	        		}
				} else {
					if (newIndex < 0) {
						newIndex = getKnownOptionElements(currentOptionSettings).length-1;
					}
                    currentOptionElementMenu.updateLabel(getKnownOptionElements(currentOptionSettings)[newIndex]);
				}
			} else if (currentMiddleDisplay == MiddleDisplay.NEXTLOOP) {
				nextLoopArmed = false;
				upgradeImageAlpha = -30f;
				for (int i = 0; i < upgradeButtons.length; i++) {
					for (int j = 0; j < upgradeButtons[i].length; j++) {
						if (upgradeButtons[i][j].upgradeID == selectedUpgrade) {
							if (j+1 < upgradeButtons[i].length) {
								selectedUpgrade = upgradeButtons[i][j+1].upgradeID;
							} else if (upgradeButtons[(i+1)%3].length > 0) {
								selectedUpgrade = upgradeButtons[(i+1)%3][0].upgradeID;
							} else {
								selectedUpgrade = upgradeButtons[(i+2)%3][0].upgradeID;
							}
							i = upgradeButtons.length;
							break;
						}
					}
				}
				assembleWindow();
			} else if (currentMiddleDisplay == MiddleDisplay.STATS) {
				int newIndex = currentStatsElementsList.getSelectedIndex() - 1;
				if (newIndex < 0) {
					newIndex = getAllowedStatsElements(currentStatsCategory).length-1;
				}
				currentStatsMenu.updateLabel(getAllowedStatsElements(currentStatsCategory)[newIndex]);
			}
			mainPanel.repaint();
		}
	}
	
	static class LeftDown extends AbstractAction {
		public LeftDown() {
			
		}
		
		public void actionPerformed(ActionEvent e) {
			if (currentMiddleDisplay == MiddleDisplay.ACTION) {
				int newIndex = currentSpotList.getSelectedIndex() + 1;
				if (newIndex >= getAllowedSpots(currentPlaythrough.currentLocale, currentTimeSlot).length) {
					newIndex = 0;
				}
				currentSpotMenu.updateLabel(getAllowedSpots(currentPlaythrough.currentLocale, currentTimeSlot)[newIndex]);
				updateGoalTooltip();
			} else if (currentMiddleDisplay == MiddleDisplay.ROUTINE) {
				int newIndex = currentRoutineList.getSelectedIndex() + 1;
				if (newIndex >= getAllowedRoutineSettings().length) {
					newIndex = 0;
				}
				currentRoutineMenu.updateLabel(getAllowedRoutineSettings()[newIndex]);
			} else if (currentMiddleDisplay == MiddleDisplay.ACHIEVEMENTS) {
				int newIndex = currentAchievementCategoryList.getSelectedIndex() + 1;
				if (newIndex >= AchievementCategory.values().length) {
					newIndex = 0;
				}
				currentAchievementCategoryMenu.updateLabel(AchievementCategory.values()[newIndex]);
			} else if (currentMiddleDisplay == MiddleDisplay.OPTIONS) {
				int newIndex = currentOptionList.getSelectedIndex() + 1;
				if (newIndex >= OptionSettings.values().length) {
					newIndex = 0;
				}
				currentOptionMenu.updateLabel(OptionSettings.values()[newIndex]);
			} else if (currentMiddleDisplay == MiddleDisplay.NEXTLOOP) {
				nextLoopArmed = false;
				upgradeImageAlpha = -30f;
				for (int i = 0; i < upgradeButtons.length; i++) {
					for (int j = 0; j < upgradeButtons[i].length; j++) {
						if (upgradeButtons[i][j].upgradeID == selectedUpgrade) {
							if (i == 1) {
								selectedUpgrade = nextLoopButton.upgradeID;
							} else {
								if (upgradeButtons[(i+1)%3].length > lastUpgradeColumn) {
									selectedUpgrade = upgradeButtons[(i+1)%3][lastUpgradeColumn].upgradeID;
								} else if (upgradeButtons[(i+1)%3].length > 0) {
									selectedUpgrade = upgradeButtons[(i+1)%3][upgradeButtons[(i+1)%3].length-1].upgradeID;
								} else {
									selectedUpgrade = nextLoopButton.upgradeID;
								}
							}
							i = upgradeButtons.length;
							break;
						}
					}
				}
				assembleWindow();
			} else if (currentMiddleDisplay == MiddleDisplay.STATS) {
				int newIndex = currentStatsList.getSelectedIndex() + 1;
				if (newIndex >= getAllowedStats().length) {
					newIndex = 0;
				}
				currentStatsCategoryMenu.updateLabel(getAllowedStats()[newIndex]);
			}
			mainPanel.repaint();
		}
	}
	
	static class RightDown extends AbstractAction {
		public RightDown() {
			
		}
		
		public void actionPerformed(ActionEvent e) {
			if (currentMiddleDisplay == MiddleDisplay.ACTION) {
				int newIndex = currentActionList.getSelectedIndex() + 1;
				if (newIndex >= getVisibleActions(currentPlaythrough.currentLocale.currentSpot, currentTimeSlot).length) {
					newIndex = 0;
				}
				currentActionMenu.updateLabel(getVisibleActions(currentPlaythrough.currentLocale.currentSpot, currentTimeSlot)[newIndex]);
				updateGoalTooltip();
			} else if (currentMiddleDisplay == MiddleDisplay.ROUTINE) {
				int newIndex = currentRoutineElementsList.getSelectedIndex() + 1;
				if (newIndex >= getKnownRoutineElements(currentRoutineSettings).length) {
					newIndex = 0;
				}
				currentRoutineElementMenu.updateLabel(getKnownRoutineElements(currentRoutineSettings)[newIndex]);
			} else if (currentMiddleDisplay == MiddleDisplay.ACHIEVEMENTS) {
				int newIndex = currentAchievementList.getSelectedIndex() + 1;
				if (newIndex >= getKnownAchievements(currentAchievementCategory).length) {
					newIndex = 0;
				}
				currentAchievementMenu.updateLabel(getKnownAchievements(currentAchievementCategory)[newIndex]);
			} else if (currentMiddleDisplay == MiddleDisplay.OPTIONS) {
				int newIndex = currentOptionElementsList.getSelectedIndex() + 1;
				if (currentOptionSettings == Game.OptionSettings.SAVES) {
					if (newIndex >= saveNames.length) {
						newIndex = 0;
					}
					if (Game.selectedSave != newIndex) {
		        		Game.selectedSave =  newIndex;
                        examinedSave = selectSave(newIndex);
		        		Game.assembleMiddlePanel();
		        		Game.mainPanel.repaint();
	        		}
				} else {
					if (newIndex >= getKnownOptionElements(currentOptionSettings).length) {
						newIndex = 0;
					}
					currentOptionElementMenu.updateLabel(getKnownOptionElements(currentOptionSettings)[newIndex]);
				}
			} else if (currentMiddleDisplay == MiddleDisplay.NEXTLOOP) {
				nextLoopArmed = false;
				upgradeImageAlpha = -30f;
				for (int i = 0; i < upgradeButtons.length; i++) {
					for (int j = 0; j < upgradeButtons[i].length; j++) {
						if (upgradeButtons[i][j].upgradeID == selectedUpgrade) {
							if (j > 0) {
								selectedUpgrade = upgradeButtons[i][j-1].upgradeID;
							} else if (upgradeButtons[(i+2)%3].length > 0) {
								selectedUpgrade = upgradeButtons[(i+2)%3][upgradeButtons[(i+2)%3].length-1].upgradeID;
							} else {
								selectedUpgrade = upgradeButtons[(i+1)%3][upgradeButtons[(i+1)%3].length-1].upgradeID;
							}
							i = upgradeButtons.length;
							break;
						}
					}
				}
				assembleWindow();
			} else if (currentMiddleDisplay == MiddleDisplay.STATS) {
				int newIndex = currentStatsElementsList.getSelectedIndex() + 1;
				if (newIndex >= getAllowedStatsElements(currentStatsCategory).length) {
					newIndex = 0;
				}
				currentStatsMenu.updateLabel(getAllowedStatsElements(currentStatsCategory)[newIndex]);
			}
			mainPanel.repaint();
		}
	}
	
	static class Swap extends AbstractAction {
		public Swap() {
			
		}
		
		public void actionPerformed(ActionEvent e) {
			verifying = false;
			deleting = false;
			if (currentMiddleDisplay == MiddleDisplay.NEXTLOOP) {
				nextLoopArmed = false;
				upgradeImageAlpha = -30f;
				if (selectedUpgrade < 42 && currentPlaythrough.upgradeLevels[selectedUpgrade] > 0) {
					remainingMOL = remainingMOL.add(upgradeLevelCost(selectedUpgrade, currentPlaythrough.upgradeLevels[selectedUpgrade]-1));
					currentPlaythrough.upgradeLevels[selectedUpgrade]--;
					assembleWindow();
				}
			} else if (currentMiddleDisplay.Next != null) {
				currentMiddleDisplay = currentMiddleDisplay.Next;
				if (currentMiddleDisplay == MiddleDisplay.ROUTINE) {
					for (int i = 0; i < RoutineElements.values().length; i++) {
						if (currentPlaythrough.weeklyRoutine[weekDayNumber()][currentRoutineSettings.placement] == RoutineElements.values()[i]) {
							currentRoutineSettings.currentElement = RoutineElements.values()[i];
						}
					}
				}
				assembleWindow();
			}
			mainPanel.repaint();
		}
	}
	
	class Auto extends AbstractAction {
		public Auto() {
			
		}
		
		public void actionPerformed(ActionEvent e) {
			resetStopReason();
			if (currentMiddleDisplay == MiddleDisplay.STATS && currentStatsCategory == StatsCategory.SIMULATOR) {
				simulatorCost = simulatorCost.add(HUNDRED);
				rightFullArea.setText("");
				printStats();
			} else if (currentMiddleDisplay == MiddleDisplay.OPTIONS && currentOptionSettings == OptionSettings.SAVES && selectedSave < saveNames.length) {
				verifying = !verifying;
				deleting = false;
				if (examinedSave.currentDay == 0 && examinedSave.loops == 0) {
					verifying = false;
				}
				assembleButtonPanel();
			} else if (currentMiddleDisplay == MiddleDisplay.OPTIONS && currentOptionSettings == OptionSettings.AUDIO && currentPlaythrough.currentOptions[OptionSettings.AUDIO.index] == OptionElements.BGMVOLUME) {
				float oldValue = currentPlaythrough.bgmVolume;
				if (currentPlaythrough.bgmVolume > -9f) {
					currentPlaythrough.bgmVolume = 0f;
				} else {
					currentPlaythrough.bgmVolume += 8f;
				}
				musicControl.shift(oldValue, currentPlaythrough.bgmVolume, 100);
				assembleButtonPanel();
			} else if (currentMiddleDisplay == MiddleDisplay.OPTIONS && currentOptionSettings == OptionSettings.AUDIO && currentPlaythrough.currentOptions[OptionSettings.AUDIO.index] == OptionElements.SFXVOLUME) {
				if (currentPlaythrough.sfxVolume > -9f) {
					currentPlaythrough.sfxVolume = 0f;
				} else {
					currentPlaythrough.sfxVolume += 8f;
				}
				new SFX(Effect.PUNCH).execute();
				assembleButtonPanel();
			} else if ((currentMiddleDisplay == MiddleDisplay.ACTION || currentMiddleDisplay == MiddleDisplay.NEWDAY) && currentPlaythrough.currentDay == 0 && currentPlaythrough.loops == 0 && currentPlaythrough.weeklyActions[weekDayNumber()][0] == Action.SLEEPIN) {
				if (currentMiddleDisplay == MiddleDisplay.ACTION) {
					add(RIGHT, "\n\nBefore continuing, select 'Daydream'.");
				}
			} else if (currentPhase == GamePhase.ACTIONPHASE && currentMiddleDisplay != MiddleDisplay.OPTIONS && currentMiddleDisplay != MiddleDisplay.STORY) {
                if (currentPlaythrough.loops == 0) {
                    add(RIGHT, "\n\nAuto-Continue unlocks in " + (99 - currentPlaythrough.currentDay) + " day");
                    if (currentPlaythrough.currentDay != 98) {
                        add(RIGHT, "s");
                    }
                    add(RIGHT, ".");
                } else {
                    if (autoOption() == OptionElements.ONEDAY) {
                        if (currentMiddleDisplay != MiddleDisplay.NEWDAY) {
                            autoOn = true;
                            currentScene = null;
                            currentTimeSlot = TimeSlot.MORNING;
                            autoForward();
                            autoOn = false;
                        }
                    } else {
                        autoOn = !autoOn;
                        autoTask.clock = -100;
                        assembleButtonPanel();
                    }
                }
			} else if (currentMiddleDisplay == MiddleDisplay.NEXTLOOP) {
				nextLoopArmed = false;
				upgradeImageAlpha = -30f;
				if (selectedUpgrade < 42) {
					while ((upgradeMaxLevels[selectedUpgrade] == 0 || currentPlaythrough.upgradeLevels[selectedUpgrade] < upgradeMaxLevels[selectedUpgrade]) && remainingMOL.compareTo(upgradeLevelCost(selectedUpgrade, currentPlaythrough.upgradeLevels[selectedUpgrade])) >= 0) {
						remainingMOL = remainingMOL.subtract(upgradeLevelCost(selectedUpgrade, currentPlaythrough.upgradeLevels[selectedUpgrade]));
						currentPlaythrough.upgradeLevels[selectedUpgrade]++;
					}
				}
				assembleWindow();
			} else if (currentMiddleDisplay == MiddleDisplay.STORY) {
                skippingStory = !skippingStory;
            }
			mainPanel.repaint();
		}
	}
	
	class Back extends AbstractAction {
		public Back() {
			
		}
		
		public void actionPerformed(ActionEvent e) {
			resetStopReason();
			if (currentMiddleDisplay == MiddleDisplay.STATS && currentStatsCategory == StatsCategory.SIMULATOR) {
				simulatorCost = simulatorCost.subtract(HUNDRED);
				if (simulatorCost.compareTo(BigInteger.ZERO) < 0) {
					simulatorCost = BigInteger.ZERO;
				}
				rightFullArea.setText("");
				printStats();
			} else if (currentMiddleDisplay == MiddleDisplay.OPTIONS && currentOptionSettings == OptionSettings.SAVES && selectedSave < saveNames.length) {
				deleting = !deleting;
				verifying = false;
				assembleButtonPanel();
			} else if (currentMiddleDisplay == MiddleDisplay.OPTIONS && currentOptionSettings == OptionSettings.AUDIO && currentPlaythrough.currentOptions[OptionSettings.AUDIO.index] == OptionElements.BGMVOLUME) {
				float oldValue = currentPlaythrough.bgmVolume;
				if (currentPlaythrough.bgmVolume < -65f) {
					currentPlaythrough.bgmVolume = musicControl.getMinimum();
				} else {
					currentPlaythrough.bgmVolume -= 8f;
				}
				musicControl.shift(oldValue, currentPlaythrough.bgmVolume, 1000);
				assembleButtonPanel();
			} else if (currentMiddleDisplay == MiddleDisplay.OPTIONS && currentOptionSettings == OptionSettings.AUDIO && currentPlaythrough.currentOptions[OptionSettings.AUDIO.index] == OptionElements.SFXVOLUME) {
				if (currentPlaythrough.sfxVolume < -65f) {
					currentPlaythrough.sfxVolume = effectsControl.getMinimum();
				} else {
					currentPlaythrough.sfxVolume -= 8f;
				}
				new SFX(Effect.PUNCH).execute();
				assembleButtonPanel();
			} else if (currentMiddleDisplay == MiddleDisplay.NEXTLOOP) {
				nextLoopArmed = false;
				upgradeImageAlpha = -30f;
				if (selectedUpgrade < 42) {
					currentPlaythrough.upgradeLevels[selectedUpgrade] = 0;
				}
				checkMOL();
				assembleWindow();
			} else if (autoOn) {
				autoOn = false;
				assembleWindow();
			} else if (currentTimeSlot != TimeSlot.values()[0] && currentMiddleDisplay == MiddleDisplay.ACTION) {
				currentActionMenu = null;
				currentSpotMenu = null;
				currentTimeSlot = currentTimeSlot.Previous;
				currentPlaythrough.sendStats();
				for (int i = 0; i < currentTimeSlot.placement; i++) {
					resolveAction(currentPlaythrough.weeklyActions[weekDayNumber()][i], true, false);
				}
				currentPlaythrough.currentLocale.currentSpot = currentPlaythrough.weeklyActions[weekDayNumber()][timeSlotNumber()].ownSpot;
				currentPlaythrough.currentLocale.currentSpot.currentAction = currentPlaythrough.weeklyActions[weekDayNumber()][timeSlotNumber()];
				setGoalBar(getVisibleGoal(getDisplayedAction(), true), true);
				assembleWindow();
			} else if (currentMiddleDisplay.Previous != null) {
				currentMiddleDisplay = currentMiddleDisplay.Previous;
				assembleWindow();
			} else if (currentMiddleDisplay == MiddleDisplay.STORY && sceneProgress > 0) {
				sceneProgress--;
				assembleWindow();
			}
			mainPanel.repaint();
		}
	}
	
	static class Forward extends AbstractAction {
		public Forward() {
			
		}
		
		public void actionPerformed(ActionEvent e) {
			if (currentMiddleDisplay == MiddleDisplay.STATS && currentStatsCategory == StatsCategory.SIMULATOR) {
				simulatorType = (simulatorType+1)%3;
				assembleButtonPanel();
				rightFullArea.setText("");
				printStats();
			} else if (currentMiddleDisplay == MiddleDisplay.OPTIONS && currentOptionSettings == OptionSettings.SAVES && selectedSave < saveNames.length) {
                if (deleting) {
					deleting = false;
					new File(Playthrough.getSaveFolderPath() + saveNames[selectedSave]).delete();
					if (saveNames.length == 1) {
						if (currentPlaythrough.loopOver) {
							currentMiddleDisplay = MiddleDisplay.NEXTLOOP;
						} else {
							currentMiddleDisplay = MiddleDisplay.ACTION;
						}
					}
					currentOptionMenu = null;
					currentOptionElementMenu = null;
				} else if (verifying) {
					tested = examinedSave;
					for (int i = 0; i < OptionSettings.values().length; i++) {
						if (OptionSettings.values()[i] != OptionSettings.SAVES) {
							tested.currentOptions[i] = currentPlaythrough.currentOptions[i];
						}
					}
				} else {
					String newName = JOptionPane.showInputDialog("To save the current playthrough, type the name under which it should be saved.  Leave blank to discard.");
					if (newName != null && !newName.isEmpty()) {
						boolean alreadyHasExtension = false;
						if (newName.length() > 4) {
							if (newName.endsWith(".sav")) {
								alreadyHasExtension = true;
							}
						}
						if (alreadyHasExtension) {
							newName = newName.substring(newName.length()-4);
						}
						boolean nameFilled = false;
						for (int i = 0; i < newName.length(); i++) {
							if (newName.charAt(i) != ' ') {
								nameFilled = true;
                                break;
							}
						}
						if (nameFilled) {
							currentPlaythrough.sendStats();
							currentPlaythrough.saveToFile(newName);
						}
					}
					for (int i = 0; i < OptionSettings.values().length; i++) {
						if (OptionSettings.values()[i] != OptionSettings.SAVES) {
							examinedSave.currentOptions[i] = currentPlaythrough.currentOptions[i];
						}
					}
                    upgradeButtons = null;
                    if (examinedSave.loops == currentPlaythrough.loops && examinedSave.currentDay == currentPlaythrough.currentDay-1) {
                        recentLoad = true;
                    }
					currentPlaythrough = examinedSave;
					currentPlaythrough.sendStats();
					if (currentPlaythrough.loopOver) {
						blackTheme();
						currentMiddleDisplay = MiddleDisplay.NEXTLOOP;
						currentPhase = GamePhase.NEXTLOOPPHASE;
					} else {
						lightTheme();
						currentMiddleDisplay = MiddleDisplay.NEWDAY;
						currentPhase = GamePhase.ACTIONPHASE;
					}
					currentPlaythrough.refreshGoals();
					checkScheduleRoutineValidity(false);
					currentSpotMenu = null;
					currentActionMenu = null;
					currentRoutineMenu = null;
					currentRoutineElementMenu = null;
					currentAchievementMenu = null;
					currentAchievementCategoryMenu = null;
					currentOptionMenu = null;
					currentOptionElementMenu = null;
					currentStatsMenu = null;
					currentStatsCategoryMenu = null;
					addStamina(BigInteger.ZERO, true);
					addHealth(BigInteger.ZERO, true);
					addSanity(BigInteger.ZERO, true);
					addQi(BigInteger.ZERO, true);
					for (int i = 0; i < 21; i++) {
						addAttributeExperience(i, BigInteger.ZERO, true);
						addRelationshipExperience(i, BigInteger.ZERO, true);
					}
					todayMOL = BigInteger.ZERO;
					for (int i = 0; i < Game.Achievement.values().length; i++) {
						Game.Achievement.values()[i].lastRecordedScore = Game.getScore(currentPlaythrough, Game.Achievement.values()[i]);
						todayMOL = todayMOL.add(Game.Achievement.values()[i].lastRecordedScore);
						Game.Achievement.values()[i].ownCategory.lastRecordedScore = Achievement.values()[i].ownCategory.lastRecordedScore.add(Game.Achievement.values()[i].lastRecordedScore);
					}
					checkMOL();
					setTransparent();
					Epoch currentEpoch = getEpoch();
					if (currentEpoch.musicChangeNeeded()) {
						currentMusic = currentEpoch.defaultMusic;
					}
				}
				assembleWindow();
				if (tested != null) {
					verify();
				}
            } else if (currentMiddleDisplay == MiddleDisplay.OPTIONS && currentOptionSettings == OptionSettings.GENDERS) {
                if (currentPlaythrough.currentOptions[currentOptionSettings.index] == OptionElements.PLAYERGENDER) {
                    currentPlaythrough.ownGender = currentPlaythrough.ownGender.next;
                } else if (currentPlaythrough.currentOptions[currentOptionSettings.index] == OptionElements.UNMETGENDER) {
                    currentPlaythrough.unmetGender = currentPlaythrough.unmetGender.next;
                    for (int i = 0; i < currentPlaythrough.personGenders.length; i++) {
                        if (currentPlaythrough.relationships[i].equals(BigInteger.ZERO)) {
                            currentPlaythrough.personGenders[i] = currentPlaythrough.unmetGender;
                        }
                    }
                } else {
                    currentPlaythrough.personGenders[currentPlaythrough.currentOptions[currentOptionSettings.index].placement-1] = currentPlaythrough.personGenders[currentPlaythrough.currentOptions[currentOptionSettings.index].placement-1].next;
                }
                currentOptionElementMenu = null;
                assembleMiddlePanel();
			} else if (currentMiddleDisplay == MiddleDisplay.NEXTLOOP) {
				if (selectedUpgrade < 42) {
					nextLoopArmed = false;
					addUpgradeLevel();
				} else if (selectedUpgrade == 42) {
					upgradeImageAlpha = -30f;
					if (nextLoopArmed) {
						startNextLoop();
					}
					nextLoopArmed = true;
				} else if (selectedUpgrade == 43) {
					nextLoopArmed = false;
					clearAll();
				}
				assembleWindow();
			} else if (autoOn || skippingStory) {
				autoOn = false;
				skippingStory = false;
			} else if (!slowDown) {
				mainAction();
			}
			mainPanel.repaint();
		}
	}
	
	static class Options extends AbstractAction {
		public Options() {
			
		}
		
		public void actionPerformed(ActionEvent e) {
			nextLoopArmed = false;
			if (currentPhase != GamePhase.RESULTSPHASE) {
				if (currentMiddleDisplay != MiddleDisplay.OPTIONS) {
					MiddleDisplay.OPTIONS.Previous = currentMiddleDisplay;
					currentMiddleDisplay = MiddleDisplay.OPTIONS;
				} else {
					currentMiddleDisplay = MiddleDisplay.OPTIONS.Previous;
				}
				autoOn = false;
                skippingStory = false;
				assembleWindow();
			}
			mainPanel.repaint();
		}
	}
	
	class SFX extends SwingWorker<Void, Void> {
		final Effect playedEffect;
		
		public Void doInBackground() {
			try {
				String trackUsed = "";
				if (playedEffect != null && playedEffect.fileName != null) {
					trackUsed = playedEffect.fileName;
				}
				if (!trackUsed.isEmpty()) {
					AudioInputStream audioInputStream = null;
			        try 
			        {
			        	/*String path = java.io.File.separator + "assets" + java.io.File.separator + "effects" + java.io.File.separator + trackUsed;
			            audioInputStream = AudioSystem.getAudioInputStream(getClass().getClassLoader().getResourceAsStream(path));*/
                        String path = "assets" + java.io.File.separator + "effects" + java.io.File.separator + trackUsed;
                        File soundFile = new File(path);
                        audioInputStream = AudioSystem.getAudioInputStream(soundFile);
			        } 
			        catch (Exception e)
			        {
			        	System.out.println(e);
			        }
			        AudioFormat audioFormat = audioInputStream.getFormat();
			        SourceDataLine line = null;
			        DataLine.Info info = new DataLine.Info(SourceDataLine.class, audioFormat);
			        try 
			        {
			            line = (SourceDataLine) AudioSystem.getLine(info);
			            line.open(audioFormat);
			        } 
			        catch (Exception e) 
			        {
			        	System.out.println(e);
			        }
			        effectsControl = 
						    (FloatControl) line.getControl(FloatControl.Type.MASTER_GAIN);
					effectsControl.setValue(currentPlaythrough.sfxVolume);
			        line.start();
			        int nBytesRead = 0;
			        byte[] abData = new byte[512000];
			        while (nBytesRead != -1) 
			        {
			            try 
			            {
			                nBytesRead = audioInputStream.read(abData, 0, abData.length);
			            } 
			            catch (IOException e) 
			            {
			               System.out.println(e);
			            }
			            if (nBytesRead >= 0) 
			            {
			                int nBytesWritten = line.write(abData, 0, nBytesRead);
			            }
			        }
			        line.drain();
			        line.close();
				}
			} catch (Exception e) {
				System.out.println(e);
			}
			return null;
		}
		public void done() {
			
		}
		public SFX(Effect x) {
			playedEffect = x;
		}
	}
	
	static class BGM extends SwingWorker<Void, Void> {
		public Void doInBackground() {
			try {
				while (true) {
					String trackUsed = "";
					if (currentMusic != null) {
						trackUsed = currentMusic.fileName;
					}
					if (!trackUsed.isEmpty()) {
						AudioInputStream audioInputStream = null;
				        try 
				        {
				        	//String path = java.io.File.separator + "assets" + java.io.File.separator + "music" + java.io.File.separator + trackUsed;
                            //String path = trackUsed;
                            String path = "assets" + java.io.File.separator + "music" + java.io.File.separator + trackUsed;
                            File soundFile = new File(path);
                            audioInputStream = AudioSystem.getAudioInputStream(soundFile);
                        }
				        catch (Exception e)
				        {
				        	System.out.println(e);
				        }
				        AudioFormat audioFormat = audioInputStream.getFormat();
				        SourceDataLine line = null;
				        DataLine.Info info = new DataLine.Info(SourceDataLine.class, audioFormat);
				        try 
				        {
				            line = (SourceDataLine) AudioSystem.getLine(info);
				            line.open(audioFormat);
				        } 
				        catch (Exception e) 
				        {
				        	System.out.println(e);
				        }

				        musicControl = 
							    (FloatControl) line.getControl(FloatControl.Type.MASTER_GAIN);
						musicControl.setValue(fadedVolume);
				        line.start();
				        int nBytesRead = 0;
				        byte[] abData = new byte[128000];
				        while (nBytesRead != -1) 
				        {
				        	if (musicFading) {
								if (fadedVolume >= musicControl.getMinimum() + 3f) {
									fadedVolume -= 3f;
								} else {
									fadedVolume = musicControl.getMinimum();
								}
							} else {
								fadedVolume = currentPlaythrough.bgmVolume;
							}
				        	musicControl.setValue(fadedVolume);
				            try 
				            {
				                nBytesRead = audioInputStream.read(abData, 0, abData.length);
				            } 
				            catch (IOException e) 
				            {
				               System.out.println(e);
				            }
				            if (nBytesRead >= 0) 
				            {
				                int nBytesWritten = line.write(abData, 0, nBytesRead);
				            }
				            if (currentMusic == null || !currentMusic.fileName.equals(trackUsed) || resetMusic) {
                                resetMusic = false;
				            	break;
				            }
				        }
				        line.drain();
				        line.close();
					}
				}
			} catch (Exception e) {
				System.out.println(e);
			}
			return null;
		}
		
		public void done() {
			
		}
	}
	
	static class Task extends SwingWorker<Void, Void> {
		int clock;
		int lastNewDay;
		
		public Void doInBackground() {
			try {
				while (true) {
					int clockDisplay = clock + 1200;
					if ((currentMiddleDisplay != MiddleDisplay.STORY && autoOn) || (currentMiddleDisplay == MiddleDisplay.STORY && skippingStory)) {
						if (currentMiddleDisplay == MiddleDisplay.STORY) {
							if (clockDisplay % 60 == 40) {
								auto.setText("<html><center>&nbsp;&nbsp;&gt;<br>Auto</center></html>");
							} else if (clockDisplay % 60 == 0) {
								auto.setText("<html><center>&gt;&nbsp;&nbsp;<br>Auto</center></html>");
							} else if (clockDisplay % 60 == 20) {
								auto.setText("<html><center>&nbsp;&gt;&nbsp;<br>Auto</center></html>");
							}
						} else {
							if (clockDisplay % 60 == 0) {
								auto.setText("<html><center>&nbsp;&nbsp;&gt;<br>Auto</center></html>");
							} else if (clockDisplay % 60 == 20) {
								auto.setText("<html><center>&gt;&nbsp;&nbsp;<br>Auto</center></html>");
							} else if (clockDisplay % 60 == 40) {
								auto.setText("<html><center>&nbsp;&gt;&nbsp;<br>Auto</center></html>");
							}
						}
						if (clock > 0 && clockDisplay % 200 == 199) {
							autoForward();
						}
					}
					SpecialJProgressBar[] bars = allProgressBars();
					for (int i = 0; clockDisplay % 200 < 150 && i < bars.length; i++) {
						if (clockDisplay % 200 == 0 && bars[i].ownClock == 0) {
							bars[i].startValue = bars[i].getValue();
						}
						if (bars[i].startValue != bars[i].endValue || bars[i].ownClock > 0 || bars[i].loops != 0) {
							int difference = bars[i].initialLoops*1000 + bars[i].endValue - bars[i].startValue;
							int scale = bars[i].ownClock;
							int thisFrameValue;
							if (scale < 51) {
								thisFrameValue = bars[i].startValue + difference*scale*scale*scale/625000;
							} else if (scale < 101) {
								thisFrameValue = bars[i].startValue + difference/5 + difference*(scale-50)*3/250;
							} else {
								thisFrameValue = bars[i].startValue + difference - difference*(150-scale)*(150-scale)*(150-scale)/625000;
							}
							while (thisFrameValue < 0) {
								thisFrameValue += 1000;
							}
							while (thisFrameValue > 1000) {
								thisFrameValue -= 1000;
							}
							if (bars[i].loops > 0 && thisFrameValue < bars[i].getValue()) {
								bars[i].loops--;
							} else if (bars[i].loops < 0 && thisFrameValue > bars[i].getValue()) {
								bars[i].loops++;
							}
							bars[i].setValue(thisFrameValue);
							if (scale == 0) {
								Point locationOnScreen = MouseInfo.getPointerInfo().getLocation();
				                Point locationOnComponent = new Point(locationOnScreen);
				                SwingUtilities.convertPointFromScreen(locationOnComponent, bars[i]);
				                if (bars[i].contains(locationOnComponent)) {
				                    ToolTipManager.sharedInstance().mouseMoved(
				                            new java.awt.event.MouseEvent(bars[i], -1, System.currentTimeMillis(), 0, locationOnComponent.x, locationOnComponent.y,
				                                    locationOnScreen.x, locationOnScreen.y, 0, false, 0));
				                }
							}
							if (scale == 149) {
								bars[i].startValue = bars[i].endValue;
								bars[i].setValue(bars[i].endValue);
								bars[i].ownClock = 0;
								bars[i].loops = 0;
								bars[i].initialLoops = 0;
							} else {
								bars[i].ownClock++;
							}
							if (i >= 5) {
								String displayed;
								int displayedDecimals = bars[i].getValue();
								if (i >= 5 + 21) {
									int index = i - 5 - 21;
									displayed = attributeNames[index] + " " + (bars[i].levelDisplay - bars[i].loops) + ".";
								} else {
									int index = i - 5;
									displayed = currentPlaythrough.personNames[index] + " " + (bars[i].levelDisplay - bars[i].loops) + ".";
								}
								if (displayedDecimals == 1000) {
									displayedDecimals = 999;
								}
								if (displayedDecimals < 100) {
									displayed = displayed + "0";
									if (displayedDecimals < 10) {
										displayed = displayed + "0";
									}
								}
								bars[i].setString(displayed + displayedDecimals);
							} else if (currentGoal != null) {
								if (i == 4) {
									if (bars[i].loops < 0) {
										bars[i].setString(currentGoal.previousString);
									} else {
										if (currentGoal.storedString.equals("All goals complete!")) {
											bars[i].loops = 0;
											bars[i].initialLoops = 0;
											bars[i].startValue = 0;
											bars[i].setValue(0);
											bars[i].endValue = 0;
											bars[i].ownClock = 0;
										}
										bars[i].setString(currentGoal.storedString);
									}
									if (scale == 149) {
										currentGoal.barDisplay = bars[i].getValue();
									}
								}
							}
							bars[i].repaint();
						}
					}
					clock = clock+1;
					if (clock >= 600) {
						clock -= 600;
					}
					if (lastNewDay < 200) {
						slowDown = false;
					}
					if (lastNewDay > 0) {
						lastNewDay--;
					}
					boolean fading = false;
					for (int i = 0; i < fadeComponents.length; i++) {
						if (fadeComponents[i].getForeground().getAlpha() < 254) {
							fading = true;
							fadeComponents[i].setForeground(new Color(fadeComponents[i].getForeground().getRed(), fadeComponents[i].getForeground().getGreen(), fadeComponents[i].getForeground().getBlue(), fadeComponents[i].getForeground().getAlpha()+1));
						} else if (fadeComponents[i].getForeground().getAlpha() > 254) {
                            fadeComponents[i].setForeground(new Color(fadeComponents[i].getForeground().getRed(), fadeComponents[i].getForeground().getGreen(), fadeComponents[i].getForeground().getBlue(), 0));
                        }
					}
					/*if (fading) {
						mainPanel.validate();
						mainPanel.repaint();
					}*/
					if (currentMiddleDisplay == MiddleDisplay.NEXTLOOP) {
						Point p = MouseInfo.getPointerInfo().getLocation();
						SwingUtilities.convertPointFromScreen(p, upgradeContainer);
						int scrollStrength = 0;
						boolean manualScroll = false;
						if (p.x > 0 && p.x < upgradeContainer.getWidth() && p.y > 0 && p.y < upgradeContainer.getHeight()) {
							scrollStrength = p.x - upgradeContainer.getWidth()/2;
							if (scrollStrength < 0) {
								scrollStrength = scrollStrength + upgradeContainer.getWidth()*3/10;
								if (scrollStrength > 0) {
									scrollStrength = 0;
									blockLoopUpgradeMovement = false;
								}
							} else {
								scrollStrength = scrollStrength - upgradeContainer.getWidth()*3/10;
								if (scrollStrength < 0) {
									scrollStrength = 0;
									blockLoopUpgradeMovement = false;
								}
							}
							scrollStrength = scrollStrength*25/upgradeContainer.getWidth();
							if (scrollStrength > 0) {
								scrollStrength = scrollStrength*scrollStrength/2;
								manualScroll = true;
							} else if (scrollStrength < 0) {
								scrollStrength = scrollStrength*scrollStrength/(-2);
								manualScroll = true;
							}
							if (blockLoopUpgradeMovement) {
								scrollStrength = 0;
							}
							for (int i = 0; i < upgradeButtons.length; i++) {
								for (int j = 0; j < upgradeButtons[i].length; j++) {
									if (upgradeButtons[i][j].upgradeID < 42 && describedUpgrade != upgradeButtons[i][j].upgradeID) {
										Point q = MouseInfo.getPointerInfo().getLocation();
										SwingUtilities.convertPointFromScreen(q, upgradeButtons[i][j]);
										if (q.x >= 0 && q.x <= upgradeButtons[i][j].getWidth() && q.y >= 0 && q.y <= upgradeButtons[i][j].getHeight()) {
											describeUpgrade(upgradeButtons[i][j].upgradeID);
											upgradeImageAlpha = -30f;
										}
									}
								}
							}
						} else {
							blockLoopUpgradeMovement = false;
						}
						if (!blockLoopUpgradeMovement && !manualScroll && upgradeGoal != upgradeScroll) {
							scrollStrength = (upgradeGoal - upgradeScroll)/20;
						} else {
							upgradeGoal = upgradeScroll;
						}
						upgradeScroll += scrollStrength;
						if (scrollStrength != 0) {
							paintUpgradeButtons();
							if (manualScroll) {
								upgradeGoal = upgradeScroll;
							}
							upgradeContainer.validate();
							upgradeContainer.repaint();
						}
						boolean changed = false;
						if (upgradeImageAlpha < 1f) {
							changed = true;
							upgradeImageAlpha += 0.001f;
						}
						if (upgradeImageAlpha > 1f) {
							upgradeImageAlpha = 1f;
						}
						if (upgradeImageAlpha >= 0 && changed) {
							upgradeArtBackground.repaint();
						}
						if (selectedUpgrade == 42 && nextLoopArmed) {
							int normalized = clock*511/600;
							forward.secondColor = new Color(Math.abs((normalized % 511) - 255)/2, Math.abs((normalized + 80)%511 - 255)/3, Math.abs((normalized+160)%511 - 255)*2/3);
							forward.repaint();
						}
					}
					Thread.sleep(10);
				}
            } catch (Throwable ex) {
            	System.out.println(ex);
            }
			return null;
		}
		
		public void done() {
			
		}
	}
	
	public static class SpecialCellRenderer extends DefaultListCellRenderer {
		public Component getListCellRendererComponent( JList list, Object value, int index, boolean isSelected, boolean cellHasFocus ) {
	        Component c = super.getListCellRendererComponent( list, value, index, isSelected, cellHasFocus );
	        boolean highlight = false;
	        for (int i = 0; i < currentPlaythrough.progress.newEntries.length; i++) {
	        	if (currentPlaythrough.progress.newEntries[i].equals(value)) {
	        		Spot associatedSpot = null;
	        		for (int j = 0; j < getVisibleSpots(currentPlaythrough.currentLocale, currentTimeSlot).length; j++) {
	        			if (getVisibleSpots(currentPlaythrough.currentLocale, currentTimeSlot)[j].equals((String)value)) {
	        				associatedSpot = getAllowedSpots(currentPlaythrough.currentLocale, currentTimeSlot)[j];
	        			}
	        		}
	        		Boolean newOptionFound = associatedSpot == null;
	        		for (int j = 0; j < getVisibleActions(associatedSpot, currentTimeSlot).length; j++) {
	        			for (int k = 0; k < currentPlaythrough.progress.newEntries.length; k++) {
	        				if (getVisibleActions(associatedSpot, currentTimeSlot)[j].name.equals(currentPlaythrough.progress.newEntries[k])) {
	        					newOptionFound = true;
	        				}
	        			}
	        		}
	        		if (newOptionFound) {
	        			highlight = true;
	        		}
	        		RoutineSettings associatedSettings = null;
	        		for (int j = 0; j < getVisibleRoutineSettings().length; j++) {
	        			if (getVisibleRoutineSettings()[j].equals((String)value)) {
	        				associatedSettings = getAllowedRoutineSettings()[j];
	        			}
	        		}
	        		newOptionFound = associatedSettings == null;
	        		if (newOptionFound == false) {
	        			highlight = false;
	        		}
	        		for (int j = 0; j < getVisibleRoutineElements(associatedSettings).length; j++) {
	        			for (int k = 0; k < currentPlaythrough.progress.newEntries.length; k++) {
		        			if (getVisibleRoutineElements(associatedSettings)[j].equals(currentPlaythrough.progress.newEntries[k])) {
		        				highlight = true;
		        			}
	        			}
	        		}
	        	} else if (currentPlaythrough.progress.newEntries[i].equals("Unseen") && ((String)value).equals("Action results skip")) {
					highlight = true;
				} else if (currentPlaythrough.progress.newEntries[i].equals("Looply") && ((String)value).equals("Default action choice")) {
                    highlight = true;
                }
	        }
	        Boolean usedOption = false;
	        for (int i = 0; i < getCurrentSelections().length; i++) {
	        	if (getCurrentSelections()[i].equals(value)) {
	        		usedOption = true;
	        	}
	        }
	        if (isSelected) {
	        	if (textBackground.equals(Color.WHITE)) {
	        		c.setForeground(Color.BLACK);
	        		c.setBackground(new Color(184, 207, 229));
	        	} else {
	        		c.setForeground(Color.WHITE);
	        		c.setBackground(new Color(30, 60, 90));
	        	}
	        } else if (highlight) {
	        	if (textBackground.equals(Color.WHITE)) {
	        		c.setForeground(Color.BLACK);
	        		c.setBackground( newThingColor );
	        	} else {
	        		c.setForeground(Color.WHITE);
	        		c.setBackground(new Color(0, 100, 0));
	        	}
	        } else if (usedOption) {
	        	if (textBackground.equals(Color.WHITE)) {
		        	c.setBackground(new Color(0, 0, 0));
		        	c.setForeground(new Color(255, 255, 255));
	        	} else {
	        		c.setBackground(Color.WHITE);
	        		c.setForeground(Color.BLACK);
	        	}
	        } else {
	        	if (textBackground.equals(Color.WHITE)) {
	        		c.setForeground(Color.BLACK);
	        		c.setBackground( Color.white );
	        	} else {
	        		c.setForeground(Color.WHITE);
	        		c.setBackground(Color.BLACK);
	        	}
	        }
	        return c;
	    }
	}
	
	public static class FixedStateButtonModel extends DefaultButtonModel    {

        @Override
        public boolean isPressed() {
    		return false;
        }

        @Override
        public boolean isRollover() {
            return false;
        }

        @Override
        public void setRollover(boolean b) {
            
        }

    }
	
	public static class SpecialJProgressBar extends JProgressBar {
		private SpecialJProgressBar(int low, int high) {
			super(low, high);
		}
		
		int startValue;
		int endValue;
		int ownClock;
		int loops;
		int initialLoops;
		int levelDisplay = 0;
	}
	
	public static class SpecialJLabel extends JLabel {
		protected void paintComponent(Graphics g) {
			Graphics2D g2 = (Graphics2D) g;
			HashMap<RenderingHints.Key, Object> hints = new HashMap<RenderingHints.Key, Object>();
			hints.put(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
			hints.put(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
			hints.put(RenderingHints.KEY_DITHERING, RenderingHints.VALUE_DITHER_ENABLE);
	        hints.put(RenderingHints.KEY_TEXT_ANTIALIASING, RenderingHints.VALUE_TEXT_ANTIALIAS_ON);
	        //hints.put(RenderingHints.KEY_TEXT_LCD_CONTRAST, 160);
	        hints.put(RenderingHints.KEY_FRACTIONALMETRICS, RenderingHints.VALUE_FRACTIONALMETRICS_ON);
	        //hints.put(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_NEAREST_NEIGHBOR);
	        hints.put(RenderingHints.KEY_ALPHA_INTERPOLATION, RenderingHints.VALUE_ALPHA_INTERPOLATION_QUALITY);
	        hints.put(RenderingHints.KEY_COLOR_RENDERING, RenderingHints.VALUE_COLOR_RENDER_QUALITY);
			//hints.put(RenderingHints.KEY_STROKE_CONTROL, RenderingHints.VALUE_STROKE_NORMALIZE);
            g2.setRenderingHints(hints);
            super.paintComponent(g2);
		}
	}
	
	public static class SpecialJButton extends JButton {
		private SpecialJButton(){
            super("Gradient Button");
            setContentAreaFilled(false);
            setFocusPainted(false);
        }
		
		public Color firstColor = new Color(190, 200, 220);
		public Color secondColor = Color.WHITE;
		public boolean disabled = false;
		
		public int upgradeID;

        @Override
        protected void paintComponent(Graphics g){
            Graphics2D g2 = (Graphics2D)g.create();
            g2.setPaint(new GradientPaint(
                    new Point(0, -getHeight()/3), 
                    firstColor,
                    new Point(0, getHeight()/3), 
                    secondColor,
                    true));
            g2.fillRect(0, 0, getWidth(), getHeight());
            g2.dispose();

            super.paintComponent(g);
        }
        
        public void setDead(boolean dead) {
        	disabled = dead;
        	if (disabled) {
        		setModel(new FixedStateButtonModel());
        	} else {
        		setModel(new DefaultButtonModel());
        	}
        }

        public static final SpecialJButton newInstance(){
        	SpecialJButton returned = new SpecialJButton();
            return returned;
        }
	}
	
	public static class WindowContents implements Serializable {
		static final long serialVersionUID = 4L;
		
		public String[] texts = new String[0];
		public Color[] colors = new Color[0];
		public boolean[] bolds = new boolean[0];
		
		public void print(DisplayArea d) {
			d.ownPane.setText("");
			for (int i = 0; i < texts.length; i++) {
				if (bolds[i]) {
					boldAdd(d, texts[i], colors[i]);
				} else {
					add(d, texts[i], colors[i]);
				}
			}
		}
		
		public String rawString() {
			String result = "";
			for (int i = 0; i < texts.length; i++) {
				result = result + texts[i];
			}
			return result;
		}
		
		public void attach(String s, Color c, boolean b, boolean prepend) {
			String[] newTexts = new String[texts.length+1];
			Color[] newColors = new Color[texts.length+1];
			boolean[] newBolds = new boolean[texts.length+1];
			int countingStart = 0;
			int countingEnd = texts.length;
			int insertionPlacement = texts.length;
			if (prepend) {
				countingStart = 1;
				countingEnd = texts.length+1;
				insertionPlacement = 0;
			}
			for (int i = countingStart; i < countingEnd; i++) {
				int origin = i;
				if (prepend) {
					origin--;
				}
				newTexts[i] = texts[origin];
				newColors[i] = colors[origin];
				newBolds[i] = bolds[origin];
			}
			newTexts[insertionPlacement] = s;
			newColors[insertionPlacement] = c;
			newBolds[insertionPlacement] = b;
			texts = newTexts;
			colors = newColors;
			bolds = newBolds;
		}
		
		public void attach(String s, int i, boolean b) {
			Color usedColor = Color.black;
			if (i >= 0 && i <= 20) {
				usedColor = speechColors[i];
			}
			if (!textBackground.equals(Color.WHITE)) {
				usedColor = Color.WHITE;
				if (i >= 0 && i <= 20) {
					usedColor = darkSpeechColors[i];
				}
			}
			attach(s, usedColor, b, false);
		}
		
		public void attach(String s) {
			attach(s, -1, false);
		}
		
		public void attach(String s, int i) {
			attach(s, i, false);
		}
		
		public void attach(String s, boolean b) {
			attach(s, -1, b);
		}
		
		public void attach(String s, Color c) {
			attach(s, c, false, false);
		}
		
		public void prepend(String s) {
			Color usedColor = Color.black;
			if (!textBackground.equals(Color.WHITE)) {
				usedColor = Color.WHITE;
			}
			attach(s, usedColor, false, true);
		}
		
		public void prepend(String s, int i) {
			Color usedColor = Color.black;
			if (i >= 0 && i <= 20) {
				usedColor = speechColors[i];
			}
			if (!textBackground.equals(Color.WHITE)) {
				usedColor = Color.WHITE;
				if (i >= 0 && i <= 20) {
					usedColor = darkSpeechColors[i];
				}
			}
			attach(s, usedColor, false, true);
		}
		
		public void clear() {
			texts = new String[0];
			colors = new Color[0];
			bolds = new boolean[0];
		}
		
	}
	
	public static class Scene implements Serializable {
		public static final long serialVersionUID = 4L;
		
		boolean loopEnd;
        boolean dayEnd = false;
		int associatedGoalIndex;
		int associatedGoalTier;
		PlotEvent associatedEvent;
		
		WindowContents[] screens = new WindowContents[0];
		String[] backgrounds = new String[0];
		String[][] characters = new String[0][0];
		String[][] outfits = new String[0][0];
		String[][] emotions = new String[0][0];
		Music[] tracks = new Music[0];
		Effect[] sounds = new Effect[0];
		Modifier[][] modifiers = new Modifier[0][0];
		
		public Scene(int length) {
			screens = new WindowContents[length];
			backgrounds = new String[length];
			characters = new String[length][0];
			outfits = new String[length][0];
			emotions = new String[length][0];
			tracks = new Music[length];
			sounds = new Effect[length];
			modifiers = new Modifier[length][0];
			
			for (int i = 0; i < length; i++) {
				screens[i] = new WindowContents();
				backgrounds[i] = "";
			}
		}
	}

	public Game() {
		/*GraphicsEnvironment e = GraphicsEnvironment.getLocalGraphicsEnvironment();
	    String[] fontnames = e.getAvailableFontFamilyNames();
	    for (String s : fontnames) {
	    	boolean allFound = true;
	    	for (int i = 0; i < 21; i++) {
		    	if (new Font(s, Font.PLAIN, 12).canDisplayUpTo(personSymbols[i]) >= 0) {
		    		allFound = false;
		    	}
	    	}
	    	if (allFound) {
	    		System.out.println(s);
	    	}
	    }*/
		
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		System.setProperty("awt.useSystemAAFontSettings","on");
		
		for (int i = 0; i < StatsElements.values().length; i++) {
			if (StatsElements.values()[i].associatedUpgrade >= 0) {
				StatsElements.values()[i].name = upgradeNames[StatsElements.values()[i].associatedUpgrade];
			}
		}
		
		currentGame = this;
		currentPlaythrough = new Playthrough();
		currentPlaythrough.sendStats();
		
		interfaceSwap.addActionListener(new Swap());
		interfaceSwap.setText("Routine");
        routineButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                if (currentPhase == GamePhase.ACTIONPHASE) {
                    currentMiddleDisplay = MiddleDisplay.ROUTINE;
                    for (int i = 0; i < RoutineElements.values().length; i++) {
                        if (currentPlaythrough.weeklyRoutine[weekDayNumber()][currentRoutineSettings.placement] == RoutineElements.values()[i]) {
                            currentRoutineSettings.currentElement = RoutineElements.values()[i];
                        }
                    }
                    assembleWindow();
                }
            }
        });
        routineButton.setText("\uD83C\uDF7D");
        achievementButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                if (currentPhase == GamePhase.ACTIONPHASE) {
                    currentMiddleDisplay = MiddleDisplay.ACHIEVEMENTS;
                    assembleWindow();
                }
            }
        });
        achievementButton.setText("\uD83C\uDF96");
        plannerButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                if (currentPhase == GamePhase.ACTIONPHASE) {
                    currentMiddleDisplay = MiddleDisplay.PLANNER;
                    assembleWindow();
                }
            }
        });
        plannerButton.setText("\uD83D\uDCC5");
        statsButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                if (currentPhase == GamePhase.ACTIONPHASE) {
                    currentMiddleDisplay = MiddleDisplay.STATS;
                    assembleWindow();
                }
            }
        });
        statsButton.setText("\uD83D\uDCCA");
		back.addActionListener(new Back());
		forward.addActionListener(new Forward());
		auto.addActionListener(new Auto());
		options.addActionListener(new Options());
		
		frame.addMouseListener(new MouseListener() {
			public void mouseClicked(MouseEvent e) {
				
			}
			public void mousePressed(MouseEvent e) {
				blockLoopUpgradeMovement = true;
			}
			public void mouseReleased(MouseEvent e) {
				
			}
			public void mouseEntered(MouseEvent e) {
				
			}
			public void mouseExited(MouseEvent e) {
				
			}
		});
		
		mainPanel.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke("F11"), "pressed");
		mainPanel.getActionMap().put("pressed", new FullscreenToggleAction(frame));
		mainPanel.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(KeyEvent.VK_E, 0), "LeftUp");
		mainPanel.getActionMap().put("LeftUp", new LeftUp());
		mainPanel.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(KeyEvent.VK_D, 0), "LeftDown");
		mainPanel.getActionMap().put("LeftDown", new LeftDown());
		mainPanel.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(KeyEvent.VK_R, 0), "RightUp");
		mainPanel.getActionMap().put("RightUp", new RightUp());
		mainPanel.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(KeyEvent.VK_F, 0), "RightDown");
		mainPanel.getActionMap().put("RightDown", new RightDown());
		mainPanel.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(KeyEvent.VK_Q, 0), "Swap");
		mainPanel.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(KeyEvent.VK_W, 0), "Swap");
		mainPanel.getActionMap().put("Swap", new Swap());
		mainPanel.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(KeyEvent.VK_A, 0), "Auto");
		mainPanel.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(KeyEvent.VK_S, 0), "Auto");
		mainPanel.getActionMap().put("Auto", new Auto());
		mainPanel.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(KeyEvent.VK_Z, 0), "Back");
		mainPanel.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(KeyEvent.VK_X, 0), "Back");
		mainPanel.getActionMap().put("Back", new Back());
		mainPanel.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke("SPACE"), "Forward");
		mainPanel.getActionMap().put("Forward", new Forward());
		mainPanel.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(KeyEvent.VK_O, 0), "Options");
		mainPanel.getActionMap().put("Options", new Options());
		
		Toolkit.getDefaultToolkit().addAWTEventListener( new AWTEventListener(){
            public void eventDispatched(AWTEvent e) {
                    if (e.getID() == 1004) {
                    	leftHalfPane.requestFocus();
                    	/*System.out.println("AWT:"+e);
                        System.out.println("(" + e.getID() + ")");*/
                    }
            }
        }, FocusEvent.FOCUS_EVENT_MASK | WindowEvent.WINDOW_FOCUS_EVENT_MASK | WindowEvent.WINDOW_EVENT_MASK);
		
		mainPanel.setLayout(null);
		headerDisplay.setLayout(new BoxLayout(headerDisplay, BoxLayout.X_AXIS));
		timeDisplay.setLayout(new BoxLayout(timeDisplay, BoxLayout.Y_AXIS));
		dateDisplay.setAlignmentX(Component.LEFT_ALIGNMENT);
		durationDisplay.setAlignmentX(Component.LEFT_ALIGNMENT);
		deadlineDisplay.setAlignmentX(Component.LEFT_ALIGNMENT);
		resourceDisplay.setLayout(new BoxLayout(resourceDisplay, BoxLayout.Y_AXIS));
		resourceDisplay.setAlignmentX(Component.RIGHT_ALIGNMENT);
		staminaDisplay.setStringPainted(true);
		staminaDisplay.setAlignmentX(Component.RIGHT_ALIGNMENT);
		staminaDisplay.setBackground(new Color(0, 180, 0));
		staminaDisplay.setForeground(new Color(220, 255, 220));
		BasicProgressBarUI ui = new BasicProgressBarUI() {
		    protected Color getSelectionBackground() {
		        return Color.white;
		    }
		    protected Color getSelectionForeground() {
		        return Color.black;
		    }
		};
		staminaDisplay.setUI(ui);
		healthDisplay.setStringPainted(true);
		healthDisplay.setAlignmentX(Component.RIGHT_ALIGNMENT);
		healthDisplay.setBackground(new Color(200, 0, 0));
		healthDisplay.setForeground(new Color(255, 220, 220));
		ui = new BasicProgressBarUI() {
		    protected Color getSelectionBackground() {
		        return Color.white;
		    }
		    protected Color getSelectionForeground() {
		        return Color.black;
		    }
		};
		healthDisplay.setUI(ui);
		sanityDisplay.setStringPainted(true);
		sanityDisplay.setAlignmentX(Component.RIGHT_ALIGNMENT);
		sanityDisplay.setBackground(new Color(0, 0, 200));
		sanityDisplay.setForeground(new Color(230, 230, 255));
		ui = new BasicProgressBarUI() {
		    protected Color getSelectionBackground() {
		        return Color.white;
		    }
		    protected Color getSelectionForeground() {
		        return Color.black;
		    }
		};
		sanityDisplay.setUI(ui);
		qiDisplay.setStringPainted(true);
		qiDisplay.setAlignmentX(Component.RIGHT_ALIGNMENT);
		qiDisplay.setBackground(new Color(0, 0, 0));
		qiDisplay.setForeground(new Color(230, 230, 230));
		ui = new BasicProgressBarUI() {
		    protected Color getSelectionBackground() {
		        return Color.white;
		    }
		    protected Color getSelectionForeground() {
		        return Color.black;
		    }
		};
		qiDisplay.setUI(ui);
		firstFiller.setAlignmentX(Component.RIGHT_ALIGNMENT);
		secondFiller.setAlignmentX(Component.RIGHT_ALIGNMENT);
		interfacePanel.setLayout(null);
		goalProgressBar.setStringPainted(true);
		goalProgressBar.setAlignmentX(Component.RIGHT_ALIGNMENT);
		goalProgressBar.setBackground(new Color(0, 0, 0));
		goalProgressBar.setForeground(new Color(230, 230, 230));
		ui = new BasicProgressBarUI() {
		    protected Color getSelectionBackground() {
		        return Color.white;
		    }
		    protected Color getSelectionForeground() {
		        return Color.black;
		    }
		};
		goalProgressBar.setUI(ui);
		goalProgressBar.setBorderPainted(false);
		StyleConstants.setFontFamily(leftFullAttributes, "Franklin Gothic Book");
		StyleConstants.setAlignment(leftFullAttributes, StyleConstants.ALIGN_JUSTIFIED);
		StyleConstants.setFontFamily(rightFullAttributes, "Franklin Gothic Book");
		StyleConstants.setAlignment(rightFullAttributes, StyleConstants.ALIGN_LEFT);
		StyleConstants.setFontFamily(storyAttributes, "Franklin Gothic Book");
		StyleConstants.setAlignment(storyAttributes, StyleConstants.ALIGN_JUSTIFIED);
		StyleConstants.setFontFamily(upgradeAttributes, "Franklin Gothic Book");
		StyleConstants.setAlignment(upgradeAttributes, StyleConstants.ALIGN_JUSTIFIED);
		leftFullArea.setParagraphAttributes(leftFullAttributes, true);
		rightFullArea.setParagraphAttributes(rightFullAttributes, true);
		storyArea.setParagraphAttributes(storyAttributes, true);
		upgradeDescriptionArea.setParagraphAttributes(upgradeAttributes, true);
		leftFullArea.setEditable(false);
		rightFullArea.setEditable(false);
		storyArea.setEditable(false);
		upgradeDescriptionArea.setEditable(false);
		upgradePanel.setLayout(null);
		upgradeContainer.setLayout(null);
		characters.setAlignmentX(Component.CENTER_ALIGNMENT);
		bottomPanel.setLayout(null);
		relationshipPanel.setLayout(new BoxLayout(relationshipPanel, BoxLayout.Y_AXIS));
		centerBottom.setLayout(null);
		stateSummary.setLayout(null);
		stateFields.setLayout(new BoxLayout(stateFields, BoxLayout.Y_AXIS));
		stateContents.setLayout(new BoxLayout(stateContents, BoxLayout.Y_AXIS));
		mainControls.setLayout(new BoxLayout(mainControls, BoxLayout.X_AXIS));
		buttonSet.setLayout(new GridBagLayout());
		attributePanel.setLayout(new BoxLayout(attributePanel, BoxLayout.Y_AXIS));
		meaning.setAlignmentX(Component.CENTER_ALIGNMENT);
		totalMeaning.setAlignmentX(Component.CENTER_ALIGNMENT);
		players.setAlignmentX(Component.CENTER_ALIGNMENT);
		characters.setAlignmentX(Component.CENTER_ALIGNMENT);
		attributeSpacer.setAlignmentX(Component.CENTER_ALIGNMENT);
		interfaceSwap.setFocusable(false);
		back.setFocusable(false);
		forward.setFocusable(false);
		auto.setFocusable(false);
		options.setFocusable(false);
        routineButton.setFocusable(false);
        achievementButton.setFocusable(false);
        plannerButton.setFocusable(false);
        statsButton.setFocusable(false);
		
		frame.add(mainPanel);
		mainPanel.add(headerDisplay);
		headerDisplay.add(timeDisplay);
		timeDisplay.add(dateDisplay);
		timeDisplay.add(durationDisplay);
		timeDisplay.add(deadlineDisplay);
		headerDisplay.add(Box.createHorizontalGlue());
		headerDisplay.add(resourceDisplay);
		resourceDisplay.add(staminaDisplay);
		resourceDisplay.add(healthDisplay);
		resourceDisplay.add(sanityDisplay);
		resourceDisplay.add(qiDisplay);
		resourceDisplay.add(firstFiller);
		resourceDisplay.add(secondFiller);
		
		mainPanel.add(interfacePanel);
		interfacePanel.add(leftHalfPane);
		interfacePanel.add(rightHalfPane);
		interfacePanel.add(leftFullPane);
		interfacePanel.add(rightFullPane);
		interfacePanel.add(goalProgressBar);
		for (int i = 0; i < 7; i++) {
			weekDayLabels[i] = new JTextPane();
			interfacePanel.add(weekDayLabels[i]);
		}
		
		for (int i = 0; i < 21; i++) {
			relationshipProgress[i] = new SpecialJProgressBar(0, 1000);
			attributeProgress[i] = new SpecialJProgressBar(0, 1000);
			attributeProgress[i].setStringPainted(true);
			attributeProgress[i].setForeground(attributeColors[i]);
			attributeProgress[i].setBackground(new Color(220, 220, 255));
			attributeProgress[i].setAlignmentX(Component.CENTER_ALIGNMENT);
			attributeProgress[i].setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);
			Color textColor = attributeTextColors[i];
			ui = new BasicProgressBarUI() {
			    protected Color getSelectionForeground() {
			        return textColor;
			    }
			    protected Color getSelectionBackground() {
			        return Color.black;
			    }
			};
			attributeProgress[i].setUI(ui);
			
			relationshipProgress[i].setStringPainted(true);
			relationshipProgress[i].setBackground(new Color(220, 220, 255));
			relationshipProgress[i].setForeground(attributeColors[i]);
			relationshipProgress[i].setAlignmentX(Component.CENTER_ALIGNMENT);
			ui = new BasicProgressBarUI() {
			    protected Color getSelectionForeground() {
			        return textColor;
			    }
			    protected Color getSelectionBackground() {
			        return Color.black;
			    }
			};
			relationshipProgress[i].setUI(ui);
			attributeBlanks[i] = new JLabel(" ");
			attributeBlanks[i].setAlignmentX(Component.CENTER_ALIGNMENT);
			relationshipBlanks[i] = new JLabel(" ");
			relationshipBlanks[i].setAlignmentX(Component.CENTER_ALIGNMENT);
			relationshipProgress[i].setToolTipText(currentPlaythrough.personNames[i]);
		}
		
		mainPanel.add(bottomPanel);
		bottomPanel.add(relationshipPanel);
		relationshipPanel.add(characters);
		for (int i = 0; i < 21; i++) {
			relationshipPanel.add(relationshipProgress[i]);
			relationshipPanel.add(relationshipBlanks[i]);
			if (i == 11) {
				relationshipPanel.add(players);
			}
		}
		
		stateFields.add(new Box.Filler(new Dimension(5, 5), new Dimension(5, 5), new Dimension(5, 5)));
		for (int i = 0; i < TimeSlot.values().length; i++) {
			timeSlotFields[i] = new JLabel(String.format("%20s", TimeSlot.values()[i].name + ":"));
			timeSlotFields[i].setAlignmentX(Component.RIGHT_ALIGNMENT);
			stateFields.add(timeSlotFields[i]);
			timeSlotFields[i].setForeground(new Color(0, 0, 0));
            int index = i;
            timeSlotFields[i].addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseEntered(java.awt.event.MouseEvent evt) {
                    Border blackLine = BorderFactory.createLineBorder(timeSlotFields[0].getForeground());
                    if (currentPhase == GamePhase.ACTIONPHASE) {
                        timeSlotFields[index].setBorder(blackLine);
                    }
                }

                public void mouseExited(java.awt.event.MouseEvent evt) {
                    //timeSlotFields[index].setBorder(BorderFactory.createEmptyBorder());
                    timeSlotFields[index].setBorder(null);
                }

                public void mouseClicked(MouseEvent e) {
                    if (currentPhase == GamePhase.ACTIONPHASE) {
                        currentMiddleDisplay = MiddleDisplay.ACTION;
                        currentTimeSlot = TimeSlot.values()[index];
                        currentPlaythrough.currentLocale.currentSpot = currentPlaythrough.weeklyActions[weekDayNumber()][index].ownSpot;
                        currentPlaythrough.currentLocale.currentSpot.currentAction = currentPlaythrough.weeklyActions[weekDayNumber()][index];
                        currentActionMenu = null;
                        currentSpotMenu = null;
                        setGoalBar(getVisibleGoal(getCurrentAction(), false), false);
                        assembleWindow();
                    }
                }
            });
		}
		staminaSummaryField.setAlignmentX(Component.RIGHT_ALIGNMENT);
		staminaSummaryField.setForeground(new Color(0, 0, 0));
		stateFields.add(staminaSummaryField);
		stateFields.add(new Box.Filler(new Dimension(5, 5), new Dimension(5, 5), new Dimension(5, 5)));
		for (int i = 0; i < RoutineSettings.values().length; i++) {
			routineFields[i] = new JLabel();
			routineFields[i].setAlignmentX(Component.RIGHT_ALIGNMENT);
			stateFields.add(routineFields[i]);
			routineFields[i].setForeground(new Color(0, 0, 0));
            int index = i;
            routineFields[i].addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseEntered(java.awt.event.MouseEvent evt) {
                    Border blackLine = BorderFactory.createLineBorder(timeSlotFields[0].getForeground());
                    if (currentPhase == GamePhase.ACTIONPHASE) {
                        routineFields[index].setBorder(blackLine);
                    }
                }

                public void mouseExited(java.awt.event.MouseEvent evt) {
                    //routineFields[index].setBorder(BorderFactory.createEmptyBorder());
                    routineFields[index].setBorder(null);
                }

                public void mouseClicked(MouseEvent e) {
                    if (currentPhase == GamePhase.ACTIONPHASE) {
                        currentMiddleDisplay = MiddleDisplay.ROUTINE;
                        currentRoutineSettings = RoutineSettings.values()[index];
                        currentRoutineSettings.currentElement = currentPlaythrough.weeklyRoutine[weekDayNumber()][index];
                        currentRoutineMenu = null;
                        currentRoutineElementMenu = null;
                        assembleWindow();
                    }
                }
            });
		}
		bottomPanel.add(centerBottom);
		bottomPanel.add(attributePanel);
		attributePanel.add(meaning);
		for (int i = 0; i < 21; i++) {
			attributePanel.add(attributeProgress[i]);
			attributePanel.add(attributeBlanks[i]);
			if (i == 11) {
				attributePanel.add(attributeSpacer);
			}
		}
		centerBottom.add(stateSummary);
		stateSummary.add(stateFields);
		stateFields.add(Box.createVerticalGlue());
		stateFields.add(Box.createHorizontalGlue());
		stateSummary.add(stateContents);
		stateContents.add(new Box.Filler(new Dimension(5, 5), new Dimension(5, 5), new Dimension(5, 5)));
		for (int i = 0; i < TimeSlot.values().length; i++) {
			timeSlotContents[i] = new JLabel();
			timeSlotContents[i].setAlignmentX(Component.LEFT_ALIGNMENT);
			stateContents.add(timeSlotContents[i]);
			timeSlotContents[i].setForeground(new Color(0, 0, 0));
		}
		staminaSummaryContents.setAlignmentX(Component.LEFT_ALIGNMENT);
		staminaSummaryContents.setForeground(new Color(0, 0, 0));
		stateContents.add(staminaSummaryContents);
		stateContents.add(new Box.Filler(new Dimension(5, 5), new Dimension(5, 5), new Dimension(5, 5)));
		for (int i = 0; i < RoutineSettings.values().length; i++) {
			routineContents[i] = new JLabel();
			routineContents[i].setAlignmentX(Component.LEFT_ALIGNMENT);
			stateContents.add(routineContents[i]);
			routineContents[i].setForeground(new Color(0, 0, 0));
		}
		stateContents.add(Box.createVerticalGlue());
		centerBottom.add(mainControls);
		mainControls.add(new Box.Filler(new Dimension(10, 10), new Dimension(10, 10), new Dimension(10, 10)));
		mainControls.add(buttonSet);
		buttonSet.setLayout(null);
		//buttonSet.add(interfaceSwap);
		buttonSet.add(back);
		buttonSet.add(forward);
		buttonSet.add(auto);
		buttonSet.add(options);
        buttonSet.add(routineButton);
        routineButton.setToolTipText("Routine");
        buttonSet.add(achievementButton);
        achievementButton.setToolTipText("Achievements");
        buttonSet.add(statsButton);
        statsButton.setToolTipText("Stats");
        buttonSet.add(plannerButton);
        plannerButton.setToolTipText("Planner");
		/*GridBagConstraints constraints = new GridBagConstraints();
		constraints.fill = GridBagConstraints.HORIZONTAL;
		constraints.gridx = 0;
		constraints.gridy = 0;
		constraints.gridwidth = 3;
		constraints.weighty = 0.3;
		constraints.insets = new Insets(0, 0, 3, 0);
		constraints.anchor = GridBagConstraints.PAGE_START;
		buttonSet.add(interfaceSwap, constraints);
		constraints.gridy = 1;
		constraints.weightx = 0.01;
		constraints.weighty = 1.0;
		constraints.ipadx = 0;
		constraints.gridwidth = 1;
		constraints.fill = GridBagConstraints.VERTICAL;
		constraints.insets = new Insets(0, 0, 0, 6);
		constraints.anchor = GridBagConstraints.LINE_START;
		buttonSet.add(back, constraints);
		constraints.gridx = 1;
		constraints.weightx = 1.0;
		constraints.fill = GridBagConstraints.BOTH;
		constraints.insets = new Insets(0, 0, 0, 0);
		constraints.anchor = GridBagConstraints.CENTER;
		buttonSet.add(forward, constraints);
		constraints.gridx = 2;
		constraints.weightx = 0.01;
		constraints.fill = GridBagConstraints.VERTICAL;
		constraints.insets = new Insets(0, 6, 0, 0);
		constraints.anchor = GridBagConstraints.LINE_END;
		buttonSet.add(auto, constraints);
		constraints.gridx = 0;
		constraints.gridy = 2;
		constraints.gridwidth = 3;
		constraints.weighty = 0.3;
		constraints.fill = GridBagConstraints.HORIZONTAL;
		constraints.anchor = GridBagConstraints.PAGE_END;
		constraints.insets = new Insets(3, 0, 0, 0);
		buttonSet.add(options, constraints);*/
		mainControls.add(new Box.Filler(new Dimension(10, 10), new Dimension(10, 10), new Dimension(10, 10)));
		
		storyPanel.add(storyPane);
		storyPanel.setLayout(null);
		storyPanel.add(storyContainer);
		storyContainer.add(storyBackground);
		
		upgradePanel.add(upgradeContainer);
		upgradePanel.add(upgradeArt);
		upgradeArt.add(upgradeArtBackground);
		upgradePanel.add(upgradeDescriptionPane);
		
		leftAreaPainter = new DefaultHighlighter.DefaultHighlightPainter(currentPlaythrough.highlightColor);
		storyAreaPainter = new DefaultHighlighter.DefaultHighlightPainter(currentPlaythrough.highlightColor);
		
		levelRequirements[0] = BILLION.multiply(HUNDRED);
		earlyLevelSums[0] = BigInteger.ZERO;
		BigInteger sum = BigInteger.ZERO;
		BigInteger currentRequirement = levelRequirements[0];
		for (int i = 1; i < earlyLevelSums.length; i++) {
			sum = sum.add(currentRequirement);
			currentRequirement = nextLevel(currentRequirement);
			if (i < levelRequirements.length) {
				levelRequirements[i] = currentRequirement;
			}
			earlyLevelSums[i] = sum;
		}
		
		
		currentTimeSlot = TimeSlot.MORNING;
		for (int i = 0; i < Locale.values().length; i++) {
			if (Locale.values()[i].allSpots.length > 0) {
				Locale.values()[i].currentSpot = Locale.values()[i].allSpots[0];
				for (int j = 0; j < Locale.values()[i].allSpots.length; j++) {
					if (Locale.values()[i].allSpots[j].allActions.length > 0) {
						Locale.values()[i].allSpots[j].currentAction = Locale.values()[i].allSpots[j].allActions[0];
					}
				}
			}
		}
		currentPlaythrough.currentLocale.currentSpot = getViableSpots(currentPlaythrough.currentLocale, currentTimeSlot)[0];
		currentPlaythrough.currentLocale.currentSpot.currentAction = getVisibleActions(currentPlaythrough.currentLocale.currentSpot, currentTimeSlot)[0];
		for (int i = 0; i < TimeSlot.values().length; i++) {
			currentPlaythrough.weeklyActions[weekDayNumber()][i] = getAllowedActions(getViableSpots(currentPlaythrough.currentLocale, TimeSlot.values()[i])[0], TimeSlot.values()[i])[0];
		}
		setGoalBar(getVisibleGoal(getDisplayedAction(), true), true);
		currentRoutineSettings = RoutineSettings.values()[0];
		for (int i = 0; i < RoutineSettings.values().length; i++) {
			currentPlaythrough.weeklyRoutine[weekDayNumber()][i] = getAllowedRoutineElements(RoutineSettings.values()[i])[0];
			RoutineSettings.values()[i].currentElement = currentPlaythrough.weeklyRoutine[weekDayNumber()][i];
		}
        if (currentPlaythrough.currentOptions.length < OptionSettings.values().length) {
            OptionElements[] newOptions = new OptionElements[OptionSettings.values().length];
            for (int i = 0; i < currentPlaythrough.currentOptions.length; i++) {
                newOptions[i] = currentPlaythrough.currentOptions[i];
            }
            currentPlaythrough.currentOptions = newOptions;
        }
        if (currentPlaythrough.currentOptions.length < OptionSettings.values().length) {
            OptionElements[] newOptions = new OptionElements[OptionSettings.values().length];
            for (int i = 0; i < currentPlaythrough.currentOptions.length; i++) {
                newOptions[i] = currentPlaythrough.currentOptions[i];
            }
            currentPlaythrough.currentOptions = newOptions;
        }
		for (int i = 0; i < OptionSettings.values().length; i++) {
			if (i != OptionSettings.SAVES.index && currentPlaythrough.currentOptions[i] == null) {
				currentPlaythrough.currentOptions[i] = OptionSettings.values()[i].allElements[0];
			}
		}
		
		currentPlaythrough = currentPlaythrough.loadFromFile("currentSave");
		currentPlaythrough.refreshGoals();
		lightTheme();
		if (currentPlaythrough.loopOver) {
			currentPhase = GamePhase.NEXTLOOPPHASE;
			currentMiddleDisplay = MiddleDisplay.NEXTLOOP;
			blackTheme();
		} else {
			currentPhase = GamePhase.ACTIONPHASE;
		}
		
		for (int i = 0; i < 21; i++) {
			addAttributeExperience(i, BigInteger.ZERO, true);
			addRelationshipExperience(i, BigInteger.ZERO, true);
		}
		Game.checkScheduleRoutineValidity(false);
		addStamina(BigInteger.ZERO, true);
		addHealth(BigInteger.ZERO, true);
		addSanity(BigInteger.ZERO, true);
		addQi(BigInteger.ZERO, true);
		
		
		for (int i = 0; i < 21; i++) {
			attributeProgress[i].setString(attributeNames[i] + " 0.000");
			relationshipProgress[i].setString(currentPlaythrough.personNames[i] + " 0.000");
		}
		
		upgradeBaseCosts[0] = one(1);
		upgradeBaseCosts[1] = one(10);
		upgradeBaseCosts[2] = one(5);
		upgradeBaseCosts[3] = one(10);
		upgradeBaseCosts[4] = one(5);
        upgradeBaseCosts[5] = one(5);
        upgradeBaseCosts[21] = one(5);
		upgradeBaseCosts[24] = one(10);
		upgradeBaseCosts[26] = ten(2);
		upgradeMaxLevels[26] = 1;
		for (int i = 0; i < Game.Achievement.values().length; i++) {
			Game.Achievement.values()[i].lastRecordedScore = Game.getScore(currentPlaythrough, Game.Achievement.values()[i]);
			todayMOL = todayMOL.add(Game.Achievement.values()[i].lastRecordedScore);
			Game.Achievement.values()[i].ownCategory.lastRecordedScore = Achievement.values()[i].ownCategory.lastRecordedScore.add(Game.Achievement.values()[i].lastRecordedScore);
		}
		checkMOL();
		nextLoopButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				selectedUpgrade = 42;
				nextLoopArmed = true;
				upgradeImageAlpha = -30f;
				assembleWindow();
			}
		});
		upgradeResetButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				clearAll();
				assembleWindow();
			}
		});
		
		frame.addComponentListener(new ComponentAdapter() {
		    public void componentResized(ComponentEvent componentEvent) {
		    	if (componentEvent.getID() == ComponentEvent.COMPONENT_RESIZED) {
	    			assembleWindow();
	    			frame.validate();
	    			frame.repaint();
		    	}
		    }
		});
		
		Epoch.NEWLOOP.defaultMusic = Music.WIND;
		Epoch.DAILYLIFE.defaultMusic = Music.ADVERTISING;
		Epoch.ABDUCTION.defaultMusic = Music.REPORTING;
		Epoch.PURSUIT.defaultMusic = Music.NEON;
		Epoch.NEWCITY.defaultMusic = Music.WAY;

		Epoch.DEAD.defaultMusic = Music.SILENCE;
		currentMusic = getEpoch().defaultMusic;

		autoTask = new Task();
		autoTask.execute();
		bgmTask = new BGM();
		bgmTask.execute();
		
		Goal[] goalsFound = new Goal[totalGoals];
		for (int i = 0; i < Action.values().length; i++) {
			if (!Action.values()[i].forbidden) {
				if (Action.values()[i].ownGoal != null) {
					if (Action.values()[i].ownGoal.index >= totalGoals) {
						System.out.println("WARNING: goal array not long enough (must be length " + (Action.values()[i].ownGoal.index+1) + ")");
						break;
					}
					if (goalsFound[Action.values()[i].ownGoal.index] == null) {
						goalsFound[Action.values()[i].ownGoal.index] = Action.values()[i].ownGoal;
					} else if (goalsFound[Action.values()[i].ownGoal.index] != Action.values()[i].ownGoal) {
						System.out.println("WARNING: duplicate goals at index " + Action.values()[i].ownGoal.index);
					}
				}
				if (Action.values()[i].ownSpot == null) {
					System.out.println("WARNING: no spot found for " + Action.values()[i].name);
				}
			}
		}
		for (int i = 0; i < Spot.values().length; i++) {
			if (Spot.values()[i].ownLocale == null) {
				System.out.println("WARNING: no locale found for " + Spot.values()[i].name);
			}
		}
		for (int i = 0; i < RoutineElements.values().length; i++) {
			if (RoutineElements.values()[i].ownRoutineSettings == null) {
				System.out.println("WARNING: no setting found for " + RoutineElements.values()[i].name);
			}
		}
        for (int i = 0; i < Epoch.values().length; i++) {
            if (Epoch.values()[i].defaultMusic == null) {
                System.out.println("WARNING: no default music found for " + Epoch.values()[i]);
            }
        }
		
		int epoch = 5;
		BigInteger[] opportunityCosts = new BigInteger[]{};
		BigInteger relationshipValue = BigInteger.ZERO;
		BigInteger attributeValue = BigInteger.ZERO;
		BigInteger goalValue = BigInteger.ZERO;
		if (epoch == 1) {
			opportunityCosts = new BigInteger[]{BigInteger.valueOf(1500), BigInteger.valueOf(1000), BigInteger.valueOf(1000), BigInteger.valueOf(1500), BigInteger.valueOf(2000), BigInteger.valueOf(3000)};
			relationshipValue = BigInteger.valueOf(5);
			attributeValue = BigInteger.valueOf(16);
			goalValue = BigInteger.valueOf(79);
		} else if (epoch == 2) {
			opportunityCosts = new BigInteger[]{BigInteger.valueOf(1800), BigInteger.valueOf(1200), BigInteger.valueOf(1200), BigInteger.valueOf(1800), BigInteger.valueOf(2400), BigInteger.valueOf(3600)};
			relationshipValue = BigInteger.valueOf(19);
			attributeValue = BigInteger.valueOf(31);
			goalValue = BigInteger.valueOf(50);
		} else if (epoch == 3) {
			opportunityCosts = new BigInteger[]{BigInteger.valueOf(3000), BigInteger.valueOf(3000), BigInteger.valueOf(3000), BigInteger.valueOf(3000), BigInteger.valueOf(3000), BigInteger.valueOf(3000)};
			relationshipValue = BigInteger.valueOf(26);
			attributeValue = BigInteger.valueOf(44);
			goalValue = BigInteger.valueOf(30);
		} else if (epoch == 4) {
			opportunityCosts = new BigInteger[]{ten(3), ten(2), ten(2), ten(3), ten(4), ten(6)};
			relationshipValue = BigInteger.valueOf(30);
			attributeValue = BigInteger.valueOf(54);
			goalValue = BigInteger.valueOf(16);
		} else if (epoch == 5) {
			opportunityCosts = new BigInteger[]{one(44), one(37), one(37), one(44), one(50), one(62)};
			relationshipValue = BigInteger.valueOf(30);
			attributeValue = BigInteger.valueOf(40);
			goalValue = BigInteger.valueOf(30);
		}
		for (int i = 0; i < Action.values().length; i++) {
			Action a = Action.values()[i];
			BigInteger staminaSpent = a.baseCost;
			if (epoch == 2 || epoch == 5) {
				staminaSpent = staminaSpent.multiply(BigInteger.valueOf(3)).divide(BigInteger.valueOf(2));
			} else if (epoch == 3) {
				staminaSpent = staminaSpent.divide(BigInteger.valueOf(2));
			}
			BigInteger relationshipAdded = staminaSpent;
			BigInteger attributeAdded = staminaSpent;
			BigInteger goalAdded = staminaSpent;
			if (a.relationship < 0) {
				relationshipAdded = BigInteger.ZERO;
			}
			if (a.attribute < 0) {
				attributeAdded = BigInteger.ZERO;
			}
			if (a.ownGoal == null) {
				goalAdded = BigInteger.ZERO;
			}
			BigInteger value = BigInteger.ZERO;
			BigInteger cost = BigInteger.ZERO;
			boolean hidden = a.forbidden || a.previousAction != null;
			if (epoch == 1) {
				if (a.attribute == 2 || a.attribute == 3 || a.relationship == 2 || a.relationship == 3) {
					hidden = true;
				}
			} else if (epoch == 2) {
				if (a.relationship == 3 || a.attribute == 3) {
					hidden = true;
				}
			} else if (epoch == 3) {
				if (a.relationship == 5) {
					hidden = true;
				}
				cost = cost.add(a.financesCost.multiply(BigInteger.valueOf(25)));
			} else if (epoch == 4) {
				if (a.relationship == 5) {
					hidden = true;
				}
				cost = cost.add(a.financesCost.multiply(HUNDRED).divide(BigInteger.valueOf(8)));
				cost = cost.add(a.healthCost.multiply(BigInteger.valueOf(5)));
			} else if (epoch == 5) {
				if (a.relationship == 5) {
					hidden = true;
				}
				cost = cost.add(a.financesCost.multiply(HUNDRED).divide(BigInteger.valueOf(16)));
				BigInteger assessedHealth = a.healthCost.subtract(BigInteger.valueOf(1120)).multiply(BigInteger.valueOf(5));
				if (assessedHealth.compareTo(BigInteger.valueOf(0)) > 0) {
					cost = cost.add(assessedHealth);
				}
			}
			if (!hidden) {
				if (relationshipAdded.compareTo(BigInteger.ZERO) < 0) {
					relationshipAdded = BigInteger.ZERO;
				}
				if (attributeAdded.compareTo(BigInteger.ZERO) < 0) {
					attributeAdded = BigInteger.ZERO;
				}
				if (goalAdded.compareTo(BigInteger.ZERO) < 0) {
					goalAdded = BigInteger.ZERO;
				}
				if (epoch == 1) {
					if (a.attribute == 5) {
						attributeAdded = BigInteger.ZERO;
					}
					if (a.relationship == 5) {
						relationshipAdded = BigInteger.ZERO;
					}
					if (a.relationship == 1) {
						relationshipAdded = relationshipAdded.divide(BigInteger.valueOf(2));
					}
					if (a.attribute == 1) {
						attributeAdded = attributeAdded.divide(BigInteger.valueOf(2));
					}
				} else if (epoch == 2) {
					if (a.ownGoal != null) {
						goalAdded = goalAdded.add(BigInteger.valueOf(1000));
					}
					if (a.attribute == 5) {
						attributeAdded = BigInteger.ZERO;
					}
					if (a.relationship == 5) {
						relationshipAdded = BigInteger.ZERO;
					}
				} else if (epoch == 3) {
					if (a.relationship >= 0) {
						relationshipAdded = relationshipAdded.add(BigInteger.valueOf(5000));
					}
				} else if (epoch == 4) {
					if (a.attribute >= 0) {
						attributeAdded = attributeAdded.add(BigInteger.valueOf(1500));
					}
					if (a.relationship >= 0) {
						relationshipAdded = relationshipAdded.add(BigInteger.valueOf(1500));
					}
					if (a.ownGoal != null) {
						goalAdded = goalAdded.add(BigInteger.valueOf(1500));
					}
					goalAdded = goalAdded.multiply(BigInteger.valueOf(3)).divide(BigInteger.valueOf(2));
				} else if (epoch == 5) {
					if (staminaSpent.compareTo(BigInteger.valueOf(4000)) >= 0) {
						if (a.attribute >= 0) {
							attributeAdded = attributeAdded.add(hundred(1));
						}
						if (a.ownGoal != null) {
							goalAdded = goalAdded.add(hundred(1));
						}
					} else {
						if (a.attribute >= 0) {
							attributeAdded = attributeAdded.add(BigInteger.valueOf(1500));
						}
						if (a.relationship >= 0) {
							relationshipAdded = relationshipAdded.add(BigInteger.valueOf(1500));
						}
						if (a.ownGoal != null) {
							goalAdded = goalAdded.add(BigInteger.valueOf(1500));
						}
					}
				}
				relationshipAdded = relationshipAdded.multiply(a.relationshipMultiplier);
				attributeAdded = attributeAdded.multiply(a.attributeMultiplier);
				goalAdded = goalAdded.multiply(a.goalMultiplier);
				if (a.isBartending()) {
					attributeAdded = attributeAdded.multiply(BigInteger.valueOf(250)).divide(HUNDRED);
					goalAdded = BigInteger.ZERO;
				}
				value = value.add(relationshipAdded.multiply(relationshipValue)).add(attributeAdded.multiply(attributeValue));
				BigInteger divisor = opportunityCosts[a.availableSlot].add(staminaSpent);
				divisor = divisor.add(cost);
				//System.out.println(a.name + ": " + format(value.divide(divisor)) + " + " + format(goalAdded.multiply(goalValue).divide(divisor)) + " = " + format(value.add(goalAdded.multiply(goalValue)).divide(divisor)));
			}
		}
		
		ToolTipManager.sharedInstance().setDismissDelay(Integer.MAX_VALUE);
		frame.setSize(new Dimension(800, 480));
		frame.setVisible(true);
		timeDisplay.setBackground(new Color(0, 0, 0, 0));
		timeDisplay.setOpaque(false);
		headerDisplay.setBackground(new Color(0, 0, 0, 0));
		headerDisplay.setOpaque(false);
		dateDisplay.setBackground(new Color(0, 0, 0, 0));
		dateDisplay.setOpaque(false);
		durationDisplay.setBackground(new Color(0, 0, 0, 0));
		durationDisplay.setOpaque(false);
		deadlineDisplay.setBackground(new Color(0, 0, 0, 0));
		deadlineDisplay.setOpaque(false);
		resourceDisplay.setBackground(new Color(0, 0, 0, 0));
		resourceDisplay.setOpaque(false);
		interfacePanel.setBackground(new Color(0, 0, 0, 0));
		interfacePanel.setOpaque(false);
		storyPanel.setBackground(new Color(0, 0, 0, 0));
		storyPanel.setOpaque(false);
		storyContainer.setBackground(new Color(0, 0, 0, 0));
		storyContainer.setOpaque(false);
		upgradePanel.setBackground(new Color(0, 0, 0, 0));
		upgradePanel.setOpaque(false);
		upgradeArt.setBackground(new Color(0, 0, 0, 0));
		upgradeArt.setOpaque(false);
		upgradeContainer.setBackground(new Color(0, 0, 0, 0));
		upgradeContainer.setOpaque(false);
		bottomPanel.setBackground(new Color(0, 0, 0, 0));
		bottomPanel.setOpaque(false);
		relationshipPanel.setBackground(new Color(0, 0, 0, 0));
		relationshipPanel.setOpaque(false);
		characters.setBackground(new Color(0, 0, 0, 0));
		characters.setOpaque(false);
		players.setBackground(new Color(0, 0, 0, 0));
		players.setOpaque(false);
		centerBottom.setBackground(new Color(0, 0, 0, 0));
		centerBottom.setOpaque(false);
		stateSummary.setBackground(new Color(0, 0, 0, 0));
		stateSummary.setOpaque(false);
		stateFields.setBackground(new Color(0, 0, 0, 0));
		stateFields.setOpaque(false);
		stateContents.setBackground(new Color(0, 0, 0, 0));
		stateContents.setOpaque(false);
		mainControls.setBackground(new Color(0, 0, 0, 0));
		mainControls.setOpaque(false);
		buttonSet.setBackground(new Color(0, 0, 0, 0));
		buttonSet.setOpaque(false);
		attributePanel.setBackground(new Color(0, 0, 0, 0));
		attributePanel.setOpaque(false);
		meaning.setBackground(new Color(0, 0, 0, 0));
		meaning.setOpaque(false);
		totalMeaning.setBackground(new Color(0, 0, 0, 0));
		totalMeaning.setOpaque(false);
		setTransparent();
        if (currentPlaythrough.currentDay == 0) {
           currentPlaythrough.NewDayContents.attach("This game contains explicit textual and visual depictions of sex, violence, and drug use.  It should not be played by the underage and by those unable to distinguish fantasy from reality.");
        }
		assembleWindow();
		upgradeImageAlpha = 0.9f;
	}

    public static Playthrough selectSave(int index) {
        FileInputStream fin = null;
        ObjectInputStream ois = null;
        try {

            String path = Playthrough.getSaveFolderPath();
            File f = new File(path);
            File[] matchingFiles = f.listFiles(new FilenameFilter() {
                public boolean accept(File dir, String name) {
                    return name.endsWith("sav");
                }
            });
            if (matchingFiles == null) {
                matchingFiles = new File[0];
            }
            if (index < matchingFiles.length) {
                fin = new FileInputStream(matchingFiles[index]);
                ois = new ObjectInputStream(fin);
                Playthrough result = (Playthrough) ois.readObject();
                result.repair();
                return result;
            } else {
                return new Playthrough();
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        } finally {
            if (fin != null) {
                try {
                    fin.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }

            if (ois != null) {
                try {
                    ois.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
        return new Playthrough();
    }

    public static void mainAction() {
        verifying = false;
        deleting = false;
        if (currentMiddleDisplay == MiddleDisplay.STORY && currentScene != null && sceneProgress+1 < currentScene.screens.length) {
			sceneProgress++;
			autoTask.clock = 100;
			assembleWindow();
        } else if (currentPhase == GamePhase.NEXTLOOPPHASE) {
            currentMiddleDisplay = MiddleDisplay.NEXTLOOP;
            upgradeImageAlpha = -30f;
            assembleWindow();
        } else {
            upgradeButtons = null;
			sceneProgress = 0;
            if (!autoOn) {
                skippingStory = false;
            }
            if (currentGoal != null) {
                currentGoal.barDisplay = currentGoal.barEnd;
            }
            recentCompletion = currentMiddleDisplay == MiddleDisplay.STORY;
            resetStopReason();
            if (currentMiddleDisplay == MiddleDisplay.ACTION && currentPlaythrough.currentDay == 0 && currentPlaythrough.loops == 0 && getDisplayedAction() == Action.SLEEPIN) {
                add(RIGHT, "\n\nBefore continuing, select 'Daydream'.");
            } else {
                moveForward();
                autoTask.clock = 0;
            }
        }
        mainPanel.repaint();
    }
	
	public static void verify() {
		verifying = false;
		Playthrough blankSlate = new Playthrough();
		for (int i = 0; i < currentPlaythrough.currentOptions.length; i++) {
			blankSlate.currentOptions[i] = currentPlaythrough.currentOptions[i];
		}
		blankSlate.sfxVolume = currentPlaythrough.sfxVolume;
		blankSlate.bgmVolume = currentPlaythrough.bgmVolume;
		currentPlaythrough = blankSlate;
		currentPlaythrough.sendStats();
		currentPlaythrough.refreshGoals();
		boolean onTrack = true;
		String instructions = "";
		Action[] yesterdayActions = new Action[]{Action.SLEEPIN, Action.HANGOUT, Action.PLAYTOGETHER, Action.GETBULLIED, Action.SLEEP, Action.SLEEPDEEPLY};
		RoutineElements[] yesterdayRoutine = new RoutineElements[RoutineSettings.values().length];
		for (int i = 0; i < RoutineSettings.values().length; i++) {
			yesterdayRoutine[i] = RoutineSettings.values()[i].allElements[0];
		}
		boolean victory = false;
		int winLoop = 0;
		int winDay = 0;
		while ((currentPlaythrough.loops < tested.loops || currentPlaythrough.currentDay < tested.currentDay) && onTrack) {
			currentPlaythrough.sendStats();
			String dayHeader = "Day " + (currentPlaythrough.currentDay+1) + ":";
			Playthrough subTest = tested;
			if (currentPlaythrough.loops < tested.loops) {
				subTest = tested.progress.archivedLoops[currentPlaythrough.loops];
			}
			if (currentPlaythrough.loopOver) {
				instructions += "\n==END OF LOOP " + (currentPlaythrough.loops+1) + "==";
				for (int i = 0; i < currentPlaythrough.upgradeLevels.length; i++) {
					if (subTest.upgradeLevels[i] > 0) {
						if (upgradeAllowed(currentPlaythrough, i)) {
							instructions += "\n  Buy Lv " + subTest.upgradeLevels[i] + " " + upgradeNames[i];
							currentPlaythrough.upgradeLevels[i] = subTest.upgradeLevels[i];
						} else {
                            instructions += "\n  DESYNCH: Unable to buy " + upgradeNames[i];
							onTrack = false;
						}
					} else {
						if (currentPlaythrough.upgradeLevels[i] > 0) {
							instructions += "\n  Reset " + upgradeNames[i] + " to Lv 0";
						}
						currentPlaythrough.upgradeLevels[i] = 0;
					}
				}
				checkMOL();
				if (remainingMOL.compareTo(BigInteger.ZERO) < 0) {
					onTrack = false;
                    instructions += "\n  DESYNCH: Insufficient MoL";
				}
				if (onTrack) {
					instructions += "\n";
					startNextLoop();
					yesterdayActions = new Action[]{Action.SLEEPIN, Action.HANGOUT, Action.PLAYTOGETHER, Action.GETBULLIED, Action.SLEEP, Action.SLEEPDEEPLY};
					for (int i = 0; i < RoutineSettings.values().length; i++) {
						yesterdayRoutine[i] = RoutineSettings.values()[i].allElements[0];
					}
				}
			} else {
				int week = (currentPlaythrough.currentDay+5)/7;
				int day = (currentPlaythrough.currentDay+5)%7;
				Action[][] comparedAction = new Action[0][0];
				RoutineElements[][] comparedRoutine = new RoutineElements[0][0];
				if (week < subTest.archivedActions.length) {
					comparedAction = subTest.archivedActions[week];
					comparedRoutine = subTest.archivedRoutine[week];
				} else {
					comparedAction = subTest.weeklyActions;
					comparedRoutine = subTest.weeklyRoutine;
				}
                //System.out.println(dayHeader);
				for (int i = 0; i < RoutineSettings.values().length; i++) {
                    //System.out.println(comparedRoutine[day][i]);
					if (routineElementAllowed(comparedRoutine[day][i])) {
						if (comparedRoutine[day][i] != yesterdayRoutine[i]) {
							instructions += "\n" + dayHeader + " switch " + RoutineSettings.values()[i].name + " to " + comparedRoutine[day][i].name;
							String newHeader = "";
							for (int j = 0; j < dayHeader.length(); j++) {
								newHeader += " ";
							}
							dayHeader = newHeader;
						}
						currentPlaythrough.weeklyRoutine[day][i] = comparedRoutine[day][i];
						yesterdayRoutine[i] = comparedRoutine[day][i];
					} else {
                        instructions += "\nDESYNCH: Unable to use " + comparedRoutine[day][i].name;
						onTrack = false;
					}
				}
				for (int i = 0; i < 6; i++ ) {
                    //System.out.println(comparedAction[day][i]);
					if (actionIsAllowed(comparedAction[day][i], TimeSlot.values()[i])) {
						if (comparedAction[day][i] != yesterdayActions[i]) {
							instructions += "\n" + dayHeader + " switch " + TimeSlot.values()[i].name + " action to " + comparedAction[day][i].name;
							String newHeader = "";
							for (int j = 0; j < dayHeader.length(); j++) {
								newHeader += " ";
							}
							dayHeader = newHeader;
						}
						if (!victory && comparedAction[day][i] == Action.RENDEZVOUS) {
							victory = true;
							winLoop = currentPlaythrough.loops+1;
							winDay = currentPlaythrough.currentDay+1;
							instructions += "\nReunited with Tanaka on Loop " + winLoop + ", Day " + winDay;
						}
						currentPlaythrough.weeklyActions[day][i] = comparedAction[day][i];
						yesterdayActions[i] = comparedAction[day][i];
						resolveAction(currentPlaythrough.weeklyActions[day][i], true, true);
					} else {
						onTrack = false;
                        instructions += "\nDESYNCH: Unable to use " + comparedAction[day][i].name;
					}
				}
				startNextDay();
			}
		}
		slowDown = false;
		autoTask.lastNewDay = 0;
		tested = null;
		currentPlaythrough.sendStats();
		if (currentPlaythrough.loopOver) {
			blackTheme();
			currentMiddleDisplay = MiddleDisplay.OPTIONS;
			currentPhase = GamePhase.NEXTLOOPPHASE;
		} else {
			lightTheme();
			currentMiddleDisplay = MiddleDisplay.NEWDAY;
			currentPhase = GamePhase.ACTIONPHASE;
		}
		currentPlaythrough.refreshGoals();
		checkScheduleRoutineValidity(false);
		currentSpotMenu = null;
		currentActionMenu = null;
		currentRoutineMenu = null;
		currentRoutineElementMenu = null;
		currentAchievementMenu = null;
		currentAchievementCategoryMenu = null;
		currentOptionMenu = null;
		currentOptionElementMenu = null;
		currentStatsMenu = null;
		currentStatsCategoryMenu = null;
		addStamina(BigInteger.ZERO, true);
		addHealth(BigInteger.ZERO, true);
		addSanity(BigInteger.ZERO, true);
		addQi(BigInteger.ZERO, true);
		for (int i = 0; i < 21; i++) {
			addAttributeExperience(i, BigInteger.ZERO, true);
			addRelationshipExperience(i, BigInteger.ZERO, true);
		}
		for (int i = 0; i < Action.values().length; i++) {
			updateActionInfo(Action.values()[i]);
		}
		for (int i = 0; i < Achievement.values().length; i++) {
			Achievement.values()[i].lastRecordedDisplay = null;
			Achievement.values()[i].lastRecordedScore = BigInteger.ZERO;
		}
		for (int i = 0; i < AchievementCategory.values().length; i++) {
			Achievement.values()[i].lastRecordedScore = BigInteger.ZERO;
		}
		todayMOL = BigInteger.ZERO;
		for (int i = 0; i < Game.Achievement.values().length; i++) {
			Game.Achievement.values()[i].lastRecordedScore = Game.getScore(currentPlaythrough, Game.Achievement.values()[i]);
			todayMOL = todayMOL.add(Game.Achievement.values()[i].lastRecordedScore);
			Game.Achievement.values()[i].ownCategory.lastRecordedScore = Achievement.values()[i].ownCategory.lastRecordedScore.add(Game.Achievement.values()[i].lastRecordedScore);
		}
		checkMOL();
		setTransparent();
		assembleWindow();
		rightFullArea.setText("");
		if (onTrack) {
			instructions = (currentPlaythrough.currentDay+1) + " days" + instructions;
			if (currentPlaythrough.loops > 0) {
				instructions = currentPlaythrough.loops + " loops plus " + instructions;
			}
			instructions = "Playthrough consists of " + instructions;
			new File(Playthrough.getSaveFolderPath() + "instructions.txt").delete();
			try {
				FileWriter instructionWriter = new FileWriter(Playthrough.getSaveFolderPath() + "instructions.txt");
				instructionWriter.write(instructions);
				instructionWriter.close();
			} catch (Exception ex) {
				System.out.println(ex);
			}
			add(RIGHT, "Validation successful!  Human-readable instructions to replicate playthrough have been printed to instructions.txt in the saves folder.");
			if (victory) {
				add(RIGHT, "\n\nCongratulations on reuniting with Tanaka after " + winLoop + " loops and " + winDay + " days!  ");
				if (winLoop <= 4) {
					if (winLoop <= devLoop && winDay < devDay) {
						add(RIGHT, "This beats the developer's high score!!  ");
					} else if (winLoop == devLoop && winDay == devDay) {
                        add(RIGHT, "This matches the developer's high score!  ");
                    }
					add(RIGHT, "If you want to be included in next release's leaderboard, send your currentSave.sav file to cultivationspiral@gmail.com");
				} else {
					add(RIGHT, "If you enjoyed the game, why not start over from Loop 1 in order to try for a better score?");
				}
			}
		} else {
			add(RIGHT, "Validation failed.  If this is a run from the current version, please send your save file to the cultivationspiral@gmail.com as a bug report.");
            instructions = (currentPlaythrough.currentDay+1) + " days" + instructions;
            if (currentPlaythrough.loops > 0) {
                instructions = currentPlaythrough.loops + " loops plus " + instructions;
            }
            instructions = "Playthrough consists of " + instructions;
            new File(Playthrough.getSaveFolderPath() + "instructions.txt").delete();
            try {
                FileWriter instructionWriter = new FileWriter(Playthrough.getSaveFolderPath() + "instructions.txt");
                instructionWriter.write(instructions);
                instructionWriter.close();
            } catch (Exception ex) {
                System.out.println(ex);
            }
		}
		mainPanel.repaint();
	}
	
	public static void setTransparent() {
		for (int i = 0; i < fadeComponents.length; i++) {
			fadeComponents[i].setForeground(new Color(fadeComponents[i].getForeground().getRed(), fadeComponents[i].getForeground().getGreen(), fadeComponents[i].getForeground().getBlue(), 0));
		}
	}
	
	public static void redTheme() {
		textBackground = Color.BLACK;
		leftAreaPainter = new DefaultHighlighter.DefaultHighlightPainter(currentPlaythrough.darkHighlightColor);
		storyAreaPainter = new DefaultHighlighter.DefaultHighlightPainter(currentPlaythrough.darkHighlightColor);
		dateDisplay.setForeground(Color.WHITE);
		durationDisplay.setForeground(Color.WHITE);
		deadlineDisplay.setForeground(Color.WHITE);
		for (int i = 0; i < timeSlotFields.length; i++) {
			timeSlotFields[i].setForeground(Color.WHITE);
		}
		staminaSummaryField.setForeground(Color.WHITE);
		for (int i = 0; i < routineFields.length; i++) {
			routineFields[i].setForeground(Color.WHITE);
		}
		for (int i = 0; i < timeSlotContents.length; i++) {
			timeSlotContents[i].setForeground(Color.WHITE);
		}
		staminaSummaryContents.setForeground(Color.WHITE);
		for (int i = 0; i < routineContents.length; i++) {
			routineContents[i].setForeground(Color.WHITE);
		}
		characters.setForeground(Color.WHITE);
		players.setForeground(Color.WHITE);
		meaning.setForeground(Color.WHITE);
		totalMeaning.setForeground(Color.WHITE);
		mainPanel.setBackground(badEndBackground);
		leftFullArea.setBackground(textBackground);
		rightFullArea.setBackground(textBackground);
		storyArea.setBackground(textBackground);
		upgradeDescriptionArea.setBackground(textBackground);
	}
	
	public static void blackTheme() {
		redTheme();
		mainPanel.setBackground(deadBackground);
	}
	
	public static void lightTheme() {
		textBackground = Color.WHITE;
		leftAreaPainter = new DefaultHighlighter.DefaultHighlightPainter(currentPlaythrough.highlightColor);
		storyAreaPainter = new DefaultHighlighter.DefaultHighlightPainter(currentPlaythrough.highlightColor);
		dateDisplay.setForeground(Color.BLACK);
		durationDisplay.setForeground(Color.BLACK);
		deadlineDisplay.setForeground(Color.BLACK);
		for (int i = 0; i < timeSlotFields.length; i++) {
			timeSlotFields[i].setForeground(Color.BLACK);
		}
		staminaSummaryField.setForeground(Color.BLACK);
		for (int i = 0; i < routineFields.length; i++) {
			routineFields[i].setForeground(Color.BLACK);
		}
		for (int i = 0; i < timeSlotContents.length; i++) {
			timeSlotContents[i].setForeground(Color.BLACK);
		}
		staminaSummaryContents.setForeground(Color.BLACK);
		for (int i = 0; i < routineContents.length; i++) {
			routineContents[i].setForeground(Color.BLACK);
		}
		characters.setForeground(Color.BLACK);
		players.setForeground(Color.BLACK);
		meaning.setForeground(Color.BLACK);
		totalMeaning.setForeground(Color.BLACK);
		mainPanel.setBackground(defaultBackground);
        if (getRoute() >= 0) {
            mainPanel.setBackground(romanceColor);
        }
		leftFullArea.setBackground(textBackground);
		rightFullArea.setBackground(textBackground);
		storyArea.setBackground(textBackground);
		upgradeDescriptionArea.setBackground(textBackground);
	}
	
	public static void autoForward() {
        boolean nextDayStartNeeded = false;
        if (currentMiddleDisplay == MiddleDisplay.RESULTS) {
            if (currentTimeSlot == TimeSlot.PREDAWN) {
                nextDayStartNeeded = true;
            } else {
                currentTimeSlot = currentTimeSlot.Next;
            }
        }
        if (currentMiddleDisplay == MiddleDisplay.STORY) {
            Scene[] comparison = null;
            if (currentScene.associatedEvent == null) {
                comparison = currentPlaythrough.progress.watchedScenes.get(((List<Integer>)new ArrayList<Integer>(Arrays.asList(new Integer[]{currentScene.associatedGoalIndex, currentScene.associatedGoalTier}))));
            } else {
                comparison = currentPlaythrough.progress.watchedPlotEvents.get(currentScene.associatedEvent);
            }
            setSkipFactor(currentScene.associatedEvent, currentScene.associatedGoalIndex, currentScene.associatedGoalTier);
            for (int i = sceneProgress+1; i < sceneProgress+skipFactor && i < currentScene.screens.length; i++) {
                if (currentScene.tracks[i] != null && currentScene.tracks[i] != Music.SILENCE) {
                    currentMusic = currentScene.tracks[i];
                    musicFading = false;
                }
                boolean found = false;
                for (int j = 0; comparison != null && j < comparison.length && !found; j++) {
                    if (comparison[j].screens.length > i && comparison[j].screens[i].rawString().equals(currentScene.screens[i].rawString())) {
                        found = true;
                    }
                }
                if (!found) {
                    skipFactor = i - sceneProgress;
                    break;
                }
            }
            sceneProgress += skipFactor-1;
            mainAction();
        } else if (!nextDayStartNeeded) {
            currentScene = null;
            boolean barMoveRequired = currentMiddleDisplay == MiddleDisplay.RESULTS;
            currentPlaythrough.sendStats();
            int resolving = 0;
            while (currentMiddleDisplay == MiddleDisplay.RESULTS && resolving < currentTimeSlot.placement) {
                resolveAction(currentPlaythrough.weeklyActions[weekDayNumber()][resolving], true, true);
                resolving++;
            }
            Scene resultingScene = null;
            while (resolving < 6 && currentStopReason == AutoStopReason.NOSTOP) {
                currentStopReason = actionIsShown(currentPlaythrough.weeklyActions[weekDayNumber()][resolving]);
                /*if (currentTimeSlot.placement == currentPlaythrough.weeklyActions[weekDayNumber()][resolving].availableSlot || currentStopReason != AutoStopReason.NOSTOP) {
                    currentTimeSlot = TimeSlot.values()[resolving];
                    setGoalBar(getVisibleGoal(currentPlaythrough.weeklyActions[weekDayNumber()][resolving], false), false);
                }*/
                if (currentStopReason != AutoStopReason.NOSTOP) {
                    if (skipOption() != OptionElements.RESULTSKIPALWAYS) {
                        autoOn = false;
                    }
                    currentStopReason.relatedAction = currentPlaythrough.weeklyActions[weekDayNumber()][resolving];
                    currentStopReason.relatedTimeSlot = TimeSlot.values()[resolving];
                    PlotEvent triggeredByAction = actionTriggeredEvent(currentStopReason.relatedAction);
                    if (triggeredByAction != null) {
                        resultingScene = getPlotScene(triggeredByAction);
                    } else {
                        resultingScene = getCompletionScene(getVisibleGoal(currentStopReason.relatedAction, false));
                    }
                    if (triggeredByAction != null) {
                        currentTimeSlot = currentStopReason.relatedTimeSlot;
                        currentScene = resultingScene;
                        skippingStory = skipOption() != OptionElements.RESULTSKIPOFF && currentPlaythrough.progress.watchedPlotEvents.get(currentScene.associatedEvent) != null && currentPlaythrough.progress.watchedPlotEvents.get(currentScene.associatedEvent).length > 0;
                        sceneProgress = 0;
                        autoTask.clock = 0;
                        currentMiddleDisplay = MiddleDisplay.STORY;
                        sceneStartEffect(resultingScene);
                    } else if (currentStopReason.relatedAction != null && getVisibleGoal(currentStopReason.relatedAction, false) != null && resolveAction(currentStopReason.relatedAction, false, false).contains(getVisibleGoal(currentStopReason.relatedAction, false).completionText) && resultingScene != null) {
                        currentTimeSlot = currentStopReason.relatedTimeSlot;
                        currentScene = getCompletionScene(getVisibleGoal(currentStopReason.relatedAction, false));
                        skippingStory = skipOption() != OptionElements.RESULTSKIPOFF && currentPlaythrough.progress.watchedScenes.get(((List<Integer>) new ArrayList<Integer>(Arrays.asList(new Integer[]{currentScene.associatedGoalIndex, currentScene.associatedGoalTier})))) != null && currentPlaythrough.progress.watchedScenes.get(((List<Integer>) new ArrayList<Integer>(Arrays.asList(new Integer[]{currentScene.associatedGoalIndex, currentScene.associatedGoalTier})))).length > 0;
                        sceneProgress = 0;
                        autoTask.clock = 0;
                        currentMiddleDisplay = MiddleDisplay.STORY;
                    }
                    resolveAction(currentPlaythrough.weeklyActions[weekDayNumber()][resolving], true, true);
                } else {
                    resolveAction(currentPlaythrough.weeklyActions[weekDayNumber()][resolving], true, true);
                }
                resolving++;
            }
            if (currentStopReason != AutoStopReason.NOSTOP) {
                if (resultingScene == null) {
                    //autoOn = false;
                    skippingStory = false;
                }
                if (currentStopReason.relatedAction != null && currentStopReason.relatedAction.ownGoal != null) {
                    setGoalBar(getVisibleGoal(currentStopReason.relatedAction, false), false);
                }
                if (currentMiddleDisplay != MiddleDisplay.STORY) {
                    currentMiddleDisplay = MiddleDisplay.RESULTS;
                }
                currentPhase = GamePhase.RESULTSPHASE;
                currentTimeSlot = currentStopReason.relatedTimeSlot;
            }
            addStamina(BigInteger.ZERO, true);
            addHealth(BigInteger.ZERO, true);
            addSanity(BigInteger.ZERO, true);
            addQi(BigInteger.ZERO, true);
            for (int i = 0; i < 21; i++) {
                addAttributeExperience(i, BigInteger.ZERO, true);
                addRelationshipExperience(i, BigInteger.ZERO, true);
            }
            if (autoOn && resultingScene == null) {
                startNextDay();
                if (currentScene == null) {
                    currentTimeSlot = TimeSlot.MORNING;
                    if (currentMiddleDisplay == MiddleDisplay.RESULTS || currentMiddleDisplay == MiddleDisplay.STORY) {
                        currentMiddleDisplay = MiddleDisplay.ACTION;
                    }
                    currentPhase = GamePhase.ACTIONPHASE;
                }
            }
            if (autoOption() == OptionElements.ONEDAY && currentScene == null) {
                currentMiddleDisplay = MiddleDisplay.NEWDAY;
                autoOn = false;
                autoTask.lastNewDay = 100;
            }
            assembleWindow();
        } else if (autoOn) {
            currentPlaythrough.sendStats();
            for (int i = 0; i < 6; i++) {
                resolveAction(currentPlaythrough.weeklyActions[weekDayNumber()][i], true, true);
            }
            currentScene = null;
            startNextDay();
            if (currentScene == null) {
                currentTimeSlot = TimeSlot.MORNING;
                if (currentMiddleDisplay == MiddleDisplay.RESULTS || currentMiddleDisplay == MiddleDisplay.STORY) {
                    currentMiddleDisplay = MiddleDisplay.ACTION;
                }
                currentPhase = GamePhase.ACTIONPHASE;
            }
            assembleWindow();
        }
	}
	
	public static void addUpgradeLevel() {
		upgradeImageAlpha = -30f;
		if (selectedUpgrade < 42) {
			if ((upgradeMaxLevels[selectedUpgrade] == 0 || currentPlaythrough.upgradeLevels[selectedUpgrade] < upgradeMaxLevels[selectedUpgrade]) && remainingMOL.compareTo(upgradeLevelCost(selectedUpgrade, currentPlaythrough.upgradeLevels[selectedUpgrade])) >= 0) {
				remainingMOL = remainingMOL.subtract(upgradeLevelCost(selectedUpgrade, currentPlaythrough.upgradeLevels[selectedUpgrade]));
				currentPlaythrough.upgradeLevels[selectedUpgrade]++;
			}
		}
		assembleWindow();
	}
	
	public static void moveForward() {
		boolean keepGoing = false;
		boolean fromStory = false;
		if (currentMiddleDisplay == MiddleDisplay.STORY) {
			currentMiddleDisplay = MiddleDisplay.RESULTS;
			fromStory = true;
			Scene[] comparison = null;
			if (currentScene.associatedEvent == null) {
				comparison = currentPlaythrough.progress.watchedScenes.get(((List<Integer>)new ArrayList<Integer>(Arrays.asList(new Integer[]{currentScene.associatedGoalIndex, currentScene.associatedGoalTier}))));
			} else {
				comparison = currentPlaythrough.progress.watchedPlotEvents.get(currentScene.associatedEvent);
			}
			if (comparison == null) {
				if (currentScene.associatedEvent == null) {
					currentPlaythrough.progress.watchedScenes.put(((List<Integer>)new ArrayList<Integer>(Arrays.asList(new Integer[]{currentScene.associatedGoalIndex, currentScene.associatedGoalTier}))), new Scene[0]);
				} else {
					currentPlaythrough.progress.watchedPlotEvents.put(currentScene.associatedEvent, new Scene[0]);
				}
				comparison = new Scene[0];
			}
			boolean found = false;
			for (int i = 0; i < comparison.length && !found; i++) {
				found = true;
				if (comparison[i].screens.length != currentScene.screens.length) {
					found = false;
				} else {
					for (int j = 0; j < comparison[i].screens.length; j++) {
						if (!comparison[i].screens[j].rawString().equals(currentScene.screens[j].rawString())) {
							found = false;
							break;
						}
					}
				}
			}
			if (!found) {
				Scene[] newComparison = new Scene[comparison.length+1];
				for (int i = 0; i < comparison.length; i++) {
					newComparison[i] = comparison[i];
				}
				newComparison[comparison.length] = currentScene;
				if (currentScene.associatedEvent == null) {
					currentPlaythrough.progress.watchedScenes.put(((List<Integer>)new ArrayList<Integer>(Arrays.asList(new Integer[]{currentScene.associatedGoalIndex, currentScene.associatedGoalTier}))), newComparison);
				} else {
					currentPlaythrough.progress.watchedPlotEvents.put(currentScene.associatedEvent, newComparison);
				}
			}
			if (currentScene.loopEnd) {
				currentPlaythrough.loopOver = true;
				addStamina(maxStamina().negate(), true);
				addHealth(maxHealth().negate(), true);
				addSanity(maxSanity().negate(), true);
				blackTheme();
				if (currentScene.associatedEvent == PlotEvent.COLLEGETOWNDESTRUCTION && currentPlaythrough.loops == 0) {
					currentPlaythrough.currentLocale = Locale.BEYOND;
					sceneProgress = 0;
					currentScene = getPlotScene(PlotEvent.HELINTRO);
					currentMiddleDisplay = MiddleDisplay.STORY;
					assembleWindow();
				} else {
					currentPlaythrough.receiveStats();
					setTransparent();
					currentMiddleDisplay = MiddleDisplay.NEXTLOOP;
					currentPhase = GamePhase.NEXTLOOPPHASE;
					checkMOL();
				}
			}
		}
		if (fromStory && currentScene != null && currentScene.associatedEvent != null && !currentScene.loopEnd && currentScene.dayEnd && currentPhase != GamePhase.NEXTLOOPPHASE) {
			currentMiddleDisplay = MiddleDisplay.NEWDAY;
			currentTimeSlot = TimeSlot.MORNING;
			currentPhase = GamePhase.ACTIONPHASE;
            skippingStory = false;
		} else if (currentMiddleDisplay == MiddleDisplay.ACTION || currentMiddleDisplay == MiddleDisplay.RESULTS) {
			currentActionMenu = null;
			currentSpotMenu = null;
			goalProgressBar.loops = 0;
			goalProgressBar.initialLoops = 0;
			if (currentMiddleDisplay == MiddleDisplay.ACTION) {
				resolveAction(getCurrentAction(), true, false);
			}
			if (!fromStory) {
				currentTimeSlot = currentTimeSlot.Next;
				if (currentTimeSlot == TimeSlot.values()[0]) {
					currentPhase = currentPhase.Next;
					if (currentMiddleDisplay == MiddleDisplay.ACTION) {
						currentMiddleDisplay = MiddleDisplay.RESULTS;
						currentPlaythrough.sendStats();
					}
					if (currentPhase == GamePhase.ACTIONPHASE) {
						startNextDay();
					}
				} else if (currentPhase == GamePhase.ACTIONPHASE) {
					currentPlaythrough.currentLocale.currentSpot = getCurrentAction().ownSpot;
					currentPlaythrough.currentLocale.currentSpot.currentAction = getCurrentAction();
				}
			}
			if (currentPhase == GamePhase.RESULTSPHASE && currentMiddleDisplay != MiddleDisplay.STORY) {
				setGoalBar(getVisibleGoal(getCurrentAction(), false), false);
				boolean sceneShown = false;
				if (!fromStory && getVisibleGoal(getCurrentAction(), false) != null && resolveAction(getCurrentAction(), false, false).contains(getVisibleGoal(getCurrentAction(), false).completionText)) {
					Scene resultingScene = getCompletionScene(getVisibleGoal(getCurrentAction(), false));
					if (resultingScene != null) {
						skippingStory = skipOption() != OptionElements.RESULTSKIPOFF && currentPlaythrough.progress.watchedScenes.get(((List<Integer>)new ArrayList<Integer>(Arrays.asList(new Integer[]{resultingScene.associatedGoalIndex, resultingScene.associatedGoalTier})))) != null && currentPlaythrough.progress.watchedScenes.get(((List<Integer>)new ArrayList<Integer>(Arrays.asList(new Integer[]{resultingScene.associatedGoalIndex, resultingScene.associatedGoalTier})))).length > 0;
						currentScene = resultingScene;
						sceneProgress = 0;
                        autoTask.clock = 0;
						currentMiddleDisplay = MiddleDisplay.STORY;
						sceneShown = true;
					}
				} else if (!fromStory && actionTriggeredEvent(getCurrentAction()) != null) {
                    Scene resultingScene = getPlotScene(actionTriggeredEvent(getCurrentAction()));
                    skippingStory = skipOption() != OptionElements.RESULTSKIPOFF && currentPlaythrough.progress.watchedScenes.get(actionTriggeredEvent(getCurrentAction())) != null && currentPlaythrough.progress.watchedScenes.get(actionTriggeredEvent(getCurrentAction())).length > 0;
                    currentScene = resultingScene;
                    sceneProgress = 0;
                    autoTask.clock = 0;
                    currentMiddleDisplay = MiddleDisplay.STORY;
                    sceneShown = true;
                    sceneStartEffect(resultingScene);
                }
				if (!sceneShown) {
					if (actionIsShown(getCurrentAction()) != AutoStopReason.NOSTOP || fromStory) {
						resolveAction(getCurrentAction(), true, false);
					} else {
						keepGoing = true;
						resolveAction(getCurrentAction(), true, true);
					}
				}
			} else {
                if (!autoOn) {
                    skippingStory = false;
                }
            }
		} else if (currentMiddleDisplay != MiddleDisplay.STORY && currentMiddleDisplay != MiddleDisplay.NEXTLOOP) {
			MiddleDisplay destination = MiddleDisplay.ACTION;
			RoutineElements found = null;
			String tested = getNewDayContents().rawString();
			if (currentMiddleDisplay == MiddleDisplay.NEWDAY && tested.contains("Unable to use ")) {
				for (int i = 0; i < RoutineElements.values().length; i++) {
					if (tested.contains(RoutineElements.values()[i].name)) {
						destination = MiddleDisplay.ROUTINE;
						found = RoutineElements.values()[i];
					}
				}
			}
			if (destination == MiddleDisplay.ACTION) {
				if (currentMiddleDisplay == MiddleDisplay.NEWDAY && tested.contains("Unable to perform ")) {
					for (int i = 0; i < Action.values().length; i++) {
						if (tested.contains(Action.values()[i].name) && actionIsVisible(Action.values()[i], currentTimeSlot)) {
							currentPlaythrough.currentLocale.currentSpot = Action.values()[i].ownSpot;
							currentPlaythrough.currentLocale.currentSpot.currentAction = Action.values()[i];
						}
					}
				} else {
					currentPlaythrough.currentLocale.currentSpot = currentPlaythrough.weeklyActions[weekDayNumber()][timeSlotNumber()].ownSpot;
					currentPlaythrough.currentLocale.currentSpot.currentAction = currentPlaythrough.weeklyActions[weekDayNumber()][timeSlotNumber()];
				}
				currentMiddleDisplay = MiddleDisplay.ACTION;
			} else {
				currentMiddleDisplay = MiddleDisplay.ROUTINE;
				currentRoutineSettings = found.ownRoutineSettings;
				currentRoutineSettings.currentElement = found;
			}
            if (!autoOn) {
                skippingStory = false;
            }
		}
        if (fromStory && getRoute() >= 0 && mainPanel.getBackground().equals(defaultBackground)) {
            lightTheme();
        }
		if (keepGoing) {
			moveForward();
		} else {
			if (currentMiddleDisplay == MiddleDisplay.ACTION) {
				setGoalBar(getVisibleGoal(getCurrentAction(), true), true);
			}
			assembleWindow();
		}
	}
	
	public static void addNewEntry(String s) {
		boolean alreadyThere = false;
		for (int i = 0; i < currentPlaythrough.progress.newEntries.length; i++) {
			if (currentPlaythrough.progress.newEntries[i].equals(s)) {
				alreadyThere = true;
                break;
			}
		}
		if (!alreadyThere && tested == null) {
			String[] newNewEntries = new String[currentPlaythrough.progress.newEntries.length+1];
			for (int i = 0; i < currentPlaythrough.progress.newEntries.length; i++) {
				newNewEntries[i] = currentPlaythrough.progress.newEntries[i];
			}
			newNewEntries[currentPlaythrough.progress.newEntries.length] = s;
			currentPlaythrough.progress.newEntries = newNewEntries;
		}
	}

	public static void removeEntry(String s) {
        if (currentPlaythrough.progress.newEntries.length == 0) {
            return;
        }
		boolean found = false;
		String[] newNewEntries = new String[currentPlaythrough.progress.newEntries.length-1];
		for (int i = 0; i < currentPlaythrough.progress.newEntries.length; i++) {
			if (currentPlaythrough.progress.newEntries[i].equals(s)) {
				found = true;
			} else if (!found) {
				if (i < newNewEntries.length) {
					newNewEntries[i] = currentPlaythrough.progress.newEntries[i];
				}
			} else {
				newNewEntries[i-1] = currentPlaythrough.progress.newEntries[i];
			}
		}
		if (found) {
			currentPlaythrough.progress.newEntries = newNewEntries;
		}
	}
	
	public static void resetStopReason() {
		if (currentStopReason != AutoStopReason.NOSTOP) {
			currentStopReason.relatedRoutine = null;
			currentStopReason.relatedAction = null;
			currentStopReason.relatedTimeSlot = null;
			currentStopReason = AutoStopReason.NOSTOP;
		}
	}
	
	public static BigInteger todayRoutineCost() {
		BigInteger result = BigInteger.ZERO;
		for (int i = 0; i < currentPlaythrough.weeklyRoutine[weekDayNumber()].length; i++) {
			result = result.add(currentPlaythrough.weeklyRoutine[weekDayNumber()][i].maxStaminaCost);
		}
		return result;
	}
	
	public static BigInteger reducedFinancesCost(BigInteger n) {
		if (!n.equals(BigInteger.ZERO)) {
			int count = currentPlaythrough.upgradeLevels[2];
			while (count > 0) {
				n = n.multiply(BigInteger.valueOf(4)).divide(BigInteger.valueOf(5));
				count--;
			}
		}
		return n;
	}
	
	public static void startNextLoop() {
		Playthrough newLoop = new Playthrough();
		newLoop.progress = currentPlaythrough.progress;
		newLoop.loops = currentPlaythrough.loops+1;
		newLoop.startMOL = todayMOL.add(currentPlaythrough.startMOL);
		newLoop.highlightColor = currentPlaythrough.highlightColor;
		newLoop.darkHighlightColor = currentPlaythrough.darkHighlightColor;
		newLoop.currentOptions = currentPlaythrough.currentOptions;
		newLoop.sfxVolume = currentPlaythrough.sfxVolume;
		newLoop.bgmVolume = currentPlaythrough.bgmVolume;
		newLoop.personNames = currentPlaythrough.personNames;
		newLoop.personGenders = currentPlaythrough.personGenders;
		newLoop.ownGender = currentPlaythrough.ownGender;
        newLoop.unmetGender = currentPlaythrough.unmetGender;
		for (int i = 0; i < currentPlaythrough.upgradeLevels.length; i++) {
			newLoop.upgradeLevels[i] = currentPlaythrough.upgradeLevels[i];
		}
		
		currentPlaythrough.progress.newEntries = new String[0];
		if (currentPlaythrough.upgradeLevels[26] > 0) {
			newLoop.goals[Action.LOITER.ownGoal.index] = Action.LOITER.ownGoal.requirement;
			addNewEntry("Dance");
		}
		
		currentPlaythrough.progress.totalDays += currentPlaythrough.currentDay;
		currentPlaythrough.progress.totalStamina = currentPlaythrough.progress.totalStamina.add(currentPlaythrough.totalStamina);
		currentPlaythrough.progress.totalHealth = currentPlaythrough.progress.totalHealth.add(currentPlaythrough.totalHealth);
		currentPlaythrough.progress.totalFinances = currentPlaythrough.progress.totalFinances.add(currentPlaythrough.totalFinances);
		
		currentPlaythrough.weeklyActions[weekDayNumber()][0] = Action.LOOPENDACTION;
		currentPlaythrough.currentStamina = null;
		currentPlaythrough.currentHealth = null;
		currentPlaythrough.currentSanity = null;
		currentPlaythrough.currentQi = null;
		currentPlaythrough.yesterdayRoutineCost = null;
		currentPlaythrough.yesterdayHealth = null;
		currentPlaythrough.yesterdayMaxHealth = null;
		currentPlaythrough.relationships = null;
		currentPlaythrough.attributes = null;
		currentPlaythrough.goals = null;
		currentPlaythrough.daydreams = null;
		currentPlaythrough.addWeek();
		Playthrough[] newArchived = new Playthrough[currentPlaythrough.progress.archivedLoops.length+1];
		for (int i = 0; i < currentPlaythrough.progress.archivedLoops.length; i++) {
			newArchived[i] = currentPlaythrough.progress.archivedLoops[i];
		}
		newArchived[currentPlaythrough.progress.archivedLoops.length] = currentPlaythrough;
		currentPlaythrough.progress.archivedLoops = newArchived;
		
		currentPlaythrough = newLoop;
		currentPlaythrough.refreshGoals();
		currentPlaythrough.sendStats();
        for (int i = 1; i < totalGoals; i++) {
            if (getGoal(i) != null) {
                getGoal(i).nextGoal = null;
            }
        }
		
		todayMOL = BigInteger.ZERO;
		for (int i = 0; i < AchievementCategory.values().length; i++) {
			AchievementCategory.values()[i].lastRecordedScore = BigInteger.ZERO;
			AchievementCategory.values()[i].lastRecordedDisplay = null;
		}
		for (int i = 0; i < Achievement.values().length; i++) {
			Achievement.values()[i].lastRecordedDisplay = null;
			BigInteger prior = Achievement.values()[i].lastRecordedScore;
			BigInteger score = getScore(currentPlaythrough, Achievement.values()[i]);
			if (Achievement.values()[i].ownCategory != AchievementCategory.PROGRESSION && score.compareTo(prior) > 0) {
				addNewEntry(getAchievementDisplay(Achievement.values()[i]));
			}
			Achievement.values()[i].lastRecordedScore = score;
			BigInteger permanent = currentPlaythrough.progress.highestAchievements.get(Achievement.values()[i]);
			if (permanent == null || score.compareTo(permanent) > 0) {
				currentPlaythrough.progress.highestAchievements.put(Achievement.values()[i], score);
			}
			todayMOL = todayMOL.add(score);
			Achievement.values()[i].ownCategory.lastRecordedScore = Achievement.values()[i].ownCategory.lastRecordedScore.add(score);
		}
		
		for (int i = 0; i < Action.values().length; i++) {
			updateActionInfo(Action.values()[i]);
		}

        if (scheduleOption() == OptionElements.LOOPLYSCHEDULE) {
            for (int i = 0; i < 6; i++) {
                currentPlaythrough.weeklyActions[weekDayNumber()][i] = currentPlaythrough.progress.archivedLoops[currentPlaythrough.progress.archivedLoops.length-1].archivedActions[0][weekDayNumber()][i];
            }
        } else {
            for (int i = 0; i < 6; i++) {
                currentPlaythrough.weeklyActions[weekDayNumber()][i] = getAllowedActions(getViableSpots(currentPlaythrough.currentLocale, TimeSlot.values()[i])[0], TimeSlot.values()[i])[0];
            }
        }
		for (int i = 0; i < RoutineSettings.values().length; i++) {
			currentPlaythrough.weeklyRoutine[weekDayNumber()][i] = getAllowedRoutineElements(RoutineSettings.values()[i])[0];
		}
		currentPlaythrough.currentLocale.currentSpot = currentPlaythrough.weeklyActions[weekDayNumber()][0].ownSpot;
		currentPlaythrough.currentLocale.currentSpot.currentAction = currentPlaythrough.weeklyActions[weekDayNumber()][0];
		setGoalBar(getVisibleGoal(getDisplayedAction(), true), true);
		lightTheme();
		for (int i = 0; i < 21; i++) {
			addAttributeExperience(i, BigInteger.ZERO, true);
			addRelationshipExperience(i, BigInteger.ZERO, true);
		}
		addStamina(BigInteger.ZERO, true);
		addHealth(BigInteger.ZERO, true);
		addSanity(BigInteger.ZERO, true);
		addQi(BigInteger.ZERO, true);
		getNewDayContents().clear();
		
		currentPhase = GamePhase.ACTIONPHASE;
		currentMiddleDisplay = MiddleDisplay.NEWDAY;
		currentTimeSlot = TimeSlot.MORNING;
		selectedUpgrade = 0;
		upgradeImageAlpha = 1.0f;
		
		setTransparent();
		Epoch currentEpoch = getEpoch();
		if (currentEpoch.musicChangeNeeded()) {
			currentMusic = currentEpoch.defaultMusic;
		}
        musicFading = false;
		assembleWindow();
		frame.validate();
		frame.repaint();
	}

    public static PlotEvent dayEndEvent() {
        if (currentPlaythrough.currentDay == classStartDay+1 && getGoalLevel(12, false) == 0) {
            return PlotEvent.ABDUCTIONMISSED;
        } else if (currentPlaythrough.currentDay == 99 && currentPlaythrough.currentLocale == Locale.COLLEGETOWN) {
            currentPlaythrough.collegeTownDestruction = true;
            return PlotEvent.COLLEGETOWNDESTRUCTION;
        } else if (currentPlaythrough.currentDay == 149 && currentPlaythrough.currentLocale == Locale.METROPOLIS) {
            currentPlaythrough.metropolisFall = true;
            return PlotEvent.METROPOLISINVASION;
        }
        return null;
    }

    public static void sceneStartEffect(Scene s) {
        startingRomance = true;
        if (s.associatedEvent == PlotEvent.HASHIMOTOROMANCE1) {
            currentPlaythrough.romance[0] = 1;
        } else if (s.associatedEvent == PlotEvent.YUMENOROMANCE1) {
            currentPlaythrough.romance[1] = 1;
        }
    }

    public static int getRoute() {
        for (int i = 0; i < currentPlaythrough.romance.length; i++) {
            if (currentPlaythrough.romance[i] > 0) {
                return i;
            }
        }
        return -1;
    }

    public static PlotEvent actionTriggeredEvent(Action a) {
        int currentRoute = -1;
        int progress = 0;
        boolean multi = true;
        for (int i = 0; i < currentPlaythrough.romance.length; i++) {
            if (currentPlaythrough.romance[i] > 0) {
                multi = !multi;
                if (multi) {
                    break;
                }
                currentRoute = i;
                progress = currentPlaythrough.romance[i];
            }
        }
        if (currentRoute == -1 && currentPlaythrough.ownGender.sexScenes && !startingRomance) {
            if (currentPlaythrough.personGenders[0].sexScenes && a == Action.DOORUNLOCKED && getRelationshipLevel(0, false).compareTo(BigInteger.TEN) >= 0 && getGoalLevel(28, false) > 0 && getGoalLevel(23, false) == 0) {
                return PlotEvent.HASHIMOTOROMANCE1;
            }
            if (currentPlaythrough.personGenders[1].sexScenes && a == Action.SLEEPOVER && getRelationshipLevel(1, false).compareTo(BigInteger.TEN) >= 0 && getGoalLevel(28, false) > 0 && getGoalLevel(9, false) > 0 && getGoalLevel(2, false) < 7) {
                return PlotEvent.YUMENOROMANCE1;
            }
        }
        return null;
    }
	
	public static void startNextDay() {
        skippingStory = false;
        startingRomance = false;
		if (currentPlaythrough.loops == 1 && currentPlaythrough.currentDay == 0 && skipOption() == OptionElements.RESULTSKIPOFF) {
			addNewEntry("Unseen");
		}
		currentRoutineMenu = null;
		currentRoutineElementMenu = null;
		currentAchievementMenu = null;
		currentAchievementCategoryMenu = null;
		currentStatsMenu = null;
		currentStatsCategoryMenu = null;
		currentOptionMenu = null;
		currentOptionElementMenu = null;
		getNewDayContents().clear();
		
		if (currentPlaythrough.currentDay == classStartDay - 1) {
			addNewEntry(Action.HISTORY.name);
			addNewEntry(Action.MATH.name);
			addNewEntry(Action.GYM.name);
			addNewEntry(Action.ALLOUT.name);
			addNewEntry(Action.RESCUETANAKA.name);
		} else if (currentPlaythrough.currentDay == classStartDay && getGoalLevel(14, false) == 0) {
			currentPlaythrough.personStatus[5] = Locale.METROPOLIS;
			addNewEntry(Action.ASKFORHELP.name);
			addNewEntry(Action.GYMREGULAR.name);
			updateActionInfo(Action.FINDTANAKAACTION);
			if (routineElementVisible(RoutineElements.FOCUSED)) {
				addNewEntry(RoutineElements.FOCUSED.name);
			}
		}
		
		if (!currentPlaythrough.tanakaFeat && currentPlaythrough.currentDay <= classStartDay && getRelationshipLevel(5, false).compareTo(BigInteger.ZERO) > 0) {
			currentPlaythrough.tanakaFeat = true;
		}
		if (!currentPlaythrough.jackalFeat && getGoalLevel(16, false) >= 1) {
			currentPlaythrough.jackalFeat = true;
		}
		if (!currentPlaythrough.investigatorFeat && currentPlaythrough.personStatus[5] == Locale.METROPOLIS && getGoalLevel(14, false) >= 1) {
			currentPlaythrough.investigatorFeat = true;
		}
		if (!currentPlaythrough.saviorFeat && getGoalLevel(28, false) >= 1) {
            if (!achievementEverEarned(currentPlaythrough, Achievement.SAVIOR)) {
                addNewEntry("Looply");
            }
			currentPlaythrough.saviorFeat = true;
		}
        if (!currentPlaythrough.hashimotoFeat && getGoalLevel(23, false) >= 1) {
            currentPlaythrough.hashimotoFeat = true;
        }
		
		BigInteger healthRestored = one(1);
		addHealth(healthRestored, true);
		if (healthVisible()) {
			getNewDayContents().attach("+" + format(healthRestored) + " Health\n");
		}
		for (int i = 0; i < currentPlaythrough.weeklyRoutine[weekDayNumber()].length; i++) {
			if (!currentPlaythrough.weeklyRoutine[weekDayNumber()][i].financesCost.equals(BigInteger.ZERO)) {
				BigInteger subtracted = reducedFinancesCost(currentPlaythrough.weeklyRoutine[weekDayNumber()][i].financesCost);
				BigInteger level = getAttributeLevel(2, false);
				getNewDayContents().attach("-" + format(subtracted) + " Finances xp to pay for " + currentPlaythrough.weeklyRoutine[weekDayNumber()][i].name, 3);
				addAttributeExperience(2, subtracted.negate(), true);
				if (getAttributeLevel(2, false).compareTo(level) < 0) {
					getNewDayContents().attach(" [Lv down]", 3, true);
				}
				currentPlaythrough.totalFinances = currentPlaythrough.totalFinances.add(subtracted);
				getNewDayContents().attach("\n");
			}
		}
		if (dietRoutine() == RoutineElements.HOMECOOKING) {
			BigInteger added = simulatedStamina.divide(BigInteger.valueOf(4));
			if (simulatedStamina.add(added).compareTo(maxStamina()) > 0) {
				getNewDayContents().attach("+" + format(maxStamina().subtract(simulatedStamina)), 3);
				getNewDayContents().attach("/" + format(added) + " Stamina from " + RoutineElements.HOMECOOKING.name, 0);
			} else {
				getNewDayContents().attach("+" + format(added) + " Stamina from " + RoutineElements.HOMECOOKING.name, 0);
			}
			addStamina(added, true);
			getNewDayContents().attach("\n");
		}
		if (equipmentRoutine() == RoutineElements.HANDHELDGAMES) {
			BigInteger added = gainedProgress(Action.HANDHELDACTION, ten(10))[1];
			BigInteger level = getAttributeLevel(1, false);
			getNewDayContents().attach("+" + format(added) + " Focus xp from " + RoutineElements.HANDHELDGAMES.name, 1);
			addAttributeExperience(1, added, true);
			if (getAttributeLevel(1, false).compareTo(level) > 0) {
				getNewDayContents().attach(" [Lv up!]", 1, true);
			}
			getNewDayContents().attach("\n");
		} else if (equipmentRoutine() == RoutineElements.LARCENY) {
			BigInteger added = gainedProgress(Action.LARCENYACTION, hundred(1))[1];
			BigInteger level = getAttributeLevel(2, false);
			getNewDayContents().attach("+" + format(added) + " Finances xp from " + RoutineElements.LARCENY.name, 2);
			addAttributeExperience(2, added, true);
			if (getAttributeLevel(2, false).compareTo(level) > 0) {
				getNewDayContents().attach(" [Lv up!]", 2, true);
			}
			getNewDayContents().attach("\n");
		} else if (equipmentRoutine() == RoutineElements.OSTENTATIOUS) {
			BigInteger added = gainedProgress(Action.OSTENTATIOUSACTION, ten(6))[0];
			boolean preface = true;
			for (int i = 0; i < 21; i++) {
				if (currentPlaythrough.personStatus[i] == currentPlaythrough.currentLocale && !simulatedRelationships[i].equals(BigInteger.ZERO)) {
					BigInteger level = getRelationshipLevel(i, false);
					if (preface) {
						getNewDayContents().attach("+" + format(added) + " relationship progress from " + RoutineElements.OSTENTATIOUS.name + " for ");
						preface = false;
					} else {
						getNewDayContents().attach(", ");
					}
					getNewDayContents().attach(currentPlaythrough.personNames[i], i);
					addRelationshipExperience(i, added, true);
					if (getRelationshipLevel(i, false).compareTo(level) > 0) {
						getNewDayContents().attach(" [Lv up!]", i, true);
					}
				}
			}
			if (!preface) {
				getNewDayContents().attach("\n");
			}
		}
		int totalFinances = getAttributeLevel(2, false).intValue();
		if (totalFinances >= 10) {
			currentPlaythrough.wealthOne = true;
		}
		if (totalFinances >= 20) {
			currentPlaythrough.wealthTwo = true;
		}
		if (totalFinances >= 30) {
			currentPlaythrough.wealthThree = true;
		}
		
		BigInteger newCost = BigInteger.ZERO;
		for (int i = 0; i < currentPlaythrough.weeklyRoutine[weekDayNumber()].length; i++) {
			newCost = newCost.add(currentPlaythrough.weeklyRoutine[weekDayNumber()][i].maxStaminaCost);
		}
		currentPlaythrough.yesterdayRoutineCost = newCost;
		
		Locale nextLocale = currentPlaythrough.currentLocale;
		if (currentPlaythrough.weeklyActions[weekDayNumber()][5] == Action.METROPOLISFLIGHTFOUR) {
			nextLocale = Locale.TRANSIT;
		} else if (currentPlaythrough.weeklyActions[weekDayNumber()][5] == Action.METROPOLISFLIGHTTEN) {
			nextLocale = Locale.METROPOLIS;
		} else if (currentPlaythrough.weeklyActions[weekDayNumber()][5] == Action.HOMEFLIGHTFOUR) {
            nextLocale = Locale.TRANSIT;
        } else if (currentPlaythrough.weeklyActions[weekDayNumber()][5] == Action.HOMEFLIGHTTEN) {
            nextLocale = Locale.COLLEGETOWN;
        }
		boolean localeChange = currentPlaythrough.currentLocale != nextLocale;
		currentPlaythrough.currentLocale = nextLocale;
		
		currentPlaythrough.yesterdayHealth = simulatedHealth;
		currentPlaythrough.yesterdayMaxHealth = maxHealth();
		addHealth(BigInteger.ZERO, true);
		
		if (weekDayNumber() == 6) {
			currentPlaythrough.addWeek();
		}
		
		currentPlaythrough.currentDay++;
		if (localeChange) {
            setTransparent();
			currentPlaythrough.currentLocale.currentSpot = getAllowedSpots(currentPlaythrough.currentLocale, TimeSlot.values()[0])[0];
		}
		
		addStamina(BigInteger.ZERO, true);
		
		autoTask.lastNewDay += 200;
		if (autoTask.lastNewDay > 199) {
			slowDown = true;
		}
		if (!autoOn || currentMiddleDisplay == MiddleDisplay.RESULTS || currentMiddleDisplay == MiddleDisplay.STORY) {
			currentMiddleDisplay = MiddleDisplay.NEWDAY;
		}
		PlotEvent foundEvent = dayEndEvent();
		todayMOL = BigInteger.ZERO;
		for (int i = 0; i < AchievementCategory.values().length; i++) {
			AchievementCategory.values()[i].lastRecordedScore = BigInteger.ZERO;
			AchievementCategory.values()[i].lastRecordedDisplay = null;
		}
		for (int i = 0; i < Achievement.values().length; i++) {
			Achievement.values()[i].lastRecordedDisplay = null;
			BigInteger prior = Achievement.values()[i].lastRecordedScore;
			BigInteger score = getScore(currentPlaythrough, Achievement.values()[i]);
			if (Achievement.values()[i].ownCategory != AchievementCategory.PROGRESSION && score.compareTo(prior) > 0) {
				addNewEntry(getAchievementDisplay(Achievement.values()[i]));
			}
			Achievement.values()[i].lastRecordedScore = score;
			BigInteger permanent = currentPlaythrough.progress.highestAchievements.get(Achievement.values()[i]);
			if (permanent == null || score.compareTo(permanent) > 0) {
				currentPlaythrough.progress.highestAchievements.put(Achievement.values()[i], score);
			}
			todayMOL = todayMOL.add(score);
			Achievement.values()[i].ownCategory.lastRecordedScore = Achievement.values()[i].ownCategory.lastRecordedScore.add(score);
		}
		if (foundEvent == null || !getPlotScene(foundEvent).loopEnd) {
            boolean enteringAuto = autoOn;
			currentPlaythrough.receiveStats();
			checkScheduleRoutineValidity(!localeChange);
			if (!autoOn) {
                if (enteringAuto && currentMiddleDisplay == MiddleDisplay.ACTION) {
                    currentMiddleDisplay = MiddleDisplay.NEWDAY;
                }
				if (tested == null && (currentStopReason == AutoStopReason.NOSTOP || currentStopReason == AutoStopReason.ALWAYSSTOP)) {
					setGoalBar(currentPlaythrough.weeklyActions[weekDayNumber()][0].ownGoal, true);
				} else if (tested == null) {
					currentPlaythrough.currentLocale.currentSpot = getCurrentAction().ownSpot;
					currentPlaythrough.currentLocale.currentSpot.currentAction = getCurrentAction();
					setGoalBar(getCurrentAction().ownGoal, true);
				}
				assembleWindow();
			} else if (currentStopReason != AutoStopReason.NOSTOP) {
				/*autoOn = false;
				if (currentStopReason == AutoStopReason.ACTIONIMPOSSIBLE) {
					currentMiddleDisplay = MiddleDisplay.ACTION;
					currentTimeSlot = currentStopReason.relatedTimeSlot;
					if (actionIsVisible(currentStopReason.relatedAction, currentTimeSlot)) {
						currentLocale.currentSpot = currentStopReason.relatedAction.ownSpot;
						currentLocale.currentSpot.currentAction = currentStopReason.relatedAction;
					} else {
						currentMiddleDisplay = MiddleDisplay.NEWDAY;
						currentLocale.currentSpot = currentPlaythrough.weeklyActions[weekDayNumber()][currentTimeSlot.placement].ownSpot;
						currentLocale.currentSpot.currentAction = currentPlaythrough.weeklyActions[weekDayNumber()][currentTimeSlot.placement];
					}
				} else if (currentStopReason == AutoStopReason.ROUTINEIMPOSSIBLE) {
					currentMiddleDisplay = MiddleDisplay.ROUTINE;
					if (routineElementVisible(currentStopReason.relatedRoutine)) {
						currentRoutineSettings = currentStopReason.relatedRoutine.ownRoutineSettings;
						currentRoutineSettings.currentElement = currentStopReason.relatedRoutine;
					} else if (routineSettingsEnabled()[currentStopReason.relatedRoutine.ownRoutineSettings.placement]) {
						currentMiddleDisplay = MiddleDisplay.NEWDAY;
						currentRoutineSettings = currentStopReason.relatedRoutine.ownRoutineSettings;
					}
				}*/
				if (!autoOn) {
					assembleWindow();
				}
			}
			if (foundEvent == null) {
				Epoch currentEpoch = getEpoch();
				if (currentEpoch.musicChangeNeeded()) {
					currentMusic = currentEpoch.defaultMusic;
				}
			}
		} else {
            autoOn = false;
        }
		if (foundEvent != null) {
            if (autoOn) {
                skippingStory = true;
            }
			currentPhase = GamePhase.RESULTSPHASE;
			currentMiddleDisplay = MiddleDisplay.STORY;
			if (getPlotScene(foundEvent).loopEnd) {
				redTheme();
				if (tested != null) {
					currentPlaythrough.loopOver = true;
					currentPlaythrough.receiveStats();
				}
			}
			currentScene = getPlotScene(foundEvent);
			assembleWindow();
		}
        recentLoad = false;
		/*BigInteger added = simulatedAttributes[currentPlaythrough.currentDay % 6];
		if (added.compareTo(tenThousand) < 0) {
			added = tenThousand;
		}
		addAttributeExperience(currentPlaythrough.currentDay % 6, added);
		addRelationshipExperience(currentPlaythrough.currentDay % 6, added);*/
	}
	
	public static void checkScheduleRoutineValidity(Boolean alert) {
		currentPlaythrough.sendStats();
        boolean stillOnTrack = true;
		if (currentPhase != GamePhase.NEXTLOOPPHASE) {
            Action[] lastLoopAction = new Action[6];
            RoutineElements[] lastLoopRoutine = new RoutineElements[RoutineSettings.values().length];
            if (scheduleOption() == OptionElements.LOOPLYSCHEDULE && currentPlaythrough.progress.archivedLoops.length > 0) {
                for (int i = 0; i < RoutineSettings.values().length; i++) {
                    if (currentPlaythrough.progress.archivedLoops[currentPlaythrough.progress.archivedLoops.length - 1].archivedRoutine.length > currentPlaythrough.archivedRoutine.length) {
                        lastLoopRoutine[i] = currentPlaythrough.progress.archivedLoops[currentPlaythrough.progress.archivedLoops.length - 1].archivedRoutine[currentPlaythrough.archivedRoutine.length][weekDayNumber()][i];
                    }
                    if (!routineElementAllowed(lastLoopRoutine[i])) {
                        if (currentStopReason == AutoStopReason.NOSTOP) {
                            currentStopReason = AutoStopReason.ROUTINEIMPOSSIBLE;
                            currentStopReason.relatedRoutine = lastLoopRoutine[i];
                        }
                        lastLoopRoutine[i] = null;
                        stillOnTrack = false;
                    } else {
                        currentPlaythrough.weeklyRoutine[weekDayNumber()][i] = lastLoopRoutine[i];
                    }
                }
                if (currentPlaythrough.progress.archivedLoops.length > 0) {
                    for (int i = 0; i < 6; i++) {
                        if (currentPlaythrough.progress.archivedLoops[currentPlaythrough.progress.archivedLoops.length - 1].archivedActions.length > currentPlaythrough.archivedActions.length) {
                            lastLoopAction[i] = currentPlaythrough.progress.archivedLoops[currentPlaythrough.progress.archivedLoops.length - 1].archivedActions[currentPlaythrough.archivedActions.length][weekDayNumber()][i];
                        }
                        if (!actionIsAllowed(lastLoopAction[i], TimeSlot.values()[i])) {
                            if (lastLoopAction[i] != null && actionIsAllowed(lastLoopAction[i].backup, TimeSlot.values()[i])) {
                                lastLoopAction[i] = lastLoopAction[i].backup;
                            } else {
                                if (currentStopReason == AutoStopReason.NOSTOP) {
                                    currentStopReason = AutoStopReason.ACTIONIMPOSSIBLE;
                                    currentStopReason.relatedAction = lastLoopAction[i];
                                    currentStopReason.relatedTimeSlot = TimeSlot.values()[i];
                                }
                                lastLoopAction[i] = null;
                            }
                        }
                        if (lastLoopAction[i] != null) {
                            currentPlaythrough.weeklyActions[weekDayNumber()][i] = lastLoopAction[i];
                            if (stillOnTrack) {
                                resolveAction(lastLoopAction[i], true, false);
                            }
                        } else {
                            stillOnTrack = false;
                        }
                    }
                }
                currentPlaythrough.sendStats();
            }
			if (scheduleOption() != OptionElements.WEEKLYSCHEDULE) {
				for (int i = 0; i < RoutineSettings.values().length; i++) {
					if (routineElementAllowed(currentPlaythrough.weeklyRoutine[(weekDayNumber()+6)%7][i])) {
						currentPlaythrough.weeklyRoutine[weekDayNumber()][i] = currentPlaythrough.weeklyRoutine[(weekDayNumber()+6)%7][i];
					}
				}
				for (int i = 0; i < TimeSlot.values().length; i++) {
					if (currentPlaythrough.weeklyActions[(weekDayNumber()+6)%7][i] != null && currentPlaythrough.weeklyActions[(weekDayNumber()+6)%7][i].availableDays[weekDayNumber()] && !classRestricted(currentPlaythrough.weeklyActions[(weekDayNumber() + 6) % 7][i])) {
						currentPlaythrough.weeklyActions[weekDayNumber()][i] = currentPlaythrough.weeklyActions[(weekDayNumber()+6)%7][i];
					}
					if (currentPlaythrough.weeklyActions[weekDayNumber()][i] != null) {
						resolveAction(currentPlaythrough.weeklyActions[weekDayNumber()][i], true, false);
					}
				}
			}
			for (int i = 0; i < RoutineSettings.values().length; i++) {
				RoutineElements setRoutine = currentPlaythrough.weeklyRoutine[weekDayNumber()][i];
				if (scheduleOption() != OptionElements.WEEKLYSCHEDULE || !routineElementAllowed(setRoutine)) {
					boolean routineMatch = currentPlaythrough.weeklyRoutine[weekDayNumber()][i] == currentPlaythrough.weeklyRoutine[(weekDayNumber()+1)%7][i];
					if ((lastLoopRoutine[i] == null || scheduleOption() != OptionElements.LOOPLYSCHEDULE) && currentStopReason == AutoStopReason.NOSTOP && (scheduleOption() == OptionElements.WEEKLYSCHEDULE || routineMatch) && setRoutine != null && !routineElementAllowed(setRoutine)) {
						currentStopReason = AutoStopReason.ROUTINEIMPOSSIBLE;
						currentStopReason.relatedRoutine = currentPlaythrough.weeklyRoutine[weekDayNumber()][i];
					}
					setRoutine = currentPlaythrough.weeklyRoutine[(weekDayNumber()+6)%7][i];
					if ((lastLoopRoutine[i] == null || scheduleOption() != OptionElements.LOOPLYSCHEDULE) && !routineElementAllowed(setRoutine)) {
						if (currentStopReason == AutoStopReason.NOSTOP) {
							currentStopReason = AutoStopReason.ROUTINEIMPOSSIBLE;
							currentStopReason.relatedRoutine = setRoutine;
						}
						setRoutine = getAllowedRoutineElements(RoutineSettings.values()[i])[0];
					}
					currentPlaythrough.weeklyRoutine[weekDayNumber()][i] = setRoutine;
					if (currentStopReason == AutoStopReason.ROUTINEIMPOSSIBLE) {
						if (currentStopReason.relatedRoutine != null) {
							getNewDayContents().prepend("Unable to use " + currentStopReason.relatedRoutine.ownRoutineSettings.name + ": " + currentStopReason.relatedRoutine.name + "\n", 3);
							currentRoutineSettings = currentStopReason.relatedRoutine.ownRoutineSettings;
						}
						currentStopReason = AutoStopReason.NOSTOP;
						autoOn = false;
					}
				}
			}
			currentPlaythrough.sendStats();
            for (int i = 0; i < RoutineSettings.values().length; i++) {
                if (lastLoopRoutine[i] != null) {
                    currentPlaythrough.weeklyRoutine[weekDayNumber()][i] = lastLoopRoutine[i];
                }
            }
			for (int i = 0; i < TimeSlot.values().length; i++) {
				Action setAction = currentPlaythrough.weeklyActions[weekDayNumber()][i];
                if (scheduleOption() != OptionElements.WEEKLYSCHEDULE || !actionIsAllowed(setAction, TimeSlot.values()[i])) {
					boolean actionMatch = currentPlaythrough.weeklyActions[weekDayNumber()][i] == currentPlaythrough.weeklyActions[(weekDayNumber()+1)%7][i];
					if ((lastLoopAction[i] == null || scheduleOption() != OptionElements.LOOPLYSCHEDULE) && alert && currentStopReason == AutoStopReason.NOSTOP && (scheduleOption() == OptionElements.WEEKLYSCHEDULE || actionMatch) && !actionIsAllowed(setAction, TimeSlot.values()[i]) && !actionIsAllowed(setAction.backup, TimeSlot.values()[i]) && setAction != null) {
						currentStopReason = AutoStopReason.ACTIONIMPOSSIBLE;
						currentStopReason.relatedAction = setAction;
						currentStopReason.relatedTimeSlot = TimeSlot.values()[i];
					}
                    if (scheduleOption() == OptionElements.WEEKLYSCHEDULE && actionIsAllowed(setAction.backup, TimeSlot.values()[i])) {
                        currentPlaythrough.weeklyActions[weekDayNumber()][i] = setAction.backup;
                    } else {
                        Action checkedAction = currentPlaythrough.weeklyActions[(weekDayNumber() + 6) % 7][i];
                        if (!actionIsAllowed(setAction, TimeSlot.values()[i])) {
                            if (actionIsAllowed(checkedAction, TimeSlot.values()[i])) {
                                setAction = checkedAction;
                            } else if (actionIsAllowed(checkedAction.backup, TimeSlot.values()[i])) {
                                setAction = checkedAction.backup;
                            } else {
                                if ((lastLoopAction[i] == null || scheduleOption() != OptionElements.LOOPLYSCHEDULE) && alert && currentStopReason == AutoStopReason.NOSTOP && checkedAction != null) {
                                    currentStopReason = AutoStopReason.ACTIONIMPOSSIBLE;
                                    currentStopReason.relatedAction = checkedAction;
                                    currentStopReason.relatedTimeSlot = TimeSlot.values()[i];
                                }
                                setAction = getAllowedActions(getViableSpots(currentPlaythrough.currentLocale, TimeSlot.values()[i])[0], TimeSlot.values()[i])[0];
                            }
                        }
                        currentPlaythrough.weeklyActions[weekDayNumber()][i] = setAction;
                    }
				}
				if (i == currentTimeSlot.placement && currentStopReason == AutoStopReason.ACTIONIMPOSSIBLE && !actionIsVisible(currentStopReason.relatedAction, currentTimeSlot)) {
					currentPlaythrough.weeklyActions[weekDayNumber()][i] = setAction;
				}
				if (currentStopReason == AutoStopReason.ACTIONIMPOSSIBLE) {
					if (currentStopReason.relatedAction != null) {
						//currentTimeSlot = currentStopReason.relatedTimeSlot;
						getNewDayContents().prepend("Unable to perform Action: " + currentStopReason.relatedAction.name + "\n");
					}
					currentStopReason = AutoStopReason.NOSTOP;
					autoOn = false;
				}
                if (lastLoopAction[i] != null) {
                    currentPlaythrough.weeklyActions[weekDayNumber()][i] = lastLoopAction[i];
                }
				if (currentPlaythrough.weeklyActions[weekDayNumber()][i] != null) {
					resolveAction(currentPlaythrough.weeklyActions[weekDayNumber()][i], true, false);
				}
			}
			currentPlaythrough.sendStats();
		}
	}
	
	public static BigInteger getScore(Playthrough p, Achievement v) {
		BigInteger result = BigInteger.ZERO;
		if (v == Achievement.DAYDREAM) {
			BigInteger counter = p.daydreams;
			BigInteger nextLevel = BigInteger.ONE;
			while (counter.compareTo(nextLevel) >= 0) {
				result = result.add(HUNDRED);
				counter = counter.subtract(nextLevel);
				nextLevel = nextLevel.add(BigInteger.ONE);
			}
		} else if (v == Achievement.DEVELOPMENT) {
			if (p == currentPlaythrough) {
				result = BigInteger.valueOf(getGoalLevel(26, false)* 1000L);
			} else {
				BigInteger cost = Action.GAMEDESIGN.ownGoal.requirement;
				BigInteger progress = p.goals[26];
				while (progress.compareTo(cost) >= 0) {
					progress = progress.subtract(cost);
					cost = cost.add(cost);
					result = result.add(THOUSAND);
				}
			}
		} else if (v == Achievement.BELOVED) {
			for (int i = 0; i < p.relationships.length; i++) {
				if (p == currentPlaythrough) {
					result = result.add(getRelationshipLevel(i, false).multiply(HUNDRED));
				} else {
					result = result.add(levelInfo(i*3, p.relationships[i])[0].multiply(HUNDRED));
				}
			}
		} else if (v == Achievement.POLYMATH) {
			for (int i = 0; i < p.attributes.length; i++) {
				if (p == currentPlaythrough) {
					result = result.add(getAttributeLevel(i, false).multiply(HUNDRED));
				} else {
					result = result.add(levelInfo(i*3, p.attributes[i])[0].multiply(HUNDRED));
				}
			}
		} else if (v == Achievement.INDEPENDENCE) {
			if (p.wealthOne) {
				result = one(5);
			}
		} else if (v == Achievement.UPPERMIDDLE) {
			if (p.wealthTwo) {
				result = one(10);
			}
		} else if (v == Achievement.MILLIONAIRE) {
			if (p.wealthThree) {
				result = one(15);
			}
		} else if (v == Achievement.CHARMING) {
			if (p.tanakaFeat) {
				result = one(10);
			}
		} else if (v == Achievement.BLUEBLOOD) {
			if (p.duMontFeat) {
				result = one(5);
			}
		} else if (v == Achievement.BATTLETESTED) {
			if (p.jackalFeat) {
				result = one(10);
			}
		} else if (v == Achievement.ASSISTANT) {
			if (p.heiligFeat) {
				result = one(10);
			}
		} else if (v == Achievement.INVESTIGATOR) {
			if (p.investigatorFeat) {
				result = one(5);
			}
		} else if (v == Achievement.SAVIOR) {
			if (p.saviorFeat) {
				result = one(15);
			}
		} else if (v == Achievement.COLLEGETOWNDESTROYED) {
			if (p.collegeTownDestruction) {
				result = one(10);
			}
		} else if (v == Achievement.METROPOLISFALLEN) {
			if (p.metropolisFall) {
				result = one(10);
			}
		} else if (v == Achievement.TRUTHSEEKER) {
            if (p.hashimotoFeat) {
                result = one(10);
            }
        }
		if (p == currentPlaythrough) {
			v.lastRecordedScore = result;
		}
		return result;
	}
	
	public static BigInteger[] gainedProgress(Action a, BigInteger staminaSpent) {
		BigInteger gainedRelationship = staminaSpent;
		if (a == Action.SLEEPOVER) {
			gainedRelationship = BigInteger.valueOf(2000);
		} else if (a == Action.HISTORYSNOOZE || a == Action.DOORUNLOCKED || a == Action.DOORUNLOCKEDVACATION) {
			gainedRelationship = BigInteger.valueOf(2000);
		} else if (a == Action.DUMONTSPA) {
			gainedRelationship = BigInteger.valueOf(5000);
		}
		if (a.relationship >= 0) {
			if (currentPlaythrough.upgradeLevels[24] > 0 && a.healthCost.compareTo(BigInteger.ZERO) > 0) {
				gainedRelationship = gainedRelationship.add(a.healthCost.multiply(BigInteger.valueOf(currentPlaythrough.upgradeLevels[24])).divide(BigInteger.TEN));
			}
			if (stanceRoutine() == RoutineElements.VULNERABLE) {
				gainedRelationship = gainedRelationship.add(BigInteger.valueOf(5000));
			} else if (stanceRoutine() == RoutineElements.GENEROUS) {
				gainedRelationship = gainedRelationship.add(BigInteger.valueOf(2500));
			} else if (stanceRoutine() == RoutineElements.FOCUSED) {
				gainedRelationship = gainedRelationship.add(BigInteger.valueOf(1500));
			}
			if (!getRelationshipMultiplier(a).equals(HUNDRED)) {
				gainedRelationship = gainedRelationship.multiply(getRelationshipMultiplier(a)).divide(HUNDRED);
			}
			gainedRelationship = gainedRelationship.multiply(charismaMultiplier()).divide(HUNDRED);
			if (equipmentRoutine() == RoutineElements.EYECATCHING) {
				gainedRelationship = gainedRelationship.multiply(BigInteger.valueOf(2));
			}
			if (bodyRoutine() == RoutineElements.SCARRED) {
				gainedRelationship = gainedRelationship.multiply(BigInteger.valueOf(4)).divide(BigInteger.valueOf(5));
			}
		} else {
			gainedRelationship = BigInteger.ZERO;
		}
		BigInteger gainedAttribute = staminaSpent;
		if (a == Action.DUMONTSPA) {
			gainedAttribute = BigInteger.valueOf(2000);
		}
		if (a.attribute >= 0) {
			if (currentPlaythrough.upgradeLevels[24] > 0 && a.healthCost.compareTo(BigInteger.ZERO) > 0) {
				gainedAttribute = gainedAttribute.add(a.healthCost.multiply(BigInteger.valueOf(currentPlaythrough.upgradeLevels[24])).divide(BigInteger.TEN));
			}
			 if (stanceRoutine() == RoutineElements.FOCUSED) {
				gainedAttribute = gainedAttribute.add(BigInteger.valueOf(1500));
			} else if (stanceRoutine() == RoutineElements.SELFDESTRUCTIVE && staminaSpent.compareTo(ten(4)) >= 0 && !a.forbidden) {
				gainedAttribute = gainedAttribute.add(hundred(1));
			} else if (stanceRoutine() == RoutineElements.LONER) {
                 gainedAttribute = gainedAttribute.add(BigInteger.valueOf(3500));
            }
			if (a.attribute == 0 && bodyRoutine() == RoutineElements.TRAINED) {
				gainedAttribute = gainedAttribute.add(gainedAttribute);
			}
			if (!getAttributeMultiplier(a).equals(HUNDRED)) {
				gainedAttribute = gainedAttribute.multiply(getAttributeMultiplier(a)).divide(HUNDRED);
			}
			gainedAttribute = gainedAttribute.multiply(academicsMultiplier()).divide(HUNDRED);
			gainedAttribute = gainedAttribute.multiply(relationshipMultiplier(a.attribute)).divide(HUNDRED);
		} else {
			gainedAttribute = BigInteger.ZERO;
		}
		BigInteger gainedGoal = staminaSpent;
		if (a == Action.RECEIVETREATMENT) {
			gainedGoal = ten(2);
		}
		if (a.ownGoal != null && !allGoalsComplete(a.ownGoal.index, false)) {
			if (currentPlaythrough.upgradeLevels[24] > 0 && a.healthCost.compareTo(BigInteger.ZERO) > 0) {
				gainedGoal = gainedGoal.add(a.healthCost.multiply(BigInteger.valueOf(currentPlaythrough.upgradeLevels[24])).divide(BigInteger.TEN));
			}
			if (stanceRoutine() == RoutineElements.TOUGH) {
				gainedGoal = gainedGoal.add(THOUSAND);
			} else if (stanceRoutine() == RoutineElements.GENEROUS) {
				gainedGoal = gainedGoal.add(BigInteger.valueOf(2500));
			} else if (stanceRoutine() == RoutineElements.FOCUSED) {
				gainedGoal = gainedGoal.add(BigInteger.valueOf(1500));
			} else if (stanceRoutine() == RoutineElements.SELFDESTRUCTIVE && staminaSpent.compareTo(ten(4)) >= 0 && !a.forbidden) {
				gainedGoal = gainedGoal.add(hundred(1));
			} else if (stanceRoutine() == RoutineElements.LONER) {
                gainedGoal = gainedGoal.add(one(35));
            }
			if (equipmentRoutine() == RoutineElements.LARCENY) {
				gainedGoal = gainedGoal.multiply(BigInteger.valueOf(3)).divide(BigInteger.valueOf(2));
			}
			if (!getGoalMultiplier(a).equals(HUNDRED)) {
				gainedGoal = gainedGoal.multiply(getGoalMultiplier(a)).divide(HUNDRED);
			}
			gainedGoal = gainedGoal.multiply(focusMultiplier()).divide(HUNDRED);
			if (a.relationship >= 0) {
				gainedGoal = gainedGoal.multiply(relationshipMultiplier(a.relationship)).divide(HUNDRED);
			}
		} else {
			gainedGoal = BigInteger.ZERO;
		}
		return new BigInteger[]{gainedRelationship, gainedAttribute, gainedGoal};
	}
	
	public static BigInteger getAttributeMultiplier(Action a) {
		BigInteger result = a.attributeMultiplier;
		if (a.isBartending()) {
			result = result.add(BigInteger.valueOf(50L *getGoalLevel(7, false)));
		}
        if (!a.forbidden && currentPlaythrough.currentDay < currentPlaythrough.upgradeLevels[21]) {
            result = result.multiply(BigInteger.valueOf(3));
        }
		return result;
	}
	
	public static BigInteger getRelationshipMultiplier(Action a) {
		BigInteger result = a.relationshipMultiplier;
        if (!a.forbidden && currentPlaythrough.currentDay < currentPlaythrough.upgradeLevels[21]) {
            result = result.multiply(BigInteger.valueOf(3));
        }
        return result;
	}
	
	public static BigInteger getGoalMultiplier(Action a) {
		return a.goalMultiplier;
	}
	
	public static Scene getPlotScene(PlotEvent p) {
		if (p == null) {
			return null;
		}
		//autoOn = false;
        //skippingStory = false;
		Scene result = null;
		if (p == PlotEvent.ABDUCTIONMISSED) {
			if (getGoalLevel(6, false) > 0) {
				result = new Scene(8);

				result.tracks[0] = Music.SILENCE;
				result.backgrounds[0] = "dorm";
				if (currentPlaythrough.weeklyActions[weekDayNumber()][5].baseCost.compareTo(BigInteger.ZERO) < 0) {
					result.screens[0].attach("The next morning, you're woken up by a phone call.  ");
				} else {
					result.screens[0].attach("You get home as the sun begins to rise.  But before you can get settled in, you receive a phone call.  ");
				}
				result.screens[0].attach("It's " + DuMont() + ".  What could " + heShe(2) + " want to talk to you about?");

				result.backgrounds[1] = "callingMansion";
				result.characters[1] = new String[]{"", "dumont"};
				result.emotions[1] = new String[]{"", "Sad"};
				result.screens[1].attach("\"I have bad news.  You might want to sit down.\"\n\n", 2);
				result.screens[1].attach("For " + himHer(2) + " to say that as soon as you pick up, it really must be something serious.\n\n");
				result.screens[1].attach("\"It's about your friend, " + fullName(5) + ".\"\n\n", 2);
				result.screens[1].attach("You've mentioned " + Tanaka() + " to " + DuMont() + " in passing before.  But why would " + DuMont() + " be calling you about " + himHer(5) + "?");

				result.emotions[2] = new String[]{"", "Neutral"};
				result.tracks[2] = Music.REPORTING;
				result.screens[2].attach("\"On " + hisHer(5) + " way home from class yesterday, " + heShe(5) + " was abducted.\"\n\n", 2);
				result.screens[2].attach("It takes a moment for " + DuMont() + "'s words to settle in.  " + Tanaka() + " had asked you to walk " + himHer(5) + " home yesterday.  ");
				if (getGoalLevel(1, false) > 3) {
					result.screens[2].attach("But with how much time you've been spending together lately, skipping one afternoon didn't seem like a big deal.\n\n");
				} else if (getGoalLevel(1, false) == 3) {
					result.screens[2].attach("But now that " + heShe(5) + "'s made it clear that " + heShe(5) + "'s not really interested in you, you didn't take " + himHer(5) + " seriously.\n\n");
				} else {
					result.screens[2].attach("But you've been busy with other things, so you didn't take " + himHer(5) + " up on it.\n\n");
				}
				result.screens[2].attach("\"Are you alright?\"\n\n", 2);
				result.screens[2].attach("You're pretty sure that you're alright.  But what about " + Tanaka() + "?  Who took " + himHer(5) + "?  Are they demanding a ransom?");

				result.emotions[3] = new String[]{"", "Uncomfy"};
				result.screens[3].attach("\"There hasn't been any ransom demand.  The identity of the abductors is unknown.  I did hire somebody to look into it overnight...\"\n\n", 2);
				result.screens[3].attach("And?\n\n");
				result.screens[3].attach("\"It doesn't look good.  Whoever they were, they fled the country, and they probably took " + Tanaka() + " with them.  They could be anywhere in the world by now.  The police have already pretty much given up.\"\n\n", 2);
				result.screens[3].attach("What about " + DuMont() + "?  Has " + heShe(2) + " given up?  Can " + heShe(2) + " hire some more investigators to try and track " + Tanaka() + " down?\n\n");
				result.screens[3].attach("\"... I'm sorry.\"", 2);

				result.emotions[4] = new String[]{"", "Sad"};
				result.screens[4].attach("\"There are dozens of abductions every year in this city alone.  If I made a habit of trying to solve them all myself, then I'd have bankrupted myself years ago, and the two of us never would have met.\"\n\n", 2);
				result.screens[4].attach("Then why is " + DuMont() + " even calling you about this?\n\n");
				result.screens[4].attach("\"I just thought you should hear about it from me first.\"", 2);

				result.emotions[5] = new String[]{"", "Uncomfy"};
				result.screens[5].attach("Well, " + DuMont() + "'s help might not be necessary.  You're making some money of your own right now.  It's not even close to " + DuMont() + "'s fortune, but ");
				if (getGoalLevel(1, false) > 3) {
					result.screens[5].attach(Tanaka() + " needs your help.  ");
				} else if (getGoalLevel(1, false) == 3) {
					result.screens[5].attach("even if " + Tanaka() + " doesn't actually care about you, leaving " + himHer(5) + " at the mercy of whoever abducted " + himHer(5) + " would be pretty cold.  ");
				} else {
					result.screens[5].attach("leaving " + Tanaka() + " at the mercy of whoever abducted " + himHer(5) + " would be pretty cold.  ");
				}
				result.screens[5].attach("There ought to be something you can do.\n\n");
				result.screens[5].attach("\"About that...  I can put you in touch with the same fixer I hired last night to look into the situation.  " + HeShe(3) + "'s already told me that " + heShe(3) + "'d be willing to continue " + hisHer(3) + " investigation for the right price.\"\n\n", 2);
				result.screens[5].attach("If that price was too high for " + DuMont() + ", then it's hard to imagine that you'll be able to afford it anytime soon.\n\n");
				result.screens[5].attach("\"I expect that the price " + heShe(3) + "'ll quote for you is quite a bit lower than the one " + heShe(3) + " quoted for me.\"", 2);

				result.emotions[6] = new String[]{"", "Neutral"};
				result.screens[6].attach("\"" + HeShe(3) + "'s a friend, and I've put my life in " + hisHer(3) + " hands more than once.  Frankly, I wouldn't recommend spending your savings chasing after someone who might already be beyond saving.  But if you're going to do it anyway, then you might as well use it to hire the person with the best chance of success.\"\n\n", 2);
				result.screens[6].attach(DuMont() + " thinks you should just write " + Tanaka() + " off as a lost cause?\n\n");
				result.screens[6].attach("\"You can't stop every tragedy.  It's important to focus your resources on the people you can actually save.\"", 2);

				result.backgrounds[7] = "dorm";
				result.characters[7] = new String[0];
				result.screens[7].attach("You talk with " + DuMont() + " a bit more, and " + heShe(2) + " tells you everything " + heShe(2) + " was able to find out about the abduction.  " + DuMont() + " also gives you the contact information for the fixer.  Apparently " + heShe(3) + "'s a regular at " + DuMont() + "'s nightclub");
				if (getAttributeLevel(2, false).compareTo(BigInteger.valueOf(3)) > 0) {
					result.screens[7].attach(", and you probably already have enough money to get " + hisHer(3) + " attention.  It's up to you to decide whether to approach " + himHer(3) + ".\n\n");
				} else {
					result.screens[7].attach(", so as soon as you have the money, it'll be as simple as approaching " + himHer(3) + " there.\n\n");
				}
				result.screens[7].attach("Afterward, you lay down on your bed for awhile and think about " + Tanaka() + ".  What should you do now?");
			} else {
				result = new Scene(5);

				result.tracks[0] = Music.SILENCE;
				result.backgrounds[0] = "dorm";
				if (currentPlaythrough.weeklyActions[weekDayNumber()][5].baseCost.compareTo(BigInteger.ZERO) < 0) {
					result.screens[0].attach("The next morning, you're woken up by a phone call.  ");
				} else {
					result.screens[0].attach("You get home as the sun begins to rise.  But before you can get settled in, you receive a phone call.  ");
				}
				result.screens[0].attach("It's one of your acquaintances from " + Tanaka() + "'s group of admirers.  You aren't really close with " + himHer(-1) + ", so it's surprising to get a call like this.");

				result.screens[1].attach(HeShe(-1) + " tells you what happened, but the words don't register at first.  It seems like this must just be some sort of stupid prank.  You almost hang up on " + himHer(-1) + ".\n\n");
				result.screens[1].attach("But " + hisHer(-1) + " serious tone of voice eventually gets it across to you.  This isn't a joke.");

				result.tracks[2] = Music.REPORTING;
				result.screens[2].attach(Tanaka() + " was abducted on " + hisHer(5) + " way home from class yesterday.\n\n");
				result.screens[2].attach(HeShe(5) + " had asked you to walk " + himHer(5) + " home.  ");
				if (getGoalLevel(1, false) > 3) {
					result.screens[2].attach("But with how much time you've been spending together lately, skipping one afternoon didn't seem like a big deal.\n\n");
				} else if (getGoalLevel(1, false) == 3) {
					result.screens[2].attach("But now that " + heShe(5) + "'s made it clear that " + heShe(5) + "'s not really interested in you, you didn't take " + himHer(5) + " seriously.\n\n");
				} else {
					result.screens[2].attach("But you've been busy with other things, so you didn't take " + himHer(5) + " up on it.\n\n");
				}
				result.screens[2].attach("Could you have stopped this from happening?");

				result.screens[3].attach("Apparently " + Tanaka() + "'s admirers are all going to pool their resources and try to hire a private investigator or something to track " + himHer(5) + " down.  There's been some talk of searching online, or perhaps even using the dark web, but their consensus is that it'd be better to meet someone face-to-face in order to judge whether they seem competent and trustworthy enough.  And fortunately, there seems to be a good place to do just that.\n\n");
				result.screens[3].attach("Over on the bad side of town, there's a nightclub which is known as a notorious gathering hub for individuals who operate in the gray areas of the law.  It wouldn't even be surprising if the people who abducted " + Tanaka() + " were actually regulars there.  In order to catch them, it might be necessary to descend to their level.");

				result.screens[4].attach("At this moment, some of " + Tanaka() + "'s most fervent fans are emptying their bank accounts and taking out loans.  You don't really have the financial leverage to do something like that.  But now that you know where everybody will be gathering, maybe there's some other way for you to help.");
			}
            result.dayEnd = true;
		} else if (p == PlotEvent.COLLEGETOWNDESTRUCTION) {
			result = new Scene(10);
			result.loopEnd = true;

			result.tracks[0] = Music.SILENCE;
			result.backgrounds[0] = "black";
			if (currentPlaythrough.weeklyActions[(weekDayNumber()+6)%7][5] != null && currentPlaythrough.weeklyActions[(weekDayNumber()+6)%7][5].baseCost.compareTo(BigInteger.ZERO) < 0) {
				result.screens[0].attach("You sleep well, full of plans for tomorrow.  But unbeknownst to you, fate has something else in store.  By the time you wake up, it's already too late.\n\n");
			} else {
				result.screens[0].attach("You stay up through the night, working to achieve what's important to you.  But unbeknownst to you, fate has something else in store.  By the time the sun comes up, it's already too late.\n\n");
			}
			result.screens[0].attach("As you walk down the street, a sudden commotion catches your attention.  When you follow everyone's gaze toward the horizon, it's plain to see why.  The dark shape rising up above the skyline is beyond your comprehension.\n\n");
			result.screens[0].attach("What is it?  Some sort of atmospheric phenomenon?  An optical illusion?  It's hard to believe that something so large could be a real, physical entity.");

			result.screens[1].attach("And it keeps growing.  Or maybe it's just getting closer.\n\n");
			result.screens[1].attach("The people around you are beginning to panic and run for cover, but you find yourself entranced.  You can't help but try to wrap your head around whatever it is you're seeing.  It's hard to tell at this distance, but it seems to be mechanical in nature.\n\n");
			result.screens[1].attach("As you watch, lines of brilliant lights along the structure flare to life.");

			result.sounds[2] = Effect.GROWL;
			result.backgrounds[2] = "elohim2";
			result.screens[2].attach("It's a ship.  That seems to be the best way to describe it.  A ship that's even larger than a city.\n\n");
			result.screens[2].attach("Who could have made something at such a large scale?  And for what purpose?  What's it doing here?\n\n");
			result.screens[2].attach("The glowing lines along the sides of the ship grow brighter, and a possible answer enters your head.  Are those some sort of weapon?");

			result.sounds[3] = Effect.EXPLOSION;
			result.backgrounds[3] = "elohim3";
			result.screens[3].attach("They are.  Bright beams of light lance down toward the skyline below.  But before they can strike, something intercepts them.\n\n");
			result.screens[3].attach("You can only describe it as a force field.  At least the giant ship is understandable as something that could be built with a big enough investment of industrial effort.  But this is on another level entirely.  ");
			if (getGoalLevel(18, false) > 0) {
				result.screens[3].attach("The energy shield is clearly centered around The Tower, but even with everything " + Heilig() + " has said about the advanced technology there, it's hard to believe that projecting some sort of hard light dome around the city is something they can do.\n\n");
			} else {
				result.screens[3].attach("It seems like you've gotten yourself caught in the middle of a war where both sides have access to some incredible technology.\n\n");
			}
			result.screens[3].attach("Whatever's actually going on here, it looks like you'll at least be safe for the moment.");

			result.sounds[4] = Effect.EXPLOSION;
			result.backgrounds[4] = "elohim2";
			result.screens[4].attach("But then, with the next blast from the huge ship, the energy shield flickers and fails.  Maybe you aren't safe at all.\n\n");
			result.screens[4].attach("It's only now that you realize that watching the clash between these advanced technologies was probably not the most mindful use of your time.  Was there something else you could have done to prepare for what's about to happen next?\n\n");
			result.screens[4].attach("By now, it's too late.  The lines of energy alongside the ship begin to brighten one more time.");

			result.sounds[5] = Effect.EXPLOSION;
			result.backgrounds[5] = "black";
			result.screens[5].attach("This time, they score a direct hit on the city.  The shockwave spreads outward, causing the buildings to collapse like a house of cards.  A rumble from up above is the only warning you have before you're caught up in the destruction.\n\n");
			result.screens[5].attach("A heavy impact knocks you down to the ground.");

			result.screens[6].attach("You briefly lose consciousness.  When you wake up, you find that you're trapped.  Everything is dark.  When you try to move your arms, they're blocked by layers of broken concrete.\n\n");
			result.screens[6].attach("But you can't just stay here and wait for rescue.  You can feel water flowing from a broken pipe or something, running down your torso and pooling around your legs.  If you don't get out of here now, then you might drown.\n\n");
			result.screens[6].attach("However, when you try to sit up, a white-hot spike of pain shoots through your whole body, and you start to choke on the water that abruptly starts to gush into your mouth.  It has an awful, metallic taste.\n\n");
			result.screens[6].attach("That's what makes you realize that it's not some broken water pipe that's soaking you.  It's your own blood.");

			result.screens[7].attach("You realize that you're going to die.  ");
			if (dietRoutine() == RoutineElements.CANCERJUICE) {
				result.screens[7].attach("Even 'cancer juice' can't save you from this kind of catastrophic damage.  You're feeling hotter and hotter, steam beginning to rise from your wounds.\n\n");
				result.screens[7].attach(Heilig() + " warned you about this.  When an injury is bad enough, the waste heat from the nanomachines trying to repair your body becomes so intense that it causes burns.  And as they try to repair the burns, they'll grow even hotter and cause more burns in turn.\n\n");
				result.screens[7].attach("At least you'll probably pass out from blood loss before you burst into flames.  Already, you can feel your consciousness starting to grow hazy.");
			} else {
				result.screens[7].attach("With how the pain in your torso is starting to build up, maybe that's a mercy.  In the moment before you lost consciousness, you saw tons upon tons of debris falling toward you.  It's probably better to bleed out quickly than to slowly die of suffocation or starvation.\n\n");
				result.screens[7].attach("And yet you can't help but try to think of something you could do to stem the bleeding and survive long enough to be rescued.  It isn't easy to give up.\n\n");
				result.screens[7].attach("But it's futile.  Your legs won't listen to you, your arms are pinned in place, and your consciousness is beginning to grow hazy.");
			}

			result.screens[8].attach("You find yourself wondering whether anyone else was lucky enough to avoid getting killed like this.  " + Yumeno() + " was probably too busy gaming to even notice that anything was happening before the blast hit.  And... this is a weekend, so " + Hashimoto() + " was probably sleeping.  It's unlikely that either of them had a chance to escape.\n\n");
			if (getGoalLevel(6, false) > 0) {
				result.screens[8].attach("What about " + DuMont() + "?  " + HisHer(2) + " mansion is some distance from the city center.  ");
				if (getGoalLevel(13, false) > 0 || getGoalLevel(21, false) > 0) {
					result.screens[8].attach("And " + Jackal() + "?  " + HeShe(3) + "'s good at thinking on " + hisHer(3) + " feet.  ");
					if (simulatedRelationships[4].compareTo(BigInteger.ZERO) > 0) {
						result.screens[8].attach("And " + Heilig() + "...  The Tower seemed to be prepared for this.  ");
					}
					result.screens[8].attach("Hopefully they managed to get away.\n\n");
				} else {
					result.screens[8].attach("Hopefully " + heShe(2) + " managed to get away.\n\n");
				}
			}
			if (currentPlaythrough.personStatus[5] == Locale.COLLEGETOWN) {
				result.screens[8].attach("And " + Tanaka() + "...  Maybe it would have been better to let " + himHer(5) + " be abducted.  What an absurd thought.");
			} else if (getGoalLevel(28, false) > 0) {
				result.screens[8].attach("At least you know that " + Tanaka() + " is relatively safe.  Maybe it's lucky that " + heShe(5) + " got abducted after all.");
			} else if (getGoalLevel(14, false) > 0) {
				result.screens[8].attach("And " + Tanaka() + "...  You were so close to being able to rescue " + himHer(5) + ".  But at least you know that " + heShe(5) + " wasn't caught up in this.");
			} else {
				result.screens[8].attach("Is " + Tanaka() + " safe?");
			}

			result.screens[9].attach("In any case, it's all out of your hands now.  There's nothing more you can do.  It's an oddly comforting thought.  You finally get to rest.");
		} else if (p == PlotEvent.HELINTRO) {
			result = new Scene(5);
			result.loopEnd = true;

			result.backgrounds[0] = "black";
			result.screens[0].attach("You wake up in an unfamiliar place.  Wherever it is, your limbs are still immobilized.  In fact, you can't feel your body at all.\n\n");
			result.screens[0].attach("Wait, 'still' immobilized?  Were they immobilized before?  What were you doing, just now?  Something about... a crash?  An explosion?  Your memories are disorganized, and you can't find what you're looking for.\n\n");
			result.screens[0].attach("Somehow, you can't make your mind work.  When you have questions, you should be able to reason your way toward the answers.  But when you try to do that, everything seems to halt up, and you end up right back where you started.");

			result.characters[1] = new String[]{"hel"};
			result.outfits[1] = new String[]{"Shadowed"};
			result.emotions[1] = new String[]{"Grin"};
			result.modifiers[1] = new Modifier[]{Modifier.CLOSEUP};
			result.screens[1].attach("You realize that you're not alone here.\n\n");
			result.screens[1].attach("\"As I thought, you lived there as well.  Good.  This means that I don't need to change my established pattern.\"\n\n", 12);
			result.screens[1].attach("Is " + heShe(12) + " expecting you to answer?  You don't think you have a mouth right now.  For that matter, you aren't even sure if you have ears.  Instead of 'hearing' " + hisHer(12) + " voice, it feels more like someone else's thoughts are echoing inside your mind.");

			result.modifiers[2] = new Modifier[]{Modifier.CLOSEUP};
			result.emotions[2] = new String[]{"Grin"};
			result.screens[2].attach("\"This way, you should need no further encouragement.  You'll have more reason than most to be dissatisfied with how things always turn out.\"\n\n", 12);
			result.screens[2].attach("Is " + heShe(12) + "... happy?  Angry?  You don't have eyes, either, but you can tell.  " + HeShe(12) + "'s speaking through clenched teeth.\n\n");
			result.screens[2].attach("\"I will place my hopes on your shoulders.\"", 12);

			result.modifiers[3] = new Modifier[]{Modifier.CLOSEUP};
			result.emotions[3] = new String[]{"Grin"};
			result.screens[3].attach(HeShe(12) + "'s expecting something from you?  Why?  You don't even have a body anymore.  You're dead.  You can rest now.\n\n");
			result.screens[3].attach("\"Yes, I was right to choose you.  I think we'll get along quite well.  Do you want to rest?  Do you want to have peace?\"", 12);

			result.modifiers[4] = new Modifier[]{Modifier.CLOSEUP};
			result.emotions[4] = new String[]{"Grin"};
			result.screens[4].attach("\"Then wake up!  Cast aside the illusion of your humanity!  Slay the gods of this world!  Every last one of us!\"", 12);
		} else if (p == PlotEvent.METROPOLISINVASION) {
			result = new Scene(9);
			result.loopEnd = true;

            result.backgrounds[0] = "black";
            if (getGoalLevel(28, true) > 0) {
                result.screens[0].attach("It's December 28th, the last day before the Lunar Syndicate's planned coup.  In the end, you weren't able to finalize a foolproof plan for " + Tanaka() + " to fake " + hisHer(5) + " own death, but ");
                if (getGoalLevel(1, true) >= 4) {
                    result.screens[0].attach(heShe(5) + " still seems to have been bolstered by the knowledge that " + Artemis() + " shouldn't be able to find you, let alone retaliate against you, even if " + heShe(17) + " does find out about " + Tanaka() + "'s desertion.  ");
                } else {
                    result.screens[0].attach(heShe(5) + " says that you really helped " + himHer(5) + " work up the courage to go through with the idea.  ");
                }
                result.screens[0].attach(HeShe(5) + " plans to just keep " + hisHer(5) + " eyes open and look for an opportunity to slip away from the Syndicate during the fighting.\n\n");
                result.screens[0].attach("As for your part, it's time to leave the city.  " + Tanaka() + " will have an easier time escaping if " + heShe(5) + " doesn't have a non-Syndicate civilian like you accompanying " + himHer(5) + ".  Your things are already packed, and you and " + Tanaka() + " have planned a rendezvous point a few towns away.  All that's left is to rent a car and load it with your luggage.\n\n");
            } else {
                result.screens[0].attach("As far as you knew, this was just supposed to be another regular day.  You had planned on going about your regular business, looking forward to a new year in this new city, continuing your meteoric rise to wealth and success\n\n");
            }
            result.screens[0].attach("But before the sun has even completely risen, the sound of distant explosions tells you that something has gone horribly wrong.");

            result.backgrounds[1] = "coup";
            result.tracks[1] = Music.SILENCE;
            result.screens[1].attach("The city is under attack.  Foreign soldiers and their war machines move through the streets, clearing each building in turn.  Members of the local police and military are disarmed and taken into custody, along with other 'persons of interest' and anybody unable to present their identification to the soldiers.  The entire city is being locked down.\n\n");
            if (getGoalLevel(28, true) > 0) {
                result.screens[1].attach("Without a doubt, this is the coup that was supposed to happen on the 30th.  Was " + Artemis() + "'s information wrong?");

                result.screens[2].attach("You don't have time for idle questions.  ");
            } else {
                result.screens[1].attach("This is obviously some sort of coup.  The soldiers' vehicles are equipped with loudspeakers which broadcast an announcement that they're here to assist the 'legitimate' government in keeping the peace.  The message is spoiled somewhat by the sounds of sporadic gunfire echoing across the city.");

                result.screens[2].attach("It shouldn't have anything to do with you, but unfortunately, you're in the wrong place at the wrong time.  ");
            }
            result.screens[2].attach("By the time you realize what's happening, there are already soldiers on the street outside.  If you try to go outside and make a run for freedom, you'll just be shot.  You can only wait helplessly until they make their way to your building.\n\n");
            result.screens[2].attach("When the soldiers arrive, they check your papers and immediately find them suspicious.  Because you're such a recent arrival to this city, there's not much to prove that you're really who you say you are.  It must look like you're hiding your true identity.\n\n");
            result.screens[2].attach("They take you at gunpoint to a makeshift detention center.");

            result.backgrounds[3] = "black";
            result.screens[3].attach("As you wait for them to realize that you're no threat to the new regime, the days turn into weeks and then months.");

            result.screens[4].attach("The conditions in the detention center are poor.  You don't get much food, and they make the prisoners perform hard labor in order to keep them too busy to plot escape.  The soldiers keeping watch seem to lack a sense of empathy, and because you're a foreigner, even the other prisoners are reluctant to talk with you.\n\n");
            result.screens[4].attach("All the while, you hear scattered rumors about what's happening outside.  It sounds like the whole world is being engulfed by war.  Entire cities are being wiped off the map.  As long as you're stuck in here, you have no way of verifying which of those rumors are fact and which are fiction.\n\n");
            result.screens[4].attach("But you're smart and strong.  It doesn't take long before you start to pick up the language of the invaders as well.  You're able to build a stockpile of improvised tools in an out-of-the-way corner of the detention camp.  A plan to break out begins to come together.");

            result.screens[5].attach("However, one day, you wake to find that your body is no longer obeying your commands.  You open your eyes, but all you can see is darkness.\n\n");
            result.screens[5].attach("At first, the soldiers just think that you're pretending to be sick in order to get out of your daily hard labor.  But it soon becomes clear that you really do lack the strength to even lift your head.  After a discussion with their superiors, they decide to throw you in a solitary cell and just wait to see if you recover on your own.\n\n");
            result.screens[5].attach("One soldier grabs you by the shoulders and another grabs you by the feet, and together, they haul you to the other side of the detention center.");

            result.screens[6].attach("\"Another one dying of exhaustion?  If we're gonna work 'em all to death, it'd make more sense to just shoot 'em and get it over with.\"\n\n");
            result.screens[6].attach("\"No, it's definitely not exhaustion.  I saw this one in the work yard the other day, " + heShe(-1) + " was holding up fine.\"\n\n");
            result.screens[6].attach("The soldiers engage in idle speculation about your fate, and you don't even have the strength to speak up.  You don't have any idea about what's wrong with you, either.  Are you going to die?  It seems like you are.");

            result.screens[7].attach("\"If some weird disease breaks out among the prisoners, then maybe I should file for a transfer to the front lines.  At least the combat pay would be nice.\"\n\n");
            result.screens[7].attach("\"Why do you need combat pay?  You'll just spend it all on superchats.\"\n\n");
            result.screens[7].attach("\"Hey, those superchats are money well spent.  " + fullName(8) + " is the light of my life.\"\n\n");
            result.screens[7].attach("They make light banter with each other, seemingly unbothered by the act of carrying a soon-to-be corpse.  Even as they talk, it becomes more and more difficult to make out the words.  Your ears are beginning to fail just like your eyes.");

            result.screens[8].attach("The only consolation is that it's not a painful death.  Every single one of your senses is fading away.  The world feels unreal.\n\n");
            result.screens[8].attach("By the time the soldiers stop walking, you're already gone.");
		} else if (p == PlotEvent.HASHIMOTOROMANCE1) {
            result = new Scene(33);

            result.backgrounds[0] = "dorm";
            result.screens[0].attach("Coming back home without " + Tanaka() + " wasn't an easy decision.  Even if " + heShe(5) + "'s not in too much immediate danger, " + heShe(5) + "'s still effectively a prisoner of the Lunar Syndicate.  Without your help, it's hard to believe that " + heShe(5) + "'ll be able to escape from a group like that on " + hisHer(5) + " own.\n\n");
            result.screens[0].attach("The Lunar Syndicate is an enormous, dangerous group of criminals whose leader seems almost omniscient.  That's half the reason you came back here.  It's clear that you don't yet have the skills or the resources necessary to go up against an enemy like that.  And the best way to get those skills and resources is to come back to a place where you have friends to help you out.\n\n");
            result.screens[0].attach("But that's only half the reason.  The other half is that you care about the people here, too.  There's more to your life than just " + Tanaka() + ".");

            result.characters[1] = new String[]{"hashimoto"};
            result.emotions[1] = new String[]{"Uncomfy"};
            result.screens[1].attach("Right now, you're filling " + Hashimoto() + " in on everything that happened.  There's a lot to talk about, so the two of you might not end up getting much sleep this morning.\n\n");
            result.screens[1].attach("\"You went through all of that for " + Tanaka() + "'s sake?  Honestly, I'm surprised you came back...\"\n\n", 0);
            result.screens[1].attach("Maybe it is surprising that you managed to come back.  If " + Tanaka() + " hadn't been there to trick the Syndicate soldiers into thinking you were on their side, then you might not have made it out alive.");

            result.emotions[2] = new String[]{"Neutral"};
            result.screens[2].attach("\"That's not what I meant.  I knew from the start that you'd find a way to rescue " + Tanaka() + ".  That's just the kind of person you are.  Even if they caught you, you would've pulled some sort of super spy shit to get out of there.\"\n\n", 0);
            result.screens[2].attach(Hashimoto() + " might be giving you too much credit.  But setting that aside, what was " + heShe(0) + " trying to get at?\n\n");
            result.screens[2].attach("\"I'm surprised that you even wanted to come back.  You're in love with " + Tanaka() + ", right?  Why else would you go that far for " + himHer(5) + "?\"\n\n", 0);
            result.screens[2].attach(Tanaka() + " needed help, and it looked like you might have the ability to provide it.  You can want to help somebody without being in love with " + himHer(5) + ".");

            result.emotions[3] = new String[]{"Surprise"};
            result.screens[3].attach("\"Are you serious?  Don't fuck with me, here.  There's a difference between 'helping' someone, like helping them move their stuff out of their ex's house or whatever, and... and tracking them halfway across the world to pick a fight with an international crime syndicate for their sake.  You get that, right?  Those are two very different things!\"\n\n", 0);
            result.screens[3].attach("It's true, though.  You might have had a crush on " + Tanaka() + " for awhile, but " + heShe(5) + "'s just a friend.\n\n");
            result.screens[3].attach("\"If you're willing to go that far for a 'friend', then just how far would you go for somebody you actually-\"", 0);

            result.emotions[4] = new String[]{"Uncomfy"};
            result.screens[4].attach(Hashimoto() + " suddenly pauses, a dejected expression flashing across " + hisHer(0) + " face.\n\n");
            result.screens[4].attach("\"Oh, wait.  I get it now.  There's somebody else, right?  If you've already got your heart set on another " + guyGirl(5) + ", then...\"\n\n", 0);
            result.screens[4].attach("No, that isn't it, either.  With how busy you've been lately, romance has been the last thing on your mind.");

            result.emotions[5] = new String[]{"Surprise"};
            result.screens[5].attach("\"Wait, th-then... you're still single?\"\n\n", 0);
            result.screens[5].attach("Of course you are.  With how you're travelling around the world and putting your life on the line, it's not like you have much choice.  It wouldn't be courteous to put your " + boyGirl(5) + "friend through something like that.  They'd never be able to know when you were going to come home, or if you were going to get yourself killed.\n\n");
            result.screens[5].attach("\"Oh... I see.\"", 0);

            result.emotions[6] = new String[]{"Neutral"};
            result.screens[6].attach(Hashimoto() + " seems to be taken aback at first, but " + heShe(0) + " recovers quickly.  The surprise on " + hisHer(0) + " face is replaced by annoyance.\n\n");
            result.screens[6].attach("\"Hold on.  That's bullshit.\"\n\n", 0);
            result.screens[6].attach(HeShe(0) + " disapproves of you being single?\n\n");
            result.screens[6].attach("\"It's not that.  I just don't like your reasons.  If you love someone, then being 'courteous' shouldn't matter.  Keeping your distance 'for their sake', that's what's bullshit.\"", 0);

            result.emotions[7] = new String[]{"Angry"};
            result.screens[7].attach("But if you do get involved with someone, and then you die, then you'll be putting that person through " + hisHer(5) + " " + boyGirl(-1) + "friend's death.  That would be painful.\n\n");
            result.screens[7].attach("\"More painful than never being in love in the first place!?  Not a fucking chance!\"\n\n", 0);
            result.screens[7].attach("It looks like this is turning into another debate.  Well, getting to enjoy this sort of thing again is part of why you wanted to come back home.  You had missed this.\n\n");
            result.screens[7].attach("\"Don't change the subject!  I want you to promise me right now, that if you ever fall in love with somebody, you're not gonna hold back just 'cause you're worried about dying.  You need to be honest, and come right out and say-\"", 0);

            result.emotions[8] = new String[]{"Uncomfy"};
            result.screens[8].attach(Hashimoto() + " abruptly pauses mid-word.\n\n");
            result.screens[8].attach("\"Shit.  It happened again.\"\n\n", 0);
            result.screens[8].attach("What's this, now?  What exactly happened?\n\n");
            result.screens[8].attach("\"It always goes like this.  The more I spend time with you, the more I look at my own life and see what I'm doing wrong.  It makes me feel like an idiot for not noticing it sooner.  ", 0);
            if (getGoalLevel(10, false) < 4) {
                result.screens[8].attach("It's what happened when I was just pointlessly fucking with people at the arcade.  ", 0);
            } else {
                result.screens[8].attach("It's what happened when I realized that there was no point in spending my nights spraying graffiti that would just get cleaned up in a few days.  ", 0);
            }
            result.screens[8].attach("And it's happening again now.\"", 0);

            result.emotions[9] = new String[]{"Frown"};
            result.modifiers[9] = new Modifier[]{Modifier.CLOSEUP};
            result.screens[9].attach(HeShe(0) + " steps closer to you.\n\n");
            result.screens[9].attach("\"Seriously, the more time we spend together, the more I... admire you.  You're everything that I want to be.\"\n\n", 0);
            result.screens[9].attach("It's rare for " + Hashimoto() + " to directly praise you like this.\n\n");
            result.screens[9].attach("\"Yeah, well, it's pretty fucking embarrassing.  But it's the truth.  You aren't just capable- I mean, the world is full of capable shitheads who are great at making things worse for everyone else.  It's the way that you use your abilities to help people.  You're... 'real'.  And I want to be 'real' like that too.\"\n\n", 0);

            result.emotions[10] = new String[]{"Neutral"};
            result.modifiers[10] = new Modifier[]{Modifier.CLOSEUP};
            result.tracks[10] = Music.SILENCE;
            result.screens[10].attach("What brought this on?  Wasn't " + Hashimoto() + " the one who said not to change the subject.\n\n");
            result.screens[10].attach("\"This is still the same subject.\"\n\n", 0);
            result.screens[10].attach("But weren't you talking about love?\n\n");
            result.screens[10].attach("\"Yeah.  And what I'm saying is that I'm... I'm completely in love with you.\"", 0);

            result.emotions[11] = new String[]{"Uncomfy"};
            result.modifiers[11] = new Modifier[]{Modifier.CLOSEUP};
            result.screens[11].attach("Oh.  So that's what this was about.\n\n");
            result.screens[11].attach("\"I'm not expecting you to love me back.  ", 0);
            if (currentPlaythrough.ownGender.presentation() == Gender.MALE && currentPlaythrough.personGenders[0].presentation() == Gender.FEMALE) {
                result.screens[11].attach("You probably haven't even been thinking of me as a girl.  ", 0);
            } else {
                result.screens[11].attach("I'm just a meathead, and you're some sort of supergenius.  ", 0);
            }
            result.screens[11].attach("But... I don't wanna be a hypocrite, so... I have to come out and say it.\"\n\n", 0);
            result.screens[11].attach(Hashimoto() + " managed to maintain eye contact for the love confession itself, but it seems like that was the limit of " + hisHer(0) + " nerve.  " + HeShe(0) + " trails off, " + hisHer(0) + " gaze wandering to the side.\n\n");
            result.screens[11].attach("And so, " + heShe(0) + "'s surprised when you step closer to " + himHer(0) + " in turn.");

            result.emotions[12] = new String[]{"Surprise"};
            result.modifiers[12] = new Modifier[]{Modifier.CLOSEUP};
            result.screens[12].attach(Hashimoto() + " is making a lot of assumptions.  ");
            if (currentPlaythrough.ownGender.presentation() == Gender.MALE && currentPlaythrough.personGenders[0].presentation() == Gender.FEMALE) {
                result.screens[12].attach("It's true that " + heShe(0) + " isn't exactly girly, but that's never been something you especially cared about.  And ");
            } else {
                result.screens[12].attach("Even if it's easy to make fun of " + himHer(0) + " sometimes, that doesn't mean you've been thinking of " + himHer(0) + " as an idiot.  After all, ");
            }
            if (getGoalLevel(27, false) > 0) {
                result.screens[12].attach("it was " + Hashimoto() + " who showed you the importance of living life like you might die tomorrow.  ");
            } else {
                result.screens[12].attach(Hashimoto() + " " + himHer(0) + "self taught you some of the skills you used to track down " + Tanaka() + ".  ");
            }
            result.screens[12].attach("If you're worthy of admiration, then " + Hashimoto() + " deserves credit for helping you reach that point.\n\n");
            result.screens[12].attach("\"Oh.\"\n\n", 0);
            result.screens[12].attach("Not to mention that " + Hashimoto() + " is worthy of admiration in " + hisHer(0) + " own right.  In the time you've known " + himHer(0) + ", " + heShe(0) + "'s shown an unflinching willingness to change and improve " + himHer(0) + "self.  " + HeShe(0) + " never lets " + himHer(0) + "self get complacent.  " + HeShe(0) + "'s always thinking about how " + heShe(0) + " can do better.");

            result.emotions[13] = new String[]{"Uncomfy"};
            result.modifiers[13] = new Modifier[]{Modifier.CLOSEUP};
            result.screens[13].attach("\"You aren't saying that just to be nice, are you?\"\n\n", 0);
            result.screens[13].attach(Hashimoto() + " is normally so headstrong.  Why is " + heShe(0) + " having trouble accepting your praise now?\n\n");
            result.screens[13].attach("\"It was easy to act tough back when you seemed like some dumbass who couldn't even throw a proper punch.  But now... it feels like you've gotten ahead of me.  I'm still stuck in my own head, trying to figure my own shit out, and you're out there making a difference to other people.\"\n\n", 0);
            result.screens[13].attach("Why should that matter?\n\n");
            result.screens[13].attach("\"Because your world is getting so much bigger than mine.  Is... Is spending time with me really what you want to be doing most right now?  Am I really enough to satisfy you?\"", 0);

            result.emotions[14] = new String[]{"Frown"};
            result.modifiers[14] = new Modifier[]{Modifier.CLOSEUP};
            result.screens[14].attach("Now that " + Hashimoto() + " has told you about " + hisHer(0) + " feelings, you're seeing everything in a new light.  It must have been painful for " + himHer(0) + " to watch you go, thinking that those feelings were completely unrequited.  If " + heShe(0) + " had said this to you before you left, would you have been able to bring yourself to leave the country and chase after " + Tanaka() + "?\n\n");
            result.screens[14].attach("It's true that you had only been thinking about " + Hashimoto() + " as a friend.  But now that the possibility of being more than that has come up... it sounds wonderful.  When you left for the Metropolis, you were worried that you might never see " + himHer(0) + " again.  From now on, the two of you should spend more time together.  Though, maybe there's no need to force it, since you could well end up spending your entire lives-\n\n");
            result.screens[14].attach("\"Stop.  That's not what I was asking.\"\n\n", 0);
            result.screens[14].attach("Despite " + hisHer(0) + " hesitation a moment ago, " + Hashimoto() + "'s voice is firm now.");

            result.emotions[15] = new String[]{"Uncomfy"};
            result.modifiers[15] = new Modifier[]{Modifier.CLOSEUP};
            result.screens[15].attach("\"If we could settle down and live a regular life together, that... that would be great, obviously.  But I don't want you to give up what you're doing now.  If you were the kind of " + guyGirl(-1) + " who would drop everything just to spend more time with me, I never would've fallen in love with you in the first place.\"\n\n", 0);
            result.screens[15].attach(Hashimoto() + " hesitates.  " + HeShe(0) + "'s having trouble meeting your gaze again.\n\n");
            result.screens[15].attach("\"And... I mean, even if you did drop everything, you never know what could happen.  It's not like it would actually guarantee that we'd have a chance to be happy together.\"", 0);

            result.emotions[16] = new String[]{"Closed"};
            result.modifiers[16] = new Modifier[]{Modifier.CLOSEUP};
            result.screens[16].attach("\"So... I'm just asking you about the here and now.  Is that enough for you?  I want to know that you won't have any regrets, even if one of us dies before we have a chance to live together as", 0);
            if (currentPlaythrough.ownGender.presentation() != currentPlaythrough.personGenders[0].presentation()) {
                result.screens[16].attach(" boyfriend and girlfriend.\"\n\n", 0);
            } else {
                result.screens[16].attach("... as lovers.\"\n\n", 0);
            }
            result.screens[16].attach("It seems backwards that " + Hashimoto() + " is the one insisting on making sure that you're okay with the idea of your " + boyGirl(0) + "friend dying at any time.  After all, you're the one who's actually risking your life on a regular basis.  But maybe that's just " + hisHer(0) + " way of showing that " + heShe(0) + " understands what " + heShe(0) + "'s getting into.\n\n");
            result.screens[16].attach("Or maybe it's because you still haven't formally conceded that " + Hashimoto() + " was right about it being better to come out with your feelings than to keep them bottled up for somebody else's sake.  When you're having a debate with a friend, it's important to let " + himHer(0) + " know when " + heShe(0) + "'s gotten through to you.\n\n");
            result.screens[16].attach("And " + Hashimoto() + " values actions over words, so there's really only one way to admit your defeat.  You bring your face closer to " + hisHers(0) + "...");

            result.characters[17] = new String[0];
            result.backgrounds[17] = "black";
            result.screens[17].attach("For all " + hisHer(0) + " self-deprecating talk earlier, " + Hashimoto() + " doesn't seem surprised in the slightest to feel your lips on " + hisHer(0) + " own.  " + HeShe(0) + " returns your kiss eagerly.\n\n");
            result.screens[17].attach("Considering how you first met, you never would've expected your relationship with " + Hashimoto() + " to end up like this.  But now that you're here, it feels surprisingly natural.  " + HisHer(0) + " tongue pushes against your lips, and you find yourself opening them so that you can explore each other's mouths.\n\n");
            result.screens[17].attach(HisHer(0) + " arms tighten around you.  It's been awhile since you've scuffled, so you had almost forgotten just how fit " + Hashimoto() + " is.  But with only a small grunt of effort, " + heShe(0) + " lifts you off your feet and pushes you down onto your bed.");

            result.sounds[18] = Effect.RUSTLE;
            result.screens[18].attach("Things are suddenly moving very fast.  While you were kissing, apparently " + Hashimoto() + " was already starting to get undressed.\n\n");
            result.screens[18].attach("And as " + heShe(0) + " climbs atop you, " + heShe(0) + " sheds the last of " + hisHer(0) + " clothes.  Normally, when " + Hashimoto() + " would come to take a nap at your place, " + heShe(0) + " would sleep with all " + hisHer(0) + " clothes on.  But now, as you look up at " + himHer(0) + ", you can see all of " + Hashimoto() + "'s body for the first time.");

            result.backgrounds[19] = "hashimotoh1";
            result.tracks[19] = Music.MOMENTS;
            result.screens[19].attach("It seems like " + Hashimoto() + "'s done holding back.  Does " + heShe(0) + " really not want to start with some foreplay or something?\n\n");
            result.screens[19].attach("\"I hate wasting time.  You know that.  So, let's just get to it.\"\n\n", 0);
            if (currentPlaythrough.ownGender != Gender.FEMALE) {
                result.screens[19].attach("You don't have any objections, but...");

                result.backgrounds[20] = "hashimotoh2";
                result.screens[20].attach(Hashimoto() + " presses " + hisHer(0) + " crotch down on yours, then frowns, shifting " + himHer(0) + "self left and right as if searching for something.\n\n");
                result.screens[20].attach("\"Hold on.  Why aren't you hard?  Am I doing something wrong?\"\n\n", 0);
                result.screens[20].attach("Well, the two of you have just been talking about death and stuff.  It's not exactly the most titillating subject.\n\n");
                result.screens[20].attach("\"Shit.  That's my bad.\"\n\n", 0);
                result.screens[20].attach("It should still work out eventually.  Maybe you can help make " + Hashimoto() + " feel good in the meantime?");

                result.screens[21].attach("\"No.  I've got something I wanna try.  How does this feel?\"\n\n", 0);
                result.screens[21].attach(Hashimoto() + " relaxes " + hisHer(0) + " legs, letting " + hisHer(0) + " weight press down on your crotch.  Then, " + heShe(0) + " starts to slide " + himHer(0) + "self forward and back.\n\n");
                result.screens[21].attach("You can feel " + himHer(0) + " rubbing against you through your pants.  It feels good, but more than that, the sight of " + hisHer(0) + " slit moving against you is mesmerizing.");

                result.screens[22].attach("Slowly but surely, you can feel your shaft starting to wake up.  But it's still a bit awkward to just lay here while " + Hashimoto() + " does all the work.  You aren't sure what you're supposed to be doing with your hands.\n\n");
                result.screens[22].attach("\"Just relax and enjoy it.  You don't always have to be 'doing something'.\"\n\n", 0);
                result.screens[22].attach("You never thought you'd hear " + Hashimoto() + " say something like that.\n\n");
                result.screens[22].attach("\"You know what I'm trying to say.  Just let me do this, alright?  I'm trying to focus.\"\n\n", 0);
                result.screens[22].attach("You do as " + Hashimoto() + " asks.  More and more, the sense of pressure between your legs is turning into surges of pleasure with every movement of " + Hashimoto() + "'s hips.  And then...");

                result.backgrounds[23] = "hashimotoh3";
                result.screens[23].attach("\"Looks like you're ready.\"\n\n", 0);
                result.screens[23].attach("Once " + heShe(0) + " feels your hardness underneath " + himHer(0) + ", " + Hashimoto() + " unzips your pants to let your cock out.  You're definitely ready.  ");
                if (currentPlaythrough.personGenders[0].presentation() == Gender.FEMALE) {
                    result.screens[23].attach("But what about " + Hashimoto() + "?\n\n");
                    result.screens[23].attach("\"I'm fine.  Let's just do it.\"\n\n", 0);
                    result.screens[23].attach("Is " + heShe(0) + " really fine?  It looks like it's going to be a tight fit.");
                } else {
                    result.screens[23].attach("But before you start, shouldn't you put on some lube or something?\n\n");
                    result.screens[23].attach("\"Didn't bring any.  I wasn't planning on doing this.  But I'll be fine.\"\n\n", 0);
                    result.screens[23].attach("Will " + heShe(0) + " really be fine?  ");
                }
                result.screens[23].attach(" Maybe it would be better to slow down and-");

                result.backgrounds[24] = "hashimotoh4";
                result.screens[24].attach(Hashimoto() + " slams " + hisHer(0) + " hips downward, and the jolt of pleasure causes your mind to blank out.  You reflexively drive yourself upward to meet " + himHer(0) + ", and you end up buried balls-deep inside.\n\n");
                result.screens[24].attach("\"Guh.  Ow.\"\n\n", 0);
                if (currentPlaythrough.personGenders[0] != Gender.MALE) {
                    result.screens[24].attach(HeShe(0) + "'s bleeding, and " + heShe(0) + "'s obviously in pain.  ");
                } else {
                    result.screens[24].attach("There's no way that this is feeling good for " + himHer(0) + ".  ");
                }
                result.screens[24].attach(HeShe(0) + " shouldn't be trying to act tough.  " + HeShe(0) + " should be giving you a chance to give some pleasure to " + himHer(0) + ", too.\n\n");
                result.screens[24].attach("\"Shut up.  I'm not doing this to feel good.\"", 0);

                result.screens[25].attach(HeShe(0) + " lifts " + hisHer(0) + " hips, and it feels like your cock is being sucked upward.  You're arching your back, your mind going blank again.  Inch by inch, your shaft slides out from the tight grip of " + Hashimoto() + "'s ");
                if (currentPlaythrough.personGenders[0] == Gender.MALE) {
                    result.screens[25].attach("ass.\n\n");
                } else {
                    result.screens[25].attach("lower lips.\n\n");
                }
                result.screens[25].attach("\"You're the one who needs to stop acting tough.  It feels good, right?\"\n\n", 0);
                result.screens[25].attach(HeShe(0) + " pushes " + hisHer(0) + " hips down, swallowing your shaft all the way to the base.\n\n");
                result.screens[25].attach("\"So stop fighting it.\"", 0);

                result.screens[26].attach(HeShe(0) + "'s right.  Even if you weren't caught in the iron grip of " + Hashimoto() + "'s thighs, you might not have the willpower to pull out.  The tight wetness sliding up and down your cock feels too good.\n\n");
                result.screens[26].attach("Whenever " + heShe(0) + " stops, you can briefly regain your sanity.  But then " + heShe(0) + " moves, and you're completely at " + hisHer(0) + " mercy.  " + HeShe(0) + " slides " + himHer(0) + " self down your shaft, and your body responds completely by reflex, driving it deep inside " + himHer(0) + ".  " + HeShe(0) + " slides back upward, and you feel like " + heShe(0) + "'s trying to suck you dry.\n\n");
                result.screens[26].attach("\"If you want to make it easier on me, then just cum right away.  Let it all out inside me.\"\n\n", 0);
                result.screens[26].attach(HeShe(0) + " punctuates " + hisHer(0) + " words with another movement of " + hisHer(0) + " hips.  At first, " + heShe(0) + " was going slowly enough that you had time to think in between each burst of pleasure.  But now " + heShe(0) + "'s starting to go faster.");

                result.screens[27].attach("Your hips move in unison.  At this rate, you really are going to cum.  You can't even gather your thoughts enough to speak.\n\n");
                result.screens[27].attach("\"Aah...\"\n\n", 0);
                result.screens[27].attach("But it seems like " + Hashimoto() + " might be starting to enjoy this, too.  That breathy sigh is the first sign you've seen that " + heShe(0) + "'s feeling any pleasure from this.\n\n");
                result.screens[27].attach(HisHer(0) + " movements are beginning to change.  At first, " + heShe(0) + " was very steady and deliberate, moving " + himHer(0) + "self all the way down your cock, then back up so that you'd almost slip out.  It felt great to have the entire length of your shaft stimulated like that, but it was still very clear that " + Hashimoto() + " was consciously thinking about every movement.");

                result.screens[28].attach("Now, though, " + hisHer(0) + " movements are becoming passionate, instinctive.  " + HeShe(0) + " takes you deep inside, then grinds forward and back, so that you repeatedly strike " + hisHer(0) + " deepest places.  " + HeShe(0) + " might be getting overwhelmed by the pleasure, too.\n\n");
                result.screens[28].attach("\"Go on... cum...!\"\n\n", 0);
                result.screens[28].attach("You'd like to see even more of that.  You'd like to make " + himHer(0) + " feel this good too, to the point that " + heShe(0) + "'ll stop thinking of this as something " + heShe(0) + "'s just doing to make you feel good...");

                result.backgrounds[29] = "hashimotoh5";
                result.screens[29].attach("But you can't hold back any longer.  Your movements become spasmic, going out of synch with " + Hashimoto() + ", as you reach your orgasm.  White-hot pleasure flashes through your lower body, and the next thing you know, you've gone completely limp with " + Hashimoto() + " atop you.\n\n");
                result.screens[29].attach("\"Haah... I did it.\"\n\n", 0);
                result.screens[29].attach(HeShe(0) + " certainly looks satisfied.");

                result.screens[30].attach("Was it good for " + Hashimoto() + " too?\n\n");
                result.screens[30].attach("\"Yeah.  Honestly, I expected it to hurt more, but it wasn't bad at all.\"\n\n", 0);
                result.screens[30].attach("It wasn't bad, but it seems like it wasn't exactly great, either.  " + Hashimoto() + " was so focused on your pleasure that " + heShe(0) + " didn't give you much of a chance to make " + himHer(0) + " feel good too.\n\n");
                result.screens[30].attach("Maybe you'll be able to do better next time.");

                result.backgrounds[31] = "black";
                result.screens[31].attach(Hashimoto() + " lays " + himHer(0) + "self down on the bed next to you.  Seems like you won't need to take turns sleeping on the couch anymore.\n\n");
                result.screens[31].attach("\"I hope you'll remember this when you're out there, doing the things you need to do.\"\n\n", 0);
                result.screens[31].attach("You definitely will.  And you'll be looking forward to coming home to " + Hashimoto() + ".\n\n");
                result.screens[31].attach("\"... Yeah.  So make sure you survive.  I'll do my best to survive, too.\"", 0);

                result.screens[32].attach(Hashimoto() + " ended up doing most of the work, but you're still pretty tired out, both emotionally and physically.  Fortunately, you had known that you wouldn't be getting much sleep this morning, with all the catching up you were going to do with " + Hashimoto() + ".  You sleep well, and you wake up feeling pretty good.\n\n");
                result.screens[32].attach("You may be " + Hashimoto() + "'s " + boyGirl(-1) + "friend now, but you don't really feel any different.  All your old reasons for wanting to save " + Tanaka() + " still stand.  But now, you have one more reason: " + Hashimoto() + " is expecting you to succeed.  You don't want to disappoint " + himHer(0) + ", do you?");
            } else {
                result.screens[19].attach("");
            }
        } else if (p == PlotEvent.YUMENOROMANCE1) {
            result = new Scene(20);

            result.backgrounds[0] = "cleaner";
            result.tracks[0] = Music.SILENCE;
            result.screens[0].attach("Coming back home without " + Tanaka() + " wasn't an easy decision.  Even if " + heShe(5) + "'s not in too much immediate danger, " + heShe(5) + "'s still effectively a prisoner of the Lunar Syndicate.  Without your help, it's hard to believe that " + heShe(5) + "'ll be able to escape from a group like that on " + hisHer(5) + " own.\n\n");
            result.screens[0].attach("The Lunar Syndicate is an enormous, dangerous group of criminals whose leader seems almost omniscient.  That's half the reason you came back here.  It's clear that you don't yet have the skills or the resources necessary to go up against an enemy like that.  And the best way to get those skills and resources is to come back to a place where you have friends to help you out.\n\n");
            result.screens[0].attach("But that's only half the reason.  The other half is that you care about the people here, too.  There's more to your life than just " + Tanaka() + ".");

            result.screens[1].attach("Patching up your relationship with " + Yumeno() + " wasn't too hard.  " + HeShe(1) + " was angry at you for leaving the city to chase after " + Tanaka() + ", but apparently that was just because " + heShe(1) + " was worried for your sake.  Now that you're back, all's well that ends well.\n\n");
            boolean found = false;
            if (currentPlaythrough.weeklyActions[weekDayNumber()][0] == Action.HOMELANDING) {
                result.screens[1].attach("You've already filled " + himHer(1) + " in on the details of your brief adventure in the Metropolis.  " + HeShe(1) + " was quiet as you explained the nature of the group that abducted " + Tanaka() + " and your plans for dealing with them.  By the time you were done, it had already gotten late.  You're heading off to bed to get some sleep, and then maybe you'll have time to play some video games with " + Yumeno() + " early tomorrow morning, for old time's sake.");
            } else {
                result.screens[1].attach("Everything has been normal between the two of you since then.  You and " + Yumeno() + " have just enjoyed a pleasant evening together.");
            }

            result.backgrounds[2] = "black";
            result.screens[2].attach("However, not long after you climb into your bed in " + Yumeno() + "'s guest room, you hear footsteps outside your door.  You were already starting to drift off to sleep, so you don't immediately make the connection that it must be " + Yumeno() + ".\n\n");
            result.screens[2].attach("There's a quiet clicking sound.  Is that the door opening?  Maybe " + Yumeno() + " forgot something in this room, and " + heShe(1) + "'s trying to take it out of here without waking you.  That sounds plausible.  So, you should probably just pretend you don't notice " + himHer(1) + ".\n\n");
            result.screens[2].attach("Then, the room returns to silence.  Did " + Yumeno() + " leave without you being able to hear " + himHer(1) + "?  Or maybe the noise you heard was " + himHer(1) + " leaving, and you just didn't notice the sound of " + himHer(1) + " coming into the room.  Either way, it seems like you should go back to trying to get to sleep.  Your groggy mind starts to slow down again.\n\n");
            result.screens[2].attach("It's only when you feel the mattress sink under somebody else's weight that you fully wake up.");

            result.backgrounds[3] = "yumenoh1";
            result.tracks[3] = Music.MOMENTS;
            result.screens[3].attach("It's " + Yumeno() + ".  " + HeShe(1) + "'s in your bed.  Why is " + heShe(1) + " in your bed?\n\n");
            result.screens[3].attach("\"To seduce you, obviously.\"\n\n", 1);
            result.screens[3].attach(HeShe(1) + "'s smiling, but " + hisHer(1) + " tone is dead serious.  This isn't a joke.");

            result.screens[4].attach("Just a moment ago, you were starting to fall asleep.  This is way too sudden.  Your brain can't keep up.  Shouldn't " + Yumeno() + " slow down a little?\n\n");
            result.screens[4].attach("\"Why should I slow down?  It seems like your body is all ready to go.\"\n\n", 1);
            result.screens[4].attach(Yumeno() + " presses " + hisHer(1) + " hand down against your crotch.  ");
            if (currentPlaythrough.ownGender != Gender.FEMALE) {
                result.screens[4].attach("The unfamiliar sensation of being touched down there by somebody else is quickly causing you to get hard.  You feel the urge to push your hips against " + hisHer(1) + " hand.\n\n");
                result.screens[4].attach("But isn't this backwards?  You and " + Yumeno() + " don't have this kind of relationship, at least not yet.  " + Yumeno() + " hasn't ever said " + heShe(1) + " was interested in you.  Well, you might have had your suspicions, but for " + himHer(1) + " to just jump straight into your bed like this...\n\n");
                result.screens[4].attach("\"Yeah, I'm completely in love with you.  And I could tell that you were starting to want me, too.\"", 1);

                result.backgrounds[5] = "yumenoh2";
                result.screens[5].attach("\"But you wouldn't make the first move.  I really, really wanted you to make the first move.\"\n\n", 1);
                result.screens[5].attach("If you hadn't been so busy lately, then maybe you actually would have made the first move.  But romance has been the last thing on your mind.\n\n");
                result.screens[5].attach("\"Right.  You've been thinking about " + Tanaka() + ".  How to find " + Tanaka() + ".  How to rescue " + Tanaka() + ".  " + Tanaka() + " this, " + Tanaka() + " that.\"\n\n", 1);
                result.screens[5].attach("A note of irritation enters " + Yumeno() + "'s voice, and the pressure from " + hisHer(1) + " hand increases, almost to the point of becoming painful.");

                result.backgrounds[6] = "yumenoh1";
                result.screens[6].attach("\"I'm going to make you forget all about " + Tanaka() + ".\"\n\n", 1);
                result.screens[6].attach("It seems like " + Yumeno() + " might be assuming too much.  You aren't actually in a relationship with " + Tanaka() + ".  You're just helping " + himHer(5) + " because " + heShe(1) + "'s a friend.\n\n");
                result.screens[6].attach("\"Really?  Well, that's fine too, I suppose.\"", 1);

                result.screens[7].attach("When " + Yumeno() + " didn't seem to hold a grudge against you for leaving " + himHer(1) + " behind to go to the Metropolis, the natural assumption was that it wasn't actually a big deal to " + himHer(1) + ".  But even if " + heShe(1) + " doesn't hate you for it, " + heShe(1) + " isn't willing to let it go, either.  You might have actually broken " + hisHer(1) + " heart.\n\n");
                result.screens[7].attach("There's no need for " + himHer(1) + " to go this far.  If " + heShe(1) + " doesn't want to do this, then-\n\n");
                result.screens[7].attach("\"But I do want to do this.  I should have done it from the very start.  They say that the quickest way to ", 1);
                if (currentPlaythrough.ownGender == Gender.MALE) {
                    result.screens[7].attach("a man's ", 1);
                } else {
                    result.screens[7].attach("someone's ", 1);
                }
                result.screens[7].attach("heart is through " + hisHer(-1) + " stomach, but the truth is that you need to aim a little bit lower.\"", 1);

                result.backgrounds[8] = "yumenoh3";
                result.screens[8].attach("When " + Yumeno() + " releases your cock from your pants, it's already fully erect.  " + Yumeno() + "'s hair was spilling over onto your lap, and when your shaft rises up through it, the silky texture feels pleasant against the sensitive skin.\n\n");
                result.screens[8].attach("You're about to try to say something, but your mind goes blank when " + Yumeno() + " closes " + hisHer(1) + " fingers around your cock.  " + HeShe(1) + " immediately starts to move " + hisHer(1) + " hand up and down, using " + hisHer(1) + " own hair to stimulate you.  It feels amazing.  Has " + Yumeno() + " done this before?\n\n");
                result.screens[8].attach("\"Nope.  But as soon as you said you were flying back here, I sat down and spent fifteen straight hours watching amateur porn.  I wanted to make sure I'd be able to make you feel good.\"\n\n", 1);
                result.screens[8].attach(Yumeno() + " was planning on ambushing you in bed like this from the very start?\n\n");
                result.screens[8].attach("\"That's right.  Ever since you left, I've been spending every moment thinking about how I could have done things better.\"", 1);

                result.screens[9].attach("\"And now it's paying off, right?  Doesn't it feel good?\"\n\n", 1);
                result.screens[9].attach("You have to admit that it does.  You wouldn't normally think that watching porn would make somebody good at the real thing, but " + Yumeno() + " must have gone out of " + hisHer(1) + " way to look for uncut videos where the guy actually gets brought naturally to orgasm.\n\n");
                result.screens[9].attach("The mental image of " + Yumeno() + " going on a porn binge is pretty amusing.  But knowing " + Yumeno() + ", " + heShe(1) + " wasn't watching them for " + hisHer(1) + " own gratification at all.  As always, " + hisHer(1) + " focus is intense.\n\n");
                result.screens[9].attach("And even as " + heShe(1) + " strokes your cock, " + hisHer(1) + " technique is only improving.  " + HeShe(1) + " seems to be judging your reactions and adjusting " + hisHer(1) + " movements accordingly.  Your cock is rising from its half-erection all the way to full mast.");

                result.screens[10].attach("\"It feels better than when you play with yourself, right?\"\n\n", 1);
                result.screens[10].attach("Judging from " + hisHer(1) + " expression, " + heShe(1) + " already knows the answer.\n\n");
                result.screens[10].attach("\"It's funny.  You've been attached to this thing for your whole life, but I'm still better at using it than you are.\"\n\n", 1);
                result.screens[10].attach("As always, " + Yumeno() + " picks up new skills quickly.\n\n");
                result.screens[10].attach("\"It helps when the controls are so responsive.  I've never been the biggest fan of joystick games, but this one is pretty fun.\"", 1);

                result.screens[11].attach(HeShe(1) + " really is enjoying this.  Now that you're fully erect and almost ready to burst, " + heShe(1) + "'s deliberately slowing down " + hisHer(1) + " movements, holding you on the edge.  " + HeShe(1) + "'ll start pumping " + hisHer(1) + " hand up and down faster for just a few strokes, then slow down again just when you feel like you're about to burst.\n\n");
                result.screens[11].attach("\"I'm gonna make it feel so good that you can't go back to just using your own hand.  I'll make it so you can't live without me.\"\n\n", 1);
                result.screens[11].attach("Even when " + Yumeno() + " is at " + hisHer(1) + " most competitive, it's rare for " + himHer(1) + " to gloat like this.  Maybe you can't complain, since you're the one getting pleasured right now.");

                result.backgrounds[12] = "yumenoh4";
                result.screens[12].attach("But at the same time, you probably shouldn't let " + himHer(1) + " get too full of " + himHer(1) + "self.  " + HeShe(1) + "'s still a beginner, after all.\n\n");
                result.screens[12].attach("\"Huh?\"\n\n", 1);
                result.screens[12].attach("It's true, isn't it?  After all, " + heShe(1) + " still hasn't made you cum even once.");

                result.backgrounds[13] = "yumenoh5";
                result.screens[13].attach("Without warning, " + Yumeno() + " takes your tip into " + hisHer(1) + " mouth and starts to stroke at top speed.  Your hips involuntarily jerk upward, but " + heShe(1) + " holds you down with " + hisHer(1) + " elbows, furiously milking your cock while " + hisHer(1) + " tongue swirls around the opening.\n\n");
                result.screens[13].attach("You couldn't hold back even if you wanted to.  During all that time spent slowly stroking your cock, the anticipation was gradually building up.  And now, all of that desire is coming back at once.  " + Yumeno() + "'s hand is a blur, the individual strokes merging into a continuous stream of pleasure.");

                result.screens[14].attach("You feel it starting to come out, drawn toward the repetitive movements of " + Yumeno() + "'s tongue.  " + HeShe(1) + " seems to sense it too, and the rhythm of " + hisHer(1) + " stroking changes, as if pulling the semen out of you.  Your mind goes blank as your hips jerk upward one last time.\n\n");
                result.screens[14].attach(Yumeno() + " is just a moment too slow in pulling " + hisHer(1) + " face back away from your cock.");

                result.backgrounds[15] = "yumenoh6";
                result.screens[15].attach("It takes a moment for you to regain your senses.  It looks like most of your load ended up on the bed and yourself, but " + Yumeno() + " didn't escape entirely unscathed.\n\n");
                result.screens[15].attach("\"Wow!  This stuff tastes really bad!\"\n\n", 1);
                result.screens[15].attach("Apparently it doesn't bother " + himHer(1) + " that much, though.  " + HisHer(1) + " tone is full of the pure joy of discovering something new.");

                result.screens[16].attach(Yumeno() + " smiles down at you.  " + HeShe(1) + " looks very satisfied.\n\n");
                result.screens[16].attach("\"I'm gonna keep getting better and better at this.  I hope you're ready.\"\n\n", 1);
                result.screens[16].attach("It seems like " + heShe(1) + "'s taken it as a challenge.  If it means feeling even more pleasure than this, though, that might not be a bad thing.\n\n");
                result.screens[16].attach("But in the meantime, maybe it's your turn to see how well you can pleasure " + Yumeno() + " in turn.");

                result.sounds[17] = Effect.RUSTLE;
                result.characters[17] = new String[]{"yumeno"};
                result.emotions[17] = new String[]{"Scared"};
                result.backgrounds[17] = "cleaner";
                result.screens[17].attach("\"Oh, n-no, that's alright!  I-I'm completely fine!\"\n\n", 1);
                result.screens[17].attach(Yumeno() + " hurriedly gets up and backs away from the bed.  It's surprising.  " + HeShe(1) + " was so bold a moment earlier, but now " + heShe(1) + "'s flipped right back to being shy.  What's wrong?\n\n");
                result.screens[17].attach("\"W-Well, it's getting late, so...  Maybe another time.\"", 1);

                result.emotions[18] = new String[]{"Happy"};
                result.screens[18].attach("\"I had a really good time, though.  And tomorrow morning...  Hehe, I have some more things I want to try, so look forward to it!  Good night!\"\n\n", 1);
                result.screens[18].attach(Yumeno() + " vanishes out the door, leaving you to try to figure out what just happened.  Apparently " + heShe(1) + " isn't a fan of cuddling in the afterglow, either.");

                result.characters[19] = new String[0];
                result.screens[19].attach("Apparently " + Yumeno() + " is your girlfriend now.  On further reflection, that's actually kind of a nice thought.  " + HeShe(1) + " has a strange way of showing " + hisHer(1) + " affection, but you can deal with that.\n\n");
                result.screens[19].attach("In the future, though, it might be better not to talk about " + Tanaka() + " too much in front of " + himHer(1) + ".  And as for what will happen once it's time for you to go to the Metropolis...  Well, you can cross that bridge when you get there.\n\n");
                result.screens[19].attach("For now, you feel just about ready to go to sleep.  All the other issues can wait for tomorrow.");
            }
        }
		if (result != null) {
			result.associatedEvent = p;
			String storedBackground = null;
			String[] storedCharacters = new String[0];
			String[] storedOutfits = new String[0];
			String[] storedEmotions = new String[0];

			for (int i = 0; i < result.screens.length; i++) {
				if (result.backgrounds[i] == null || result.backgrounds[i].isEmpty()) {
					result.backgrounds[i] = storedBackground;
				} else {
					storedBackground = result.backgrounds[i];
				}
				if ((result.characters[i] == null || result.characters[i].length == 0) && result.emotions[i] != null && result.emotions[i].length == storedEmotions.length) {
					result.characters[i] = storedCharacters;
					if (result.emotions[i].length == 0) {
						result.emotions[i] = storedEmotions;
					}
				} else {
					storedCharacters = result.characters[i];
					storedEmotions = result.emotions[i];
				}
				if (result.outfits[i] == null || result.outfits[i].length == 0) {
					result.outfits[i] = storedOutfits;
				} else {
					storedOutfits = result.outfits[i];
				}
			}
		}
		return result;
	}
	
	public static Scene getCompletionScene(Goal g) {
		if (g == null) {
			return null;
		}
		Scene result = null;
		if (g.index == 1) {
			if (g.tier == 0) {
				result = new Scene(7);
				
				result.backgrounds[0] = "dorm";
				result.screens[0].attach("Today marks the start of the last month of your summer break.  There's one month left before you have to go back to the daily grind of your classes.  ");
                if (currentPlaythrough.loops == 0) {
                    result.screens[0].attach("You shouldn't be lazing around in bed.  You're supposed to be enjoying your vacation to the fullest.\n\n");
                    result.screens[0].attach("It's almost paradoxical, when you think about it like that.  Even if lazing around is what you'd prefer to do, it's not an efficient use of your time.  You're obligated to go outside, interact with friends, make memorable experiences, develop as a person.\n\n");
                    result.screens[0].attach("In that case, when will you get a break from the things you're supposed to be doing during your break?");
                } else {
                    result.screens[0].attach("Normally, you'd be sleeping in later than this, but a bad dream woke you up, and now you don't think you'll be able to get back to sleep.\n\n");
                    result.screens[0].attach("Well, maybe it's for the best.  Shouldn't you be making better use of your summer break?  It's nice to relax and all, but you're filled with a strange sort of restless energy.  You might as well head out and put it to good use.");
                }
				
				result.backgrounds[1] = "suburb";
                if (currentPlaythrough.loops == 0) {
                    result.screens[1].attach("Somehow or another, you find yourself wandering aimlessly outside.  Originally, it was probably your stomach that motivated you to get up and head out the door.  Cooking is a pain, and it's easier to just shamble along until some fast food joint's giant sign catches your eye.\n\n");
                    result.screens[1].attach("But because you didn't have any particular destination in mind, ");
                } else {
                    result.screens[1].attach("Or at least that's what you tell yourself at first.  As soon as you're out in the bright sunlight, you realize that you're not actually sure what a 'better use of your summer break' entails.  You try to think of some fun things to do, but none of them sound quite right.  Maybe it's because you're trying to think on an empty stomach?  Grabbing some food seems like a good first step.\n\n");
                    result.screens[1].attach("But even deciding where to eat is difficult right now.  For some reason, none of your favorite fast food meals sound appealing at the moment.  And as you try to reach a decision, ");
                }
                result.screens[1].attach("your feet end up carrying you along like they have a mind of their own.  You just keep walking, lost in your own thoughts, until you abruptly realize that you've ended up nowhere near any fast food joint.  Your stomach may have wanted to lead you to food, but your heart had other plans.");
				
				result.screens[2].attach("This spot is a favorite hangout for some of your fellow students.  To the untrained eye, it would appear to be nothing more than an unremarkable intersection at the boundary between the suburbs and the commercial district.  It's a couple of blocks away from the nearest park or restaurant that would normally make for a better hangout spot.  But nonetheless, this is where they gather to loiter and chat every morning.\n\n");
                result.screens[2].attach("And it seems that you're just in time to see who they're waiting for...");
				
				result.backgrounds[3] = "tanaka1";
				result.screens[3].attach("This is ");
				if (currentPlaythrough.personNames[5].equals("Tanaka")) {
					result.screens[3].attach("Tanaka Ai");
				} else {
					result.screens[3].attach(Tanaka());
				}
				result.screens[3].attach(", one of your fellow students, who walks this route on " + hisHer(5) + " way downtown every day.  ");
                if (currentPlaythrough.loops == 0) {
                    result.screens[3].attach("Perhaps " + heShe(5) + " could be called your friend?  " + HeShe(5) + " would certainly refer to you as a 'friend'.  You've shared a few classes with " + himHer(5) + ", and " + heShe(5) + " calls you by name.\n\n");
                    result.screens[3].attach("But if those are the requirements of friendship, then " + Tanaka() + " has dozens upon dozens of friends.  It's hard to believe that " + heShe(5) + " can keep track of them all, but here " + heShe(5) + " is, calling each of them by name and leaving no doubt that " + heShe(5) + " remembers all the little details of their lives.\n\n");
                } else {
                    result.screens[3].attach("That's right.  " + HeShe(3) + " showed up in your dream last night, didn't " + heShe(3) + "?  It's been awhile since that's happened.\n\n");
                    result.screens[3].attach("As you watch " + Tanaka() + ", you feel almost like you can recall the details of the dream, but they slip away the more you try to grasp at them.  Meanwhile, " + Tanaka() + " is greeting all the admirers that came out to see " + himHer(5) + ".\n\n");
                }
				result.screens[3].attach("\"Hi there, Sato.  How are your summer classes going?  You know you can always call me if you need help studying.  Oh, Sakura, it's good to see that you're smiling today.  Was your dog able to come home from the vet?  Now, where's Taka?  He said he might be late...\"\n\n", 5);
				result.screens[3].attach("Smart, kindhearted, attentive, and ");
				if (currentPlaythrough.personGenders[5].presentation() == Gender.MALE) {
					result.screens[3].attach("beautiful in a way that transcends gender");
				} else {
					result.screens[3].attach("stunningly beautiful");
				}
				result.screens[3].attach(".  It's no wonder that " + Tanaka() + " is practically a local celebrity.  The other students swarm around " + himHer(5) + ", and " + heShe(5) + " acknowledges each one of them in turn.");
				
				result.backgrounds[4] = "tanaka2";
				result.screens[4].attach("It's a gift.  That's the only way to describe it.  ");
				if (currentPlaythrough.personGenders[5] == Gender.MALE) {
					result.screens[4].attach("Women want " + himHer(5) + ".  Men want to be " + himHer(5) + ".  Actually, half the men probably want " + himHer(5) + " too.  ");
				} else {
					result.screens[4].attach("Men want " + himHer(5) + ".  Women want to be " + himHer(5) + ".  Actually, half the women probably want " + himHer(5) + " too.  ");
				}
				result.screens[4].attach("You don't think " + heShe(5) + " swings that way, ");
				if (currentPlaythrough.ownGender.presentation() == currentPlaythrough.personGenders[5].presentation()) {
					result.screens[4].attach("unfortunately, ");
				}
				result.screens[4].attach("but it's impossible to say for sure.  " + HeShe(5) + " never gives a clear answer about whether there's any particular ");
				if (currentPlaythrough.personGenders[5].presentation() == Gender.MALE) {
					result.screens[4].attach("girl ");
				} else {
					result.screens[4].attach("guy ");
				}
				result.screens[4].attach(heShe(5) + "'s interested in, and nobody's ever claimed to have been in a relationship with " + himHer(5) + ".\n\nOf course, you don't have any special immunity to " + hisHer(5) + " charms.  But that doesn't mean that you're interested in being one of " + Tanaka() + "'s groupies, either.  There are times that you've felt like you share a personal connection with " + himHer(5) + " that goes beyond what anybody else has.  But when you look at the worshipful expressions of the other students surrounding " + Tanaka() + ", you're sure that each of them has felt the same way.");
				
				result.backgrounds[5] = "suburb";
				result.characters[5] = new String[]{"tanaka"};
				result.emotions[5] = new String[]{"Smug"};
				result.modifiers[5] = new Modifier[]{Modifier.CLOSEUP};
				result.screens[5].attach("You're jolted from your thoughts by " + Tanaka() + " calling out your name.  It seems that it's your turn to be acknowledged.\n\n");
				result.screens[5].attach("\"I just assumed that you must've gone on vacation somewhere for the summer!  It's really good to see you again.\"\n\n", 5);
				result.screens[5].attach(HeShe(5) + " reaches out and ");
				if (currentPlaythrough.ownGender.presentation() == Gender.MALE) {
					result.screens[5].attach("briefly touches your arm.  ");
				} else {
					result.screens[5].attach("briefly puts " + hisHer(5) + " hand on your shoulder.  ");
				}
				result.screens[5].attach("The contact seems to send a jolt of electricity through your chest and up into your brain.  " + Tanaka() + " has never touched you like that in the past.  The display of affection is so unexpected that you almost miss what " + heShe(5) + " says next.\n\n");
				result.screens[5].attach("\"You should come hang out with us more often.  It'd be nice to catch up.\"", 5);
				
				result.characters[6] = new String[0];
				result.screens[6].attach("And as quickly as that, " + heShe(5) + "'s moved on to the next member of the crowd.  You're pretty sure that you mumbled something noncommittal in response, but it's hard to be sure.  All you can do is watch as " + Tanaka() + " finishes greeting all " + hisHer(5) + " admirers and continues on " + hisHer(5) + " way, now with all of them following along with " + himHer(5) +".\n\n");
                result.screens[6].attach("As they turn the corner, you catch a glimpse of " + Tanaka() + "'s face.  Is " + heShe(5) + " turning back to look at you?  Was " + heShe(5) + " expecting you to follow?  For that matter, why didn't you follow?\n\n");
                result.screens[6].attach("Because it's not like you came out here to see " + Tanaka() + " in the first place.  This was just a chance encounter.  Time to go get some food.");
			} else if (g.tier == 1) {
				result = new Scene(16);

                if (getCurrentAction().ownSpot == Spot.GYMCLASS) {
                    result.backgrounds[0] = "gym";
                    result.tracks[0] = Music.HOME;
                    if (currentPlaythrough.currentDay > classStartDay) {
                        result.screens[0].attach("With everything else that's been going on, you haven't felt like attending class is a priority.  You have better things to be doing, and sitting through lessons is a chore.");
                    } else {
                        result.screens[0].attach("You've been pretty busy over the course of your summer break, but now that it's over, you'll probably be going back to your old routine.  Your classes don't leave much room for other activities.\n\n");
                    }
                    result.screens[0].attach("But it's not all bad.  Showing up to class also means that you have an excuse to visit with your fellow students.  After changing into your gym clothes, you head out of the locker room, looking for the person you know will be here.");

                    result.characters[1] = new String[]{"tanaka"};
                    result.outfits[1] = new String[]{"Cheer"};
                    result.emotions[1] = new String[]{"Uncomfy"};
                    result.screens[1].attach("And there " + heShe(5) + " is.  ");
                    if (currentPlaythrough.currentDay > classStartDay) {
                        result.screens[1].attach("It looks like " + heShe(5) + " got the spot on the cheerleading team.  ");
                    } else {
                        result.screens[1].attach(HeShe(5) + " must be trying out for the cheerleading team after this.  ");
                    }
                    result.screens[1].attach("You raise a hand in greeting and call out.\n\n");
                    result.screens[1].attach("\"... Hey.\"\n\n", 5);
                    result.screens[1].attach(Tanaka() + "'s response is oddly subdued.  Is something wrong?");

                    result.emotions[2] = new String[]{"Neutral"};
                    if (currentPlaythrough.currentDay > classStartDay) {

                    } else {
                        result.screens[2].attach("\"Do you hate me?\"\n\n", 5);
                        result.screens[2].attach("Where is this coming from?\n\n");
                        result.screens[2].attach("\"You haven't been wanting to hang out together at all.  Why?  Did I do something wrong?\"", 5);

                        result.emotions[3] = new String[]{"Surprise"};
                        result.screens[3].attach("Is that all that's bothering " + himHer(5) + "?  You've just been busy, that's all.\n\n");
                        result.screens[3].attach("\"R-Really?\"\n\n", 5);
                        result.screens[3].attach("Really.\n\n");
                        result.screens[3].attach("\"But- But I invited you to come hang out with me!  I was sure that if I-  Then you would-\"\n\n", 5);
                        result.screens[3].attach(Tanaka() + " seems to be having trouble putting " + hisHer(5) + " thoughts together.");

                        result.emotions[4] = new String[]{"Neutral"};
                        result.screens[4].attach("\"You really... just had better things to do?\"\n\n", 5);
                        result.screens[4].attach("Is it that surprising?  It would be one thing if " + Tanaka() + " had actually wanted to go somewhere together, but the usual hangout spot is just somewhere " + heShe(5) + " briefly stops on " + hisHer(5) + " morning walk.  " + HeShe(5) + " was too busy to hang out for more than a few minutes there each day, so it's not strange for you to have also been too busy to loiter around there too.\n\n");
                        result.screens[4].attach("\"Oh.  You're right.  I guess I was being selfish.\"", 5);

                        result.emotions[5] = new String[]{"Shifty"};
                        result.screens[5].attach("\"Haha.  You really surprise me sometimes.\"\n\n", 5);
                        result.screens[5].attach(Tanaka() + " still seems a little bit off.  Is " + heShe(5) + " feeling alright?\n\n");
                        result.screens[5].attach("\"I'm fine...\"", 5);

                        result.emotions[6] = new String[]{"Grin"};
                        result.screens[6].attach("\"No, I'm better than fine!  It's a new term!  Time for a fresh start!\"\n\n", 5);
                        result.screens[6].attach("Whatever was bothering " + Tanaka() + ", " + heShe(5) + " finally seems to have gotten over it.\n\n");
                        result.screens[6].attach("\"We're going to be seeing each other every day now, right?\"\n\n", 5);
                        result.screens[6].attach("Well, as long as neither of you are skipping class...\n\n");
                        result.screens[6].attach("\"If you're really too busy to come to class, you should tell me.  Maybe I'll skip class with you.\"", 5);

                        result.emotions[7] = new String[]{"Shifty"};
                        result.screens[7].attach("There's the upbeat, joking " + Tanaka() + " you're used to.  It's good to have " + himHer(5) + " back.\n\n");
                        result.screens[7].attach("You really might end up seeing " + himHer(5) + " every day for the next couple of months.  Although, you don't have class together on the weekends.\n\n");
                        result.screens[7].attach("\"Right, as for the weekends...\"\n\n", 5);
                        result.screens[7].attach("A shadow passes across " + Tanaka() + "'s expression.  Is there something wrong after all?");

                        result.emotions[8] = new String[]{"Uncomfy"};
                        result.screens[8].attach("\"There's something else I wanted to talk to you about.  I really should've taken the chance when we saw each other before, but I thought that you were going to be there every day, so there wasn't any rush...\"\n\n", 5);
                        result.screens[8].attach("That would explain why " + Tanaka() + " was bothered by you not showing up.  But why didn't " + heShe(5) + " just call you?  " + HeShe(5) + " still has your number, right?\n\n");
                        result.screens[8].attach("\"Well, I thought you were unhappy with me.  I thought I might not be in any position to ask you for a favor.\"", 5);

                        result.emotions[9] = new String[]{"Happy"};
                        result.screens[9].attach(Tanaka() + " can always feel free to ask for a favor from you.  It's the least " + heShe(5) + " deserves, since " + heShe(5) + "'s always helping other people out.\n\n");
                        result.screens[9].attach("\"... Yeah.  That's right.  Thanks.\"\n\n", 5);
                        result.screens[9].attach("So, what exactly does " + Tanaka() + " need?");

                        result.emotions[10] = new String[]{"Shifty"};
                        result.screens[10].attach("\"Well, you know how I always walk the same route every day.  I guess the start of classes will shake that up a little, but it's still a predictable schedule.\"\n\n");
                        result.screens[10].attach("Right.  " + Tanaka() + " has always been good about sticking to " + hisHer(5) + " routines.\n\n");
                        result.screens[10].attach("\"Lately, I've been wondering whether that's actually a good thing.\"", 5);

                        result.emotions[11] = new String[]{"Uncomfy"};
                        result.screens[11].attach(Tanaka() + " hesitates.  What exactly is " + heShe(5) + " getting at?\n\n");
                        result.screens[11].attach("\"It's just that I've been feeling like somebody is watching me as soon as I leave the house...\"", 5);
                    }
                } else {
                    result.backgrounds[0] = "suburb";
                    result.screens[0].attach("It hasn't taken long to get back into the habit of spending your mornings with " + Tanaka() + ".  A few of your old acquaintances never stopped hanging out with " + himHer(5) + ", and you've all quickly returned to the old dynamic you had with each other.");

                    result.backgrounds[1] = "tanaka1";
                    result.screens[1].attach("To the untrained eye, this would appear to be a gathering of mutual friends.  And that impression wouldn't be entirely wrong.  It's not like " + Tanaka() + " shows up at the exact same minute every day, so everybody arrives a bit early in order to ensure that they don't miss " + himHer(5) + ".  And until " + Tanaka() + " gets there, there's nothing to do but talk to each other.  It'd be strange if you didn't get to know each other somewhat.\n\n");
                    result.screens[1].attach("But then " + Tanaka() + " shows up.  Even though classes haven't started yet, " + heShe(5) + "'s still busy with " + hisHer(5) + " work as a model.  " + HeShe(5) + " doesn't have much time to hang out here.  And so the group of friends turns into a free-for-all as everybody tries to monopolize as much of " + Tanaka() + "'s attention as possible.");

                    result.screens[2].attach("Obviously, there are rules that must be followed.  When " + Tanaka() + " has decided to talk to somebody, " + heShe(5) + " doesn't let others interrupt them.  Sometimes a particularly boistrous " + guyGirl(-1) + " will try, but " + Tanaka() + " just apologizes for being too busy to hear " + himHer(-1) + " out and then resumes the conversation.\n\n");
                    result.screens[2].attach("Waiting for the conversation to end naturally doesn't work, either.  Everybody is waiting to seize the opportunity to get " + Tanaka() + " to talk to them next.  A moment too late, and somebody else will beat you to it.  A moment too early, and it's no different than interrupting the current conversation.  And even if you're right on time, somebody else might choose that exact same moment to interject.  You'll end up talking over each other, and you'll both look foolish in the process.");

                    result.screens[3].attach("No, the dominant strategy is to follow the flow of the current conversation and find a way to contribute to it without seeming like you're trying to steal the spotlight.  Come up with a clever comment, or provide a helpful anecdote from your own experiences, or just express your sympathy in an especially eloquent way.\n\n");
                    result.screens[3].attach("Even getting " + Tanaka() + " to look in your direction and acknowledge your words feels good.  But if you're lucky, " + heShe(5) + "'ll actually turn " + hisHer(5) + " focus toward you and prompt you to continue the conversation on your terms.  Those are the moments that make it worthwhile to come here.  For just a few brief seconds, it feels like you have " + Tanaka() + " all to yourself.");

                    result.screens[4].attach("It's ridiculous.\n\n");
                    result.screens[4].attach("As soon as " + Tanaka() + " arrives, everybody goes completely insane.  They all start playing this pointless game, and even for the 'winner', there's no long-term satisfaction to be had.  You would know, since you've been in that position quite a few times yourself.\n\n");
                    result.screens[4].attach("Is that why you stopped hanging out with " + himHer(5) + "?  Being under " + Tanaka() + "'s spell feels wonderful, but it's only a matter of time until " + heShe(5) + " needs to leave, and then you find yourself wondering why you even bothered coming here.");

                    result.backgrounds[5] = "suburb";
                    result.characters[5] = new String[]{"tanaka"};
                    result.emotions[5] = new String[]{"Grin"};
                    result.screens[5].attach("It looks like it's already about that time.  " + Tanaka() + " glances across the crowd, speaking to everyone.\n\n");
                    result.screens[5].attach("\"Today's photoshoot actually got cancelled at the last minute, but I'm glad I came out to see you guys anyway.\"\n\n", 5);
                    result.screens[5].attach("That means " + heShe(5) + " has the rest of the day free?  It's too bad that " + heShe(5) + " isn't taking the chance to hang out here for a couple more hours.  ");
                    if (getGoalLevel(2, false) > 1) {
                        result.screens[5].attach("Since " + Yumeno() + " has been inviting you over to " + hisHer(1) + " place in the mornings, you might not be coming out here too often from here on.\n\n");
                    } else {
                        result.screens[5].attach("Even if you aren't sure whether you want to keep coming here here, it'd still be nice to spend a leisurely day with " + Tanaka() + " one more time before you stop.\n\n");
                    }
                    result.screens[5].attach("\"So, let's head back.\"", 5);

                    result.emotions[6] = new String[]{"Smug"};
                    result.screens[6].attach("It takes you a moment to realize that " + Tanaka() + " is looking at you.\n\n");
                    if (currentPlaythrough.personGenders[5] == Gender.MALE) {
                        result.screens[6].attach("\"Unless you want to stay here a little while longer?\"\n\n", 5);
                    } else {
                        result.screens[6].attach("\"Well?  You aren't going to make a girl walk home alone, are you?\"\n\n", 5);
                    }
                    result.screens[6].attach("You can practically feel the envious stares from " + Tanaka() + "'s admirers.  If looks could kill, then you'd be dead several times over.  But it's not like you have any reason to turn " + himHer(5) + " down.  After all, " + hisHer(5) + " house is on the way to your dorm.\n\n");
                    result.screens[6].attach("\"I'll see the rest of you guys tomorrow!\"\n\n", 5);
                    result.screens[6].attach("There's a smirk on " + Tanaka() + "'s face as " + heShe(5) + " wraps " + hisHer(5) + " arm around yours and pulls you away from the crowd.");

                    result.emotions[7] = new String[]{"Happy"};
                    result.modifiers[7] = new Modifier[]{Modifier.CLOSEUP};
                    result.tracks[7] = Music.ADVERTISING;
                    result.screens[7].attach("Oh.  This feels really good.  " + Tanaka() + " is touching you again, and this time you can feel the heat of " + hisHer(5) + " body right next to yours.  You might just melt.\n\n");
                    result.screens[7].attach("But why exactly is this happening?  " + Tanaka() + " grabbed you so quickly that you didn't have time to question it.  " + HeShe(5) + " acted like it was a foregone conclusion that you'd be walking home with " + himHer(5) + ".  Should you ask " + himHer(5) + " about that?\n\n");
                    result.screens[7].attach(HeShe(5) + " looks so happy, though.  A part of you is afraid that if you question it, then the moment will pass, and you'll go right back to drifting away from each other again.  Maybe it'd be better to just go with the flow and not overthink it.");

                    result.emotions[8] = new String[]{"Grin"};
                    result.modifiers[8] = new Modifier[]{Modifier.CLOSEUP};
                    result.screens[8].attach("And so, you just make casual smalltalk with " + Tanaka() + " as you head toward " + hisHer(5) + " house.  You talk about what you've been doing to pass the time during your summer break, you talk about the classes you'll be taking next month, and you talk about your plans for the future.  Apparently " + Tanaka() + " has been thinking about traveling abroad and seeing the world.\n\n");
                    result.screens[8].attach("\"It's really nice to be able to talk one-on-one like this.\"\n\n", 5);
                    result.screens[8].attach("It really is.  Even though you've only been walking together for a few minutes, it feels like you've done more catching up just now than you have in the past few days.  When you're hanging out with everybody else, they're always trying to steer the conversation toward themselves.  There's never an opportunity for " + Tanaka() + " to talk about " + hisHer(5) + " own life.\n\n");
                    result.screens[8].attach("\"I'm not really bothered by it.  If they just need a little bit of encouragement to help get through their day, then I'm happy to be there for them.\"\n\n", 5);
                    result.screens[8].attach("As always, " + Tanaka() + " is just too nice.");

                    result.emotions[9] = new String[]{"Happy"};
                    result.screens[9].attach("It feels like barely any time has passed when you reach " + Tanaka() + "'s house, just down the street from your own dorm.  You reluctantly pull away as " + heShe(5) + " fishes for " + hisHer(5) + " keys and goes to open the front door.  But then " + heShe(5) + " turns to beckon for you to follow " + himHer(5) + ".\n\n");
                    result.screens[9].attach("\"You went to all the trouble of walking me home, so the least I can do is offer you a drink and a chance to sit down for a little while.\"\n\n", 5);
                    result.screens[9].attach("Walking " + Tanaka() + " home really didn't disrupt your schedule at all, but it's not like you're going to turn down an offer like that.  You follow " + himHer(5) + " inside.");

                    result.backgrounds[10] = "tanakaRoom";
                    result.characters[10] = new String[0];
                    result.screens[10].attach("So, this is " + Tanaka() + "'s room.  You had been expecting to sit with " + himHer(5) + " in the living room or dining room or something, but instead, " + heShe(5) + " led you here.  It smells nice.\n\n");
                    result.screens[10].attach(HeShe(5) + " keeps a very neat house.  Everything is organized and kept out of the way.  If anything, it might be a little bit too neat to seem natural.  Did " + heShe(5) + " clean the house in preparation for receiving a guest?");

                    result.characters[11] = new String[]{"tanaka"};
                    result.emotions[11] = new String[]{"Shifty"};
                    result.screens[11].attach("You're certainly happy that " + Tanaka() + " suddenly invited you into " + hisHer(5) + " room, but it's still awkward not knowing what prompted " + himHer(5) + " to do so.  " + Tanaka() + " seems to sense your discomfort.\n\n");
                    result.screens[11].attach("\"I'm sorry for asking you to come here out of nowhere like that.  The truth is that I've been wanting to talk to you privately for awhile, but I could never find the right opportunity.  I... I think I might need your help.\"\n\n", 5);
                    result.screens[11].attach("That's a surprise.  " + Tanaka() + " is always the one who helps others.  But if " + heShe(5) + " actually needs help for once, then of course you'll be there for " + himHer(5) + ".\n\n");
                    result.screens[11].attach("\"You know how I always walk the same route every day.  Well, lately, I've been feeling like somebody is watching me as soon as I leave the house...\"", 5);
                }
				result.emotions[12] = new String[]{"Happy"};
				result.screens[12].attach("A stalker?  That seems like a really serious problem, but when you try to say as much, " + Tanaka() + " just laughs it off.\n\n");
				result.screens[12].attach("\"No, no, I doubt that I actually have a stalker.  If I really thought there was somebody dangerous after me, then I'd ask my agency for a proper bodyguard.  I'm just getting carried away with stupid what-ifs.  It's all in my head.\"", 5);
				
				result.emotions[13] = new String[]{"Shifty"};
				result.screens[13].attach("It's a relief to hear that " + heShe(5) + "'s not actually in danger.  But in that case, what does " + heShe(5) + " need your help for?\n\n");
				result.screens[13].attach("\"Well, even if it's all in my head... it's not a nice feeling, you know?  It'd be a lot better if I had somebody walking with me.  ", 5);
				if (currentPlaythrough.ownGender.presentation() == currentPlaythrough.personGenders[5].presentation()) {
					result.screens[13].attach("Safety in numbers, basically.\"\n\n", 5);
					result.screens[13].attach("Is that all " + heShe(5) + " needs?  ");
				} else if (currentPlaythrough.ownGender.presentation() == Gender.MALE) {
					result.screens[13].attach("I've always felt safe with you.\"\n\n", 5);
					result.screens[13].attach("Hearing that " + heShe(5) + " thinks of you that way makes you feel even more motivated to live up to " + hisHer(5) + " expectations.  ");
				} else {
					result.screens[13].attach("It feels kinda pathetic to be asking a girl for something like this, but for some reason, you're the one who came to mind.\"\n\n", 5);
					result.screens[13].attach("That's not pathetic at all.  ");
				}
				result.screens[13].attach("You'd be happy to walk with " + himHer(5) + ".");
				
				result.emotions[14] = new String[]{"Happy"};
				result.modifiers[14] = new Modifier[]{Modifier.CLOSEUP};
				result.screens[14].attach("As soon as you agree, " + Tanaka() + " throws " + hisHer(5) + " arms around you in a hug, ");
				if (currentPlaythrough.ownGender.presentation() == currentPlaythrough.personGenders[5].presentation()) {
					result.screens[14].attach(hisHer(5) + " cheek against yours.\n\n");
				} else if (currentPlaythrough.ownGender.presentation() == Gender.MALE) {
					result.screens[14].attach(hisHer(5) + " head against your chest.\n\n");
				} else {
					result.screens[14].attach("pulling your body against " + hisHers(5) + ".\n\n");
				}
				result.screens[14].attach("\"Thank you so much!  I swear I'll find some way to make it up to you...\"\n\n", 5);
				result.screens[14].attach(Tanaka() + "'s body is warm.  This time, you really might melt into a puddle on the floor.");
				
				result.emotions[15] = new String[]{"Grin"};
                if (getCurrentAction().ownSpot == Spot.GYMCLASS) {
                    result.screens[15].attach(Tanaka() + " releases you from the hug and steps back.  A few of the other students are giving you dirty looks.\n\n");
                    result.screens[15].attach("But that doesn't matter.  " + Tanaka() + " seems to be in a much better mood now, and the two of you move on to talking about lighter matters until it's time to go.\n\n");
                    result.screens[15].attach(HeShe(5) + " only mentioned feeling like " + heShe(5) + " was being watched while leaving in the morning, but maybe it'd be a good idea to start walking " + himHer(5) + " home again, too.");
                } else {
                    result.screens[15].attach(Tanaka() + " releases you from the hug and steps back to " + hisHer(5) + " side of the room.  But " + heShe(5) + "'s in no hurry to send you home.\n\n");
                    result.screens[15].attach("Now that you've cleared up " + hisHer(5) + " reason for approaching you like this, there's no longer any lingering awkwardness or uncertainty about being here.  The two of you resume your conversation from earlier, continuing to chat until after the sun has reached its peak.  And when you finally head home, you're feeling happier than you have in a long while.  It seems like you're special to " + Tanaka() + " after all.");
                }
			} else if (g.tier == 2) {
				result = new Scene(16);
				
				result.backgrounds[0] = "tanakaRoom";
				result.tracks[0] = Music.HOME;
                if (getCurrentAction().ownSpot == Spot.GYMCLASS) {
                    result.backgrounds[0] = "gym";
                    result.outfits[1] = new String[]{"Cheer"};
                    result.screens[0].attach("Now that classes have resumed, you and " + Tanaka() + " have another excuse to spend time together.  ");
                    if (currentPlaythrough.currentDay == classStartDay) {
                        result.screens[0].attach("Class has just been dismissed, and apparently " + heShe(5) + "'s trying out for the cheerleading team after this.  ");
                    } else {
                        result.screens[0].attach("Class has just been dismissed, and now " + heShe(5) + "'s on " + hisHer(5) + " way to cheerleading practice.  ");
                    }
                } else if (currentPlaythrough.weeklyActions[weekDayNumber()][0] == Action.MEETUP) {
					result.screens[0].attach("As usual, you've headed over to " + Tanaka() + "'s house first thing in the morning, and you're spending some time together before heading out.  ");
				} else {
					result.screens[0].attach("You're late to " + Tanaka() + "'s house today, so " + heShe(5) + "'s already dressed and ready to go by the time you get there.  But " + heShe(5) + "'s in no hurry to head out just yet.  ");
				}
				result.screens[0].attach("The two of you are chatting about inconsequential things just like always.");
				
				result.characters[1] = new String[]{"tanaka"};
				result.emotions[1] = new String[]{"Smug"};
				result.screens[1].attach("\"We almost had to cancel the whole shoot!  Fortunately, the site wasn't too crowded, so we just snuck in a few photos where we could.  The photographer didn't look happy, though.  We're still not sure who's responsible for the reservation not going through, but whoever it is, they're gonna get an earful once it comes out.\"\n\n", 5);
				result.screens[1].attach("At times like this, you're reminded that " + Tanaka() + " really is a whole lot busier than you are.  ");
                if (currentPlaythrough.currentDay < classStartDay) {
                    result.screens[1].attach("And this is during your summer break.  After classes resume, you might not get many chances to spend time with " + himHer(5) + ".\n\n\"");
                } else {
                    result.screens[1].attach("And now that classes have resumed, you have even fewer chances to spend time together.\n\n");
                }
				result.screens[1].attach("\"It would be really fun if you could come along with me.  Actually, maybe you can...  The agency doesn't like to let friends tag along, but what if they were to hire you?  ", 5);
				if (currentPlaythrough.ownGender.presentation() == currentPlaythrough.personGenders[5].presentation()) {
					result.screens[1].attach("Wouldn't it be fun to do a shoot together?\"\n\n", 5);
				} else {
					result.screens[1].attach("They hire " + guyGirl(-1) + "s too, you know.\"\n\n", 5);
				}
				
				result.emotions[2] = new String[]{"Grin"};
				result.screens[2].attach("Working as a ");
				if (currentPlaythrough.ownGender.presentation() == Gender.MALE) {
					result.screens[2].attach("male ");
				}
				result.screens[2].attach("model?  It's a strange thought.  " + Tanaka() + " has made it clear that just looking good isn't enough to be successful in the industry.  And even if looking good were enough, you aren't convinced that you can do even that much.\n\n");
				result.screens[2].attach("\"You should have more faith in yourself!  ", 5);
				if (equipmentRoutine() == RoutineElements.EYECATCHING || equipmentRoutine() == RoutineElements.OSTENTATIOUS) {
					result.screens[2].attach("Ever since you started dressing like that, you've noticed people treating you differently, right?  You've got what it takes!\"\n\n", 5);
				} else if (getGoalLevel(5, false) == 0) {
                    if (currentPlaythrough.currentDay < classStartDay) {
					    result.screens[2].attach("I have some clothes that you look great in, though you never show up in time to try them on...  But you really would look good in them, I'm sure of it!\"\n\n", 5);
                    } else {
                        result.screens[2].attach("I actually have some clothes I bet you'd look great in!\"\n\n", 5);
                    }
				} else {
					result.screens[2].attach("You didn't throw away those clothes I gave you, right?  You really do look good in them!\"\n\n", 5);
				}
				result.screens[2].attach("As always, " + Tanaka() + " is full of encouragement and positive energy.  But that's exactly why it's hard to take " + hisHer(5) + " praise at face value.  " + HeShe(5) + "'s probably just being nice.  In order to work as a professional model, you need to be one of the most attractive people out there.  And if your face and body were really that exceptional, you're pretty sure you would've noticed by now.");
				
				result.emotions[3] = new String[]{"Happy"};
				result.screens[3].attach("\"It's not just about your face and body.  It's also how you carry yourself.  The subtle details of your body language.  Especially in live action shoots and promotional events.\"\n\n", 5);
				result.screens[3].attach("Are you really any better in that regard?  ");
				if (equipmentRoutine() == RoutineElements.EYECATCHING || equipmentRoutine() == RoutineElements.OSTENTATIOUS) {
					result.screens[3].attach("Even now, you feel awkward about having everybody's eyes on you.  ");
				} else if (getGoalLevel(5, false) == 0) {
					result.screens[3].attach("Even when you do put more effort into your appearance, you just feel awkward about having everybody's eyes on you.  ");
				} else {
					result.screens[3].attach("Wearing those clothes just made you feel awkward about having everybody's eyes on you.  ");
				}
				result.screens[3].attach("You could never match " + Tanaka() + "'s effortless confidence.\n\n");
				result.screens[3].attach("\"It doesn't have to be confidence.  Personally, I think that being awkward and a little bit shy is part of your charm.  Sometimes I'll act that way too.  It makes a person seem approachable.  There's nothing wrong with coming across as weak and vulnerable.\"", 5);
				
				result.tracks[4] = Music.SILENCE;
				result.emotions[4] = new String[]{"Neutral"};
				result.screens[4].attach("\"But remember that there's a difference between just looking vulnerable and actually being vulnerable.\"\n\n", 5);
				result.screens[4].attach("All at once, " + Tanaka() + "'s demeanor changes.  You aren't quite sure you understand what " + heShe(5) + "'s getting at.\n\n");
				result.screens[4].attach("\"Acting vulnerable attracts people to you.  Sometimes, it awakens their protective instincts.  But more often, it's because they think they can take advantage of you.\"\n\n", 5);
				result.screens[4].attach("Something's wrong.  It's common to hear people ask " + Tanaka() + " how to become popular, and " + Tanaka() + " always tells them to just open their hearts and trust that they'll receive kindness in return.  Does " + heShe(5) + " really think that most people are looking to take advantage of others?");
				
				result.emotions[5] = new String[]{"Uncomfy"};
				result.screens[5].attach("\"It's not just 'most people'.  Pretty much everybody will take any chance they can get to exploit others, as long as they think they can get away with it.\"\n\n", 5);
				result.screens[5].attach("Then why does " + Tanaka() + " tell people to open their hearts and be trusting?\n\n");
				result.screens[5].attach("\"Because that's what fits with my image, obviously.  People expect me to be a happy, cheerful, optimistic " + guyGirl(5) + " who brightens the room just by being there.  When they ask me for advice, they're wanting me to say something that fits with that image and makes them feel better.  It's not my fault that the advice is terrible.\"\n\n", 5);
				result.screens[5].attach("This feels like some sort of bad joke.  In all the time you've known " + Tanaka() + ", you've always believed that " + heShe(5) + " really does have that sort of bright personality.  More than that, you thought " + heShe(5) + " was kind and caring toward everybody.  Was it all just an act?");
				
				result.emotions[6] = new String[]{"Neutral"};
				result.screens[6].attach("\"Nobody is actually that kind and caring.  Not for long.  It's only a matter of time until somebody exploits that kindness and teaches them to keep their hearts closed.\"\n\n", 5);
				result.screens[6].attach("Is " + Tanaka() + " speaking from experience?\n\n");
				result.screens[6].attach("\"Not exactly.  At least not in the way that you're thinking of.  I'm pretty lucky.  As soon as I hit puberty, I was pretty quick to catch on to why everybody was suddenly paying more attention to me.\"", 5);
				
				result.emotions[7] = new String[]{"Uncomfy"};
				result.screens[7].attach("\"At first, I just pushed them all away and pretty much stopped interacting with people entirely.  I was disgusted.  All these grown men just viewed me as a piece of meat to be devoured.\n\n", 5);
				result.screens[7].attach("Not all of them, surely.\n\n");
				result.screens[7].attach("\"Not toward me, no.  But once you see the pattern of people's behavior, you can't stop noticing it.  Everybody has something they want, and they view everybody else as either obstacles or tools to get that thing.  If they're not lusting after your body, then they want your money, or they want you to do favors for them, or they just expect you to provide emotional support.  And if they don't want any of those things, then they just want you to get out of their way.\"", 5);
				
				result.emotions[8] = new String[]{"Neutral"};
				result.screens[8].attach("\"Once you understand how people work, it isn't possible to love them anymore.  Maybe I used to be an optimistic person who really cared about helping others, but those days are long gone.\"\n\n", 5);
				result.screens[8].attach("Then why does " + heShe(5) + " keep pretending to be that way?\n\n");
				result.screens[8].attach("\"Because it's better to be seen as a 'tool' than as an 'obstacle'.  If I showed my true colors, then everybody would know that they'll never get what they want from me.  The ones who want my body would know that I'll never sleep with them.  The ones who want my friendship would know that I'll never care about them.  And in the meantime, I can keep them close.\"", 5);
				
				result.emotions[9] = new String[]{"Shifty"};
				result.screens[9].attach("But why keep them close?  If everybody has something they want, then what is that thing for " + Tanaka() + "?\n\n");
				result.screens[9].attach("\"I'm not going to tell you.  Revealing what you're after is the stupidest thing you can do, because it reveals how you can be controlled.  It means allowing yourself to become another's tool.\"\n\n", 5);
				result.screens[9].attach("You weren't planning on controlling " + Tanaka() + ".\n\n");
				result.screens[9].attach("\"Then you should start doing so now.  After all, it's what I do to everyone else.  I've gotten so many love confessions from other " + guyGirl(-1) + "s, and every time, I say to myself, 'great, another person who will do whatever I want'.\"", 5);
				
				result.emotions[10] = new String[]{"Happy"};
				result.screens[10].attach("\"You should be more manipulative.  Act weak and clueless.  People will try to take advantage of you, but you'll be the one taking advantage of them instead.  Think in terms of what you can get out of your relationships.  Even for your relationship with me.\"\n\n", 5);
				result.screens[10].attach("But wouldn't it be easier for " + Tanaka() + " to get what " + heShe(5) + " wants out of you if " + heShe(5) + " kept pretending to be kind and idealistic?  Why is " + heShe(5) + " telling you this?\n\n");
				result.screens[10].attach("\"Because I like you.  I think I care more about you than I do about anyone else in the world.\"\n\n", 5);
				result.screens[10].attach("A few minutes ago, you would've been overjoyed to hear those words come from " + Tanaka() + "'s mouth.\n\n");
				result.screens[10].attach("\"But that's really not saying much.  If spending time with you makes me happy, then that just means that you're a tool I can use for my own happiness.  You have something I want, so I'll lie and manipulate you in order to get it.\"", 5);
				
				result.emotions[11] = new String[]{"Uncomfy"};
				result.screens[11].attach("\"You've realized it by now, right?  When I said I was afraid of a stalker, I was just coming up with a reason for you to walk with me every morning.  I could tell that you were going to stop hanging out at the usual spot again.  And I couldn't let that happen.\"\n\n", 5);
				result.screens[11].attach(HeShe(5) + " was really just pretending the whole time?\n\n");
				result.screens[11].attach("\"Maybe that's the real reason I'm telling you all of this now.  It's really exhausting to constantly pretend to be somebody I'm not.  Whenever we talk about something serious, I'd always have to stop and ask myself, what would the 'good' " + Tanaka() + " say here?  It'd be nice to have just one person I can be honest with.\"", 5);
				
				result.emotions[12] = new String[]{"Neutral"};
				result.screens[12].attach("\"I just want you to stop treating me like I'm some sort of saint.  Because I'm not.  I'm actually a really bad person.\"\n\n", 5);
				result.screens[12].attach("Normally, when somebody says something like that, it's an opening for their conversation partner to say something reassuring, like \"you're not really a bad person.\"  But this time, the words won't come out.  " + Tanaka() + " really had you fooled.  You can't look at " + himHer(5) + " the same way anymore.\n\n");
				result.screens[12].attach("\"You probably hate me a little bit now, but that's fine.  Actually, maybe it's a good thing.  It means you can treat me the same way I treat you, and we can both have a clear conscience.\"", 5);
				
				result.emotions[13] = new String[]{"Happy"};
				result.screens[13].attach("\"We're still useful to each other.  That's what it means to be 'friends'.  You're attracted to me, even if you've been smart enough to avoid saying it outright.  And I... enjoy having you around.  We can keep hanging out, and now we can be honest with each other about what we want.\"\n\n", 5);
				result.screens[13].attach("Does that really count as being 'friends'?  Though, it sounds like you weren't really friends in the first place.\n\n");
				result.screens[13].attach("\"It's fine, right?  You're still getting what you want out of me.  I'm sure you've thought about how you want to have me to yourself.  ", 5);
                if (getCurrentAction().ownSpot == Spot.GYMCLASS) {
                    result.screens[13].attach("We're closer now than we've ever been.  ", 5);
                } else {
                    result.backgrounds[15] = "suburb";
                    result.screens[13].attach("Most " + guyGirl(-1) + "s would kill for the chance to get me alone in my room.  And now, here you are.  ", 5);
                }
                result.screens[13].attach("Who knows where things will go from here?\"", 5);

				result.emotions[14] = new String[]{"Grin"};
				result.modifiers[14] = new Modifier[]{Modifier.CLOSEUP};
                if (getCurrentAction().ownSpot != Spot.GYMCLASS) {
                    result.screens[14].attach("\"Come on, there's no need to overthink it.  Let's just get going.\"\n\n", 5);
                } else {
                    result.screens[14].attach("\"Come on, there's no need to overthink it.  Do you wanna come watch me practice?\"\n\n", 5);
                }
				result.screens[14].attach("Tanaka steps forward and takes you by the hand, leading you to walk outside with " + himHer(5) + " just like always.  " + HeShe(5) + "'s so nonchalant about it that you easily fall into the familiar rhythm.\n\n");

				result.characters[15] = new String[0];
				result.screens[15].attach("But even as you make your usual smalltalk together, you still find yourself thinking about the revelation of " + Tanaka() + "'s actual personality.  " + HeShe(5) + "'s not the person you thought " + heShe(5) + " was.  What does that mean for your relationship?  Was " + Tanaka() + " being a 'good person' really important to you?  And what will happen if " + heShe(5) + " decides that it's no longer 'useful' to keep you around?\n\n");
				result.screens[15].attach("It still feels nice to walk with " + himHer(5) + " like this.  A part of you wants to just follow " + Tanaka() + "'s lead, and if " + heShe(5) + " casts you aside someday, at least you'll still have these pleasant memories.  The alternative is to risk ending your 'friendship', or whatever it is you have together, right here and now.\n\n");
				result.screens[15].attach("You need to sort out how you feel about " + himHer(5) + ".  And then, whatever conclusion you reach, you'll have to work up the courage to actually do something about it.\n\n");
				result.screens[15].attach("One thing's for certain: you understand " + Tanaka() + " better now than you did before.  You've caught a glimpse of how " + heShe(5) + " truly sees the world.  And you can't say that " + heShe(5) + "'s entirely wrong about it.  You've learned an important lesson.");
			} else if (g.tier == 3) {
                result = new Scene(19);

                result.backgrounds[0] = "tanakaRoom";
                if (getCurrentAction().ownSpot == Spot.GYMCLASS) {
                    result.backgrounds[0] = "gym";
                    result.outfits[1] = new String[]{"Cheer"};
                }
                result.screens[0].attach("If you had wanted them to, these carefree days with " + Tanaka() + " probably would have lasted forever.  Aside from " + hisHer(5) + " brief moment of candor when " + heShe(5) + " let " + hisHer(5) + " mask slip and told you about " + hisHer(5) + " true view of the world, " + heShe(5) + " has continued to play the part of the sweet, caring, friend-to-everybody.  Even though " + heShe(5) + " said that it's exhausting to pretend to be somebody " + heShe(5) + "'s not, " + heShe(5) + " doesn't really stop that act, even when " + heShe(5) + "'s alone with you.\n\n");
                result.screens[0].attach("In other words, nothing has changed between you.  Did " + Tanaka() + " change " + hisHer(5) + " mind about being honest around you?  Is " + heShe(5) + " hoping that you'll forget everything " + heShe(5) + " said?  If " + Tanaka() + " were anybody else, it'd be easy to dismiss it as " + himHer(5) + " just having a bad day and wanting to vent, saying things " + heShe(5) + " didn't truly mean.\n\n");
                result.screens[0].attach("But this is " + Tanaka() + ".  You've always known " + himHer(5) + " as a social butterfly, and that was even before " + heShe(5) + " outright admitted to manipulating people's emotions.  For " + himHer(5) + " to reveal " + hisHer(5) + " true self to you was strange.  But for " + himHer(5) + " to try to pretend it didn't happen is even stranger.");

                result.characters[1] = new String[]{"tanaka"};
                result.emotions[1] = new String[]{"Happy"};
                result.screens[1].attach("At first, you figured that you'd just wait for a natural opportunity to bring up the subject.  But, of course, " + Tanaka() + " would never allow any such opportunity to arise.  You can't discuss it in public, of course, and in private, conversations with " + Tanaka() + " always flow from one entertaining subject to the next, keeping you pleasantly engaged right up until it's time for " + himHer(5) + " to go.  There are no awkward silences with " + himHer(5) + ".\n\n");
                result.screens[1].attach("And so, it seems like you'll have to just outright ask " + himHer(5) + " about who " + heShe(5) + " really is.  It's taken quite a bit of effort to work up the courage to say what you need to say.  But even if " + Tanaka() + " is no longer showing any gaps in " + hisHer(5) + " mask, even if " + hisHer(5) + " words are perfectly sweet and kind, you can still catch a glimpse of " + hisHer(5) + " true self by looking at " + hisHer(5) + " actions.  And today, you finally feel like you're ready to pull " + hisHer(5) + " true self back out into the light.");

                result.emotions[2] = new String[]{"Shifty"};
                result.screens[2].attach("You aren't going to give " + himHer(5) + " a chance to change the subject.  ");
                if (getCurrentAction().ownSpot == Spot.GYMCLASS) {
                    result.screens[2].attach("As soon as all the other students have left the gym, you approach " + Tanaka() + " and tell " + himHer(5) + " that you need to say something important.\n\n");
                } else {
                    result.screens[2].attach("As soon as " + Tanaka() + " opens " + hisHer(5) + " door, you tell " + himHer(5) + " that you need to say something important.\n\n");
                }
                result.screens[2].attach("\"... Yeah.  I guess it was only a matter of time.\"\n\n", 5);
                result.screens[2].attach("In truth, you've known what you wanted to say for a long time.");

                result.emotions[3] = new String[]{"Happy"};
                result.screens[3].attach(Tanaka() + " is truly amazing.  " + HeShe(5) + " has so much power over people's hearts, and " + heShe(5) + " really doesn't use it that badly.  People are happier for having " + himHer(5) + " in their lives, even if " + heShe(5) + " doesn't actually care about them.\n\n");
                result.screens[3].attach("\"Aw, thank you.  That's... Well, it's not the way people usually put it, but it's still really sweet.\"\n\n", 5);
                result.screens[3].attach("And the more you see how " + heShe(5) + " acts toward everyone else, the more you understand the special connection between " + himHer(5) + " and you.  It's different from what " + heShe(5) + " has with everyone else, though it feels outrageous to say it outright.  Maybe you should've taken more time building up your courage.\n\n");
                result.screens[3].attach("\"It's okay, it's normal to get the jitters.  You can take your time.\"\n\n", 5);
                result.screens[3].attach("The truth is that...");

                result.tracks[4] = Music.SILENCE;
                result.emotions[4] = new String[]{"Lovestruck"};
                result.screens[4].attach("You're pretty sure that " + Tanaka() + " is in love with you.\n\n");
                result.screens[4].attach("\"Of course you-  You-  I-  W-Wait, what?\"\n\n", 5);
                result.screens[4].attach("You're pretty sure that " + Tanaka() + " is in love with you.\n\n");
                result.screens[4].attach("\"N-No, I heard you the first time.  But isn't that backwards?  You're supposed to confess that you're in love with me!\"\n\n", 5);
                result.screens[4].attach("This isn't a confession.  It's an accusation.");

                result.emotions[5] = new String[]{"Surprise"};
                result.modifiers[5] = new Modifier[]{Modifier.CLOSEUP};
                result.screens[5].attach("It's true, isn't it?  " + Tanaka() + "'s in love with you.\n\n");
                result.screens[5].attach("\"Th-That's-  I, u-um...\"\n\n", 5);
                result.screens[5].attach("Wasn't " + Tanaka() + " the one who bragged about being so good at manipulating people?  Regardless of " + hisHer(5) + " true feelings, why can't " + heShe(5) + " just lie?\n\n");
                result.screens[5].attach("\"This isn't fair!  You tricked me!\"\n\n", 5);
                result.screens[5].attach("It was already pretty obvious.  But now, you're sure of it.  " + Tanaka() + " definitely has feelings for you.");

                result.emotions[6] = new String[]{"Anger"};
                result.modifiers[6] = new Modifier[]{Modifier.CLOSEUP};
                result.screens[6].attach("\"... I'm not going to say it.\"\n\n", 5);
                result.screens[6].attach("Why not?\n\n");
                result.screens[6].attach("\"Because if I say it, then you'll be able to use it against me.  You'll know what I want.  You'll be able to... to make me your slave...\"\n\n", 5);

                result.emotions[7] = new String[]{"Surprise"};
                result.modifiers[7] = new Modifier[]{Modifier.CLOSEUP};
                result.screens[7].attach("And what makes " + Tanaka() + " so sure that you even want " + himHer(5) + " to be your slave?\n\n");
                result.screens[7].attach("\"You do!  I know you do...  I've seen the way you look at me!  You want my body!  You do!\"\n\n", 5);
                result.screens[7].attach(HisHer(5) + " body?  Of course you're attracted to it.  The only problem is that it's attached to the rest of " + himHer(5) + ".");
                if (getRoute() >= 0) {
                    result.screens[7].attach("  Besides, you already have a " + boyGirl(getRoute()) + "friend.\n\n");
                    result.screens[7].attach("\"Oh.  I... I really screwed up...\"\n\n", 5);
                } else {
                    result.screens[7].attach("\n\n\"Oh.\"\n\n", 5);
                }
                result.screens[7].attach(Tanaka() + " seems to deflate.  "  + HeShe(5) + " looks like " + heShe(5) + " might start crying.");

                result.emotions[8] = new String[]{"Uncomfy"};
                result.screens[8].attach("\"You hate me.  Of course you do.  After I tried to play with your heart so much...\"\n\n", 5);
                result.screens[8].attach("You don't hate " + himHer(5) + ", either.  You enjoy spending time with " + himHer(5) + ".  You genuinely do admire " + hisHer(5) + " ability to get along with anyone.  If you had to place your feelings toward " + Tanaka() + " somewhere between 'love' and 'hate', then they'd probably end up closer to 'love'.\n\n");
                result.screens[8].attach("But more than that, you're just fed up with " + himHer(5) + " constantly trying to act tricky and pretending to be somebody " + heShe(5) + "'s not.");

                result.emotions[9] = new String[]{"Neutral"};
                result.screens[9].attach("\"I can't stop, though.\"\n\n", 5);
                result.screens[9].attach(HeShe(5) + " can be honest with you.  You aren't going to use " + hisHer(5) + " feelings against " + himHer(5) + ".\n\n");
                result.screens[9].attach("\"No, I'm telling you that I literally can't!  I can't stop!  Even now, I'm still thinking about how I'm 'supposed' to act.  Which emotions to show.  If I cry and act like I'm sorry, then maybe you'll forgive me.  But it's easy for me to keep a straight face if I want to.\"\n\n", 5);
                result.screens[9].attach("Contrary to " + hisHer(5) + " outburst a moment ago, " + Tanaka() + "'s voice is emotionless.\n\n");
                result.screens[9].attach("\"So, which option is more honest?  I could let the tears flow, since I really am feeling sad.  But tears are supposed to be an involuntary thing.  If I'm crying, it's because I chose to cry.  So is it more honest to never cry at all?\"", 5);

                result.emotions[10] = new String[]{"Shifty"};
                result.screens[10].attach("\"It's not just outward displays of emotion, either.  It's my words, too.  Even these words right now.  Before every single sentence, I ask myself, 'How will this impact the way the other person sees me?'  And if the answer isn't good, then I say something else instead.\"\n\n", 5);
                result.screens[10].attach("Has " + heShe(5) + " ever considered telling the truth, even if it would make somebody like " + himHer(5) + " less?\n\n");
                result.screens[10].attach("\"There are so many different ways of telling the truth.  Like, instead of explaining all this in detail, I could've just said 'I'm a manipulative ", 5);
                if (currentPlaythrough.personGenders[5].presentation() == Gender.FEMALE) {
                    result.screens[10].attach("bitch' ", 5);
                } else {
                    result.screens[10].attach("bastard' ", 5);
                }
                result.screens[10].attach("and left it at that.  But I thought, 'If I talk about my entire thought process, " + heShe(-1) + "'ll be more sympathetic toward me'.  Even if I spoke nothing but the truth, I'd still be doing it in a way calculated to make people like me.  I still wouldn't be 'honest'.\"", 5);

                result.emotions[11] = new String[]{"Angst"};
                result.screens[11].attach("\"I hate it!  I hate it!  I wish I could be the kind of " + guyGirl(5) + " who speaks " + hisHer(5) + " mind and wears " + hisHer(5) + " heart on " + hisHer(5) + " sleeve!  I wish that people would actually like the real 'me'!\"\n\n", 5);
                result.screens[11].attach("What's the difference between people liking the real " + Tanaka() + " and the fake one?\n\n");
                result.screens[11].attach("\"The difference is that they only like the version of me that I choose to put out there!  If I were a regular person, just living in the moment and doing whatever felt right, without thinking about how people would react, then it would actually mean something if people liked me.  Instead, all it means is that I'm good at tricking people into liking me.\"", 5);

                result.emotions[12] = new String[]{"Anger"};
                result.screens[12].attach("Isn't that backwards?  When people act thoughtlessly and still end up being popular, then it just means that they were lucky enough to have a personality that people like.  Being a good friend is more meaningful when it's something consciously chosen.\n\n");
                result.screens[12].attach("\"It's fake, though.  While I'm consoling Sakura about her dead dog, I'm actually thinking about how vapid she is for putting so much emotional investment into a dumb animal.\"\n\n", 5);
                result.screens[12].attach("Whether it's fake or not, the effect is the same.  It makes Sakura feel better.  " + Tanaka() + " chooses to make Sakura feel better.\n\n");
                result.screens[12].attach("\"For my own selfish reasons!\"\n\n", 5);
                result.screens[12].attach("So it makes Sakura happy, and it makes " + Tanaka() + " " + himHer(5) + "self happy.  Everyone wins, so what's wrong with that?");

                result.emotions[13] = new String[]{"Surprise"};
                result.screens[13].attach("Besides, it's a moot point, what with how " + Tanaka() + " always loses " + hisHer(5) + " cool around you.\n\n");
                result.screens[13].attach("\"Wh-What's that supposed to mean?\"\n\n", 5);
                result.screens[13].attach("It means that it doesn't matter whether " + Tanaka() + "'s trying to fool you or not, because you can see right through " + himHer(5) + ".  You can see the 'real' " + Tanaka() + ".\n\n");

                result.emotions[14] = new String[]{"Uncomfy"};
                result.screens[14].attach(Tanaka() + " doesn't respond immediately.  " + HeShe(5) + "'s having a hard time deciding which response will make you like " + himHer(5) + " more.  And " + heShe(5) + " knows that being seen to have a hard time deciding which response to use will also make you like " + himHer(5) + " more.  But at the same time, " + heShe(5) + " knows that you know that " + heShe(5) + "'s choosing to come across as hesitant and vulnerable.\n\n");
                result.screens[14].attach("It's all fake.  But that fakeness is part of what makes " + himHer(5) + " " + Tanaka() + ".  And even if " + hisHer(5) + " demeanor is fake, there are still things " + heShe(5) + " cares about.  " + HeShe(5) + " has desires.  And those desires are part of who " + heShe(5) + " truly is.\n\n");
                result.screens[14].attach("\"Hey.  I'm gonna call in sick to work today.  Do you wanna go on a date?\"", 5);

                result.emotions[15] = new String[]{"Lovestruck"};
                result.tracks[15] = Music.HOME;
                int checkedSlot = currentTimeSlot.placement+1;
                while (checkedSlot < 5 && currentPlaythrough.weeklyActions[weekDayNumber()][checkedSlot].relationship == 5) {
                    checkedSlot++;
                }
                if (currentPlaythrough.weeklyActions[weekDayNumber()][2].relationship == 0) {
                    result.screens[15].attach("Actually, you have plans with " + Hashimoto() + ".\n\n");
                } else if (currentPlaythrough.weeklyActions[weekDayNumber()][2].relationship == 1) {
                    result.screens[15].attach("Actually, you have plans with " + Yumeno() + ".\n\n");
                } else {
                    result.screens[15].attach("Actually, you have somewhere else you were planning to be.\n\n");
                }
                result.screens[15].attach("\"Haha, I got rejected.  I might really cry, you know.\"\n\n", 5);
                result.screens[15].attach(HeShe(5) + " can cry if " + heShe(5) + " wants to.  You don't mind.\n\n");

                result.emotions[16] = new String[]{"Uncomfy"};
                result.screens[16].attach("\"But seriously, even if it's not a real 'date', I want to spend more time together.  I want you to find the 'real' me.\"\n\n", 5);
                result.screens[16].attach("You wouldn't mind that, either.  You do like spending time with " + Tanaka() + ", after all.\n\n");
                result.screens[16].attach("\"And I want you to call me out whenever I start trying to act like somebody else.  At least when it's only the two of us.  It's a really, really hard habit to break.\"\n\n", 5);
                result.screens[16].attach("You can do that.");

                result.emotions[17] = new String[]{"Grin"};
                result.screens[17].attach("\"Obviously, I'm also gonna be trying to make you fall in love with me.\"\n\n", 5);
                result.screens[17].attach("It's refreshing to hear " + Tanaka() + " come out and say it like that.\n\n");
                result.screens[17].attach("\"It's refreshing to say it, too!  I'm not used to acting lovestruck.\"\n\n", 5);
                result.screens[17].attach("It seems like " + Tanaka() + "'s decided to use a new tactic.\n\n");
                result.screens[17].attach("\"Are you sure it's just a tactic?  Maybe I've realized that it wouldn't be so bad to... to be completely yours.\"", 5);

                result.characters[18] = new String[0];
                result.screens[18].attach("In truth, you might've been bluffing a little bit when you said that you could completely see through " + Tanaka() + ".  But if " + heShe(5) + " keeps getting more honest, then it'll only become easier.  You'll just have to be careful not to let " + himHer(5) + " completely bewitch you with " + hisHer(5) + " charms.\n\n");
                result.screens[18].attach("Unless, of course, you actually do want to fall for " + himHer(5) + ".");
            }
		} else if (g.index == 2) {
			if (g.tier == 0) {
				result = new Scene(9);
				
				result.backgrounds[0] = "restaurant";
				result.screens[0].attach("You're still in somewhat of a daze even after finishing your meal.  Would it have been better to follow " + Tanaka() + " after all?  For that matter, what have you been doing with your summer vacation?  What if you had been hanging out with " + Tanaka() + " every day since the start of the break?  Would things have progressed further than just a touch on the ");
				if (currentPlaythrough.ownGender.presentation() == Gender.MALE) {
					result.screens[0].attach("arm?\n\n");
				} else {
					result.screens[0].attach("shoulder?\n\n");
				}
				result.screens[0].attach("It's pointless to dwell on it.  There's no way to know whether some choice in the past could have made things turn out differently.  All you can do is consider making different choices in the future.\n\nAnd by now, " + Tanaka() + " will be busy with " + hisHer(5) + " modeling work anyway, so there's no reason to deviate from the routine you've already established.  After you've finished eating, you always head to...");
				
				result.backgrounds[1] = "arcade";
				result.screens[1].attach("... Arcade Infinity.  Some people would call you a fool for paying for entertainment, but this place does everything it can to make it worth the the price.  Some of the games are retro titles that are a hassle to emulate on modern hardware.  Others are new releases that would otherwise require a high-end computer to run.  The nearby restaurants let you grab a bite to eat with only a short break in your gaming marathon, and the overall atmosphere makes it feel very different from just playing games alone at home.\n\nLately, your favorite game has been one that makes full use of the local facilities.  It's a giant mecha battler which uses a cockpit-style cabinet with displays on all sides to provide an immersive experience.  Without further ado, you stride over to your usual spot and pull out a handful of coins.");
				
				result.screens[2].attach("But even as you open up the door of the arcade cabinet, you can't quite get " + Tanaka() + " out of your head.  If you were more superstitious, you might even believe that " + heShe(5) + " had cast some sort of spell on you.\n\n");
				result.screens[2].attach("\"Um.\"\n\n", 1);
				result.screens[2].attach("It had been a few weeks since you had seen " + himHer(5) + ".  Maybe that's why " + heShe(5) + " had such a strong effect on you?  " + Tanaka() + "'s presence is something you have to build up a tolerance for, just like alcohol.  It's certainly just as intoxicating.");
				
				result.screens[3].attach("That can't be the whole explanation, though.  What about how " + heShe(5) + " touched you?  That definitely wasn't how " + heShe(5) + " used to greet you.  It's not like you hated it - actually, it felt quite nice - but what made " + himHer(5) + " change " + hisHer(5) + " behavior?\n\n");
				result.screens[3].attach("\"H-Hey!\"\n\n", 1);
				result.screens[3].attach("Maybe that's just how " + Tanaka() + " greets everybody these days?  But you're pretty sure that " + heShe(5) + " wasn't doing that with anybody else today.  Then again, with the way everyone always crowds around " + himHer(5) + ", you might just have missed it...");
				
				result.screens[4].attach("In the end, you just don't have enough information to say for sure.  That, as much as anything, might be what motivates you to come hang out with " + Tanaka() + " tomorrow.  But in the meantime, you might as well just enjoy yourself here.  You move to sit down in the arcade cabinet.\n\n");
				result.screens[4].attach("\"Stop!  Th-This one's occupied!\"\n\n", 1);
				result.screens[4].attach("Oh.  Where did " + heShe(1) + " come from?");
				
				result.backgrounds[5] = "yumeno1";
				result.screens[5].attach("Sitting in the arcade cabinet is a ");
				if (currentPlaythrough.personGenders[1].presentation() == Gender.MALE) {
					result.screens[5].attach("boy ");
				} else {
					result.screens[5].attach("girl ");
				}
				result.screens[5].attach("you don't recognize.  You almost ended up sitting in " + hisHer(1) + " lap.  It's fortunate that you didn't, since it probably wouldn't have been good for the tablet computer currently occupying that spot.\n\nActually, isn't that strange?  " + HeShe(1) + "'s using a computer while also playing an arcade game?\n\n");
				result.screens[5].attach("\"Phew, you finally noticed me...\"\n\n", 1);
				result.screens[5].attach(HeShe(1) + " doesn't seem to be bothered by the fact that you interrupted " + himHer(1) + ".  If anything, " + heShe(1) + " actually seems happy to see you.  Why could that be?");
				
				result.backgrounds[6] = "yumeno2";
				result.screens[6].attach("\"Wh-What a coincidence, huh?  Running into each other here...\"\n\n", 1);
				result.screens[6].attach("Do you know " + himHer(1) + "?\n\n");
				result.screens[6].attach("\"Oh, I guess you don't remember me...  Um, but that's fine!  It's still fine.  My name's ", 1);
				if (Yumeno().equals("Yumeno")) {
					result.screens[6].attach("Yumeno Miko", 1);
				} else {
					result.screens[6].attach(Yumeno(), 1);
				}
				result.screens[6].attach(".  We're in the same Math class.\"\n\n", 1);
				result.screens[6].attach("Now that " + heShe(1) + " mentions it, you can vaguely recall " + himHer(1) + ".  You're pretty sure you've seen " + himHer(1) + " helping other students with their work.\n\n");
				result.screens[6].attach("\"That's right!  I guess I didn't leave much of an impression on you because you never ended up needing my help...\"\n\n", 1);
				
				result.backgrounds[7] = "arcade";
				result.characters[7] = new String[]{"yumeno"};
				result.emotions[7] = new String[]{"Happy"};
				result.screens[7].attach("Well, if " + heShe(1) + "'s using this cabinet, you don't mind moving over to a different one.  There are a few others that are set up to play the same game.\n\n");
				result.screens[7].attach("\"N-No!  You can go ahead and use your favorite cabinet.  It's okay, I'll move.\"\n\n", 1);
				result.screens[7].attach("Well, if " + heShe(1) + " insists...\n\n");
				result.screens[7].attach("\"Actually, if we're both playing the same game... maybe we could do some co-op missions together?\"\n\n", 1);
				result.screens[7].attach("That's right.  You've never come in here with a friend before, but apparently this game has a cooperative mode where two players can play on the same side together.  It seems like it could be fun.\n\n");
				result.screens[7].attach("\"Great!  Let's get started!\"", 1);
				
				result.characters[8] = new String[0];
				result.screens[8].attach("You take your seat inside the cabinet, and a moment later, you see the notification that another player is inviting you to a co-op game.  And you're a bit surprised when you see that " + Yumeno() + " has apparently selected the highest difficulty.  Does " + heShe(1) + " know what " + heShe(1) + "'s getting into?\n\nIt turns out that " + heShe(1) + " does.  Even though you don't recall seeing " + himHer(1) + " in the arcade before, " + heShe(1) + " must have somehow gotten a lot of practice in this game.  " + HeShe(1) + " ends up clearing the first mission almost all by " + himHer(1) + "self.  The fact that " + heShe(1) + " practically carried you through it is actually kind of embarrassing.\n\nAnd so, in the second mission, you actually put in some effort in order to keep up with " + himHer(1) + ".  By the third mission, you've become so engaged in the game that you're able to forget all about your encounter with " + Tanaka() + ", at least for now.");
			} else if (g.tier == 1) {
				result = new Scene(20);
				
				result.backgrounds[0] = "arcade";
				result.screens[0].attach("The arcade has been getting more and more crowded lately.  Most likely, ");
				if (currentPlaythrough.currentDay < classStartDay) {
					result.screens[0].attach("the looming end of the summer break is making the students want to enjoy themselves to the fullest before they have to go back to class.\n\n");
				} else {
					result.screens[0].attach("the other students are stressed about returning to class and just want to blow off some steam.\n\n");
				}
				if (currentTimeSlot == TimeSlot.AFTERNOON || currentPlaythrough.weeklyActions[weekDayNumber()][2] != Action.PLAYTOGETHER) {
					result.screens[0].attach("As has become your new routine, you've met up with " + Yumeno() + " outside the building and headed inside together.  But as soon as you enter the arcade, ");
				} else {
					result.screens[0].attach("You and " + Yumeno() + " take a short break from your gaming marathon to stretch your legs, but as you make your way across the arcade, ");
				}
				result.screens[0].attach("you're confronted by a wall of people.  Many of them aren't even playing the arcade games - they're just hanging out together and standing in the way.  Making your way back to the game you were playing with " + Yumeno() + " will be a hassle, and it might even be occupied by other players by now.");
				
				result.backgrounds[1] = "arcade";
				result.characters[1] = new String[]{"yumeno"};
				result.emotions[1] = new String[]{"Scared"};
				result.screens[1].attach("It seems like " + Yumeno() + " is trying to say something to you.\n\n");
				result.screens[1].attach("\"... back to my...\"\n\n", 1);
				result.screens[1].attach("Between the music and the noise of the crowd, you can't make it out.  You lean close and gesture for " + himHer(1) + " to speak up.");
				
				result.emotions[2] = new String[]{"Shout"};
				result.modifiers[2] = new Modifier[]{Modifier.CLOSEUP};
				result.screens[2].attach("\"Let's just go home!\"\n\n", 1);
				result.screens[2].attach("That's fair.  It's a shame to miss out on an evening of playing together, but if the arcade is just too crowded for it to be fun, then there's nothing that can be done about it.");
				
				result.emotions[3] = new String[]{"Scared"};
				result.screens[3].attach("But " + Yumeno() + " shakes " + hisHer(1) + " head.\n\n");
				result.screens[3].attach("\"N-No, that came out wrong.  I mean, um...\"\n\n", 1);
				result.screens[3].attach("What's wrong?  Did you mishear " + himHer(1) + "?\n\n");
				result.screens[3].attach("\"W-Well, my place is just a few blocks east of here, s-so...\"\n\n", 1);
				result.screens[3].attach("That's not surprising.  It didn't seem like " + Yumeno() + " was using a car to get here.  Fortunately, your own dorm is within walking distance too.  But since your place is off to the west, it looks like you'll have to split up here-");
				
				result.emotions[4] = new String[]{"Shout"};
				result.modifiers[4] = new Modifier[]{Modifier.CLOSEUP};
				result.screens[4].attach("\"No!  I want you to come over to my house!\"\n\n", 1);
				result.screens[4].attach("Oh.  So that's what " + heShe(1) + " was trying to say.");
				
				result.emotions[5] = new String[]{"Scared"};
				result.screens[5].attach("\"Uh, I-I mean, if that's not too weird.  I thought it might be kinda early to suggest something like that, but if the arcade is too crowded, then...  It's not weird, right?\"\n\n", 1);
				result.screens[5].attach("You're pretty sure it's not weird.  After all, you probably would've invited " + Yumeno() + " to your place by now if there were actually anything fun to do there.");
				
				result.emotions[6] = new String[]{"Happy"};
				result.screens[6].attach("\"R-Really!?  Wow!  It'd be really nice to see your place sometime...  Um, b-but for today, I guess it'd make sense to go to my place, since I have a bunch of video games to play there too.  I have some that I bet you'll really like.\"\n\n", 1);
				result.screens[6].attach("Well, you aren't going to turn down a chance to try some new games.  The two of you head outside.");
				
				result.backgrounds[7] = "suburb";
				result.characters[7] = new String[0];
				result.screens[7].attach("Side-by-side with " + Yumeno() + ", you walk back toward " + hisHer(1) + " place.  You leave the shops behind and make your way into a very upscale residential district.  You're a little surprised when " + Yumeno() + " leads you into a gated community - " + heShe(1) + " doesn't exactly seem like the posh type - but before long, you're standing in front of a spacious house with an immaculately-maintained lawn.\n\n");
				result.screens[7].attach("\"Here we are!\"", 1);
				
				result.backgrounds[8] = "dump";
				result.screens[8].attach("You're surprised again when you see the inside.  It's not a pleasant sight.  Even making your way through the foyer requires stepping around piles of trash.  Dirty clothes, empty food containers, and open packages of delivery goods are piled high.  The smell isn't great, either.  It's hard to tell what color the carpet is supposed to be, since the few spots that aren't covered by trash have been stained by spilled food.  The stains seem old, and some of the receipts attached to the delivery bags are dated to more than two years ago.  This place hasn't been cleaned in a long time.\n\n");
				result.screens[8].attach(Yumeno() + " leads the way, stepping among the piles of trash with practiced movements.  " + HeShe(1) + " doesn't seem to register the filth around " + himHer(1) + ".  You follow " + himHer(1) + " into " + hisHer(1) + " room.");
				
				result.characters[9] = new String[]{"yumeno"};
				result.emotions[9] = new String[]{"Happy"};
				result.screens[9].attach("\"Alright!  This is the one I've been looking forward to showing you, ever since I saw how much you enjoyed that mecha game at the arcade.  Um, it's a little bit on the older side, and it's obviously not as immersive, but the gameplay is really interesting.  Here, let me show you.\"\n\n", 1);
				result.screens[9].attach(HisHer(1) + " bedroom is, if anything, even messier than the rest of the house.  You gingerly take a seat on the bed next to " + himHer(1) + ", picking a spot between two large stains.  This really might not be any better than dealing with the noise of the arcade.");
				
				result.emotions[10] = new String[]{"Neutral"};
				result.modifiers[10] = new Modifier[]{Modifier.CLOSEUP};
				result.screens[10].attach("But the game actually is pretty interesting.  " + Yumeno() + " plays through a stage alone in order to show you what it's like.  All the while, " + heShe(1) + " explains the details of customizing your mecha and being prepared for the various types of challenge the game can throw at you.\n\n");
				result.screens[10].attach("And as " + heShe(1) + " explains, you finally have a chance to observe " + himHer(1) + " up close.  When playing in the arcade, you and " + Yumeno() + " sit in separate arcade cabinets without a direct line of sight to each other.  But here in " + hisHer(1) + " room, you can actually see " + hisHer(1) + " demeanor as " + heShe(1) + " plays.\n\n");
				result.screens[10].attach("The word that immediately comes to mind is 'intense'.  " + HeShe(1) + "'s completely focused on the screen in front of " + himHer(1) + ".  In between battles, " + heShe(1) + " explains " + hisHer(1) + " train of thought as " + heShe(1) + " navigates the menus in order to customize " + hisHer(1) + " mecha.  During the battles themselves, " + heShe(1) + " goes silent, completely motionless except for " + hisHer(1) + " fingers deftly manipulating the controller.  Even without being familiar with this particular game, you still can't help but feel some awe at how quickly " + Yumeno() + " is inputting commands.  It's enough to distract you from the sight and smell of your surroundings.");
				
				result.emotions[11] = new String[]{"Happy"};
				result.screens[11].attach("And then it's your turn to play.  " + Yumeno() + " hands you the controller and then steps back toward the door.\n\n");
				result.screens[11].attach("\"A-Alright, next, I should get started on some food!  You can use the single player mode to get used to the controls while I cook.  Then we can eat, and maybe play some co-op together...\"", 1);
				
				result.characters[12] = new String[0];
				result.screens[12].attach(HeShe(1) + "'s cooking?  You stare doubtfully at " + Yumeno() + "'s back as " + heShe(1) + " leaves the room.  Given the state of " + hisHer(1) + " house, " + Yumeno() + " doesn't exactly seem like an accomplished homemaker.\n\n");
				result.screens[12].attach("Instead of getting started immediately on the game, you tiptoe to the doorway of the room and glance through it to spy on the kitchen.  Sure enough, " + Yumeno() + " is cutting up vegetables.  " + HeShe(1) + " gives off the same impression of intensity that " + heShe(1) + " did while playing the video game.  But does " + heShe(1) + " actually know what " + heShe(1) + "'s doing?\n\n");
				result.screens[12].attach("Returning to " + hisHer(1) + " bedroom, you notice that one of its corners seems to be dedicated to a pile of empty instant ramen packages.  Maybe you could ask " + himHer(1) + " to make one of those for you instead?  But " + Yumeno() + " seems like " + heShe(1) + " might have some problems with " + hisHer(1) + " self-esteem.  Shutting " + himHer(1) + " down like that could really end up hurting " + hisHer(1) + " feelings.");
				
				result.characters[13] = new String[]{"yumeno"};
				result.emotions[13] = new String[]{"Neutral"};
				result.screens[13].attach("You struggle with the decision even as you struggle to learn the controls of the video game.  And before long, the moment of truth has arrived.  " + Yumeno() + " walks through the door with two bowls of some sort of stew.\n\n");
				result.screens[13].attach("\"I-It's ready!  Here, I always just keep my dinner on my lap and munch while I play.\"\n\n", 1);
				result.screens[13].attach("You had gathered as much from the stains on the bed.  " + Yumeno() + " hands you a bowl and then takes " + hisHer(1) + " seat next to you.");
				
				result.emotions[14] = new String[]{"Scared"};
				result.modifiers[14] = new Modifier[]{Modifier.CLOSEUP};
				result.screens[14].attach("It's a bit hard to identify the brown stuff filling the bowl.  Some of those lumps must be the vegetables " + heShe(1) + " was cutting up.  Surely those should be safe to eat, right?\n\n");
				result.screens[14].attach("Your nose is of no help here.  The stew is giving off a savory smell, but the way that it mixes with the pervasive scent of garbage is somehow worse than the garbage smell alone.  Whenever walking past something smelly, eating is usually the last thing on one's mind, but smelling food and garbage together just makes you imagine that the garbage is right there in your bowl.\n\n");
				result.screens[14].attach("Is " + Yumeno() + " leaning closer?  Oh no.  It must be obvious that you're hesitating.  If you don't take a bite now, then it's all over.  You raise the spoon to your mouth.  Hopefully you don't get sick.");
				
				result.characters[15] = new String[0];
				result.tracks[15] = Music.ADVERTISING;
				result.screens[15].attach("Oh!  It's actually really good!\n\n");
				result.screens[15].attach("No, better than 'good'.  The broth is thick and savory, but with a hint of earthy notes from the veggies.  The veggies themselves are crisp - maybe " + Yumeno() + " stir-fried them before adding them to the stew?  When you bite down on them, they release a burst of sharp flavor that breaks up the monotony of the stew without becoming overwhelming in its own right.\n\n");
				result.screens[15].attach("The second bite is even better than the first.  Now that the food is in your mouth, your senses of taste and smell are entirely occupied by the stew.  Every mouthful sends a pleasant warmth through your chest and belly - a real 'comfort food' type feeling.");
				
				result.characters[16] = new String[]{"yumeno"};
				result.emotions[16] = new String[]{"Smug"};
				result.modifiers[16] = new Modifier[]{Modifier.CLOSEUP};
				result.screens[16].attach("\"What do you think?  It's really good, right?\"\n\n", 1);
				result.screens[16].attach("Had you really been thinking to yourself that " + Yumeno() + " had a self-esteem problem?  The expression on " + hisHer(1) + " face now radiates confidence and self-satisfaction.");
				
				result.emotions[17] = new String[]{"Scared"};
				result.screens[17].attach("Just where exactly did " + heShe(1) + " learn how to cook like this?\n\n");
				result.screens[17].attach("\"Uh.  I-Internet...\"\n\n", 1);
				result.screens[17].attach("Oh.  You were half expecting " + himHer(1) + " to say that " + heShe(1) + " was majoring in Culinary Arts or something.");
				
				result.emotions[18] = new String[]{"Pout"};
				result.screens[18].attach("\"B-But it's not like I just grabbed the first random recipe I found online!  I watched where you'd go to get food when you'd take a break from playing at the arcade, searched for dishes with similar flavor profiles that were, um, healthier...  Modified the recipe a little bit based on what your tastes seemed to be...  And I practiced.  I practiced a lot...\"\n\n", 1);
				result.screens[18].attach(HeShe(1) + " went to all that effort just in case you'd end up eating dinner at " + hisHer(1) + " place one of these days?  That's actually really sweet.");
				
				result.emotions[19] = new String[]{"Happy"};
				result.modifiers[19] = new Modifier[]{Modifier.CLOSEUP};
				result.screens[19].attach("\"S-Sweet?  Eheh.  Heheh...  Sweet...\"\n\n", 1);
				result.screens[19].attach("The two of you get started on a co-op mission as you eat, and you do your best to avoid adding to the collection of stains on " + Yumeno() + "'s bed.  For awhile, " + heShe(1) + " just sits next to you on the bed, happily kicking " + hisHer(1) + " feet forward and back while silently mouthing 'sweet' to " + himHer(1) + "self, and for once, " + heShe(1) + "'s so distracted that you end up having to do most of the work to complete the mission.  But then " + heShe(1) + " returns to " + hisHer(1) + " usual intense self.\n\n");
				result.screens[19].attach("All in all, you have a great time.  " + Yumeno() + " invites you to come over earlier tomorrow, or whenever you like.  Apparently " + heShe(1) + " has a breakfast recipe " + heShe(1) + " wants you to try as well.");
			} else if (g.tier == 2) {
				result = new Scene(14);
				
				result.backgrounds[0] = "dump";
				if (getCurrentAction().ownSpot == Spot.YUMENOSHOUSE) {
					result.screens[0].attach("Once again, you're spending the morning at " + Yumeno() + "'s house.  ");
				} else if (currentPlaythrough.weeklyActions[weekDayNumber()][currentTimeSlot.placement+1].ownSpot == Spot.ARCADE) {
					result.screens[0].attach("Before heading out to the arcade, you're spending a bit of time with " + Yumeno() + " at " + hisHer(1) + " house.  ");
				} else {
					result.screens[0].attach("Today, after spending the day with " + Yumeno() + " at the arcade, you walked " + himHer(1) + " home in order to spend some time hanging out at " + hisHer(1) + " place afterward.  ");
				}
				if (getGoalLevel(8, false) > 0) {
					result.screens[0].attach("It was your turn to cook again, and as has become your habit, you clean up after yourself in the kitchen after the meal is done.  At least you can make sure that you're not contributing to the house becoming even messier.\n\n");
				} else {
					result.screens[0].attach("You've just finished eating another excellent meal cooked by " + Yumeno() + ", and in order to show your appreciation, you're cleaning up the cookware in the kitchen that was used to make it.  You're not about to let the house become even messier because of something " + Yumeno() + " did for your sake.\n\n");
				}
				result.screens[0].attach("Meanwhile, " + Yumeno() + " has been looking up information related to the game you had been playing beforehand.  Then, " + heShe(1) + " comes out of " + hisHer(1) + " room to tell you what " + heShe(1) + " found.");
				
				result.characters[1] = new String[]{"yumeno"};
				result.emotions[1] = new String[]{"Happy"};
				result.screens[1].attach("When " + heShe(1) + " sees that you've been cleaning up, " + heShe(1) + " gives you a grateful smile from the doorway.\n\n");
				result.screens[1].attach("\"Th-Thanks for taking care of that for me.  I normally just scrub the pots and pans immediately before I start cooking, but this way, I'll be able to get started on tomorrow's meal more quickly.  Um, assuming you want to come over tomorrow, of course...\"\n\n", 1);
				result.screens[1].attach("So that's how " + heShe(1) + " handles it.  Well, hopefully you're not interfering with " + hisHer(1) + " routine.\n\n");
				result.screens[1].attach("\"No, I really appreciate it!  Honestly, I really hate cleaning.  No matter how skilled you are, it still takes loads of time and effort.  I'm barely any quicker at sterilizing a cooking surface now than I was when I started.\"", 1);
				
				result.emotions[2] = new String[]{"Pout"};
				result.modifiers[2] = new Modifier[]{Modifier.CLOSEUP};
				result.screens[2].attach("So, cleaning is another skill that " + Yumeno() + " has developed?\n\n");
				result.screens[2].attach("\"Of course!  Cleaning is really important!  It's another one of those skills that's hard to train using video games, but I've still gotten really good at it!  My pots and pans are always spotless by the time I start cooking.  I bet that my food is safer to eat than what you'd get at most restaurants.\"\n\n", 1);
				result.screens[2].attach("What about other types of cleaning?\n\n");
				result.screens[2].attach("\"I mastered them all years ago!  Dusting, vacuuming, steam cleaning, dry cleaning, pest control, lawncare - uh, I guess the HOA takes care of that last one, but I bet I could do a better job than them if they let me.  Seriously, since you're helping me here, you should let me return the favor over at your place.  Give me a couple of hours and I'll have your place... sparkling... spotless... uh...\"", 1);
				
				result.tracks[3] = Music.SILENCE;
				result.emotions[3] = new String[]{"Neutral"};
				result.modifiers[3] = new Modifier[]{Modifier.CLOSEUP};
				result.screens[3].attach(Yumeno() + " trails off, " + hisHer(1) + " gaze beginning to wander.  " + HeShe(1) + " turns to look at the clutter piled high in every corner of the room.  " + HeShe(1) + " glances between the various stains on the walls.  "  + HeShe(1) + " lifts " + hisHer(1) + " foot and notices that " + heShe(1) + " was standing on an old pair of underwear that seems to have fused into the carpet.");
				
				result.emotions[4] = new String[]{"Shout"};
				result.modifiers[4] = new Modifier[]{Modifier.CLOSEUP};
				result.screens[4].attach("\"AAAGH!\"\n\n", 1);
				result.screens[4].attach("Before you can stop " + himHer(1) + ", " + Yumeno() + " turns to flee.");
				
				result.backgrounds[5] = "black";
				result.characters[5] = new String[0];
				result.screens[5].attach(Yumeno() + " vanishes from the kitchen, and you hear " + himHer(1) + " slam the door to " + hisHer(1) + " room behind " + himHer(1) + ".\n\n");
				result.screens[5].attach("You briefly consider going after " + himHer(1) + ", but it might be better to give " + himHer(1) + " a few minutes to " + himHer(1) + "self.  Instead, you just get back to work cleaning in the kitchen.");
				
				result.backgrounds[6] = "dump";
				result.tracks[6] = Music.BEACH;
				result.characters[6] = new String[]{"yumeno"};
				result.emotions[6] = new String[]{"Scared"};
				result.screens[6].attach("When " + Yumeno() + " comes out of " + hisHer(1) + " room, " + heShe(1) + " seems to have composed " + himHer(1) + "self, but " + hisHer(1) + " expression is still downcast.\n\n");
				result.screens[6].attach("\"What a blunder.  I'm so embarrassed I could die.\"\n\n", 1);
				result.screens[6].attach("If the house being messy had bothered you that much, then you would have said something to " + himHer(1) + " or just stopped coming over.  You've still been enjoying your time here.\n\n");
				result.screens[6].attach("\"Even if it wasn't bothering you, it's still not good enough!  I wanted to prove to you that I'd be a good... y-you know...\"\n\n", 1);
				result.screens[6].attach("The state of " + hisHer(1) + " house has nothing to do with it.  " + Yumeno() + " has absolutely proven that " + heShe(1) + "'d be a wonderful chef.");
				
				result.emotions[7] = new String[]{"Pout"};
				result.screens[7].attach("But apparently that's not good enough for " + Yumeno() + ".\n\n");
				result.screens[7].attach("\"Gah!  I knew it!  I haven't caught up at all!  But just you wait.  The next time you see this place, it'll be so clean that you forget all about what you've seen until now!\"\n\n", 1);
				result.screens[7].attach("Does that mean you shouldn't come over tomorrow?\n\n");
				result.screens[7].attach("\"N-No!  I-I'll clean it overnight!  This is actually a good reason to pull an all-nighter!\"\n\n", 1);
				result.screens[7].attach("This mess seems like it might be more than just one night of work...");
				
				result.emotions[8] = new String[]{"Scared"};
				result.screens[8].attach("\"Ugh...  I really screwed up.  I should've had this done before I even approached you.  What am I supposed to do now...?\"\n\n", 1);
				result.screens[8].attach("Maybe you can help " + himHer(1) + ".\n\n");
				result.screens[8].attach("\"N-No way!  That would be even worse than doing nothing at all!  The time you spend with me should be nothing but fun!  I don't want you to associate me with all this... disgusting stuff...\"\n\n", 1);
				result.screens[8].attach("You'll still be having fun talking with " + himHer(1) + " while you work together.  And besides, wasn't " + heShe(1) + " saying that " + heShe(1) + " was especially skilled at cleaning?  You might be able to learn something from " + himHer(1) + ".");
				
				result.emotions[9] = new String[]{"Neutral"};
				result.screens[9].attach("\"Even if letting you help works against my goals... it's true that I owe you a favor for being so nice about this.  So, giving you a chance to learn some skills is the least I can do...\"\n\n", 1);
				result.screens[9].attach("That seems a bit backwards, but as long as " + heShe(1) + "'s allowing you to help, that's all the matters.");
				
				result.emotions[10] = new String[]{"Scared"};
				result.screens[10].attach("\"Th-There isn't anything else super obvious that I'm missing, right?  Like... the way I talk to you is normal, right?  I'm not being super rude without knowing it?  A-And I don't smell bad, right?\"\n\n", 1);
				result.screens[10].attach("You don't recall consciously noticing a bad smell around " + Yumeno() + " at the arcade.  It's currently impossible to distinguish " + Yumeno() + "'s smell against the background smell of the house, but it's probably best not to say as much unless you want " + himHer(1) + " to run off and hide in " + hisHer(1) + " room again.\n\n");
				result.screens[10].attach("\"I really just didn't realize that it had gotten this bad in here.  I got so used to living like this...  And it's not like having a dirty house imposed any penalties on my usual activities, so even when I did notice a mess, it didn't seem like a real problem.\"", 1);
				
				result.emotions[11] = new String[]{"Neutral"};
				result.screens[11].attach("\"But it was always going to become a problem at some point.  I just didn't have the skills to recognize that problem in advance.  I've learned an important lesson.  I won't let this happen again.\"\n\n", 1);
				result.screens[11].attach("It seems that " + Yumeno() + " has fully recovered.  " + HeShe(1) + "'s back to " + hisHer(1) + " usual goal-oriented self.");
				
				result.emotions[12] = new String[]{"Happy"};
				result.screens[12].attach("\"Thanks so much for helping me with this.  Um, not the cleaning, I mean.  I want to thank you for sticking with me even though I'm not... not really good with people.\"\n\n", 1);
				result.screens[12].attach("Well, being friends with somebody isn't contingent on them having skills.  Sticking together through thick and thin is what friends are for.\n\n");
				result.screens[12].attach("\"Y-Yeah... I guess so...\"", 1);
				
				result.characters[13] = new String[0];
				result.screens[13].attach("The two of you make some plans for how to tackle the huge mess that encompasses " + Yumeno() + "'s house, but you end up deciding that it'd make more sense to get a fresh start on it in the morning.  You have your work cut out for you.");
			} else if (g.tier == 3) {
				result = new Scene(16);
				String background = "dump";
				if (getCurrentAction().ownSpot == Spot.MATHCLASS) {
					background = "class";
				} else if (getGoalLevel(9, false) > 0) {
					background = "cleaner";
				}
				if (weekDayNumber() != 0 && weekDayNumber() != 6 && currentTimeSlot.placement < 3 && currentPlaythrough.currentDay >= classStartDay) {
					result.outfits[1] = new String[]{"Uniform"};
				}
				
				result.tracks[0] = Music.BEACH;
				result.backgrounds[0] = background;
				if (getCurrentAction().ownSpot == Spot.MATHCLASS) {
					result.screens[0].attach("During your summer break, most of your time with " + Yumeno() + " was spent playing video games.  You'd stop now and then in order to eat and ");
					if (getGoalLevel(9, false) > 0) {
						result.screens[0].attach("help out with chores, ");
					} else {
						result.screens[0].attach("such, ");
					}
					result.screens[0].attach("but before long, you'd always be jumping back into a game together.  However, now that the break's over, you'll have to content yourself with the Math class you both attend.  Even though " + Yumeno() + " will still play a game hidden on " + hisHer(1) + " lap during the lectures, you can't exactly play together like you normally do.\n\n");
					result.screens[0].attach("But even if you can't play games together, you can still talk about them in between solving the assigned problems.  ");
				} else {
					result.screens[0].attach("Today, you're enjoying another lazy ");
					if (currentPlaythrough.currentDay < classStartDay) {
						result.screens[0].attach("summer day ");
					} else if (weekDayNumber() == 0 || weekDayNumber() == 6) {
						result.screens[0].attach("weekend day ");
					} else {
						result.screens[0].attach("afternoon ");
					}
					result.screens[0].attach("with " + Yumeno() + ".  ");
					if (getCurrentAction().ownSpot == Spot.ARCADE) {
						if (currentTimeSlot.placement == 2) {
							result.screens[0].attach("You've met up with " + himHer(1) + " at " + hisHer(1) + " house before heading out to the arcade.  ");
						} else {
							result.screens[0].attach("You've just walked " + himHer(1) + " home from the arcade.  ");
						}
					} else {
						result.screens[0].attach("You've just finished finished eating together.  ");
					}
					result.screens[0].attach("Normally, " + Yumeno() + " is always eager to jump right back into the game, but today, " + heShe(1) + " seems uncharacteristically distracted.\n\n");
					result.screens[0].attach("Perhaps " + heShe(1) + "'s more in the mood to talk instead?  ");
				}
				if (getGoalLevel(9, false) > 0) {
					result.screens[0].attach(HeShe(1) + "'s staring down at the antique handheld game " + heShe(1) + " kept for " + himHer(1) + "self, turning it over in " + hisHer(1) + " hands with a thoughtful expression on " + hisHer(1) + " face.");
				} else {
					result.screens[0].attach(HeShe(1) + "'s staring down at " + hisHer(1) + " tablet, the thoughtful expression on " + hisHer(1) + " face very different from the usual intensity it displays when thinking about " + hisHer(1) + " next move.");
				}
				
				result.characters[1] = new String[]{"yumeno"};
				result.emotions[1] = new String[]{"Neutral"};
				result.screens[1].attach("You decide to ask " + himHer(1) + " about it.  ");
				if (getGoalLevel(9, false) > 0) {
					result.screens[1].attach("Is that game not as good as " + heShe(1) + " remembered?\n\n");
				} else {
					result.screens[1].attach("Is the game " + heShe(1) + "'s currently playing a boring one?\n\n");
				}
				result.screens[1].attach("\"N-No...  Just the opposite, really.  It's a really interesting game.\"\n\n", 1);
				result.screens[1].attach("Then why does it seem like " + heShe(1) + " isn't really engaged by it?\n\n");
				result.screens[1].attach("\"Because...  Well, I can't stop asking myself, 'why is this game good?'\"", 1);
				
				result.emotions[2] = new String[]{"Pout"};
				result.screens[2].attach("\"I mean, it's an older game, and it shows.  They tried to make it look realistic, but the graphics aged horribly.  The interface is clunky.  It doesn't even have a cutscene skip option.\"\n\n", 1);
				result.screens[2].attach("Then what's so good about it?\n\n");
				result.screens[2].attach("\"The gameplay.  I mean, that's the core of any game, right?  It sets a challenge for you, and then it asks your brain and sometimes your fingers to keep up.  You can have a bad game with good music or graphics or writing.  But you can't have a bad game with good gameplay.\"", 1);
				
				result.emotions[3] = new String[]{"Neutral"};
				result.screens[3].attach("\"And when I say that the gameplay is 'good', I don't just mean that it's entertaining.  There are lots of ways for a piece of media to be entertaining, most of which don't have anything to do with 'gameplay'.  Even a completely braindead game can still feel really satisfying to play.\"\n\n", 1);
				result.screens[3].attach("Like grindy RPGs where you just use whatever attack matches the enemy's elemental weakness, and heal whenever your HP gets low.\n\n");
				result.screens[3].attach("\"Or slot machines, or most farming simulators.  There are lots of tricks to stimulate the parts of the brain that process 'enjoyment'.  But for gameplay to be actually good, it needs to challenge the player to develop skills and think about what they're doing.  It needs interactivity.\"", 1);
				
				result.emotions[4] = new String[]{"Pout"};
				result.screens[4].attach("That seems like a pretty straightforward answer.  What's bothering " + himHer(1) + ", then?\n\n");
				result.screens[4].attach("\"It just seems like there should've been more development in the field of 'designing good gameplay' by now.  If an old game can have better gameplay than most modern titles, then what have we been doing, these past 20 years?  Why haven't our games gotten any better?  I don't like it.\"\n\n", 1);
				result.screens[4].attach(Yumeno() + " is actually getting pretty worked up about this.  Is it really surprising that old video games can be just as good as new ones?\n\n");
				result.screens[4].attach("\"I think it is!  Over the past 20 years, our transistors have been getting smaller, our spacecraft have been getting cheaper and more reliable, our medicine has been able to cure more diseases.  Our games should be getting better too!\"", 1);
				
				result.emotions[5] = new String[]{"Scared"};
				result.screens[5].attach("It's pretty funny to classify video games on the same level as the foundational technologies of modern society.\n\n");
				result.screens[5].attach("\"W-Well, even if they're not on the same level of importance, I don't think they're that different...\"\n\n", 1);
				result.screens[5].attach("There is one very important difference between them.");
				
				result.emotions[6] = new String[]{"Happy"};
				result.screens[6].attach("Medicine and rocket engines are scientific achievements.  They're measured against an objective standard of usefulness.  But video games are art.\n\n");
				result.screens[6].attach("\"Hehe.  Wouldn't that be something?  The big debate over the artistic merit of video games could be settled by the fact that we haven't gotten any better at making them, so they must be art after all.\"\n\n", 1);

				result.emotions[7] = new String[]{"Pout"};
				result.screens[7].attach("\"I still don't like it, though.  Something can have artistic merit and practical usefulness at the same time.  There are plenty of cases where we've agreed that one of the gameplay elements in a game was just an outright mistake that shouldn't have been added.  Seriously, the more I talk to you, the more I think that the two of us could-\"\n\n", 1);
				result.screens[7].attach("Before " + Yumeno() + " can finish " + hisHer(1) + " thought, " + heShe(1) + "'s cut off.");
				
				result.emotions[8] = new String[]{"Scared"};
				if (getCurrentAction().ownSpot == Spot.MATHCLASS) {
					result.screens[8].attach("The bell that signals the end of class rings.  It looks like you'll have to continue this conversation tomorrow.  ");
					if (currentPlaythrough.weeklyActions[weekDayNumber()][2].ownSpot == Spot.GYMCLASS) {
						if (currentPlaythrough.personStatus[5] == Locale.COLLEGETOWN) {
							result.screens[8].attach("You're looking forward to seeing " + Tanaka() + " in the gym, and of course ");
						} else {
							result.screens[8].attach("You don't care as much about skipping your gym class since " + Tanaka() + "'s gone, but ");
						}
					} else {
						result.screens[8].attach("Even if you're skipping class, ");
					}
					result.screens[8].attach(Yumeno() + " is actually pretty serious about " + hisHer(1) + " studies.\n\n");
					result.screens[8].attach("You pick up your bag and make to wave goodbye to " + Yumeno() + ".");
				} else {
					result.screens[8].attach("The clock in " + Yumeno() + "'s foyer tolls the hour.  ");
					if (currentTimeSlot.placement < 2) {
						result.screens[8].attach("You must have lost track of time.  Arcade Infinity is already open.  ");
						if (currentPlaythrough.weeklyActions[weekDayNumber()][2].relationship == 1) {
							result.screens[8].attach("At least you can wrap up this conversation on the way there.  But once you're inside, all the noise will make it hard to talk.");
						} else {
							result.screens[8].attach("Unfortunately, you have somewhere else you need to be.");
						}
					} else if (currentTimeSlot.placement == 2 && currentPlaythrough.weeklyActions[weekDayNumber()][3].relationship != 1) {
						result.screens[8].attach("You must have lost track of time.  There's somewhere else you were planning to be.  You feel a little bit bad about walking out on " + Yumeno() + ", but you did warn " + himHer(1) + " ahead of time that you wouldn't be able to stay for too long.");
					} else {
						result.screens[8].attach("It's gotten late.  This is when " + Yumeno() + " always wants to start getting ready for bed.  " + HeShe(1) + " wakes up early each morning, so " + heShe(1) + "'ll be suffering if you keep " + himHer(1) + " up any later than this.");
					}
					result.screens[8].attach("\n\nYou gather your things and get ready to leave.");
				}
				
				result.emotions[9] = new String[]{"Neutral"};
				result.sounds[9] = Effect.RUSTLE;
				result.modifiers[9] = new Modifier[]{Modifier.CLOSEUP};
				result.screens[9].attach("\"No.\"\n\n", 1);
				result.screens[9].attach(Yumeno() + " reaches out to grab you by the arm, stopping you from leaving.  It's surprising to see " + himHer(1) + " being so forceful.  Even " + Yumeno() + " " + himHer(1) + "self didn't seem to expect it.  But " + heShe(1) + " doesn't let go.");
				
				result.emotions[10] = new String[]{"Scared"};
				result.modifiers[10] = new Modifier[]{Modifier.CLOSEUP};
				result.screens[10].attach("\"I, uh...  W-Wow, I actually didn't expect this.  We spend so much time together, and it still isn't enough...\"\n\n", 1);
				result.screens[10].attach("What is " + Yumeno() + " mumbling to " + himHer(1) + "self about?\n\n");
				result.screens[10].attach("\"N-Nothing!  I just... I just was having a lot of fun talking to you.  I don't want to stop.\"", 1);
				
				result.emotions[11] = new String[]{"Neutral"};
				result.modifiers[11] = new Modifier[]{Modifier.CLOSEUP};
				if (getCurrentAction().ownSpot == Spot.MATHCLASS) {
					result.screens[11].attach("Is " + Yumeno() + " saying that " + heShe(1) + " wants to skip class with you?\n\n");
					result.screens[11].attach("\"No.  I mean, um, yes, I do want to.  But I shouldn't.  It's not a long-term solution.  Getting good grades is important for my other goals, so I can't do it, even if I want to.\"\n\n", 1);
					result.screens[11].attach("Well, if " + heShe(1) + " doesn't let go of your arm, " + heShe(1) + "'s going to be late for class anyway.\n\n");
				} else if (currentTimeSlot.placement < 2) {
					result.screens[11].attach("You can always keep talking on your way downtown together.\n\n");
					result.screens[11].attach("\"We can!  But... But there's something I have to say first...\"\n\n", 1);
					result.screens[11].attach("It's pretty unusual for " + Yumeno() + " to deviate from " + hisHer(1) + " schedule even this much.  Is " + heShe(1) + " alright?\n\n");
				} else if (currentTimeSlot.placement == 2 && currentPlaythrough.weeklyActions[weekDayNumber()][3].relationship != 1) {
					result.screens[11].attach("There's always next time, right?\n\n");
					result.screens[11].attach("\"Th-That's not good enough!  I... I, um...\"\n\n", 1);
					result.screens[11].attach("You glance over at the clock.  Whatever " + Yumeno() + " has to say, you hope " + heShe(1) + " can figure it out soon.\n\n");
				} else {
					result.screens[11].attach("Is " + Yumeno() + " saying that " + heShe(1) + " wants to stay up late with you?\n\n");
					result.screens[11].attach("\"No.  I mean, um, yes, I do want to.  But I shouldn't.  It's not a long-term solution.  Keeping a responsible sleep schedule is important for my other goals, so I can't do it, even if I want to.\"\n\n", 1);
					result.screens[11].attach("Well, every moment spent holding onto your arm is another moment " + heShe(1) + "'ll be staying up past " + hisHer(1) + " bedtime.\n\n");
				}
				result.screens[11].attach("\"J-Just give me a minute!  If I don't say it now, then it'll only be harder to work up the courage later!\"\n\n", 1);
				result.screens[11].attach(Yumeno() + " takes a few deep breaths, visibly psyching " + himHer(1) + "self up.  And then-");
				
				result.emotions[12] = new String[]{"Shout"};
				result.modifiers[12] = new Modifier[]{Modifier.CLOSEUP};
				result.screens[12].attach("\"I want you to come live ", 1);
				if (getCurrentAction().ownSpot != Spot.MATHCLASS) {
					result.screens[12].attach("here ", 1);
				}
				result.screens[12].attach("at my place!\"\n\n", 1);
				if (getGoalLevel(9, false) > 0) {
					result.screens[12].attach("Oh.  That might not be a great idea.  ");
					if (currentPlaythrough.ownGender.presentation() == currentPlaythrough.personGenders[1].presentation()) {
						result.screens[12].attach("Sleeping over at the house of a same-sex friend shouldn't be a big deal, but the memory of " + Yumeno() + "'s naked body flashes unbidden through your mind.  ");
					} else {
						result.screens[12].attach("You had never really been conscious of " + Yumeno() + " as a member of the opposite sex, but ever since that day " + heShe(1) + " walked in on you without " + hisHer(1) + " clothes, you haven't quite been able to see " + himHer(1) + " the same way.  ");
					}
					result.screens[12].attach("And now " + heShe(1) + " wants you to stay under the same roof all night?  You won't be able to get a wink of sleep.");
				} else {
					result.screens[12].attach("So that's the solution " + heShe(1) + " came up with.  You feel conflicted.  On one hand, spending more time with " + Yumeno() + " would be great.  But on the other, it means living in the mess of " + hisHer(1) + " house.  Maybe it won't be so bad after it's all been cleaned up.");
				}
				
				result.emotions[13] = new String[]{"Scared"};
				result.modifiers[13] = new Modifier[]{Modifier.CLOSEUP};
				result.screens[13].attach(Yumeno() + " senses your hestitation.\n\n");
				result.screens[13].attach("\"I-Is that too much?  I knew it...  This time, I'm definitely being weird...\"\n\n", 1);
				result.screens[13].attach("You hurriedly reassure " + Yumeno() + " that it's fine, but you still find yourself hunting for reasons to refuse.  Even though " + Yumeno() + "'s house is pretty big, none of the bedrooms are set up as guest bedrooms, right?\n\n");
				result.screens[13].attach("\"We...  We could always...\"\n\n", 1);
				result.screens[13].attach(Yumeno() + " trails off.  Is " + heShe(1) + " leaning closer to you?");
				
				result.emotions[14] = new String[]{"Shout"};
				result.screens[14].attach("It must have been your imagination.  " + Yumeno() + " suddenly seems to remember the time, and " + heShe(1) + " springs backwards, releasing your arm like it's burning hot.\n\n");
				result.screens[14].attach("\"N-Never mind!  I'll get a guest room ready for you by tomorrow!", 1);
				if (getCurrentAction().ownSpot == Spot.MATHCLASS) {
					result.screens[14].attach("\"\n\n", 1);
					result.screens[14].attach(HeShe(1) + " gathers " + hisHer(1) + " bags and sprints for the door.\n\n");
					result.screens[14].attach("\"See you later!\"", 1);
					
					result.characters[15] = new String[0];
					result.screens[15].attach("It looks like you'll have plenty of time to finish your conversation after all.  Or at least, you will if you take " + himHer(1) + " up on " + hisHer(1) + " offer.  But for now, you still have the rest of your day ahead of you.");
				} else if (currentTimeSlot.placement < 2) {
					result.screens[14].attach("\"\n\n", 1);
					result.screens[14].attach(HeShe(1) + " gathers " + hisHer(1) + " things and heads for the door.\n\n");
					if (currentPlaythrough.weeklyActions[weekDayNumber()][2].relationship == 1) {
						result.screens[14].attach("\"But for now, I really need some fresh air!\"\n\n", 1);
						result.screens[14].attach("That's fair enough.  You follow " + Yumeno() + " outside.");
						
						result.characters[15] = new String[0];
						result.backgrounds[15] = "suburb";
						result.screens[15].attach("Even after you're outside, " + Yumeno() + " doesn't actually seem interested in continuing your conversation.  " + HeShe(1) + " walks on " + hisHer(1) + " own, taking deep breaths and avoiding eye contact.\n\n");
						result.screens[15].attach("But you suppose that there's no rush, now.  You'll be able to spend even more time together from now on.");
					} else {
						result.screens[14].attach("\"See you later!\"", 1);
						
						result.characters[15] = new String[0];
						result.backgrounds[15] = "suburb";
						result.screens[15].attach("You head outside as well, heading in the opposite direction from " + Yumeno() + ".  It looks like you'll have plenty of time to finish your conversation after all.  Or at least, you will if you take " + himHer(1) + " up on " + hisHer(1) + " offer.  But for now, you still have the rest of your day ahead of you.");
					}
				} else {
					result.screens[14].attach("  A-Actually, I'll get started right away!\"\n\n", 1);
					result.screens[14].attach("It seems like " + heShe(1) + " wants to do it by " + himHer(1) + "self in order to be a good host.  You excuse yourself and then leave " + himHer(1) + " to it.");
					
					result.characters[15] = new String[0];
					result.backgrounds[15] = "suburb";
					result.screens[15].attach("As you head home, you think over the question of whether you actually want to take " + himHer(1) + " up on " + hisHer(1) + " offer.  Living at " + Yumeno() + "'s house fulltime would definitely be too much, but spending a night together now and then would probably be... tolerable.");
				}
			} else if (g.tier == 4) {
				result = new Scene(15);
				
				result.tracks[0] = Music.BEACH;
				result.backgrounds[0] = "cleaner";
				if (getCurrentAction().ownSpot == Spot.MATHCLASS) {
					result.backgrounds[0] = "class";
				} else if (getCurrentAction().ownSpot == Spot.ARCADE) {
					result.backgrounds[0] = "arcade";
				} else if (getGoalLevel(9, false) == 0) {
					result.backgrounds[0] = "dump";
				}
				if (currentPlaythrough.currentDay < classStartDay) {
					result.screens[0].attach("With the end of your summer break looming, you and " + Yumeno() + " have been spending more time talking about your upcoming Math class together.  It's usually " + Yumeno() + " who brings it up - you'll be playing a game together and trying to figure out which action is optimal, and " + Yumeno() + " will go off on a tangent about how that optimal action would be calculated.\n\n");
					result.screens[0].attach(Yumeno() + " actually enjoys math.  It seems like it's just another game to " + himHer(1) + ".  Your own performance in Math class isn't bad, but apparently " + Yumeno() + "'s is pretty much perfect.  When you talk about the lessons from last term, " + Yumeno() + " is able to explain the principles with a clarity that rivals that of the instructor.  It's starting to sink in for you that " + Yumeno() + " is actually a very intelligent person in general.\n\n");
				} else {
					result.screens[0].attach("Attending class with " + Yumeno() + " has greatly changed the way you see " + himHer(1) + ".  When you first got to know each other over summer break, " + heShe(1) + " had seemed like " + heShe(1) + " was somewhat disconnected from the real world, always immersed in " + hisHer(1) + " video games.  But now that you're actually paying attention to " + himHer(1) + " in class, it's hard not to be impressed by " + hisHer(1) + " skills.\n\n");
					result.screens[0].attach(HeShe(1) + " finishes " + hisHer(1) + " assignments quickly, seeming to effortlessly grasp the concepts before the lecture is even finished, then pulls out a handheld video game to play under the desk for the rest of the period.  When you talk to " + himHer(1) + " in between classes, " + heShe(1) + "'s happy to explain the principles behind the lesson in " + hisHer(1) + " own words, and it's obvious that " + heShe(1) + " really does understand it all well enough to teach it to somebody else.\n\n");
				}
				result.screens[0].attach("And it's not just schoolwork.  It was no surprise that, when " + Yumeno() + " would show you a game at " + hisHer(1) + " house, " + heShe(1) + " would be better at it.  After all, " + heShe(1) + " had played those games a lot more than you had.  But even when you try out new games for the first time together, " + Yumeno() + " is always better at them.  It doesn't matter whether they're realtime or turn-based, twitchy or strategic, shooters or managers or deckbuilders.  In cooperative games, " + Yumeno() + " carries you to victory.  In competitive ones, " + Yumeno() + " always wins.");
				
				result.screens[1].attach("It's enough to make you doubt yourself.  People should have their own strengths and weaknesses, shouldn't they?  In that case, what's " + Yumeno() + "'s weakness?\n\n");
				if (currentPlaythrough.personGenders[1].presentation() == Gender.FEMALE && currentPlaythrough.ownGender.presentation() == Gender.MALE) {
					result.screens[1].attach("You can probably run faster and lift heavier things than " + himHer(1) + ".  But " + heShe(1) + "'s a girl, so that's hardly anything to be proud of.\n\n");
				} else {
					result.screens[1].attach(HeShe(1) + " isn't great at lifting heavy things or running long distances.  You probably have " + himHer(1) + " beat there.  But you don't really exercise on a regular basis, so it's not like it's something you can take pride in working hard for.\n\n");
				}
				result.screens[1].attach(HeShe(1) + "'s definitely shy and socially awkward.  But you aren't exactly a social butterfly yourself, and really that's more of a personality trait than a weakness.\n\n");
				if (currentPlaythrough.personStatus[5] != Locale.COLLEGETOWN && getGoalLevel(28, false) == 0) {
					result.screens[1].attach("If you had " + Yumeno() + "'s skills, then would you have managed to find " + Tanaka() + " and bring " + himHer(5) + " home by now?  Would " + Tanaka() + " have gotten abducted in the first place?");
				} else {
					result.screens[1].attach(Yumeno() + " doesn't seem intent on doing much but continuing to build " + hisHer(1) + " skills for now.  But it's easy to imagine that " + heShe(1) + "'ll accomplish great things some day.  And what would you be able to accomplish if you were as capable as " + heShe(1) + " is?");
				}
				
				result.characters[2] = new String[]{"yumeno"};
				result.emotions[2] = new String[]{"Scared"};
				if (getCurrentAction().ownSpot == Spot.MATHCLASS) {
					result.screens[2].attach("One day, before you head your separate ways after class, you decide to talk to " + himHer(1) + " about it.  ");
					result.outfits[2] = new String[]{"Uniform"};
				} else if (currentPlaythrough.currentDay < classStartDay || weekDayNumber() == 0 || weekDayNumber() == 6) {
					result.screens[2].attach("One day, while you're hanging out together, you decide to talk to " + himHer(1) + " about it.  ");
				} else {
					result.screens[2].attach("One day, while you're at the arcade together after class, you decide to talk to " + himHer(1) + " about it.  ");
				}
				result.screens[2].attach("How is " + heShe(1) + " so good at everything?\n\n");
				result.screens[2].attach("\"Wh-Where is this coming from?\"\n\n", 1);
				result.screens[2].attach("It's a pretty straightforward question, isn't it?  " + Yumeno() + " doesn't have an inferiority complex.  " + HeShe(1) + "'s well-aware of " + hisHer(1) + " strengths.\n\n");
				result.screens[2].attach("\"Y-Yeah, I guess, but it's still a little embarrassing to have someone else come out and say it like that...\"", 1);
				
				result.emotions[3] = new String[]{"Pout"};
				result.screens[3].attach("So, what's " + hisHer(1) + " secret?  There's clearly more to it than just training " + himHer(1) + "self with video games.  Plenty of people spend all their time playing video games and still end up without any skills to show for it.\n\n");
				result.screens[3].attach("\"Mm...  I still think that video games are the most important part.  But... I guess there's a little more to it.\"\n\n", 1);
				result.screens[3].attach("That's a relief.  You were beginning to worry that " + Yumeno() + " would just tell you that playing more video games is always the answer.\n\n");
				result.screens[3].attach("\"H-Hey, you're making me sound like some sort of video game addict.  I know when to put a game down...  Actually, I guess that might be the other important part.  It's a matter of approaching games with the right mentality.\"", 1);
				
				result.emotions[4] = new String[]{"Neutral"};
				result.screens[4].attach("\"Most of the time, when people decide to do something, they're just going along with whatever seems like it'll make them happy in the moment.  They don't have a 'victory condition' in mind.\"\n\n", 1);
				result.screens[4].attach("When it comes to pieces of life advice, 'do whatever makes you happy' is one of the most common ones out there.  Does " + Yumeno() + " disgree with it?\n\n");
				result.screens[4].attach("\"I mean, it's fine, if all you care about is being happy.  But I think that most people care more about other things.\"\n\n", 1);
				result.screens[4].attach("Like what?\n\n");
				result.screens[4].attach("\"Like... Like becoming capable, you know?  Getting good at things.  Developing skills, being able to take care of yourself.\"", 1);
				
				result.emotions[5] = new String[]{"Pout"};
				result.screens[5].attach("\"But people's actions don't usually match up with what they care about.  They'll be watching TV, reading social media, even playing a video game, and... it feels nice, so they keep doing it.  You could ask them, 'Is it worth having a few hours of relaxation if it means failing the class you need to study for', and of course they'll say that they want to pass the class.  But at that moment, relaxing feels good.  It's the local maximum of their happiness function.  In order get what they actually want, they'd have to leave that peak.  And they can't.\"\n\n", 1);
				result.screens[5].attach("It takes willpower to get up off the couch and do something.\n\n");
				result.screens[5].attach("\"Right.  And even if you do get up and do something, it's pointless unless you're actually using that opportunity to bring you closer to your goals.  Instead of just sitting in class and enduring a boring lesson, you need to be actively thinking about how it could be useful to you.  Instead of just talking to people and saying whatever's on your mind, you need to be thinking about what you want to get out of the conversation.  You can't just go with the flow.\"", 1);
				
				result.emotions[6] = new String[]{"Neutral"};
				result.screens[6].attach("\"Sometimes it's really hard.  I'll be playing a game and enjoying it, but I have to stop and ask myself, 'Is this actually teaching me a new skill or is it just tickling my dopamine receptors?'  And if it's the latter, then it's time to put the game down.\"\n\n", 1);
				result.screens[6].attach(Yumeno() + " pauses for a moment, studying you closely.  Then, " + heShe(1) + " seems to reach a decision and nods to " + himHer(1) + "self.\n\n");
				result.screens[6].attach("\"Of course, it's important not to go too far in the other direction.  Even if I'm enjoying a game, that doesn't mean I'm not learning anything from it.  I have plenty of skills I still need to work on.\"\n\n", 1);
				result.screens[6].attach("And after " + Yumeno() + " runs out of skills to learn, what's " + heShe(1) + " going to do then?\n\n");
				result.screens[6].attach("\"I'm still not sure.  By then, maybe I'll have the skill to recognize what goals are meaningful.  But in any case, I'll pick something I want to do, and I'll be equipped to do it.\"", 1);
				
				result.emotions[7] = new String[]{"Pout"};
				result.screens[7].attach("What " + heShe(1) + " wants to do?  What about you?  What do you want to do?  ");
				if (currentPlaythrough.personStatus[5] != Locale.COLLEGETOWN && getGoalLevel(28, false) == 0) {
					result.screens[7].attach("Rescue " + Tanaka() + "?  ");
				}
				result.screens[7].attach("Become rich and powerful?  ");
				if (currentPlaythrough.personStatus[5] == Locale.COLLEGETOWN || getGoalLevel(28, false) > 0) {
					result.screens[7].attach("Make your friends happy?  ");
				}
				result.screens[7].attach("Something else?\n\n");
				result.screens[7].attach("\"It's not easy to decide what you want to do.  But once you've decided, you should go for it with everything you've got.  Treat it like a video game.  That's what I think.  'Winning' that game is all that matters.\"\n\n", 1);
				result.screens[7].attach("What if there are multiple things you want to do?\n\n");
				result.screens[7].attach("\"Then you're setting yourself up for failure.  You've got to decide which one's more important.  If the game's easy enough that you can win while still holding back, then that's great.  But if not, then holding back just increases your chance of failure.  It's always sad when you die with an inventory full of health potions.\"\n\n", 1);
				result.screens[7].attach("What do the 'health potions' represent in this analogy?\n\n");
				result.screens[7].attach("\"Things you don't care about.  Principles you don't care about.  People you don't care about.\"", 1);
				
				result.emotions[8] = new String[]{"Scared"};
				result.screens[8].attach("It sounds pretty harsh when " + heShe(1) + " puts it that way.  But maybe " + heShe(1) + "'s right.  You feel like you haven't accomplished much yet.  Is it because you've been too vague in your goals?  Spending time with your friends is fun, but maybe there are more important things you should be doing.\n\n");
				result.screens[8].attach("\"U-Um, I didn't really mean-\"\n\n", 1);
				result.screens[8].attach("And playing video games to build long-term skills is all well and good, but it doesn't do anything for short-term goals.  It might be a good strategy for " + Yumeno() + ", but not for you.\n\n");
				result.screens[8].attach("\"No!  That's not what I-\"\n\n", 1);
				if (currentPlaythrough.currentDay < classStartDay || weekDayNumber() == 0 || weekDayNumber() == 6 || currentTimeSlot.placement >= 4) {
					result.screens[8].attach("In fact, even hanging out with " + Yumeno() + " is probably a waste of-");
				} else {
					result.screens[8].attach("In fact, even attending class with " + Yumeno() + " is probably a waste of-");
				}
				
				result.emotions[9] = new String[]{"Shout"};
				result.modifiers[9] = new Modifier[]{Modifier.CLOSEUP};
				result.screens[9].attach("\"Hold on!  If you just run yourself into the ground, you won't be able to accomplish anything!\"\n\n", 1);
				result.screens[9].attach("But if you spend all of your time preparing, then the opportunity to act will pass you by.\n\n");
				result.screens[9].attach("\"Th-There's a balance to strike!\"", 1);
				
				result.emotions[10] = new String[]{"Pout"};
				result.screens[10].attach("\"You have to keep living your life from day to day.  It's fine, as long as each day brings you closer to your goal.\"\n\n", 1);
				result.screens[10].attach("But what if those days don't bring you closer to your goal?\n\n");
				result.screens[10].attach("\"You can make sure that they do.  I think that there's always a way to take what life throws at you and gain something from it.  Every challenge is a chance to push yourself and hone your skills.  Every person you meet has a lesson to teach you.\"", 1);
				
				result.emotions[11] = new String[]{"Happy"};
				result.screens[11].attach("\"Besides, we're both young, right?  It doesn't make any sense to sacrifice everything for a short-term goal.  Because after you achieve that goal, what then?  You might have put yourself in an unwinnable position for what comes afterward.\"\n\n", 1);
				result.screens[11].attach("What comes afterward?  That's a bit hard to imagine.  You aren't even completely certain about what your next goal should be.\n\n");
				result.screens[11].attach("\"That's fine.  For now, we can just keep playing games together.  You've improved a lot, compared to where you were when we first started.\"", 1);
				
				result.emotions[12] = new String[]{"Scared"};
				result.screens[12].attach("It's hard to believe that sitting around and playing video games all day is the most efficient use of your time, though.  Does " + Yumeno() + " have some ulterior motive for suggesting it?\n\n");
				result.screens[12].attach("\"W-Well, um... having you around is... pretty useful to my own goals...\"\n\n", 1);
				result.screens[12].attach("Is it better than practicing " + hisHer(1) + " video games alone?\n\n");
				result.screens[12].attach("\"Definitely.\"", 1);
				
				result.emotions[13] = new String[]{"Happy"};
				if (currentPlaythrough.personStatus[5] != Locale.COLLEGETOWN) {
					if (getGoalLevel(28, false) > 0) {
						result.screens[13].attach("There's a reason that you came back to this city, after all.  ");
					} else if (getGoalLevel(14, false) > 0) {
						result.screens[13].attach("In any case, you still have some time before you head off after " + Tanaka() + ".  ");
					} else {
						result.screens[13].attach("In any case, you aren't going anywhere anytime soon.  ");
					}
				} else {
					result.screens[13].attach("In any case, you aren't going anywhere anytime soon.  ");
				}
				result.screens[13].attach("You can keep helping " + Yumeno() + " out, and " + heShe(1) + " probably has some more things " + heShe(1) + " can teach you, too.\n\n");
				result.screens[13].attach("\"R-Right!  We can keep helping each other develop our skills!\"\n\n", 1);
				if (getCurrentAction().ownSpot == Spot.MATHCLASS) {
					result.screens[13].attach("The two of you continue chatting for awhile before it's time for " + Yumeno() + " to go to " + hisHer(1) + " next class.");
				} else {
					result.screens[13].attach("The two of you hang out for awhile longer, and the topic of the conversation moves on to lighter matters.");
				}
				
				result.characters[14] = new String[0];
				if (currentPlaythrough.personStatus[5] == Locale.COLLEGETOWN) {
					result.screens[14].attach(Yumeno() + " is probably right that there's no need to rush.  You can just keep develping skills and learning lessons at your own pace.\n\n");
					result.screens[14].attach("And if something happens that requires you to take more drastic action, you'll have the tools you need to tackle it head-on.");
				} else {
					result.screens[14].attach("But you still feel the pressure of the passing time growing heavier and heavier.  You can't afford to wait for months or years to do what you need to do.\n\n");
					result.screens[14].attach("It really might be worth approaching life from a perspective more like " + Yumeno() + "'s from now on.  You can push yourself a little bit harder to 'win'.  But unlike " + Yumeno() + ", you'll need to win quickly.  The world will keep moving forward, whether or not you're ready...");
				}
			} else if (g.tier == 5) {
				result = new Scene(11);
				
				result.tracks[0] = Music.BEACH;
				result.backgrounds[0] = "cleaner";
				if (getCurrentAction().ownSpot == Spot.MATHCLASS) {
					result.backgrounds[0] = "class";
					result.outfits[1] = new String[]{"Uniform"};
				} else if (getCurrentAction().ownSpot == Spot.ARCADE) {
					result.backgrounds[0] = "arcade";
				} else if (getGoalLevel(9, false) == 0) {
					result.backgrounds[0] = "dump";
				}
				result.screens[0].attach(Yumeno() + " has seemed less happy lately.  At first, it was easy to assume that " + heShe(1) + " just had " + hisHer(1) + " mind on other things, or even that " + heShe(1) + " was in the mood to be alone.  But " + heShe(1) + "'s still asking you to come over and play just as often if not moreso.  It's just that " + heShe(1) + " seems generally gloomier even when you're having a good time together.\n\n");
				result.screens[0].attach("Eventually, you just outright ask " + himHer(1) + " what's bothering " + himHer(1) + ".");
				
				result.characters[1] = new String[]{"yumeno"};
				result.emotions[1] = new String[]{"Pout"};
				result.screens[1].attach("\"Isn't it obvious?  I mean, I guess it's nice to know that you're not doing it on purpose, but still...\"\n\n", 1);
				result.screens[1].attach("Wait, is " + heShe(1) + " saying that it's your fault that " + heShe(1) + "'s been unhappy lately?\n\n");
				result.screens[1].attach("\"That's exactly what I'm saying!  ", 1);
				if (getGoalLevel(13, false) > 0) {
					result.screens[1].attach("You've been so busy with... with the whole " + Tanaka() + " situation... and you've been spending less time with me.  ", 1);
				} else if (getAttributeLevel(2, false).compareTo(BigInteger.ONE) > 0) {
					result.screens[1].attach("You've been so busy with your part-time job that you've been spending less time with me!  ", 1);
				} else {
					result.screens[1].attach("You haven't been wanting to hang out with me as much lately, have you?  ", 1);
				}
				result.screens[1].attach("We've barely made any progress through the backlog of games I want to introduce you to!\"\n\n", 1);
				
				result.emotions[2] = new String[]{"Shout"};
				result.modifiers[2] = new Modifier[]{Modifier.CLOSEUP};
				if (getAttributeLevel(2, false).compareTo(BigInteger.ZERO) == 0) {
					result.screens[2].attach("What a strange thing to say.  You're pretty sure you've been spending as much time with " + Yumeno() + " as always.  But even if " + heShe(1) + " were right, ");
				} else {
					result.screens[2].attach("It's true that you've been busier lately.  But ");
				}
				result.screens[2].attach(Yumeno() + " can hardly complain.  " + HeShe(1) + "'s the one who advised you to take a more goal-focused approach to life.\n\n");
				result.screens[2].attach("\"N-Not like that!  I was trying to say that we should be doing more stuff together!\"\n\n", 1);
				result.screens[2].attach("But if your goals are different from " + Yumeno() + "'s goals, then it's only natural that pursuing those goals would pull the two of you apart.\n\n");
				result.screens[2].attach("\"In that case, we can pick new goals!  L-Like, um...  I've been thinking about this a long time, but whenever we talk about video games together, it seems like we have similar ideas about how they should be made.  So... what if we were to try making some ourselves?\"", 1);
				
				result.modifiers[3] = new Modifier[]{Modifier.CLOSEUP};
				if (getGoalLevel(13, false) > 0) {
					result.emotions[3] = new String[]{"Scared"};
					result.screens[3].attach("You won't have a lot of time to chase after " + Tanaka() + " if you pick up a new hobby...\n\n");
					result.screens[3].attach("\"That's why I'm suggesting it.  I, um... I'm afraid of what will happen to you if you keep getting involved with that stuff.  You should just trust the police...\"\n\n", 1);
					result.screens[3].attach("It's easy to forget that what you choose to do with your life also has an effect on the people that care about you.  Maybe it'd be best to at least hear " + Yumeno() + " out.");
				} else if (simulatedAttributes[2].compareTo(BigInteger.ZERO) > 0) {
					result.emotions[3] = new String[]{"Happy"};
					result.screens[3].attach("Well, as far as part-time jobs go, it'd probably be more fun than bartending.  How much money could you make?\n\n");
					result.screens[3].attach("\"W-Well, people don't really like to pay for entertainment these days... but if we get popular enough, then sure, we could probably make some money off it!\"\n\n", 1);
					result.screens[3].attach(Yumeno() + " doesn't sound confident.  Maybe it'd be best not to think of it as an actual source of income, then.");
				} else {
					result.emotions[3] = new String[]{"Happy"};
					result.screens[3].attach("That might be fun.  It's not like you have anything more important to be doing with your time.\n\n");
					result.screens[3].attach("\"Y-You're really interested?  Yes!  Let's do it!\"\n\n", 1);
					result.screens[3].attach("Now it's time to think about what you need to get started.");
				}
				
				result.emotions[4] = new String[]{"Shout"};
				result.screens[4].attach("Does " + Yumeno() + " actually know how to program, though?\n\n");
				result.screens[4].attach("\"I've played a bunch of games where the reviews all say 'Being good at this game requires the same skills as programming', so I'll be fine!\"\n\n", 1);
				result.screens[4].attach("What about writing?  Is " + Yumeno() + " any good at writing short stories?\n\n");
				result.screens[4].attach("\"I'll leave that part to you!  You've always got some really interesting ideas, so you can just write down whatever comes to mind.\"\n\n", 1);
				result.screens[4].attach("And what about art?\n\n");
				result.screens[4].attach("\"W-We don't need art, at least at first!  It's all about the gameplay, the gameplay!\"", 1);
				
				result.emotions[5] = new String[]{"Scared"};
				result.screens[5].attach("This is sounding like it might be difficult.  Is it really worth starting such a big project just as an excuse to spend time together?\n\n");
				result.screens[5].attach("\"I-It's not just about that!  Designing games is one of those skills that falls into the category of 'hard to learn just by playing games'.\"\n\n", 1);
				result.screens[5].attach("So, " + Yumeno() + "'s main goal is still to learn new skills.  But out in the real world, what exactly is game design skill useful for?\n\n");
				result.screens[5].attach("\"Lots of things!  At the most fundamental level, a video game is a tool for communication.  It's like a message in a bottle.  Once you put it out there, all you can do is watch how everybody interprets it.\"", 1);
				
				result.emotions[6] = new String[]{"Neutral"};
				result.screens[6].attach("\"What makes games different from books or movies is that they need to be prepared for the audience to interact with them.  For every decision the game offers to the player, the designer needs to be able to foresee all the possible responses and account for them.\"\n\n", 1);
				result.screens[6].attach("Some games offer a lot more decisions to the player than others.\n\n");
				result.screens[6].attach("\"Designing a linear game without much choice is pretty much the 'easy mode' of game design.  But like any challenge, playing on easy mode limits how much you can learn from it.\"", 1);
				
				result.emotions[7] = new String[]{"Happy"};
				result.screens[7].attach("\"But if you can design a complicated system, and if you can figure out ahead of time how your players will interact with it and what they'll try to do, then you 'win'.  It means that you have a good understanding of how the human mind works.\"\n\n", 1);
				result.screens[7].attach("And if your prediction of how your players will act is wrong?\n\n");
				result.screens[7].attach("\"Then you lose that round.  But that's fine, because you can learn from your loss.  From then on, you know how they'll react when put in that situation.  You can design future games with that in mind.\"", 1);
				
				result.emotions[8] = new String[]{"Neutral"};
				result.screens[8].attach("\"To be honest, I think that this is the thing I'm worst at.  It's my biggest weakness.  I play games in a different way from everybody else, and I always end up getting surprised when they do things I'd never think of doing.\"\n\n", 1);
				result.screens[8].attach("Like what?\n\n");
				result.screens[8].attach("\"Like when they're offered a... a piece of loot or something, an item that's really valuable, right there in front of them.  At least, from my perspective, it's something really good.  But from another player's perspective, it's garbage that's not even worth pressing the button to pick it up, and " + heShe(-1) + "'d rather ", 1);
				if (getGoalLevel(13, false) > 0) {
					result.screens[8].attach("go off on some long sidequest that doesn't even offer a good reward.\"", 1);
				} else if (getAttributeLevel(2, false).compareTo(BigInteger.ZERO) > 0) {
					result.screens[8].attach("grind low-level quests for basic drops.\"", 1);
				} else {
					result.screens[8].attach("run around ignoring the quest markers entirely.\"", 1);
				}
				
				result.emotions[9] = new String[]{"Happy"};
				result.screens[9].attach("\"So, um, I guess what I'm saying is that I think this will help with that.  But a game is a big project with lots of parts that need to work together.  So... what do you think about doing it as a team?  We can both learn something from it.\"\n\n", 1);
				result.screens[9].attach(Yumeno() + " is clearly serious about this.  But what should the game be about?\n\n");
				result.screens[9].attach("\"I have a few ideas.  It's hard to settle on just one.  Like I was saying, I want to make something with deep gameplay.  But the more complicated the mechanics are, the harder it'll be to program.  So, maybe we could do a really simple game as practice, and then work our way up to something more interesting...\"\n\n", 1);
				
				result.characters[10] = new String[0];
				result.screens[10].attach("You and " + Yumeno() + " start to discuss the specifics of this new project.  By the time ");
				if (getCurrentAction().ownSpot == Spot.MATHCLASS) {
					result.screens[10].attach(Yumeno() + "'s next class starts, ");
				} else {
					result.screens[10].attach("you have to leave, ");
				}
				result.screens[10].attach("a definite plan begins to take shape.\n\n");
				result.screens[10].attach("It's going to be hard work, picking up these new skills, and you probably won't be able to help " + Yumeno() + " out every day.  But it does seem like designing games could be just as fun as playing them.  And even if you don't get anything out of it, it'd still be a nice way to help " + Yumeno() + " feel less lonely.");
			} else if (g.tier == 6) {
                result = new Scene(10);

                result.backgrounds[0] = "dump";
                result.tracks[0] = Music.BEACH;
                if (getCurrentAction().ownSpot == Spot.MATHCLASS) {
                    result.backgrounds[0] = "class";
                    result.outfits[1] = new String[]{"Uniform"};
                    result.screens[0].attach("When you meet up with " + Yumeno() + " in your Math class, " + heShe(1) + " tells you that " + heShe(1) + " has something to show you.  But apparently it's not worth skipping class for, so you're forced to wait in suspense while the lesson goes as normal.\n\nAfterward, ");
                } else if (getCurrentAction().ownSpot == Spot.ARCADE) {
                    result.backgrounds[0] = "arcade";
                    result.screens[0].attach("When you meet up with " + Yumeno() + " for one of your regular gaming sessions, " + heShe(1) + " tells you that " + heShe(1) + " just finished preparing something 'special' " + heShe(1) + " wants you to see.  Whatever it is, apparently it's not urgent, because " + heShe(1) + " still wants to play at the arcade, but " + heShe(1) + " does want to show it to you on the way home.\n\nWhen the time comes to leave, ");
                } else {
                    if (getGoalLevel(9, false) > 0) {
                        result.backgrounds[0] = "cleaner";
                    }
                    result.screens[0].attach("As you hang out with " + Yumeno() + ", " + heShe(1) + " seems to have something on " + hisHer(1) + " mind.  " + HeShe(1) + " keeps acting like " + heShe(1) + "'s about to say something, then loses " + hisHer(1) + " nerve and remains silent.  Finally, " + heShe(1) + " asks you if you want to head outside for a bit so " + heShe(1) + " can show you something.\n\nYou agree, and ");
                }
                result.screens[0].attach(heShe(1) + " takes you to a spot a few blocks away from " + hisHer(1) + " house.");

                result.backgrounds[1] = "street";
                result.characters[1] = new String[]{"yumeno"};
                result.emotions[1] = new String[]{"Scared"};
                result.screens[1].attach("It's a small private storage facility, the kind which offers rows of simple concrete-floored rooms for rental, each locked behind its own roll-up steel door.  " + Yumeno() + " pulls a key from " + hisHer(1) + " pocket.  " + HeShe(1) + " rented out a space here?\n\n");
                result.screens[1].attach("\"Yeah.  It's really not that expensive.\"\n\n", 1);
                result.screens[1].attach("But what for?\n\n");
                result.screens[1].attach("\"D-Don't laugh, okay?\"\n\n", 1);
                result.screens[1].attach("Well, you'll do your best.");

                result.characters[2] = new String[0];
                result.screens[2].attach(Yumeno() + " inserts " + hisHer(1) + " key into one of the doors, but " + heShe(1) + " seems to be having trouble lifting it up, so you give " + himHer(1) + " a hand.  As the door rolls upward, you glance inside, idly trying to guess at what you might see.\n\n");
                result.screens[2].attach("What might " + Yumeno() + " be keeping a personal storage unit for?  It wouldn't be surprising if the entire thing were filled with stacks and stacks of video games.  Or maybe this is yet another spot which got filled with random clutter over the years.  Does " + heShe(1) + " need your help getting rid of it?\n\n");
                result.screens[2].attach("But what you see inside isn't anything like what you would have expected from " + Yumeno() + ".");

                result.characters[3] = new String[]{"yumeno"};
                result.outfits[3] = result.outfits[1];
                result.emotions[3] = new String[]{"Scared"};
                result.screens[3].attach("It's full of workout equipment.  No, not just 'workout' equipment - maybe it would be better described as personal training equipment.  In addition to weights, there are also punching bags, a training dummy, a stack of books on martial arts theory");
                if (getGoalLevel(13, false) > 0) {
                    result.screens[3].attach(" - and a padded mat rolled up against one of the walls.  You specifically recall complaining to " + Yumeno() + " that " + Jackal() + " didn't have one of those after the first time you trained together.\n\n");
                } else {
                    result.screens[3].attach(", and a padded mat for practicing throws and takedowns on a live partner.\n\n");
                }
                if (simulatedAttributes[3].compareTo(BigInteger.ZERO) > 0) {
                    result.screens[3].attach("Does " + Yumeno() + " want to learn to fight, too?\n\n");
                    result.screens[3].attach("\"N-No, I don't think I'm really cut out for it...\"\n\n", 1);
                    result.screens[3].attach("Well, that's probably true.  But then what's " + heShe(1) + " doing with all this stuff?\n\n");
                } else {
                    result.screens[3].attach("Is " + Yumeno() + " actually an expert on martial arts skills, too?\n\n");
                    result.screens[3].attach("\"N-No, I actually only picked this stuff up over the last few days...\"\n\n", 1);
                    result.screens[3].attach("But why?\n\n");
                }
                result.screens[3].attach("\"B-Because I want to help you!\"", 1);

                if (currentPlaythrough.personStatus[5] != Locale.COLLEGETOWN) {
                    result.emotions[4] = new String[]{"Pout"};
                    result.screens[4].attach("By 'help you', " + Yumeno() + " means... " + heShe(1) + " wants to help you rescue " + Tanaka() + "?  That's hard to believe.  You've gotten the impression that " + Yumeno() + " doesn't like " + Tanaka() + " very much.\n\n");
                    if (currentPlaythrough.romance[1] > 0) {
                        result.emotions[4] = new String[]{"Neutral"};
                        result.screens[4].attach("\"I, um...  Well, it's true that I was jealous of how you seemed to care so much about " + himHer(5) + ".  I really wanted to 'beat' " + himHer(5) + ".  Even to the point that I used some really dirty tricks...\"\n\n", 1);
                        result.screens[4].attach("That wasn't 'dirty tricks'.  It was " + Yumeno() + "'s way of expressing " + hisHer(1) + " honest feelings.\n\n");
                        result.screens[4].attach("\"R-Right, of course...  But anyway, the important thing is that I realize now that I had no reason to be jealous of " + himHer(5) + ".  You really are just helping " + himHer(5) + " because... because that's the kind of person you are.\"", 1);
                    } else {
                        result.screens[4].attach("\"W-Well, yeah.  I, um... I think I might actually hate " + Tanaka() + " more than anybody else in the whole world.\"\n\n", 1);
                        result.screens[4].attach("So why does " + Yumeno() + " want to help " + himHer(5) + "?\n\n");
                        result.screens[4].attach("\"Because you want to!  Because... no matter what I do, you're gonna keep trying...\"", 1);
                    }
                } else if (getGoalLevel(14, false) > 0) {
                    result.emotions[4] = new String[]{"Neutral"};
                    result.screens[4].attach("Help you with what, exactly?\n\n");
                    result.screens[4].attach("\"The stuff you've been telling me about!  There's that mercenary you've been hanging out with, right?\"\n\n", 1);
                    result.screens[4].attach(HeShe(3) + " prefers the term 'fixer'.\n\n");
                    result.screens[4].attach("\"Right.  But sometimes " + heShe(3) + "'s been too busy to teach you.  That line of work is... really dangerous, though.  Dangerous enough that you should get as much preparation as you can.\"", 1);
                } else {
                    result.emotions[4] = new String[]{"Neutral"};
                    result.screens[4].attach("Lately, you've been telling " + Yumeno() + " about some of your worries about the future.  " + HeShe(1) + " must have gotten worried.\n\n");
                    result.screens[4].attach("\"Of course I'm worried!  You're talking like... like we might actually be in danger.  Like a war could start or something.\"\n\n", 1);
                    result.screens[4].attach("You got the impression that " + Yumeno() + " didn't think your worries were well-founded.  You aren't even sure about it yourself.  When you read the news, you can't shake the impression that something bad is going to happen, but none of the pundits seem to share your worries.\n\n");
                    result.screens[4].attach("\"Well...  Better safe than sorry, right?  Especially if you're actually going to travel abroad like you've been saying.\"", 1);
                }

                result.emotions[5] = new String[]{"Shout"};
                result.modifiers[5] = new Modifier[]{Modifier.CLOSEUP};
                result.screens[5].attach("\"And I don't want you to die!\"\n\n", 1);
                result.screens[5].attach("Well, you do appreciate the sentiment.  But can " + Yumeno() + " really help you with this?  It seems like it's pretty far outside " + hisHer(1) + " area of expertise.\n\n");
                result.screens[5].attach("\"I'm good at studying and learning new things!  I... Even if I'll never be able to do this kind of thing myself, I can still look up study materials... read about which exercises have been proven to be useful... and, um... I can be here to help you with any training that really just needs a second person to help.\"", 1);

                result.emotions[6] = new String[]{"Happy"};
                result.screens[6].attach("\"I can be like your personal trainer!\"\n\n", 1);
                result.screens[6].attach("It definitely won't be as effective as getting more personal instruction from " + Jackal() + ".  But it's better than nothing.\n\n");
                result.screens[6].attach("And " + Yumeno() + " has managed to surprise you before.  The more you think about it, the more that this sounds like it might actually be pretty helpful.  Even in the worst-case scenario, it's an excuse to spend more time with " + Yumeno() + ", and you can spend that time together on something more productive than video games.");

                result.emotions[7] = new String[]{"Scared"};
                if (getGoalLevel(26, false) > 0) {
                    result.screens[7].attach("\"After you helped me make a game like I wanted... it felt like I should really help you with the stuff you wanted to do, too.\"\n\n", 1);
                    result.screens[7].attach("Well, making a game together felt really fulfilling in its own right.  ");
                } else {
                    result.screens[7].attach("\"I realized that it was... really, really selfish of me to be talking about stupid stuff like game design, when you're actually dealing with... important stuff.  Life and death.\"\n\n", 1);
                    result.screens[7].attach("Game design isn't a stupid thing to talk about.  You think you'd actually really enjoy making something with " + Yumeno() + " once you have more free time.  ");
                }
                result.screens[7].attach("But you're grateful to have " + Yumeno() + "'s help for what you need to be doing now.\n\n");
                result.screens[7].attach("\"I'm glad...  This is another one of those things that being good at video games doesn't really help at.  I'm getting really tired of running into those.  I thought you might laugh at me for wanting to try something like this.  But if I can help you even a little bit... then I want to do it!\"", 1);

                result.emotions[8] = new String[]{"Shout"};
                result.screens[8].attach("\"S-So... get ready!  'Cause I'm gonna push you hard!\"\n\n", 1);
                result.screens[8].attach("It seems like it's really important to " + Yumeno() + " that " + heShe(1) + " do something, anything, to help you on your mission.  Even if you don't end up learning anything useful here, you're still certain that it'll be worthwhile to go along with " + Yumeno() + "'s idea.  It's important for " + Yumeno() + "'s peace of mind.");

                result.characters[9] = new String[0];
                result.screens[9].attach("The two of you spend a bit of time going through " + Yumeno() + "'s supplies and making some plans for how to use them.  " + Yumeno() + " has apparently already done a bunch of research ahead of time, but " + heShe(1) + " wants to make sure you don't see anything wrong with the training plan " + heShe(1) + "'s prepared for you.\n\n");
                result.screens[9].attach("All that's left now is to decide when to start your first training session together.");
            } else if (g.tier == 7) {
                result = new Scene(12);

                int total = loopActionCount(Action.COMBATTHEORYAFTERNOON, currentPlaythrough) + loopActionCount(Action.COMBATTHEORYEVENING, currentPlaythrough) + loopActionCount(Action.COMBATTHEORYMORNING, currentPlaythrough) + loopActionCount(Action.COMBATTHEORYNOON, currentPlaythrough);

                result.backgrounds[0] = "street";
                result.tracks[0] = Music.BEACH;
                result.sounds[0] = Effect.PUNCH;
                result.screens[0].attach("You drive your fist into the training dummy, doing your best to copy the technique from the video " + Yumeno() + " showed you.  " + Yumeno() + " cheers " + hisHer(1) + " approval.  Apparently it looks to " + himHer(1) + " like you did it properly.\n\n");
                if (getCurrentAction().ownSpot == Spot.MATHCLASS) {
                    result.outfits[1] = new String[]{"Uniform"};
                    result.screens[0].attach("This is just a quick practice session that you're squeezing in after Math class, ");
                    if (total < 6) {
                        result.screens[0].attach("and in truth, short sessions like this are all you've really had time for.  You don't feel like you're learning much.\n\nBut");
                    } else {
                        result.screens[0].attach("but you've done some real training marathons together, too.  It's more exhausting than your usual gaming marathons.\n\nAnd ");
                    }
                } else if (getCurrentAction().ownSpot == Spot.ARCADE) {
                    result.backgrounds[0] = "arcade";
                    result.screens[0].attach("This is just a quick practice session that you're squeezing in on your way home from the arcade, ");
                    if (total < 6) {
                        result.screens[0].attach("and in truth, short sessions like this are all you've really had time for.  You don't feel like you're learning much.\n\nBut");
                    } else {
                        result.screens[0].attach("but you've done some real training marathons together, too.  It's more exhausting than your usual gaming marathons.\n\nAnd ");
                    }
                } else {
                    if (getGoalLevel(9, false) > 0) {
                        result.backgrounds[0] = "cleaner";
                    }
                    if (total < 6) {
                        result.screens[0].attach("Eventually, you decided to take " + Yumeno() + " up on " + hisHer(1) + " offer to help you train.  You still haven't made much progress, but you're starting to see how it could be useful to work something like this into your regular routine.\n\nAnd ");
                    } else {
                        result.screens[0].attach("You're currently in the middle of one of your regular training sessions together.  It's been a couple of hours since you started on today's practice, but you still feel like you're up for more.\n\nAnd ");
                    }
                }
                result.screens[0].attach(Yumeno() + " seems enthusiastic about giving you the best possible chance of coming home in one piece.  Even though " + heShe(1) + " isn't doing any physical training " + himHer(1) + "self, " + heShe(1) + "'s still actively looking up reference materials and comparing your technique to the diagrams and videos " + heShe(1) + " finds online.");

                result.characters[1] = new String[]{"yumeno"};
                result.emotions[1] = new String[]{"Happy"};
                result.screens[1].attach("\"Yes!  Your technique looked really good that time!  I think you've mastered this one.\"\n\n", 1);
                result.screens[1].attach("It's hard to say just how much this kind of martial arts technique will actually be able to help you.  ");
                if (simulatedRelationships[3].compareTo(BigInteger.ZERO) > 0) {
                    result.screens[1].attach(Jackal() + " always focuses more on teaching you how to avoid getting caught up in a fight in the first place, but that's the kind of skill that's harder to learn from books and videos.  Whenever " + Jackal() + " isn't available to teach you, spending that time on learning to fight is still probably better than nothing.\n\n");
                } else if (currentPlaythrough.personStatus[5] != Locale.COLLEGETOWN) {
                    result.screens[1].attach("Whoever abducted " + Tanaka() + ", it's likely that they'll have guns.  But if you don't end up being able to get ahold of any weapons of your own, then being good with your fists is probably the next best thing.\n\n");
                } else {
                    result.screens[1].attach("If you actually do end up needing to defend yourself, then the people attacking you will probably be carrying guns.  But it still can't hurt to have some practice at how to throw a punch.\n\n");
                }
                result.screens[1].attach("In any case, you're ready for the next technique.\n\n");
                result.screens[1].attach("\"Right!  This next one is called 'Monkey Steals the Peach'.  You drop down to one knee and raise up your left arm to defend against any attacks from above.  Then, you put your other hand in... kinda like a claw-shaped position.  And you hold that arm out straight, swinging it underhand, so that your palm goes right up between your opponent's-\"", 1);

                result.emotions[2] = new String[]{"Scared"};
                result.screens[2].attach("\"Oh!  Ouch...\"\n\n", 1);
                result.screens[2].attach("Is everything alright?\n\n");
                result.screens[2].attach("\"Y-Yeah.  It's just that it looks like it'd be pretty painful to be on the receiving end of some of these techniques.\"\n\n");
                result.screens[2].attach("Well, that's the whole point, isn't it?  You move as " + Yumeno() + " described, dropping down and then swinging your hand upward toward the training dummy.");

                result.emotions[3] = new String[]{"Neutral"};
                result.sounds[3] = Effect.PUNCH;
                result.screens[3].attach("The impact sends a jolt up your arm and makes your palm sting, but it's strong enough to lift the training dummy off the ground and send it toppling backward.  You glance back at " + Yumeno() + " to see if you performed it right.  Did you miss anything?\n\n");
                result.screens[3].attach("\"Well, um, the book says something about channeling your 'qi' upward through the opponent's body in order to instantly stop his heart, but...\"\n\n", 1);
                result.screens[3].attach("That's pretty normal.  Most of the techniques that you and " + Yumeno() + " have been reading about have included some sort of supernatural element.  Needless to say, you've been ignoring those parts and just treating them as a guide for how to fight using your own hands and feet.\n\n");
                result.screens[3].attach("And when you think about how much force it took to make the training dummy topple over like that, you're pretty sure that that's enough.  If that training dummy were an actual guy, he wouldn't be in any condition to keep fighting.  There's no need to use magic powers and stop people's hearts.");

                result.emotions[4] = new String[]{"Scared"};
                if (getCurrentAction().availableSlot == 3) {
                    result.screens[4].attach("It's starting to get late.  " + Yumeno() + " will need to head off to bed soon.  ");
                } else if (getCurrentAction().ownSpot == Spot.MATHCLASS) {
                    result.screens[4].attach(Yumeno() + " needs to head off to " + hisHer(1) + " next class, doesn't " + heShe(1) + "?  ");
                } else {
                    result.screens[4].attach("You remember " + Yumeno() + " mentioning that there was a time-limited event this weekend for one of the games " + heShe(1) + " was playing.  ");
                }
                result.screens[4].attach("It's fine for " + himHer(1) + " to go.  You'll just keep practicing here and then lock up the storage unit after you're done.\n\n");
                result.screens[4].attach("\"Huh?\"\n\n", 1);
                result.screens[4].attach("It's helpful to have " + Yumeno() + " watching and giving advice, but it's not strictly necessary.  You're actually a bit embarrassed that ");
                if (simulatedRelationships[3].compareTo(BigInteger.ZERO) > 0) {
                    result.screens[4].attach("it never occurred to you to train without " + Jackal() + " on your own.\n\n");
                } else {
                    result.screens[4].attach("you didn't start training like this on your own.\n\n");
                }
                result.screens[4].attach("You definitely want to keep coming out here with " + Yumeno() + ", too.  But even when " + heShe(1) + "'s busy, you shouldn't let that stop you from improving yourself.");

                result.emotions[5] = new String[]{"Shout"};
                result.modifiers[5] = new Modifier[]{Modifier.CLOSEUP};
                result.screens[5].attach("You start to turn back toward the training dummy to set it upright again, but you're surprised by the sound of " + Yumeno() + "'s footsteps approaching you.\n\n");
                result.screens[5].attach("\"I... I want to stay!\"\n\n", 1);
                result.screens[5].attach("Does " + heShe(1) + " still have a few more minutes?\n\n");
                result.screens[5].attach("\"No!  I mean... yes!  Wh-What I mean is that I have more than a few minutes!  ", 1);
                if (getCurrentAction().availableSlot == 3) {
                    result.screens[4].attach("I'll... I'll just sleep in tomorrow!\"\n\n", 1);
                } else if (getCurrentAction().ownSpot == Spot.MATHCLASS) {
                    result.screens[4].attach("I'll... I'll just skip my next class!\"\n\n", 1);
                } else {
                    result.screens[4].attach("F... Fuck that game!  Time-limited rewards are a bad mechanic anyway!  I'll even stay here after the sun goes down if you want!\"\n\n", 1);
                }

                result.emotions[6] = new String[]{"Happy"};
                result.screens[6].attach("This is surprising.  " + Yumeno() + " is the kind of person who never deviates from " + hisHer(1) + " schedule.\n\n");
                result.screens[6].attach("\"I-I'm not deviating from my schedule.  I'm making a new schedule!  A schedule that helps me achieve the goals I really care about...\"\n\n", 1);
                result.screens[6].attach("Is " + heShe(1) + " saying that " + heShe(1) + " wants to make a habit of doing this?\n\n");
                result.screens[6].attach("\"Yeah, I am!  My schedule can be whatever your schedule is.\"\n\n", 1);
                result.screens[6].attach("Your schedule can get pretty crazy, though.\n\n");
                result.screens[6].attach("\"I can deal with it!\"", 1);

                result.emotions[7] = new String[]{"Scared"};
                result.screens[7].attach("What about " + Yumeno() + "'s other goals, though?  " + HisHer(1) + " grades?\n\n");
                result.screens[7].attach("\"It's like I told you.  If you try to go after two goals at once, you're setting yourself up for failure.  You need to decide what you care about most.\"\n\n", 1);
                result.screens[7].attach("In other words, " + Yumeno() + " cares about you most.  That's actually pretty serious.\n\n");
                result.screens[7].attach("\"I-I mean, it's your life or death we're talking about here, right?  I want to graduate with good grades, learn as much as I can, keep to a reasonable sleep schedule that's good for my health...  But missing out on one or two of those things isn't the end of the world.  If you die, though...\"\n\n", 1);
                result.screens[7].attach(Yumeno() + " trails off.  When " + heShe(1) + " puts it like that, maybe you shouldn't be surprised that " + heShe(1) + "'s willing to go this far to help you.");

                result.emotions[8] = new String[]{"Happy"};
                result.screens[8].attach("But you hadn't exactly planned on guilt-tripping " + Yumeno() + " into putting " + hisHer(1) + " life on hold for your sake.\n\n");
                result.screens[8].attach("\"W-Well, too bad.  I'm the one who decides what I care about!\"\n\n", 1);
                result.screens[8].attach("It makes you feel like maybe you should dial it back and return to a regular student life.  That way, " + Yumeno() + " wouldn't have any reason to sacrifice anything.\n\n");
                result.screens[8].attach("\"You know...  A little while ago, I would've been really, really happy to hear you say that.  Um, I mean, I guess it still makes me happy now, too.  But... I don't want you to do that.\"", 1);

                result.emotions[9] = new String[]{"Neutral"};
                result.screens[9].attach("\"I'm realizing that caring about someone doesn't mean just wanting them to... to spend lots of time with you.  It also means wanting them to get what they want.\"\n\n", 1);
                result.screens[9].attach("You do actually want to spend lots of time with " + Yumeno() + " too, though.  It's fun.\n\n");
                result.screens[9].attach("\"Yeah.  But if you ", 1);
                if (currentPlaythrough.personStatus[5] != Locale.COLLEGETOWN) {
                    result.screens[9].attach("let go of " + Tanaka() + " without doing your best to help " + himHer(5) + "... I get the feeling that it'll hurt you in a way that you never recover from.  And I...  I don't want to see that happen to you...\"", 1);
                } else {
                    result.screens[9].attach("really are convinced that you're going to need these skills... then I believe you!  And even if you don't ever end up needing them... I mean, it still is pretty cool to have them, right?\"", 1);
                }

                result.emotions[10] = new String[]{"Happy"};
                result.screens[10].attach("\"So, let's keep going!  I'm with you all the way!\"\n\n", 1);
                result.screens[10].attach("That sounds good to you.  Which technique should you be learning next?");

                result.characters[11] = new String[0];
                result.screens[11].attach("In truth, after " + Yumeno() + " got you started on learning about this stuff, you probably could've handled the rest by yourself.  You wouldn't even need the books and gear " + heShe(1) + " supplied.  They're cheap, and you could learn almost as quickly by just recording your practice sessions and reviewing them later.\n\n");
                result.screens[11].attach("But having another set of eyes is a little bit helpful.  And more importantly, it's something you can do together with " + Yumeno() + ".  " + HeShe(1) + "'s always been very friendly toward you, but you feel as though you're much closer to " + himHer(1) + " now than you were before.\n\n");
                result.screens[11].attach("Someday, maybe you'll be able to return the favor.");
            }
		} else if (g.index == 3) {
			if (g.tier == 0) {
				result = new Scene(8);
				
				result.backgrounds[0] = "arcade";
				result.screens[0].attach("You've been having a great time with " + Yumeno() + ", but your stomach eventually tells you that it's time to grab a snack.  " + Yumeno() + " declined your offer to buy " + himHer(1) + " something, and so you headed out by yourself to grab a quick bite to eat before returning for another co-op game.\n\nAs you walk back into the arcade, you see " + Yumeno() + " still sitting where you left " + himHer(1) + ", absorbed in doing something on " + hisHer(1) + " tablet.  You start to make your way over to " + himHer(1) + ", past the arcade's other patrons all absorbed in their own games.  The place gets pretty packed with people around this time, and the thumping music played over the arcade's speaker system is mostly drowned out by the drone of conversation.  However, as you navigate through the crowd, one voice stands out.\n\n");
				result.screens[0].attach("\"What kind of dumbass wastes " + hisHer(0) + " time in a place like this?\"", 0);
				
				result.backgrounds[1] = "hashimoto1";
				result.screens[1].attach("You glance over and make eye contact with the speaker.  That's your mistake.  " + HeShe(0) + " was just talking to " + himHer(0) + "self, and everyone else in earshot must have had the good instincts to keep their heads down and pretend they didn't hear anything.  But as soon as you look at " + himHer(0) + ", " + heShe(0) + " looks back at you.  And when " + heShe(0) + " repeats " + himHer(0) + "self, you're the one " + heShe(0) + "'s talking to.\n\n");
				result.screens[1].attach("\"What kind of dumbass wastes time in a place like this?\"\n\n", 0);
				result.screens[1].attach("Belatedly, you try to adopt the same survival strategy as the surrounding herd.  You pretend that you don't notice " + himHer(0) + ", walking past " + himHer(0) + " to the arcade cabinet.  You set your stack of coins down on the arm of the cockpit, planning on climbing inside and shutting the door.  But your plan doesn't work out.");
				
				result.backgrounds[2] = "arcade";
				result.characters[2] = new String[]{"hashimoto"};
				result.emotions[2] = new String[]{"Angry"};
				result.modifiers[2] = new Modifier[]{Modifier.CLOSEUP};
				result.sounds[2] = Effect.COINS;
				result.screens[2].attach(HeShe(0) + " sweeps " + hisHer(0) + " hand across the arm of the cockpit before you can sit down, sending your stack of coins flying.  The coins bounce along the floor in all directions, most of them rolling under other arcade cabinets.\n\n");
				result.screens[2].attach("\"Don't ignore me, you little shit!  I asked you a fucking question.\"\n\n", 0);
				result.screens[2].attach("It would be one thing if " + heShe(0) + " grabbed your money and ran off.  You'd still be out of funds to play for the night, but at least there would be a good reason for it.  This, though?  It's just wasteful.");
				
				result.emotions[3] = new String[]{"Frown"};
				result.screens[3].attach("\"What kind of dumbass wastes time in a place like this?\"\n\n", 0);
				result.screens[3].attach("It's unlikely that " + heShe(0) + "'s actually interested in getting an answer to " + hisHer(0) + " question.  Probably, " + heShe(0) + " was just in a mood to cause trouble, and you were the one person unlucky enough to get singled out as " + hisHer(0) + " target.\n\nBut even if that's the case, it doesn't help you extricate yourself from this situation.  If you let " + himHer(0) + " provoke you into a fight, then you might get banned from the arcade.  Also, " + heShe(0) + " looks like " + heShe(0) + " could probably kick your ass.");
				
				result.characters[4] = new String[]{"employee", "hashimoto"};
				result.emotions[4] = new String[]{"", "Angry"};
				result.screens[4].attach("In the end, you're saved by an outside force.\n\n\"Oi!  What do you two think you're doing!?  If you're going to fight, then take it outside!  Come on, break it up, break it up.\"\n\nOne of the arcade's staff members shows up to put an end to things.  It seems that you'll neither get banned nor get your ass kicked today.");
				
				result.characters[5] = new String[0];
				result.screens[5].attach("You turn away, and the sound of the aggressor verbally abusing the arcade staff fades into the background.  But you're still left wondering just who " + heShe(0) + " was.");
				
				result.characters[6] = new String[]{"yumeno"};
				result.emotions[6] = new String[]{"Neutral"};
				if (Hashimoto().equals("Hashimoto")) {
					result.screens[6].attach("\"Hashimoto Kiseki.  ", 1);
				} else {
					result.screens[6].attach("\"" + Hashimoto() + ".  ", 1);
				}
				result.screens[6].attach("You've never had any classes with " + himHer(0) + "?  Lucky you...\"\n\n", 1);
				result.screens[6].attach("Is it normal for " + himHer(0) + " to pick fights at random?\n\n");
				result.screens[6].attach("\"Pretty much.  Seems like " + heShe(0) + "'s gotten meaner since the last time I saw " + himHer(0) + ", too.  With the expression on " + hisHer(0) + " face when you walked away, I don't think " + heShe(0) + " was finished with you...\"\n\n", 1);
				result.screens[6].attach("That's annoying, but it's not like you're going to stop coming here just because some punk has a grudge against you.");
				
				result.emotions[7] = new String[]{"Happy"};
				result.screens[7].attach("\"R-Right!  Though we might be better off playing a different game tomorrow.  If " + Hashimoto() + " can't find you, maybe " + heShe(0) + "'ll give up.\"\n\n", 1);
				result.screens[7].attach("'We'?  Does that mean that " + Yumeno() + " will be here tomorrow too?\n\n");
				result.screens[7].attach("\"Of course!  I-I mean, as long as you're okay with it...  I wasn't exactly expecting things to go like this, but I still had a great time!  I think this might be my new favorite game, hehe...\"\n\n", 1);
				result.screens[7].attach(HeShe(1) + " splits " + hisHer(1) + " remaining coins with you, and you keep on playing together until the arcade's closing time.");
			} else if (g.tier == 1) {
				result = new Scene(14);
				
				result.backgrounds[0] = "arcade";
				result.screens[0].attach("You haven't been able to play games at the arcade as often lately.  That isn't to say that you aren't going there - if anything, you might actually be spending more time in the arcade than before.  But much of that time isn't being spent on the arcade games themselves.");
				
				result.characters[1] = new String[]{"hashimoto"};
				result.emotions[1] = new String[]{"Frown"};
				result.screens[1].attach("And this " + guyGirl(0) + " is the reason why.  It's not like it'd be impossible to avoid " + Hashimoto() + ".  " + HeShe(0) + " isn't stalking you.  If you had just done as " + Yumeno() + " said and kept your head down on the other side of the arcade, then " + heShe(0) + "'d probably have forgotten all about you.\n\n");
				result.screens[1].attach("The problem is that in order to avoid " + Hashimoto() + ", you'd have to treat half the arcade as being off-limits.  You wouldn't be able to play the games there.  You wouldn't be able to walk through there.  You wouldn't even be able to look over there, because making eye contact with " + himHer(0) + " is all the excuse " + heShe(0) + " needs to come bother you.\n\n");
				result.screens[1].attach("Of course, spending your time in confrontations with " + Hashimoto() + " also prevents you from playing the games.  But at least this way, you aren't just meekly letting it happen.  Maybe it's just stubbornness.");
				
				result.emotions[2] = new String[]{"Angry"};
				result.screens[2].attach("You occasionally see " + himHer(0) + " bothering other people, too.  But you don't see " + himHer(0) + " bothering the same person twice.  The common factor between most of them is that they get fed up with " + Hashimoto() + " and flee, usually well before the arcade staff have a chance to take notice.  Even when " + Hashimoto() + " does end up getting pulled away, " + hisHer(0) + " targets are nowhere to be seen the next day - either they're keeping their heads down like " + Yumeno() + ", or else they just pick somewhere else to spend their evenings.\n\n");
				result.screens[2].attach("But you aren't doing that.  Sometimes, you'll even be the one to call out to " + Hashimoto() + ".  If " + heShe(0) + " won't be satisfied until " + heShe(0) + "'s butted heads with you, then you might as well get it over with.");
				
				result.emotions[3] = new String[]{"Frown"};
				result.screens[3].attach("Tonight, " + Hashimoto() + "'s pretense for your confrontation is that you seemed like you were 'looking down on " + himHer(0) + "'.  With how you're refusing to let " + himHer(0) + " bully you away from the arcade, maybe " + heShe(0) + " has a point.  Why else are you putting up with this, if not because you think you can outlast " + himHer(0) + "?\n\n");
				result.screens[3].attach("That said, " + heShe(0) + " has been escalating more and more recently.  In the beginning, " + heShe(0) + "'d just get in your face and corner you with " + hisHer(0) + " body, without actually putting a hand on you.  But now " + heShe(0) + "'ll sometimes go as far as shoving your shoulder in order to emphasize " + hisHer(0) + " words.\n\n");
				result.screens[3].attach("It looks like " + heShe(0) + "'s psyching " + himHer(0) + "self up to do that again right now.  " + HeShe(0) + "'s been ranting at you for awhile, but it must have been too obvious that you're tuning " + himHer(0) + " out.");
				
				result.emotions[4] = new String[]{"Angry"};
				result.modifiers[4] = new Modifier[]{Modifier.CLOSEUP};
				result.screens[4].attach(Hashimoto() + " roughly pushes you back against one of the arcade cabinets.  It actually kind of hurts.\n\n");
				result.screens[4].attach("\"Didn't I tell you that it pisses me off when you ignore me!?\"\n\n", 0);
				result.screens[4].attach("Of course.  That's why you're doing it.\n\n");
				result.screens[4].attach("\"Fuck you!\"\n\n", 0);
				
				result.emotions[5] = new String[]{"Frown"};
				result.modifiers[5] = new Modifier[]{Modifier.CLOSEUP};
				result.screens[5].attach("It's satisfying to get under " + hisHer(0) + " skin, but it sure doesn't seem like it's going to make " + himHer(0) + " leave you alone.  At this rate, you really are going to get your ass kicked.\n\n");
				result.screens[5].attach("Well, if you're going to get your ass kicked anyway, you might as well make " + himHer(0) + " work for it.  You square up your shoulders and take a deep breath.");
				
				result.emotions[6] = new String[]{"Neutral"};
				result.modifiers[6] = new Modifier[]{Modifier.CLOSEUP};
				result.tracks[6] = Music.ADVERTISING;
				result.screens[6].attach("\"Hmph.  Did I finally get your attention?\"\n\n", 0);
				result.screens[6].attach("In truth, " + heShe(0) + " had your attention from the very start.  Even on the first day, when " + heShe(0) + " asked you 'what kind of dumbass would waste time in a place like this'.\n\n");
				result.screens[6].attach("\"Oh yeah.  You never did give me an answer, though.\"\n\n", 0);
				result.screens[6].attach("You've got " + hisHer(0) + " answer right here.  You grab the arm " + heShe(0) + "'s using to push you against the arcade cabinet, then shift your weight, pivoting to the side.  With all your strength, you pull " + Hashimoto() + " off-balance and throw " + himHer(0) + " across the aisle.");
				
				result.characters[7] = new String[0];
				result.screens[7].attach("Or at least, that's how the maneuver was supposed to go.  In reality, you don't have the slightest idea how to fight.\n\n");
				result.screens[7].attach("You do succeed at pulling " + Hashimoto() + " off-balance, but you aren't able to keep your own balance, either.  The two of you start to topple to the floor together.");
				
				result.characters[8] = new String[]{"hashimoto"};
				result.emotions[8] = new String[]{"Grin"};
				result.modifiers[8] = new Modifier[]{Modifier.CLOSEUP};
				result.screens[8].attach("\"Hah!  Now that's more like it!\"\n\n", 0);
				result.screens[8].attach("You hit the floor, and then " + Hashimoto() + " drives " + hisHer(0) + " elbow into your gut as " + heShe(0) + " lands atop you.  It knocks the wind out of you, leaving you stunned.  At first, all you can do is raise your arms to protect your head while " + Hashimoto() + " continues to rain blows on your torso.\n\n");
				result.screens[8].attach("However, it quickly becomes clear that " + heShe(0) + " has no idea what " + heShe(0) + "'s doing, either.  " + HeShe(0) + "'s certainly fit, physically stronger than you are, and it's not like " + heShe(0) + "'s pulling " + hisHer(0) + " punches - if one of them hit your jaw, it'd probably knock you out cold.");
				
				result.characters[9] = new String[0];
				result.screens[9].attach("But half those punches just harmlessly glance off the sides of your ribs, and the others mostly miss you entirely, hitting the carpeted aisle beneath you or banging into the hard plastic arcade cabinet with a painful *thunk*.  " + HisHer(0) + " knuckles are definitely going to be sore tomorrow.\n\n");
				result.screens[9].attach("And as you start to get your breath back, you're able to do more than just endure " + hisHer(0) + " punches.  You grab " + hisHer(0) + " arm again, and this time, you won't easily let go.  " + HisHer(0) + " other fist continues to flail against your torso, but you bat away most of " + hisHer(0) + " strikes with your forearm.\n\n");
				result.screens[9].attach("It must be a comical sight.  The two of you are rolling around on the floor, completely failing to actually hurt each other.  Well, in your case, you're not actually trying to inflict a serious injury on " + Hashimoto() + ".  And maybe " + heShe(0) + "'s not really trying to injure you, either.  It's a completely pointless scuffle.");
				
				result.characters[10] = new String[]{"hashimoto"};
				result.emotions[10] = new String[]{"Grin"};
				result.modifiers[10] = new Modifier[]{Modifier.CLOSEUP};
				result.screens[10].attach("Finally, you start to leverage your grip on " + hisHer(0) + " arm in order to pull yourself up into a standing position.  "  + HeShe(0) + " forces you to pull " + himHer(0) + " up with you.  Leaning on each other, you both get your feet under you so that you can have a proper fistfight.\n\n");
				result.screens[10].attach("But that's as far as you get.  You can hear shouts from the arcade staff as they rush in to break up the fight.");
				
				result.characters[11] = new String[]{"hashimoto", "employee"};
				result.emotions[11] = new String[]{"Frown", ""};
				result.screens[11].attach("Once again, the staff pull you and " + Hashimoto() + " apart.  " + HeShe(0) + " had actually been looking like " + heShe(0) + " was having a good time, but now " + heShe(0) + " goes back to an angry frown.  At least this time, it seems to be directed mostly at the employees getting in your way.\n\n");
				result.screens[11].attach("\"Whatever.  We'll pick up where we left off tomorrow.  You'd better be there.\"", 0);
				
				result.characters[12] = new String[0];
				result.screens[12].attach(HisHer(0) + " parting words sounded almost friendly.  In terms of getting " + himHer(0) + " to leave you alone, this was certainly another miserable failure.  But maybe that's not such a bad thing.\n\n");
				result.screens[12].attach("It was actually kind of fun.  You're sore in several places, and no doubt they'll hurt even worse in the morning, so maybe you'll change your mind later.");
				
				result.screens[13].attach("But beyond just having a good time, you feel good about standing up to " + Hashimoto() + ".  You didn't think you'd be able to actually hold your own against " + himHer(0) + ".  Now that you've done so, you feel a lot more confident.\n\n");
				result.screens[13].attach("It puts a bit of swagger in your step.  It's not like you're going to start picking fights with people, but you might be able to get away with acting like more of a tough " + guyGirl(-1) + " from now on.  Even if somebody calls you on your bluff, at least you know how to handle yourself.");
			} else if (g.tier == 2) {
				result = new Scene(20);
				
				result.backgrounds[0] = "arcade";
				result.screens[0].attach("Your routine scuffles with " + Hashimoto() + " have actually been pretty enjoyable lately.  You've been going to bed with bruises and sore muscles, but you generally feel alright by the next morning.  And you're pretty sure that you're dishing out just as much punishment as you're taking, even if " + Hashimoto() + " never shows any signs of being in pain.\n\n");
				result.screens[0].attach("At this point, it's obvious that you aren't going to be able to get " + Hashimoto() + " to stop bothering you.  It must also be obvious to " + himHer(0) + " that " + heShe(0) + "'s not going to be able to bully you away from the arcade, either.  But that doesn't stop either of you from coming here and doing this.");
				
				result.characters[1] = new String[]{"hashimoto"};
				result.emotions[1] = new String[]{"Angry"};
				result.modifiers[1] = new Modifier[]{Modifier.CLOSEUP};
				result.screens[1].attach("Of course, that's not to say that you're friendly with each other.  From the moment you set eyes on each other, you always just launch into another pointless fight.  And you keep at it until the arcade's employees break it up and throw " + Hashimoto() + " out.  Today is looking the same as always.\n\n");
				result.screens[1].attach("\"What the fuck are you smirking about!?  I'm gonna wipe that expression off your stupid- guh!\"\n\n", 0);
				result.screens[1].attach(Hashimoto() + " tries to shove you back, but you hold your ground, pivoting around " + hisHer(0) + " attack and sending " + himHer(0) + " face-first into the arcade cabinet behind you.");
				
				result.characters[2] = new String[]{"employee"};
				result.modifiers[2] = new Modifier[]{Modifier.CLOSEUP};
				result.screens[2].attach("It looks like this is as far as you'll be able to go, this time.  An employee shoves himself between you and " + Hashimoto() + ".\n\n");
				result.screens[2].attach("\"You two again!?  That's enough!  Both of you, get out of here!  You can take this outside if you want to fight so much!\"\n\n");
				result.screens[2].attach("This is a first.  The employee actually seems to be more focused on you than on " + Hashimoto() + ".  Since when did you become the bully?\n\n");
				result.screens[2].attach("A moment later, you see why.  " + Hashimoto() + " is hunched over a few feet away, clutching " + hisHer(0) + " face.  There's blood leaking through " + hisHer(0) + " fingers - a lot of blood.  You definitely didn't mean to hurt " + himHer(0) + " that badly.");
				
				result.characters[3] = new String[]{"employee", "hashimoto"};
				result.emotions[3] = new String[]{"", "Grin"};
				result.modifiers[3] = new Modifier[]{Modifier.CLOSEUP, null};
				result.screens[3].attach("But when " + Hashimoto() + " straightens up and wipes the blood away, " + heShe(0) + " looks fine.\n\n");
				result.screens[3].attach("\"Yeah, yeah.  Settling this outside sounds fine to me.  Let's get out of here.\"\n\n", 0);
				result.screens[3].attach("You and " + Hashimoto() + " are ushered out through the arcade's back door.");
				
				result.backgrounds[4] = "night";
				result.tracks[4] = Music.SILENCE;
				result.characters[4] = new String[]{"hashimoto"};
				result.emotions[4] = new String[]{"Neutral"};
				result.screens[4].attach("Well, this is a first.  Normally, " + Hashimoto() + " is the only one who gets thrown out of the arcade, and you end up spending the rest of the night playing arcade games on your own or visiting with " + Yumeno() + ".  But what are you supposed to do now?\n\n");
				result.screens[4].attach("\"Come on.  I know a spot near here where nobody will get in our way.\"\n\n", 0);
				result.screens[4].attach("Well, that's ominous.  If nobody pulls you apart, then how exactly will your fight end?  Is " + Hashimoto() + " trying to get you off somewhere alone so that " + heShe(0) + " can bash your brains out and leave you for dead?");
				
				result.emotions[5] = new String[]{"Frown"};
				result.screens[5].attach("But it's actually hard to imagine " + Hashimoto() + " doing something like that.  " + HeShe(0) + "'s never actually brought a weapon or hit you while you're not looking.  Even when you're dazed and it'd be easy to land a cheap shot, " + heShe(0) + " always waits for you to get your bearings before throwing another punch at you.\n\n");
				result.screens[5].attach("It actually makes you feel bad about giving " + himHer(0) + " a bloody nose.  But if you were to apologize, " + Hashimoto() + " would probably take it as you treating " + himHer(0) + " like a wimp.  So, you'll have to save your apology for when you want to piss " + himHer(0) + " off.");
				
				result.emotions[6] = new String[]{"Neutral"};
				result.screens[6].attach("You follow " + Hashimoto() + " in silence while " + heShe(0) + " leads you a few blocks away from the arcade.  It's getting late, and there aren't many other people on the street.  It's a sharp contrast from the constant noise of the arcade where you've always spent time with " + himHer(0) + " before.\n\n");
				result.screens[6].attach("Finally, " + heShe(0) + " turns and heads down a nondescript alleyway.");
				
				result.backgrounds[7] = "alley";
				result.tracks[7] = Music.DARKNESS;
				result.characters[7] = new String[0];
				result.screens[7].attach("The featureless gray walls of the surrounding buildings give way to colorful graffiti.  Did " + Hashimoto() + " draw all this?\n\n");
				result.screens[7].attach("Ignoring you for the moment, " + Hashimoto() + " walks over to one of the carboard boxes and flips it over, revealing neat rows of spray cans lined up inside.  Then, " + heShe(0) + " picks one out and shakes it a few times, producing a rattling sound as " + heShe(0) + " stares thoughtfully at a blank spot on the wall.");
				
				result.characters[8] = new String[]{"hashimoto"};
				result.emotions[8] = new String[]{"Frown"};
				result.screens[8].attach("Hold on.  Weren't the two of you coming here to settle things?  You were expecting to continue your fight from earlier.\n\n");
				result.screens[8].attach("\"If I beat you up here, will you stop showing your face at the arcade?\"\n\n", 0);
				result.screens[8].attach("Of course not.\n\n");
				result.screens[8].attach("\"Then it's a waste of time.  I've got better things to do.\"", 0);
				
				result.emotions[9] = new String[]{"Neutral"};
				result.screens[9].attach("That's not much of an answer.  If picking a fight with you here would be a waste of time, then why wasn't picking a fight with you at the arcade a waste of time too?  What does it matter if " + heShe(0) + " can bully you into hiding?  It's a waste of time either way.\n\n");
				result.screens[9].attach("For a little while, it doesn't seem like " + Hashimoto() + " wants to answer you.  " + HeShe(0) + " just keeps shaking the spray can and staring at the wall.  Then, abruptly, " + heShe(0) + " turns toward you and holds the can out.\n\n");
				result.screens[9].attach("\"Hey.  Why don't you try drawing something?\"\n\n", 0);
				result.screens[9].attach("Where's this coming from?  And won't you get in trouble for defacing someone else's property?\n\n");
				result.screens[9].attach("Well, it seems like " + Hashimoto() + "'s gotten away with it until now, and " + heShe(0) + "'d definitely make fun of you for being afraid of getting caught.  You take the spray can.");
				
				if (currentPlaythrough.loops == 0) {
					result.emotions[10] = new String[]{"Grin"};
					result.screens[10].attach("You start to spray, aiming to write your initials on the wall.  But the spraypaint quickly begins to gather into heavy droplets and run down the wall, turning into long streaks that make your letters illegibile.\n\n");
					result.screens[10].attach("\"What the fuck is that?  Are you retarded or something?  You're going to make me feel bad for picking on you.\"\n\n", 0);
					result.screens[10].attach("This is harder than it looks.  Was " + Hashimoto() + " really any better the first time " + heShe(0) + " picked up a spray can?\n\n");
					result.screens[10].attach("\"I sure as hell wasn't any worse.  Here, look.  You're supposed to spray it only a little at a time.  Do a quick sweep, give it a sec to dry, then do another quick sweep.\"\n\n", 0);
					result.screens[10].attach("Taking " + Hashimoto() + "'s advice, you give it another try.  This time, it comes out looking better.");
				} else {
					result.emotions[10] = new String[]{"Frown"};
					result.screens[10].attach("You start to spray quick, brief sweeps of paint, aiming to write a stylized version of your initials on the wall.  It actually looks alright, as far as you're concerned.  And " + Hashimoto() + " seems to agree.\n\n");
					result.screens[10].attach("\"Not bad.  Who was your teacher?  " + HeShe(0) + " must be pretty good.\"\n\n", 0);
					result.screens[10].attach("This is your first time ever holding a spray can.\n\n");
					result.screens[10].attach("\"Whatever.  You don't have to tell me if you don't want to.\"", 0);
				}
				
				result.emotions[11] = new String[]{"Uncomfy"};
				result.screens[11].attach(Hashimoto() + " clearly has more practice at this sort of thing, though.  Your own letters look amateurish and out-of-place next to " + hisHers(0) + ".  It feels like you've ruined what was otherwise a very pleasant gallery of street art.\n\n");
				result.screens[11].attach("\"It doesn't matter.  Cleaners come by every few weeks to scrub the place down.  Real courteous of them to give me another blank canvas to work with.\"\n\n", 0);

				result.emotions[12] = new String[]{"Neutral"};
				result.screens[12].attach("They erase it all?  Then why doesn't " + Hashimoto() + " start spraying " + hisHer(0) + " graffiti somewhere else?  There must be a place where it wouldn't get noticed as quickly.\n\n");
				result.screens[12].attach("\"If they didn't notice it, then there wouldn't be any point.  Paint is just paint.  It doesn't care whether it's in a can or on a wall.  But the cleaners care.  The people who walk by and call in a complaint about the graffiti, they definitely care.  They need to take time out of their day to push back against what I'm doing.  And that's why I do it.\"", 0);
				
				result.emotions[13] = new String[]{"Frown"};
				result.screens[13].attach("So " + heShe(0) + "'s basically just being a nuisance for the sake of being a nuisance?  That's... actually incredibly petty.\n\n");
				result.screens[13].attach("\"It's only a nuisance because they decided to treat it like one.  Graffiti doesn't hurt anybody.\"\n\n", 0);
				result.screens[13].attach("But what happens when two people disagree about how one particular wall should be painted?\n\n");
				result.screens[13].attach("\"Who fucking cares?  It's paint on a wall.  If they're dumb enough to spend billions cleaning it up across the country, then let 'em.  After all, if they weren't spending the money on that, then they'd probably be spending it on lobbying to ban chewing gum or some shit like that.\"", 0);
				
				result.emotions[14] = new String[]{"Uncomfy"};
				result.screens[14].attach("Is that why " + Hashimoto() + " does this?  Is " + heShe(0) + " draining the resources of society's rulers so that they have a harder time pushing for further restrictions on civil liberties?\n\n");
				result.screens[14].attach("\"Do I seem that delusional to you?  I'm just one person.  I don't expect to change the world.\"\n\n", 0);
				result.screens[14].attach(Hashimoto() + " glances toward the mouth of the alleyway, and " + hisHer(0) + " gaze becomes distant.\n\n");
				result.screens[14].attach("\"Some pedestrian sees that the city isn't as pristine and spotless as " + heShe(0) + " likes to imagine, and it bothers " + himHer(0) + " enough to call in a complaint.  A worker arrives, and maybe he's annoyed with having to clean it up, or maybe he's happy that there's enough graffiti out there to keep him employed.  The building's owner might even end up deciding to buy a fence or something, and then everybody who walks by will see a slightly different cityscape from then on.\"", 0);
				
				result.emotions[15] = new String[]{"Neutral"};
				result.screens[15].attach("\"It's not a bad payoff for a little bit of spraypaint and a few moments of my time.  A bunch of people's lives take a slightly different path because of something I did.  It means that I've done something that's 'real' to others.\"\n\n", 0);
				result.screens[15].attach(HeShe(0) + "'s done something, sure.  But has " + heShe(0) + " actually done something 'meaningful'?  " + HeShe(0) + "'s really just causing pointless chaos.  " + HeShe(0) + " isn't actually leaving a distinct impression on anything.");
				
				result.emotions[16] = new String[]{"Grin"};
				result.screens[16].attach("\"Are you sure about that?  I think I'm leaving a pretty deep impression on you right now.  If it weren't for me, you'd be sitting back in that arcade and wasting your time on video games.  But instead, here you are, bullshitting about the meaning of 'meaning'.\"\n\n", 0);
				result.screens[16].attach("By that logic, aren't you leaving an impression on " + Hashimoto() + " as well?\n\n");
				result.screens[16].attach("\"That's fine.  We can leave an impression on each other.  To be honest, you're probably right about it being pointless to just cause random trouble for people.  But you've got to admit that it beats sitting around with your eyes glued to a screen until you die.\"", 0);
				
				result.emotions[17] = new String[]{"Uncomfy"};
				result.screens[17].attach("\"If you have a better idea for how I can spend my time, I'm open to it.  But until you convince me, I'm gonna keep doing this.  You can join me if you like.  Maybe you'll end up deciding that my way of doing things is better after all.\"\n\n", 0);
				result.screens[17].attach("This just sounds like an excuse to hang out together.\n\n");
				result.screens[17].attach("\"If you make this weird, I'll kick your ass again.\"", 0);
				
				result.emotions[18] = new String[]{"Grin"};
				result.screens[18].attach("Again?  When did " + Hashimoto() + " kick your ass in the first place?  You've always been able to hold your own against " + himHer(0) + ".\n\n");
				result.screens[18].attach("\"That's it.  You're asking for another beating.\"\n\n", 0);
				result.screens[18].attach("It looks like you'll be earning a few more bruises tonight.");
				
				result.characters[19] = new String[0];
				result.screens[19].attach("After another brief scuffle, you and " + Hashimoto() + " relax and wind down together.  Apparently " + Hashimoto() + " normally likes to stay up all night, but this time, " + heShe(0) + "'s exhausted enough to turn in early.  Maybe you'll be able to hang out more together tomorrow.\n\n");
			}
        } else if (g.index == 4) {
            result = new Scene(2);

            result.backgrounds[0] = "suburb";
            result.screens[0].attach("As you've spent time with " + Tanaka() + "'s admirers, you've started to get pretty popular in your own right.  ");
            if (currentPlaythrough.personStatus[5] == Locale.COLLEGETOWN) {
                result.screens[0].attach("They still all flock to " + Tanaka() + " as soon as " + heShe(5) + " shows up, but until then, you're often the center of attention.\n\n");
            } else {
                result.screens[0].attach("Now that " + Tanaka() + "'s gone, half of them don't even seem to know what to do with themselves.\n\n");
            }
            result.screens[0].attach("It's reached the point that some of the " + guyGirl(5) + "s of the group have actually started competing for your favor.");

            result.screens[1].attach("Today, you received an offer to buy you some drinks at ");
            if (getGoalLevel(6, true) > 0) {
                result.screens[1].attach("the same nightclub where you met " + DuMont() + ".  It sounds like it could be fun, so maybe you should take them up on it next time.");
            } else {
                result.screens[1].attach("a popular nightclub.  It would be uncool to act excited about the invitation, but maybe you can take them up on it tomorrow.");
            }
		} else if (g.index == 5) {
			result = new Scene(16);
			
			result.backgrounds[0] = "tanakaRoom";
			result.tracks[0] = Music.HOME;
			result.screens[0].attach("Even though " + Tanaka() + "'s request was for you to walk with " + himHer(5) + ", " + heShe(5) + " always invites you inside to spend time with " + himHer(5) + " alone for a little while before heading out.  It seems like a good sign.  Maybe " + heShe(5) + "'s really starting to think of you as more than just a friend?");
			
			result.characters[1] = new String[]{"tanaka"};
			result.emotions[1] = new String[]{"Smug"};
			result.screens[1].attach("On the other hand, it's not as if meeting up like this counts as a romantic date.  The two of you mostly just sit around and talk.  " + Tanaka() + " shares stories about " + hisHer(5) + " modeling work, and " + heShe(5) + " also has some television series " + heShe(5) + " wants to convince you to watch.  It's just a regular hangout between friends.\n\n");
			result.screens[1].attach(HeShe(5) + " hasn't been as physically affectionate ever since that morning when " + heShe(5) + " first invited you here.  Maybe now that " + heShe(5) + "'s feeling safer on " + hisHer(5) + " morning walks, " + heShe(5) + " just doesn't feel that same urge to cling to somebody else?  It's a bit disappointing, but just hanging out like this is nice too.");
			
			result.emotions[2] = new String[]{"Grin"};
			result.screens[2].attach("At least you can be pretty sure that you didn't do anything to displease " + himHer(5) + ".  Every time you come see " + himHer(5) + ", " + heShe(5) + " seems to be in an even better mood than the day before.  And today, " + heShe(5) + " seems especially excited.  Does it have something to do with the clothes " + heShe(5) + "'s laid out on the bed?\n\n");
			result.screens[2].attach("\"Go on, take a look!  What do you think?\"\n\n", 5);
			result.screens[2].attach("They're clothes.  You're not accustomed to thinking much about clothes.  ");
			if (currentPlaythrough.personGenders[5].presentation() == currentPlaythrough.ownGender.presentation()) {
				result.screens[2].attach("They'd look wonderful on " + Tanaka() + ", but then again, just about anything would.\n\n");
				result.screens[2].attach("\"They're not for me, silly!  ", 5);
			} else if (currentPlaythrough.ownGender.presentation() == Gender.MALE) {
				result.screens[2].attach("On closer inspection, they don't look quite as girly as " + Tanaka() + "'s usual wear.  Is " + heShe(5) + " changing " + hisHer(5) + " style?\n\n");
				result.screens[2].attach("\"They're not for me, silly!  ", 5);
			} else {
				result.screens[2].attach("But on closer inspection, these are girls' clothes.  Unless " + Tanaka() + "'s planning on wearing them " + himHer(5) + "self, this can only mean...\n\n");
				result.screens[2].attach("\"I want to see the look on everyone's face when you show up wearing these.  ", 5);
			}
			result.screens[2].attach("It's my way of thanking you for helping me out so much!\"", 5);
			
			result.emotions[3] = new String[]{"Smug"};
			result.screens[3].attach("Is this really about showing gratitude?  It seems more like " + Tanaka() + " just wants to use you as a dress-up doll.\n\n");
			result.screens[3].attach("\"Well, maybe.  ", 5);
			if (currentPlaythrough.ownGender.presentation() == currentPlaythrough.personGenders[5].presentation()) {
				result.screens[3].attach("I'm always the one wearing whatever my agency tells me to, so it'd be nice to dress up somebody else for once.\"\n\n", 5);
			} else {
				result.screens[3].attach("I know a lot about " + guyGirl(5) + "s' fashion, but I never have a chance to try anything with " + guyGirl(-1) + "s' clothes.\"\n\n", 5);
			}
			result.screens[3].attach("This is starting to sound like a bad idea.\n\n");
			result.screens[3].attach("\"Come on!  It'll be fun, I promise.\"\n\n", 5);
			result.screens[3].attach("For " + himHer(5) + ", or for you?\n\n");
			result.screens[3].attach("\"For both of us!  Don't you want to try dressing up nice at least once in your life?\"", 5);
			
			result.emotions[4] = new String[]{"Grin"};
			result.screens[4].attach("Well, " + Tanaka() + " does seem pretty excited.  It's hard to say no to " + himHer(5) + " for long.  You can go along with it just this once.\n\n");
			result.screens[4].attach("\"Great!  I'll give you some privacy so you can get changed!\"\n\n", 5);
			result.screens[4].attach("Wait, " + heShe(5) + " wants you to try these on right here and now?\n\n");
			result.screens[4].attach("\"There's no time like the present!  We don't have much time before we need to head out, so I'll let you get to it.  Just give me a shout if you need my help putting any of it on.  I'll be right outside the door!\"", 5);
			
			result.characters[5] = new String[0];
			result.screens[5].attach("As if you could survive the embarrassment of getting dressed with " + Tanaka() + " in the same room.  Honestly, even being in " + hisHer(5) + " room and having " + himHer(5) + " on the other side of the door makes it hard to summon the willpower to take your clothes off.  " + HeShe(5) + " seems to be in a playful mood today, so you keep expecting " + himHer(5) + " to come up with some excuse to burst through the door while you're half-dressed.\n\n");
			result.screens[5].attach("Fortunately, " + Tanaka() + " ends up letting you get undressed in peace.  You set your old clothes aside and then start to put on the outfit " + heShe(5) + " laid out for you.");
			
			result.sounds[6] = Effect.ZIPPER;
			result.screens[6].attach("These clothes certainly feel... different.  They're thin and light.  Is it really alright to go out in public like this?  When you look at yourself in the mirror, you can confirm that everything is covered properly, but you still think you look a bit ridiculous.\n\n");
			result.screens[6].attach("You're tempted to just hurriedly put your old clothes back on before calling " + Tanaka() + " in.  But when you imagine " + hisHer(5) + " disappointment at not getting to see you in the clothes " + heShe(5) + " picked out, you can't go through with it.  You reluctantly open the door so that you can get this over with.");
			
			result.characters[7] = new String[]{"tanaka"};
			result.emotions[7] = new String[]{"Smug"};
			result.screens[7].attach("But when " + Tanaka() + " sees you, " + heShe(5) + " claps " + hisHer(5) + " hands together with joy.\n\n");
			result.screens[7].attach("\"I knew it!  This really is the perfect look for you!\"\n\n", 5);
			result.screens[7].attach("Really?  You glance in the mirror again, but the awkward " + guyGirl(-1) + " staring back doesn't look special at all.\n\n");
			result.screens[7].attach("\"We're on the right track.  Next, we need to do something with your hair.  Here, you can just sit down on the bed.\"", 5);
			
			result.backgrounds[8] = "tanaka3";
			result.sounds[8] = Effect.RUSTLE;
			result.characters[8] = new String[0];
			result.screens[8].attach("With " + hisHer(5) + " hands on your shoulders, " + Tanaka() + " guides you backward until you're sitting down on " + hisHer(5) + " bed.  But that bed is pretty low to the floor, and when " + heShe(5) + " leans forward to run " + hisHer(5) + " fingers through your hair, ");
			if (currentPlaythrough.personGenders[5].presentation() == Gender.MALE) {
				result.screens[8].attach("your heart skips a beat.\n\n");
				result.screens[8].attach("This is another level of closeness beyond when " + heShe(5) + " pats your shoulder or gives you a brief hug.  Your face is almost right against " + hisHer(5) + " chest.  You can catch a hint of the masculine scent underneath " + hisHer(5) + " deoderant.  Your head starts spinning a little.  Does " + Tanaka() + " realize just what effect " + heShe(5) + "'s having on you?");
			} else {
				result.screens[8].attach("it becomes difficult to keep your eyes focused on " + hisHer(5) + " face.\n\n");
				result.screens[8].attach("Is this really alright?  It feels scummy to sneak a peek inside " + hisHer(5) + " clothes.  But you can't really stop yourself.  Your gaze wanders, taking in the view.  Did " + Tanaka() + " forget what " + heShe(5) + "'s wearing?");
			}
			
			result.backgrounds[9] = "tanaka4";
			result.screens[9].attach("When you manage to bring your gaze back up to " + Tanaka() + "'s eyes, you see that " + heShe(5) + "'s already staring back into yours.  The expression on " + hisHer(5) + " face leaves no doubt.  " + HeShe(5) + " knows exactly what " + heShe(5) + "'s doing.\n\n");
			result.screens[9].attach("\"What's wrong?  Is there something you want to say?\"\n\n", 5);
			result.screens[9].attach("So " + heShe(5) + "'s just teasing you some more.  This is further than " + heShe(5) + "'s gone before, but you can still keep your cool.  Barely.\n\n");
			result.screens[9].attach("\"I didn't think so.  Oh well.  I'll just keep going, then.\"", 5);
			
			result.backgrounds[10] = "tanaka3";
			result.screens[10].attach(Tanaka() + " isn't just playing around, though.  " + HeShe(5) + " seems to be styling your hair with gel.  As " + heShe(5) + " works, " + heShe(5) + " leans closer and closer.\n\n");
			if (currentPlaythrough.ownGender.presentation() == Gender.MALE) {
				result.screens[10].attach("\"Are your ears pierced?  I think you actually might be able to pull off kind of a metrosexual look.\"\n\n", 5);
			} else {
				result.screens[10].attach("\"To be honest, your hair already looked nice.  I'm just curious about what else we could do with it.\"\n\n", 5);
			}
			result.screens[10].attach("It's hard to focus on " + hisHer(5) + " words.  Maybe you can't keep your cool after all.  It's a very pleasant position to be in, but " + Tanaka() + "'s obviously testing you to see how you'll react.  And what if you fail that test?  What if " + heShe(5) + " calls you a creep and says that " + heShe(5) + " never wants to see you again?\n\n");
			if (currentPlaythrough.personGenders[5].presentation() == Gender.MALE) {
				result.screens[10].attach("\"I can't really get the back of your head like this.  Let's just have you sit in my lap...\"", 5);
			} else {
				result.screens[10].attach("\"It's a little awkward to bend over like this.  Maybe I'll just sit in your lap...\"", 5);
			}
			
			result.backgrounds[11] = "tanakaRoom";
			result.sounds[11] = Effect.RUSTLE;
			result.characters[11] = new String[]{"tanaka"};
			result.emotions[11] = new String[]{"Neutral"};
			result.screens[11].attach("You abruptly stand up.  If " + Tanaka() + " had gotten any closer, you definitely would've embarrassed yourself one way or another.  It looks like " + Tanaka() + " wins this round.\n\n");
			result.screens[11].attach("This is the kind of reaction " + Tanaka() + " was hoping for, right?  " + HeShe(5) + " doesn't look especially happy, though.");
			
			result.emotions[12] = new String[]{"Shifty"};
			result.screens[12].attach("\"I'm sorry.  I really shouldn't tease you so much, should I?\"\n\n", 5);
			result.screens[12].attach("That's right.  It was just teasing.  Now that there's some distance between you and " + Tanaka() + ", you feel a bit foolish for getting so flustered over it.\n\n");
			result.screens[12].attach("\"It's fine, since I was just about finished anyway.  Go ahead and take a look in the mirror.\"", 5);
			
			result.emotions[13] = new String[]{"Happy"};
			result.screens[13].attach("You do as " + heShe(5) + " asks and look yourself over.  Now that your hair is properly styled, the outfit looks... better.  Still strange, but definitely better.\n\n");
			result.screens[13].attach("\"See?  What did I tell you?  You look great.\"\n\n", 5);
			result.screens[13].attach("It feels really good to hear " + Tanaka() + " say so.  But it also makes you feel guilty about dragging your feet so much when " + heShe(5) + " was just trying to help you.\n\n");
			result.screens[13].attach("\"It's fine.  Really, it's my fault for playing around so much.  I'll just be looking forward to having you tell me about how everyone treats you differently for the rest of the day.\"", 5);
			
			result.emotions[14] = new String[]{"Shifty"};
			result.screens[14].attach("There's no need for " + Tanaka() + " to wait until you tell " + himHer(5) + " about it, right?  " + HeShe(5) + " can just see for " + himHer(5) + "self at the usual hangout spot today.\n\n");
			result.screens[14].attach("\"Well, they'll treat you differently too, but maybe not in the same way that everybody else does.  Especially after they see what I'm wearing.\"\n\n", 5);
			result.screens[14].attach("Is " + Tanaka() + " going to be wearing a different outfit too?\n\n");
			result.screens[14].attach("\"Yeah, I got an outfit that matches with yours, as sort of a stupid little joke.  They're probably going to get all sorts of crazy ideas about what's happening between the two of us.  Anyway, I'd better go get dressed too.\"", 5);
			
			result.backgrounds[15] = "suburb";
			result.characters[15] = new String[0];
			result.screens[15].attach("After " + Tanaka() + "'s done getting ready, the two of you head out for your usual morning walk together.\n\n");
			result.screens[15].attach("And sure enough, for the rest of the day, you notice people giving you a lot more attention than before.  It's not a bad feeling.  You might actually want to dress like this more often.");
		} else if (g.index == 6) {
			if (g.tier == 0) {
				result = new Scene(0);
				if (currentPlaythrough.personStatus[5] != Locale.COLLEGETOWN || (getGoalLevel(12, false) == 1 && getGoalLevel(14, false) == 0)) {
					result = new Scene(19);
					if (currentPlaythrough.currentDay <= classStartDay+1) {
                        if (currentPlaythrough.currentDay == classStartDay) {
                            result.backgrounds[0] = "night";
                            result.screens[0].attach("After what happened with " + Tanaka() + ", nobody was in the mood to hang out as you had originally planned for the night.  And so, with the unexpected free time, you're scouting out the nightclub which supposedly has the kind of clientele that might be able to help with the situation.\n\nAfter one glance at your expression, the bouncers let you through right away.");

                            result.backgrounds[1] = "club";
                            result.screens[1].attach("Once inside, you can see why the nightclub has the reputation it does.  The people getting drinks at the bar have a rough look about them, and some of the patrons in the booth seating are exchanging money for unmarked packages.  A few of the people using the dancefloor look like they might be under the influence of drugs other than alcohol, too.\n\n");
                            result.screens[1].attach("That's good, though.  The whole reason for coming here was that you'd supposedly be able to find somebody who was familiar with the city's criminal underbelly, and there seems to be no shortage of those.  All that's left is to find one trustworthy enough to hire and send on the search for " + Tanaka() + ".");

                            result.screens[2].attach("For the next half hour, you try to broach the subject with promising-looking patrons and gauge their trustworthiness.  But you're out of your element here, and it shows.  On top of that, you don't actually have the money to hire anybody right now - that'll have to wait for tomorrow, once " + Tanaka() + "'s other friends have the opportunity to gather it.  As a result, of the people you talk to, only a few take you seriously.\n\n");
                            result.screens[2].attach("Some of them do claim that they're experts at tracking down abducted persons, but you get the distinct impression that they're just trying to scam you out of your money.  How exactly are you supposed to find somebody you can trust?  You find yourself wondering whether there was any point in coming here in the first place.");
                        } else {
                            result.backgrounds[0] = "night";
                            result.screens[0].attach("At the agreed time, you meet up with all of " + Tanaka() + "'s other friends.  Then, together, you make your way to the nightclub in hopes of finding somebody who can help.\n\n");
                            result.screens[0].attach("It briefly seems like the bouncers might bar your group from entering the nightclub, but after some cash changes hands, they decide to let you in.  You walk through the doors and onto the neon-lit dancefloor.");

                            result.backgrounds[1] = "club";
                            result.screens[1].attach("But after that, the plan immediately starts to fall apart.  The group disperses in search of people who seem like they might be able to handle a search-and-rescue operation.  But it's not entirely clear what that sort of person should look like.  A ripple of chaos spreads throughout the nightclub as patrons enjoying their drinks are accosted by students convinced that they look like some sort of bounty hunter.\n\n");
                            result.screens[1].attach("Some of those patrons do reluctantly admit that they possess some relevant skills.  Some of them even hint that they have specific knowledge about who's responsible for " + Tanaka() + "'s abduction.  But all of them want cash up front, and none of " + Tanaka() + "'s friends can agree on which ones are actually trustworthy enough to take the gamble of spending their pooled cash.");

                            result.screens[2].attach("This group's dynamic is the same as ever.  Under normal circumstances, they get along well enough.  But once there's an opportunity to compete for " + Tanaka() + "'s affection, they instantly turn against each other.  They care less about 'saving " + Tanaka() + "' and more about 'being the one who saved " + Tanaka() + "'.\n\n");
                            result.screens[2].attach("It's sad to see.  You lean against the wall and rub your eyes, wondering whether it was even worth coming out here.");
                        }
					} else {
						result.backgrounds[0] = "night";
						result.screens[0].attach("The bid by " + Tanaka() + "'s group of friends to find somebody capable of saving " + himHer(5) + " didn't go well.  You heard about it after the fact.  They couldn't agree on where their pooled funds should be spent, and so they ended up taking their money back and parting ways.  It seems like nothing ever came of it.\n\n");
						result.screens[0].attach("Out of curiosity, you head to the same nightclub yourself.  At first, it looks like the bouncer might stop you, but after he gets a closer look at your face, he waves you through.  How strange.");
						
						result.backgrounds[1] = "club";
						result.screens[1].attach("The inside of the nightclub is loud and crowded.  There are some students dancing together on the dancefloor, and the booths along the walls are filled with patrons nursing drinks and eating bar food.  It doesn't quite seem to fit the reputation for skulduggery that you had heard about.");
						
						result.screens[2].attach("In fact, it actually looks like a nice place to relax.  But unfortunately, the prices are well beyond what you can afford on a nightly basis.  There might not be anything for you here after all.");
					}
					result.screens[3].attach("Just then, a waitress comes up to you and offers you some sort of cocktail.\n\n");
					result.screens[3].attach("\"Compliments of " + misterMadame(2) + " " + DuMont() + ".  " + HeShe(2) + " invites you to join " + himHer(2) + " in the VIP lounge.\"\n\n");
					result.screens[3].attach("The waitress gestures upward.  You crane your head and catch sight of a foreign ");
					if (currentPlaythrough.personGenders[2].presentation() == Gender.MALE) {
						result.screens[3].attach("businessman ");
					} else {
						result.screens[3].attach("businesswoman wearing a fur coat ");
					}
					result.screens[3].attach("watching from the balcony above.  " + HeShe(2) + " must have had " + hisHer(2) + " eye on you this whole time.\n\n");
					result.screens[3].attach("Well, if " + heShe(2) + "'s going to buy you a drink, then you can at least hear " + himHer(2) + " out.");
					
					result.screens[4].attach("You ascend the stairs to the VIP lounge and get your bearings.  In a booth near the railing, you spot the ");
					if (currentPlaythrough.personGenders[2].presentation() == Gender.MALE) {
						result.screens[4].attach("businessman ");
					} else {
						result.screens[4].attach("businesswoman ");
					}
					result.screens[4].attach("again.  " + HeShe(2) + " raises " + hisHer(2) + " glass to you in greeting.\n\n");
					result.screens[4].attach("You take a seat opposite " + himHer(2) + " and introduce yourself.  Even though the waitress already told you " + hisHer(2) + " name, the ");
					if (currentPlaythrough.personGenders[2].presentation() == Gender.MALE) {
						result.screens[4].attach("businessman ");
					} else {
						result.screens[4].attach("businesswoman ");
					}
					result.screens[4].attach(" responds to your introduction in kind.");
					
					result.backgrounds[5] = "dumont1";
					if (currentPlaythrough.personNames[2].equals("DuMont")) {
						if (currentPlaythrough.personGenders[2].presentation() == Gender.MALE) {
							result.screens[5].attach("\"Reginald DuMont", 2);
						} else {
							result.screens[5].attach("\"Regina DuMont", 2);
						}
					} else {
						result.screens[5].attach("\"" + DuMont(), 2);
					}
					result.screens[5].attach(", co-owner of this establishment.  It's a pleasure to finally make your acquaintance.\"\n\n", 2);
					result.screens[5].attach("'Finally'?  Has " + heShe(2) + " heard about you before?  From who?\n\n");
					if (currentPlaythrough.personNames[5].equals("Tanaka")) {
						result.screens[5].attach("\"From Tanaka Ai ", 2);
					} else {
						result.screens[5].attach("\"From " + Tanaka() + " ", 2);
					}
					result.screens[5].attach(himHer(5) + "self.  " + HeShe(5) + " came here once with the director of " + hisHer(5) + " modeling agency.  I was impressed that " + Tanaka() + " seemed to have the director wrapped around " + hisHer(5) + " little finger.  Quite the charismatic young " + manWoman(5) + ".\"\n\n", 2);
					result.screens[5].attach("Wait.  " + Tanaka() + " was mentioning you to other people?  Just what was " + heShe(5) + " saying about you?\n\n");
					result.screens[5].attach("No, that's not important right now.");
					
					result.screens[6].attach("What's important is that you've found another friend of " + Tanaka() + ".  And unlike the other students down below, " + DuMont() + " practically exudes wealth and power.  If " + heShe(2) + " puts " + hisHer(2) + " mind to it, " + heShe(2) + " can surely get a lead on " + Tanaka() + "'s abductors, can't " + heShe(2) + "?\n\n");
                    if (currentPlaythrough.currentDay == classStartDay) {
                        result.screens[6].attach("\"In fact, I already have.  While you were down there, I received an update from the " + manWoman(3) + " I hired to track them down.  It's looking like they've already fled the country and taken " + Tanaka() + " with them.\"\n\n", 2);
                    } else {
                        result.screens[6].attach("\"In fact, I already have.  The men responsible fled the country within a matter of hours.  It's possible that they took " + Tanaka() + " with them.\"\n\n", 2);
                    }
					result.screens[6].attach("Where did they go?\n\n");
					result.screens[6].attach("\"I don't know.  They were professionals, that much is clear.  They covered their tracks as best they could.  The trail has already gone cold.\"", 2);
					
					result.backgrounds[7] = "dumont3";
					result.screens[7].attach("That doesn't sound good.  But at least now you know.  When " + Tanaka() + "'s friends first floated the idea of finding a professional to search for " + himHer(2) + ", it had seemed like you'd be starting from square one.  But now it turns out that " + Tanaka() + " had a powerful friend who has already been working on saving " + himHer(5) + " the whole time.  " + DuMont() + " actually seems pretty amazing.\n\n");
					result.screens[7].attach("\"I'm afraid that your compliments are misplaced.  This is as much as I intend to do for that poor " + boyGirl(5) + ".  I don't mind sharing what I've found with you, but I hope you'll agree that it's pointless to go any further.\"\n\n", 2);
					if (currentPlaythrough.currentDay == classStartDay) {
                        result.screens[7].attach("What?  But it's only been a matter of hours since the abduction.  " + HeShe(2) + "'s giving up already?\n\n");
                    } else if (currentPlaythrough.currentDay == classStartDay+1) {
						result.screens[7].attach("What?  But it's barely been a full day since the abduction.  " + HeShe(2) + "'s giving up already?\n\n");
					} else {
						result.screens[7].attach("What?  After making so much progress?  Isn't it a waste not to keep going until the matter is solved?\n\n");
					}
					result.screens[7].attach("\"The world is a big place, and your friend could be anywhere in it by now.  Chasing after " + himHer(5) + " would just be throwing good money after bad.\"", 2);
					
					result.backgrounds[8] = "dumont1";
					result.screens[8].attach("That's cold.  It seemed like " + DuMont() + " actually liked " + Tanaka() + ", but apparently that's not enough.  Does this " + manWoman(2) + " care about anything other than money?\n\n");
					result.screens[8].attach("\"Do not misunderstand.  I'm not objecting on the basis of what's profitable.  I'm objecting on the basis of what's economical.\"\n\n", 2);
					result.screens[8].attach("What's the difference?\n\n");
					result.screens[8].attach("\"Helping people is a worthy goal even when you don't expect the money spent on it to come back to you.  But if your goal is 'helping people', then some methods of achieving it are more efficient than others.\"", 2);
					
					result.screens[9].attach("\"There are malnourished people living on the street.  There are drug addicts who need shelter and safety in order to get their lives back on track.  There are people dying due to lack of proper medical care.\"\n\n", 2);
					result.screens[9].attach("Their suffering doesn't make " + Tanaka() + "'s fate any less important.\n\n");
					result.screens[9].attach("\"It's not a question of importance.  It's a question of efficiency.  How much money would it cost to stage an international manhunt and save " + Tanaka() + "'s one life?  How many more lives could that money save if spent on those whose needs are simpler to fulfill?\"", 2);
					
					result.screens[10].attach("\"Suppose you were able to convince me to sell my share of this nightclub and spend the proceeds on helping those in need.  It's not entirely out of the question.  I already give the majority of my income to charity.  But even if you were to convince me to do such a thing, why would the money be better spent on your friend than on so many others who can be saved more cheaply?\"\n\n", 2);
					result.screens[10].attach("That's a rational way of looking at it.  Maybe excessively rational.  But can " + DuMont() + " really just stand by and watch somebody be abducted and sent off to a terrible fate?\n\n");
                    if (currentPlaythrough.currentDay == classStartDay) {
                        result.screens[10].attach("\"I focus my efforts on the people I'm sure I can save.  Speaking of which...  What exactly do you intend to do now?  You've been telling the patrons here that " + Tanaka() + "'s other friends will be coming with the money tomorrow, but I understand that they're hardly the most cohesive group.  Do you really think they'll be able to work together to save " + himHer(5) + "?\"", 2);
                        result.screens[11].attach(Tanaka() + " must have told " + DuMont() + " what " + hisHer(5) + " friends were like.  Come to think of it, it is hard to imagine that they'll actually be willing to pool their money to help out.  Rather than 'rescuing " + Tanaka() + "', they're more likely to care about 'being the one who rescued " + Tanaka() + "'.  And if the required amount of money is more than any of them can gather alone...\n\n");
                    } else {
                        result.screens[10].attach("\"I focus my efforts on the people I'm sure I can save.  Speaking of which...  What exactly do you intend to do, now that the plan concocted by your friends down there seems to be a bust?  I very much doubt that you'll be willing to put your faith in them to save " + Tanaka() + ".\"", 2);
                        result.screens[11].attach("Just what will you do?  It's true that it seems unlikely that " + Tanaka() + "'s admirers will be of any help at all in saving " + himHer(5) + ".  Is it all up to you?  Just how far are you willing to go in order to rescue " + Tanaka() + "?  How much does " + heShe(5) + " really mean to you?\n\n");
                    }

					result.screens[11].attach(DuMont() + " mentioned selling the nightclub in order to fund the search.   Would it really require that much money?\n\n");
					result.screens[11].attach("\"Well, it's hard to say ahead of time.  Depending on where " + heShe(5) + "'s ended up, bribing the local officials might be easier or harder.  And in the first place, I only own a 30% share of this establishment.  But... I suppose you could call that a plausible upper limit for how much it might cost.\"\n\n", 2);
					result.screens[11].attach("You turn the numbers over in your head.  You don't really have any income right now.  And taking a part time job wouldn't cut it, at least not if you wanted to accumulate the required funds sometime in the next couple of years.  What other methods are there to make a lot of money in a short period of time...?");
					
					result.backgrounds[12] = "club";
					result.characters[12] = new String[]{"dumont"};
					result.emotions[12] = new String[]{"Neutral"};
					result.sounds[12] = Effect.RUSTLE;
					result.screens[12].attach(DuMont() + " breaks your train of thought by rising to " + hisHer(2) + " feet.\n\n");
					result.screens[12].attach("\"It's just as I thought when you walked in.  You really do have a bit of a dangerous air about you.\"\n\n", 2);
					result.screens[12].attach("Dangerous?  You aren't sure if anybody's ever described you that way before.\n\n");
					result.screens[12].attach("\"Come along, now.  We can't have you selling off a kidney or anything ghastly like that.  A job tending the bar here should be much safer while still meeting your needs.\"\n\n", 2);
					result.screens[12].attach("If this job really does pay that kind of money, then maybe " + DuMont() + " offering it to you is actually a huge favor.");
					
					result.emotions[13] = new String[]{"Smug"};
					result.screens[13].attach("But didn't " + heShe(2) + " say that there were better ways to spend " + hisHer(2) + " money than on funding " + Tanaka() + "'s rescue?  This seems suspiciously like " + heShe(2) + "'s just using the job as an excuse to help out.\n\n");
					result.screens[13].attach("\"Am I?  Perhaps I've simply decided that a cute " + boyGirl(-1) + " like you is just what this club needs to bring in some more customers.\"\n\n", 2);
					result.screens[13].attach("Whatever " + hisHer(2) + " reasons, it seems like it'll be worthwhile to go along with it.\n\n");
					result.screens[13].attach("\"I'll introduce you to the shift manager and make sure you're given a flexible schedule that won't interfere with your studies.\"", 2);
					
					result.characters[14] = new String[0];
					result.screens[14].attach("You accompany " + DuMont() + " into the nightclub's office and get acquainted with the management and with the terms of your prospective employment.  You had been hoping that " + DuMont() + " would be willing to pay you some ridiculously high wage in order to keep you out of trouble, but apparently you'll be getting the same deal as everybody else who works here.\n\n");
					result.screens[14].attach("Still, apparently the more charming bartenders are able to earn more in tips than they do from their regular wage.  If you get good at this, you might be able to secure some serious cashflow.");

                    result.backgrounds[15] = "night";
					result.characters[15] = new String[]{"dumont"};
					result.emotions[15] = new String[]{"Smug"};
					result.screens[15].attach("By the time you're done, the sky is starting to brighten with the coming dawn.  You say goodbye to " + DuMont() + ".  Tonight would have been a complete waste of time if not for " + himHer(2) + ".\n\n");
					result.screens[15].attach("\"Feel free to come say hello anytime.  I like to have a few drinks here every night.  And be sure to let me know if you or the other workers are being treated poorly.\"\n\n", 2);
					result.screens[15].attach(HeShe(2) + " seems sincere.  It might be awkward to be friends with your boss, but " + DuMont() + " is more like your boss's boss, so maybe it wouldn't be so bad.");
					
					result.emotions[16] = new String[]{"Uncomfy"};
					if (getGoalLevel(12, false) > 0) {
						result.screens[15].attach("  You come to a decision.");
						
						result.modifiers[16] = new Modifier[]{Modifier.CLOSEUP};
						result.screens[16].attach("You reach into your pocket.  When you handed over the bundle of threads you pulled from the gunman's suit to the police, apparently one thread got caught in your pocket and stayed there.  It seemed doubtful that the extra thread could make a difference to their investigation, and they didn't seem to be taking the matter very seriously in the first place, so you just kept it for yourself.\n\n");
						result.screens[16].attach("Now, though, you hand it to " + DuMont() + ".  Even if investigating the abductors wasn't an 'economical' decision before, maybe the addition of another clue will make it a little more viable.\n\n");
						result.screens[16].attach("\"A single thread, hm?  I suppose I can give it a tug and see where it leads.\"", 2);
					} else {
						if (currentPlaythrough.currentDay == classStartDay+1) {
							result.screens[16].attach("Still, you can't help but wonder if there's any point to this.  Your one best chance to save " + Tanaka() + " has already passed.  If you had been walking " + himHer(5) + " home yesterday, would the abductors still have made their move?  Your doubts must show on your face.\n\n");
						} else {
							result.screens[16].attach("In truth, you've already come to terms with " + Tanaka() + "'s abduction.  If you had cared that much about " + himHer(5) + ", you would have been walking " + himHer(5) + " home like " + heShe(5) + " had asked, or at least worked together with " + hisHer(5) + " admirers when they came up with their plan to save " + himHer(5) + " afterwards.  When " + DuMont() + " assumes that you're broken up about it, " + heShe(2) + " must be projecting " + hisHer(2) + " own guilty feelings for giving up onto you.\n\n");
						}
						result.screens[16].attach("\"Even if you had been there with " + himHer(5) + ", there's nothing you could've done.  All indications are that the abductors were professional criminals, and eyewitnesses say that there were at least five of them.  It might be best to just think of this as an unavoidable tragedy.  As if " + Tanaka() + " were caught in a car crash, or had a heart attack or something.  It couldn't be helped.\"", 2);
					}
					
					result.emotions[17] = new String[]{"Neutral"};
					result.screens[17].attach("\"I still think it would be better to give up on tracking down your friend, and just focus on your own life.  But if you insist on going after " + himHer(5) + ", I can at least make sure you don't end up giving your money to some fraud who doesn't even have the necessary skills to find " + himHer(5) + ".\"\n\n", 2);
					result.screens[17].attach("Does " + DuMont() + " actually know a professional?");
                    if (currentPlaythrough.currentDay == classStartDay+1) {
                        result.screens[17].attach("  Considering the utter failure of " + Tanaka() + "'s admirers to find somebody trustworthy, it's probably a good idea to hear " + DuMont() + " out.");
                    }
					result.screens[17].attach("\n\n\"Yes, " + heShe(3) + "'s a...  Well, " + heShe(3) + " prefers the term 'fixer'.  " + HeShe(3) + "'s a frequent patron of this establishment who goes by the callsign '" + Jackal() + "'.  A redhead with an eyepatch.  " + HeShe(3) + " was sitting not far from where we met.\"\n\n", 2);
					result.screens[17].attach("You vaguely think you recall seeing somebody like that.\n\n");
					result.screens[17].attach("\"If you want to hire " + hisHer(3) + " services, you should be prepared to show that you have enough cash to pay " + himHer(3) + " until the job is done.  But " + heShe(3) + "'s worth it, especially since I suspect that " + heShe(3) + "'ll be willing to work for you at a lower rate than " + heShe(3) + " would for me.  I'd trust " + Jackal() + " with my life...  In fact, I suppose I've already done so on one or two occasions.\"", 2);
					
					result.characters[18] = new String[0];
					result.backgrounds[18] = "night";
					result.screens[18].attach("This was quite an eventful night.  After " + Tanaka() + "'s abduction, you felt like you had been set adrift.  But now, you have a sense of direction.\n\n");
					if (currentPlaythrough.weeklyActions[weekDayNumber()][5].relationship == 0) {
						result.screens[18].attach("You head off to meet up with " + Hashimoto() + ".  Maybe " + heShe(0) + "'ll have some input.");
					} else {
						result.screens[18].attach("You head back home, thinking carefully about your options.");
					}
				} else {
					result = new Scene(10);

					result.backgrounds[0] = "night";
					if (currentPlaythrough.upgradeLevels[26] > 0) {
						if (currentPlaythrough.currentDay == 0) {
							result.screens[0].attach("It's been an eventful day.  But rather than being tired out, you're invigorated.  Maybe that's why you're in the mood to do something unusually bold.\n\n");
						} else if (currentPlaythrough.upgradeLevels[26] > 0) {
							result.screens[0].attach("Tonight, you finally feel up to doing something that's been on your mind for awhile now.  It's not like you to go out of your way like this, but that's all the more reason to act while you're feeling motivated.\n\n");
						}
						result.screens[0].attach("There's a nightclub on the edge of the bad side of town that's known for being a little bit rough.  You're curious to see whether it lives up to its reputation, so you walk over and join the line of people outside.\n\n");
						result.screens[0].attach("Once you reach the front of the line, the bouncers let you by without so much as a second glance.  That was surprisingly easy.  You were half expecting them to shake you down for a 'cover charge' or something.");

						result.backgrounds[1] = "club";
						result.screens[1].attach("However, once you get inside, you're left wondering whether there was any point.  You don't actually have any disposable income to buy yourself a drink, and it's no fun to chat with the other patrons while they're drunk and you're sober.  Maybe you should get a job.\n\n");
					} else {
						result.screens[0].attach("Recently, while spending time with the other students in the morning, you were invited to join them at their preferred nighttime hangout spot as well.  It's a nightclub, just near enough to the bad side of town that going there feels dangerous and exciting.\n\n");
						result.screens[0].attach("You don't have the disposable income to spend at a place like that, but if you're going with friends who are happy to buy a few drinks for you, then it seems like a pretty good deal.  You join them in the line outside, one of them pays a cover charge to the bouncer, and then you all head inside together.");

						result.backgrounds[1] = "club";
						result.screens[1].attach("Over the next hour, your group drifts apart as they get caught up in conversations with the other patrons or decide to head home early.  You gotten to enjoy a couple of drinks, but now there's no one left to buy any more for you.  Maybe you should get a job.\n\n");
					}
					result.screens[1].attach("Just then, a waitress comes up to you and offers you some sort of cocktail.\n\n");
					result.screens[1].attach("\"Compliments of " + misterMadame(2) + " " + DuMont() + ".  " + HeShe(2) + " invites you to join " + himHer(2) + " in the VIP lounge.\"\n\n");
					result.screens[1].attach("The waitress gestures upward.  You crane your head and catch sight of a foreign ");
					if (currentPlaythrough.personGenders[2].presentation() == Gender.MALE) {
						result.screens[1].attach("businessman ");
					} else {
						result.screens[1].attach("businesswoman wearing a fur coat ");
					}
					result.screens[1].attach("watching from the balcony above.  Has " + heShe(2) + " had " + hisHer(2) + " eye on you this whole time?\n\n");
					result.screens[1].attach("Well, if " + heShe(2) + "'s going to buy you a drink, then you can at least hear " + himHer(2) + " out.");

					result.screens[2].attach("You ascend the stairs to the VIP lounge and get your bearings.  In a booth near the railing, you spot the ");
					if (currentPlaythrough.personGenders[2].presentation() == Gender.MALE) {
						result.screens[2].attach("businessman ");
					} else {
						result.screens[2].attach("businesswoman ");
					}
					result.screens[2].attach("again.  " + HeShe(2) + " raises " + hisHer(2) + " glass to you in greeting.\n\n");
					result.screens[2].attach("You take a seat opposite " + himHer(2) + " and introduce yourself.  Even though the waitress already told you " + hisHer(2) + " name, the ");
					if (currentPlaythrough.personGenders[2].presentation() == Gender.MALE) {
						result.screens[2].attach("businessman ");
					} else {
						result.screens[2].attach("businesswoman ");
					}
					result.screens[2].attach(" responds to your introduction in kind.");

					result.backgrounds[3] = "dumont2";
					if (currentPlaythrough.personNames[2].equals("DuMont")) {
						if (currentPlaythrough.personGenders[2].presentation() == Gender.MALE) {
							result.screens[3].attach("\"Reginald DuMont", 2);
						} else {
							result.screens[3].attach("\"Regina DuMont", 2);
						}
					} else {
						result.screens[3].attach("\"" + DuMont(), 2);
					}
					result.screens[3].attach(", co-owner of this establishment.  So... this is the kind of " + boyGirl(-1) + " " + heShe(5) + " likes?  How cute.\"\n\n", 2);
					result.screens[3].attach(DuMont() + " chuckles to " + himHer(2) + "self, but you feel like you've been left out of the joke.  Who is this '" + heShe(5) + "' that " + DuMont() + " is talking about?\n\n");
					result.screens[3].attach("\"Oh, never mind that.  Let's just say that I've heard about you from an acquaintance.\"\n\n", 2);
					result.screens[3].attach("Are you really becoming that well-known?  Apparently you're more popular than you realized.\n\n");
					result.screens[3].attach("\"'Popular'.  Hah!  What a wonderful way to put it.\"", 2);

					result.backgrounds[4] = "dumont1";
					if (currentMusic == Music.DARKNESS || currentMusic == Music.BEACH || currentMusic == Music.HOME) {
						result.tracks[4] = Music.ADVERTISING;
					}
					result.screens[4].attach("\"If you want to become even more popular, then I have a business proposal for you.\"\n\n", 2);
					result.screens[4].attach("Is that why " + heShe(2) + " invited you up here?\n\n");
					result.screens[4].attach("\"Not originally, no.  But now that I see you up close, I think you might be just what we need to bring in some more customers.  What do you think?  Do you want to work for me?\"\n\n", 2);
					result.screens[4].attach("This is good timing.  You won't have to wait for somebody else to buy you a drink anymore.");

					result.backgrounds[5] = "club";
					result.characters[5] = new String[]{"dumont"};
					result.emotions[5] = new String[]{"Smug"};
					result.sounds[5] = Effect.RUSTLE;
					result.screens[5].attach("\"Wonderful.  Come along, then.  I'll introduce you to the shift manager and make sure you're given a flexible schedule that won't interfere with your studies.\"\n\n", 2);
					result.screens[5].attach("That quickly?\n\n");
					result.screens[5].attach("\"I'm quite sure that you'll be a perfect fit here.\"", 2);

					result.characters[6] = new String[0];
					result.screens[6].attach("You accompany " + DuMont() + " into the nightclub's office and get acquainted with the management and with the terms of your prospective employment.\n\n");
					result.screens[6].attach("At first, the pay here seems a bit disappointing, and you aren't convinced that it'll be worth your time.  But apparently the more charming bartenders are able to earn more in tips than they do from their regular wage.  If you get good at this, you might be able to secure some serious cashflow.");

					result.backgrounds[7] = "night";
					result.screens[7].attach(DuMont() + " heads back up to the VIP lounge while you get everything sorted with the manager.  Apparently you'll be able to get started here as soon as tomorrow night.  By the time you're done, the sky is already starting to brighten with the coming dawn.\n\n");
					result.screens[7].attach("On your way out, you run into " + DuMont() + " again.");

					result.characters[8] = new String[]{"dumont"};
					result.emotions[8] = new String[]{"Happy"};
					result.screens[8].attach("\"I'll look forward to seeing you around the club.  Feel free to come say hello anytime.  I like to have a few drinks here every night.  And be sure to let me know if you or the other workers are being treated poorly.\"\n\n", 2);
					result.screens[8].attach("For whatever reason, it really seems like " + DuMont() + " has taken a liking to you.  It might be awkward to be friends with your boss, but " + DuMont() + " is more like your boss's boss, so maybe it wouldn't be so bad.\n\n");
					if (currentPlaythrough.currentDay < classStartDay - 2) {
						result.screens[8].attach("\"But remember not to make a habit of staying up this late!  You'll be going back to class soon enough, after all.\"", 2);
					} else {
						result.screens[8].attach("\"But don't stay up too late!  ", 2);
						if (weekDayNumber() == 5 || weekDayNumber() == 6) {
							result.screens[8].attach("If you ruin your sleep schedule, you'll be regretting it on Monday.\"", 2);
						} else {
							result.screens[8].attach("You do have class tomorrow.\"", 2);
						}
					}

					result.characters[9] = new String[0];
					result.screens[9].attach(DuMont() + " climbs into the back of a limousine, and it drives away.  ");
					if (currentPlaythrough.currentDay == 0) {
						result.screens[9].attach("This really was an eventful day.  You ");
					} else {
						result.screens[9].attach("Maybe you should have come here sooner.  But for now, you ");
					}
					result.screens[9].attach("should probably take " + hisHer(2) + " advice.");
					if (currentPlaythrough.weeklyActions[weekDayNumber()][5].relationship == 0) {
						result.screens[9].attach("  Right after you're done hanging out with " + Hashimoto() + "...");
					}
				}
			} else if (g.tier == 1) {
				result = new Scene(20);
				
				result.backgrounds[0] = "club";
				result.screens[0].attach("Tonight, you've accepted another of " + DuMont() + "'s invitations to treat you to a meal at the nightclub.  The food hasn't arrived yet, but that's fine, because you and " + DuMont() + " have plenty to talk about.  " + HeShe(2) + " seems to enjoy hearing the mundane stories of your life, and in return " + heShe(2) + "'s happy to share " + hisHer(2) + " own perspective as a somewhat older " + manWoman(2) + " who's been there and done it all before.");
				
				result.characters[1] = new String[]{"dumont"};
				result.emotions[1] = new String[]{"Smug"};
				result.screens[1].attach("\"It's important to maintain a sense of perspective.  All the drama and little disagreements that seem so serious today will be forgotten in a matter of years if not months.  The part that matters is to develop your skills and your understanding of the world.  You're figuring out the kind of person you want to become for the rest of your life.\"\n\n", 2);
				if (currentPlaythrough.personStatus[5] != Locale.COLLEGETOWN) {
					result.screens[1].attach("You've learned that there's no point in trying to get " + DuMont() + " to take more of an active role in tracking down " + Tanaka() + ".  " + HeShe(2) + "'s firm in maintaining that you should be realistic and focus on your own happiness.  ");
				} else {
					result.screens[1].attach("Even when you try to ask about " + DuMont() + "'s own life, " + heShe(2) + " somehow always turns the subject of the conversation back to you.  ");
				}
				result.screens[1].attach("But just getting " + DuMont() + "'s advice about mundane matters is fine too.  On top of the general wisdom that " + hisHer(2) + " experience has brought " + himHer(2) + ", " + DuMont() + " is also full of useful tips for managing money.\n\n");
				
				result.emotions[2] = new String[]{"Neutral"};
				result.screens[2].attach("You're about to try to turn the conversation in that direction, but you're interrupted by the sound of " + DuMont() + "'s phone.  " + HeShe(2) + " looks down to check it, then frowns.\n\n");
				result.screens[2].attach("\"I'm sorry.  I need to take this.\"", 2);
				
				result.characters[3] = new String[0];
				result.screens[3].attach(HeShe(2) + " leaves the table to take the call in private.  You idly wonder what it might be.  Something business-related, perhaps?  You've gathered that " + DuMont() + " has ownership of multiple other commercial enterprises and sits on more than one board of directors.\n\n");
				result.screens[3].attach("Whatever it is, the news seems to be grim.  When " + DuMont() + " returns to the table, " + heShe(2) + " doesn't look happy.");
				
				result.characters[4] = new String[]{"dumont"};
				result.emotions[4] = new String[]{"Neutral"};
				result.screens[4].attach("\"Something came up, and I need to leave.  I really am sorry.\"\n\n", 2);
				result.screens[4].attach("That's too bad.  But if " + heShe(2) + " needs to deal with " + hisHer(2) + " own work, then it's certainly more important than just hanging out and chatting here.  You can always go home and microwave something for yourself.\n\n");
				result.screens[4].attach("\"No, no, I couldn't possibly send you home hungry after offering to treat you to dinner.  I'll pay your tab before I head out, and...\"", 2);
				
				result.emotions[5] = new String[]{"Uncomfy"};
				result.screens[5].attach(DuMont() + " suddenly trails off, " + hisHer(2) + " expression thoughtful.\n\n");
				result.screens[5].attach("\"Actually, I suppose I could bring you with me, and we could eat together there.  I'll have my driver bring you back to the city so you don't miss your bedtime.  What do you think?\"\n\n", 2);
				result.screens[5].attach("You aren't quite sure where " + DuMont() + " wants to bring you, ");
				if (currentPlaythrough.weeklyActions[weekDayNumber()][5].baseCost.compareTo(BigInteger.ZERO) >= 0) {
					result.screens[5].attach("and you weren't exactly planning on sleeping tonight, but ");
				} else {
					result.screens[5].attach("but you don't have any other plans tonight, and ");
				}
				result.screens[5].attach("you're a little bit curious about " + DuMont() + "'s business, so you accept.");
				
				result.emotions[6] = new String[]{"Happy"};
				result.screens[6].attach("\"Wonderful!  I'll make the arrangements on the way.\"\n\n", 2);
				result.screens[6].attach("You follow " + DuMont() + " out of the nightclub and into " + hisHer(2) + " limousine.  You sit across from " + DuMont() + " in the large passenger compartment, and the driver takes you out onto the road.");
				
				result.backgrounds[7] = "black";
				result.tracks[7] = Music.SILENCE;
				result.characters[7] = new String[0];
				result.screens[7].attach("The ride takes a little while, but " + DuMont() + " is too busy to make much conversation.  " + HeShe(2) + " holds " + hisHer(2) + " phone in both hands, rapidly typing messages and frowning in concentration.  The passenger compartment is silent except for the rumble of the limousine's engine.\n\n");
				result.screens[7].attach("There's not much traffic at this hour.  Outside the window, the downtown lights give way to the dark silhouettes of suburban houses, and then to the trees and hills of the outskirts of the city.  Finally, you pull into the driveway of a large manor.");
				
				result.screens[8].attach(DuMont() + " goes ahead of you, assigning a couple of servants to take care of you while " + heShe(2) + " heads off to deal with whatever needs to be done.  So, this is actually " + DuMont() + "'s own home?\n\n");
				result.screens[8].attach("It was too dark to get a good look at the outside of the mansion.  But now that you're inside...");
				
				result.backgrounds[9] = "mansion";
				result.tracks[9] = Music.LIFE;
				result.screens[9].attach("It's certainly opulent enough.  The halls are lined with fine art, and as you're brought into the parlor, your first impression is that the amenities look almost too fine to use.  The cushion on that chair looks comfortable enough, but how much value will it lose if somebody actually sits on it?  The pitcher of water looks so delicate and pristine that your fingerprints alone might be enough to ruin it.\n\n");
				result.screens[9].attach("The treatment from the mansion's staff also puts you on edge.  They're so courteous that it leaves you feeling like you're pretending to be somebody important.  After leading you into the parlor, the pair of serving girls bow to you and excuse themselves, leaving you alone with " + DuMont() + "'s elderly butler.");
				
				result.characters[10] = new String[]{"butler"};
				result.screens[10].attach("Fortunately, the butler seems to sense your discomfort.  He gestures for you to sit down.\n\n");
				result.screens[10].attach("\"Please be at ease, young " + masterMistress(-1) + ".  The furnishings are here to be used.  " + misterMadame(2) + " " + DuMont() + " will be disappointed if you don't enjoy them.\"\n\n");
				result.screens[10].attach("Will " + heShe(2) + " really?  It wasn't like " + heShe(2) + " had planned on inviting you here.  This was some sort of last-minute emergency, and " + heShe(2) + "'s seemed distracted ever since it came up.  Maybe you were actually supposed to be sent to a slightly less fancy sitting room?\n\n");
				result.screens[10].attach("\"Certainly not.  If " + misterMadame(2) + " " + DuMont() + " invited you here for dinner, then it's because " + heShe(2) + " thinks of you as a friend and wants you to be happy here.  As soon as " + heShe(2) + "'s taken care of the matter that came up, " + heShe(2) + "'ll come here and tell you as much " + himHer(2) + "self.\"");
				
				result.screens[11].attach("It sounds like the butler knows about whatever it is that " + DuMont() + "'s dealing with right now.  Just what sort of emergency was it?  You had assumed it was something business-related, but it doesn't make sense for " + DuMont() + " to need to return home for something like that.\n\n");
				result.screens[11].attach("\"Oh, no, it's nothing to do with " + hisHer(2) + " businesses.  It's just a minor household-related emergency.  One of the new maids has developed a bit of emotional dependence toward " + misterMadame(2) + " " + DuMont() + ", and she sometimes suffers from panic attacks.  When she gets like that, only " + misterMadame(2) + " " + DuMont() + " can calm her down.\"\n\n");
				result.screens[11].attach("Wait, so " + DuMont() + " drops everything on the spot when " + hisHer(2) + " maid asks for " + himHer(2) + "?  That doesn't seem like a normal employer-employee relationship.  Is something else going on between the two of them?\n\n");
				result.screens[11].attach("\"No more than is going on between " + misterMadame(2) + " " + DuMont() + " and the rest of the serving staff.  " + HeShe(2) + " prefers to hire those who... hum, those who might have some trouble finding employment elsewhere.  Obviously, it's not a replacement for professional help, and " + misterMadame(2) + " " + DuMont() + " makes it so that getting the appropriate medical treatment is a condition of their employment here.  But in the process, it's inevitable that some of them will come to view " + himHer(2) + " as... well, sort of a " + fatherMother(2) + " figure.\"");
				
				result.screens[12].attach("It sounds nice on the surface, but it's still a very strange arrangement.  Even though " + DuMont() + " has been kind enough to you, it's hard to believe that " + heShe(2) + "'s really doing something like that out of the goodness of " + hisHer(2) + " heart.  The mentally ill shouldn't be relying on their employer to look after them.  And even if " + DuMont() + "'s intentions are actually pure, it wouldn't make for a very harmonious workplace.\n\n");
				result.screens[12].attach("\"Things can get chaotic at times, but I can hardly complain.  If not for " + misterMadame(2) + " " + DuMont() + "'s kindness, I'd still be living on the street too.\"\n\n");
				result.screens[12].attach("Really?  You had gotten the impression that this guy was some sort of hereditary retainer whose forefathers had been serving " + DuMont() + "'s family for generations.\n\n");
				result.screens[12].attach("\"Hah!  Wouldn't that be something!?\"\n\n");
				result.screens[12].attach("The butler's professional demeanor slips, but he quickly recovers.");
				
				result.screens[13].attach("\"Ahem.  I spent most of my life as an ironworker.  After I hurt my back, I became dependent on opiates.  And in order to support my addiction, I... began doing some very shameful things.  " + misterMadame(2) + " " + DuMont() + " found me at the low point of my life and offered me a chance to turn it all around.\"\n\n");
				result.screens[13].attach("You would not have guessed that the butler was a former ironworker.\n\n");
				result.screens[13].attach("\"Yes, well, as luck would have it, I turned out to have a bit of talent for managing a large household.  With time, I found it quite natural to settle into the role.  I've been doing this for a fair few years now.  In truth, I have more than enough money to retire, but somebody needs to keep things orderly around here.  I'm just waiting until I can find a suitable successor.\"");
				
				result.characters[14] = new String[]{"butler", "dumont"};
				if (currentPlaythrough.personGenders[2].presentation() == Gender.FEMALE) {
					result.modifiers[14] = new Modifier[]{null, Modifier.SHORT};
					result.modifiers[15] = new Modifier[]{null, Modifier.SHORT};
					result.modifiers[16] = new Modifier[]{null, Modifier.SHORT};
					result.modifiers[17] = new Modifier[]{null, Modifier.SHORT};
					result.modifiers[18] = new Modifier[]{null, Modifier.SHORT};
				}
				result.emotions[14] = new String[]{"", "Neutral"};
				result.screens[14].attach("\"Is that so?  I seem to recall you saying that you had no idea what you'd do with yourself if I found another butler.\"\n\n", 2);
				result.screens[14].attach(DuMont() + " strides into the room, catching both you and the butler off-guard.\n\n");
				result.screens[14].attach("\"I-I can have more than one reason for not wanting to retire just yet!\"");
				
				result.emotions[15] = new String[]{"", "Blush"};
				result.screens[15].attach("That was fast.  Was " + DuMont() + " able to calm the maid down?\n\n");
				result.screens[15].attach("\"Horace.  I believe I recall telling you that loose lips are a poor quality for a butler.\"\n\n", 2);
				result.screens[15].attach("\"Of course, " + misterMadame(2) + " " + DuMont() + ".  But you've also told me that it's vital for a butler to build rapport with the staff who serve under him.\"\n\n");
				result.screens[15].attach("\"What does that have to do with this?\"\n\n", 2);
				result.screens[15].attach("\"I assumed that you brought the young " + masterMistress(-1) + " here to offer " + himHer(-1) + " a job as a household servant.  For what it's worth, I approve.\"");
				
				result.emotions[16] = new String[]{"", "Smug"};
				result.screens[16].attach("\"Oh, heavens, no.  As much as I'd enjoy seeing " + himHer(-1) + " around the mansion, it would be a terrible waste of " + hisHer(-1) + " talent.  I've already found a spot for " + himHer(-1) + " at the nightclub.\"\n\n", 2);
				result.screens[16].attach("\"Shouldn't it be up to the young " + masterMistress(-1) + " " + himHer(-1) + "self to decide where " + hisHer(-1) + " talents are best used?\"\n\n");
				result.screens[16].attach("The two of them both turn in your direction.  You'd have been happy to let them keep saying nice things about you, but you suppose you should take part in the conversation too.  You're expected to have your own input and your own questions.\n\n");
				result.screens[16].attach("For example: How much would the job pay?");
				
				result.emotions[17] = new String[]{"", "Neutral"};
				result.screens[17].attach("\"More than the standard rate for a bartender, I'm sure.\"\n\n");
				result.screens[17].attach("\"But the work is harder, and it likely comes out to less after tips.\"\n\n", 2);
				result.screens[17].attach("\"The hours are more flexible, though.\"\n\n");
				result.screens[17].attach("\"I don't want to interfere with " + hisHer(-1) + " studies.\"\n\n", 2);
				result.screens[17].attach("\"All the better, then!  An afternoon shift here would let " + himHer(-1) + " get to bed at a more reasonable hour.\"");
				
				result.emotions[18] = new String[]{"", "Happy"};
				result.screens[18].attach("This sounds like a complicated decision.  You aren't quite ready to commit just yet.\n\n");
				result.screens[18].attach("\"That's right.  And in the first place, you're not here as an employee tonight.  You're a guest.  For now, let's just enjoy our dinner together.\"\n\n", 2);
				result.screens[18].attach("\"Simply let me know if you ever want to hear more about what it would be like to work here.\"");
				
				result.characters[19] = new String[0];
				result.screens[19].attach("Eventually, the butler takes his leave, allowing you and " + DuMont() + " to dine in peace.  You now have something else to think about, though.  The pay aside, working among " + hisHer(2) + " servants would give you a chance to get to know " + DuMont() + " better.  That could be quite the nice perk.");
			} else if (g.tier == 2) {
				result = new Scene(15);

				result.tracks[0] = Music.LIFE;
				result.backgrounds[0] = "mansion";
				result.screens[0].attach("Today is a special occasion.  ");
				if (getGoalLevel(11, true) > 0) {
					result.screens[0].attach("Up until this point, most of the time you've spent with " + DuMont() + " has been in the role of " + hisHer(2) + " employee.  ");
				} else {
					result.screens[0].attach("Up until this point, the time you've spent with " + DuMont() + " has been very casual, meeting up whenever you both happen to be visiting the nightclub at the same time.  ");
				}
				if (getCurrentAction().attribute == 2) {
					result.screens[0].attach("But when you showed up for work today, " + heShe(2) + " approached you with an invitation to have a different sort of rendezvous.\n\n");
				} else {
					result.screens[0].attach("But when you met up with " + himHer(2) + " today, " + heShe(2) + " immediately invited you back to " + hisHer(2) + " mansion to discuss a very different sort of rendezvous.\n\n");
				}
				result.screens[0].attach("Apparently " + DuMont() + " is a member of a very exclusive country club, and " + heShe(2) + " goes there often to network with other wealthy socialites.  But " + heShe(2) + "'s tired of going alone, so " + heShe(2) + "'d like you to accompany " + himHer(2) + "; not as an employee, but as a companion.");

				result.characters[1] = new String[]{"dumont"};
				result.emotions[1] = new String[]{"Happy"};
				result.screens[1].attach("It sounds suspiciously like a date.\n\n");
				result.screens[1].attach("\"Well, it's true that I look forward to seeing the look on everyone's faces when I walk in with such a cute " + boyGirl(-1) + " at my side.  But I won't ask you to pretend that there's any romance between the two of us.\"\n\n", 2);
				result.screens[1].attach(HeShe(2) + " almost sounds wistful about that.  Does " + DuMont() + " actually wish that there was romance between the two of you?  Before you can figure out how to phrase the question, " + heShe(2) + "'s already continuing onward.\n\n");
				result.screens[1].attach("\"You should just think of this as your debut to high society.  The social circles of the powerful are invitation-only.  No matter how much money you have, there's only so much you can do with it unless you know the right people.\"", 2);

				result.emotions[2] = new String[]{"Smug"};
				result.screens[2].attach("\"Some of the bigger lottery jackpots can put a person's net worth higher than your average country club member.  But they still live in completely different worlds.  If you're a member of high society, then you can call up a politician and make a 'campaign contribution', and you can rest assured that any disputes you have with the city will be resolved.  Drunk driving charges will disappear, homeless encampments near your property will be cleaned up, and so on.  A lottery winner who tried the same thing would be laughed out of the room.\"\n\n", 2);
				result.screens[2].attach("Even if " + DuMont() + " introduces you to high society, you don't exactly have the cash to make that kind of 'campaign contribution'.\n\n");
				result.screens[2].attach("\"Perhaps not yet.  But I'm sure that you're destined for great things.\"", 2);

				result.emotions[3] = new String[]{"Neutral"};
				result.screens[3].attach("\"The embarrassing fact is that I have no special talents, nothing I'm particularly good at.  I was born into money, that's all.  But you're different.\"\n\n", 2);
                result.screens[3].attach("You've personally watched " + DuMont() + " negotiate business deals with other investors ");
                if (getGoalLevel(11, false) > 0) {
                    result.screens[3].attach("during your time serving " + himHer(2) + ".  ");
                } else {
                    result.screens[3].attach("here at the nightclub.  ");
                }
                result.screens[3].attach("Not to mention that " + hisHer(2) + " tips regarding how you should handle your own finances have proven useful.  That seems like it should qualify as a talent.\n\n");
                result.screens[3].attach("\"Anybody would pick up a few tricks after spending a couple of decades as a millionaire.  It's less of a talent and more of... just happening to end up in a position where I could exert some influence on the world.  There's no shortage of people telling factories to treat their employees better and try to cut down their pollution.  The only difference is that I can buy them up and force them to listen.\"", 2);

				result.emotions[4] = new String[]{"Smug"};
				result.screens[4].attach("And where does the nightclub fit into this plan?  Did " + DuMont() + " have a reason for buying it up?\n\n");
				result.screens[4].attach("\"Of course.  It was the perfect place to keep watch for young people who were down on their luck, who were desperate for a helping hand.  They have their whole lives ahead of them, and their problems are often really not that expensive to solve, relatively speaking.  It's the most efficient place to leverage my wealth to give as much help to as many people as possible.\"\n\n", 2);
				if (loopActionFirstUsed(Action.DANCE, currentPlaythrough) <= classStartDay || currentPlaythrough.personStatus[5] == Locale.COLLEGETOWN) {
					result.screens[4].attach("Was that " + DuMont() + "'s reason for approaching you back when you first went there?\n\n");
					result.screens[4].attach("\"Hah!  No, I had a very different reason for taking an interest in you.\"\n\n", 2);
					if (currentPlaythrough.personStatus[5] != Locale.COLLEGETOWN) {
						result.screens[4].attach("And then, after " + Tanaka() + "'s abduction, you actually did end up in a desperate situation.  If " + DuMont() + " hadn't offered you a job, you might have been tempted to make some cash through more underhanded means.  " + HeShe(2) + " helped you as much as " + heShe(2) + " could, short of blowing a significant chunk of " + hisHer(2) + " fortune on an international manhunt.");
					} else {
						result.screens[4].attach("By now, you know better than to press " + DuMont() + " on what exactly that reason was.  " + HeShe(2) + " always gets coy when you ask " + himHer(2) + " what made " + himHer(2) + " single you out from the crowd.");
					}
				} else {
					result.screens[4].attach("And you were just another of those desperate people.  The only difference is that your problems were expensive enough that it wasn't 'efficient' for " + DuMont() + " to sweep in and solve them - but you refrain from mentioning that thought to " + DuMont() + ".  You know that " + heShe(2) + " already feels guilty about not being able to help more with " + Tanaka() + "'s situation.");
				}

				result.emotions[5] = new String[]{"Happy"};
				result.screens[5].attach("How many others has " + DuMont() + " summoned up to the VIP section in order to offer " + hisHer(2) + " help?\n\n");
				result.screens[5].attach("\"Dozens.  But you're different from all of them.  Even without my help, I think you'd be able to accomplish great things someday.  But why should the world have to wait?  With someone to introduce you to high society, you should be able to get an early start on your rise to prominence.\"\n\n", 2);
				result.screens[5].attach("What gives " + DuMont() + " so much confidence in your future?\n\n");
				result.screens[5].attach("\"In the time we've spent together, I've been constantly impressed by your drive and adaptability.  You pick up new skills so quickly.  You're growing more capable by the day, so quickly that I can hardly believe it.\"\n\n", 2);
				if (currentPlaythrough.loops > 0) {
					result.screens[5].attach("Have you really been doing anything so impressive?  Actually, come to think of it, perhaps you have.  It feels like new concepts have been coming to you more easily lately, almost as if you're simply remembering how to do things you already knew how to do.");
				} else {
					result.screens[5].attach("You have been putting in quite a bit of effort to impress " + DuMont() + ".  Seems that it's been paying off.");
				}

				result.emotions[6] = new String[]{"Smug"};
				result.screens[6].attach("\"Don't be surprised if everyone looks down on you at first.  But once they get to know you, they'll come to see you as I do.  I'm sure of it.\"\n\n", 2);
				result.screens[6].attach(DuMont() + " continues to give you words of encouragement as you head out together to " + hisHer(2) + " limousine.");

				result.characters[7] = new String[0];
				result.backgrounds[7] = "black";
				result.screens[7].attach("During the ride to the country club, " + DuMont() + " gives you one last coaching session of what to expect and how to act in order to follow the unwritten rules of high society.  " + HeShe(2) + " shows you photographs of some of the more prominent members who might be there, millionaires and even billionaires whose wealth dwarfs that of " + DuMont() + " " + himHer(2) + "self.\n\n");
				result.screens[7].attach("But soon, " + DuMont() + "'s coaching has to come to an end, because the country club is just ahead.");

				result.backgrounds[8] = "country";
				result.screens[8].attach("For the next hour, " + DuMont() + " introduces you to each of " + hisHer(2) + " associates in turn.  " + HeShe(2) + " just refers to you as a 'friend'");
				if (getGoalLevel(11, false) > 0) {
					result.screens[8].attach(", making no reference to the fact that you're employed by " + himHer(2) + ", even though some of the other socialites here have visited " + DuMont() + "'s mansion before and have certainly seen you among the serving staff");
				}
				result.screens[8].attach(".\n\nYou notice that many of the other wealthy patrons of the country club have brought 'friends' of their own, almost all of which have an age gap no smaller than the one between yourself and " + DuMont() + ".\n\n");
				result.screens[8].attach("As " + DuMont() + " had warned you, the other socialites don't seem to think much of you.  At best, they look at you in the way that you'd view a stray animal that your friend brought home with " + himHer(2) + ".  At worst, they look at you in the same way as they look at the 'friends' brought by the other millionaires.  They're courteous enough to your face, but it's probably a good thing that you can't make out what they're saying to each other as soon as " + DuMont() + " is out of earshot.");

				result.characters[9] = new String[]{"dumont"};
				result.emotions[9] = new String[]{"Neutral"};
				result.screens[9].attach("\"It's actually going better than I had expected.  You've made a good first impression on the people who need to notice you.\"\n\n", 2);
				result.screens[9].attach("It seems like " + DuMont() + " has a plan.  What's the next step?\n\n");
				result.screens[9].attach("\"Keep coming out here with me on a regular basis.  Become a familiar face to them.  Once they forget to immediately dismiss your words as pointless, they'll start to realize that you're worth listening to.\"\n\n", 2);
				result.screens[9].attach("Maybe that would work, but it's hard to feel motivated to prove yourself to these people.  If they're so shallow, then is it really worth earning their respect?");

				result.emotions[10] = new String[]{"Smug"};
				result.screens[10].attach("\"It's true that they're mostly superficial people whose respect has no inherent value.  But once they respect you, they'll start wanting to make use of you.\"\n\n", 2);
				result.screens[10].attach("Is that supposed to be a good thing?  Having those people try to manipulate you might be even worse than being ignored by them.\n\n");
				result.screens[10].attach("\"Ah, but once they want to make use of you, you can exploit that to make use of them in turn.\"\n\n", 2);
				result.screens[10].attach("It's a bit unusual to hear " + DuMont() + " coldly talk about 'making use of' people.\n\n");
				result.screens[10].attach("\"Like I said, there are some skills that just come naturally after a couple of decades of being a millionaire.\"", 2);

				result.emotions[11] = new String[]{"Neutral"};
				result.screens[11].attach("\"Though, of course it's up to you in the end.  There's a hierarchy in this place, and I'm not even close to the top of it.  In order to gain the ear of your 'betters', you need to bow your head and give them undeserved respect.  I wouldn't blame you at all for deciding that it's not worth it.\"\n\n", 2);
				result.screens[11].attach("You have noticed that " + DuMont() + " behaves in an oddly deferential way toward some of the other socialites here, almost as if " + heShe(2) + "'s their servant.  Why does " + heShe(2) + " humble " + himHer(2) + "self like that?\n\n");
				result.screens[11].attach("\"Because I can't afford to offend them.  No matter how much money you have, you can't make a business deal unless the other side is willing to come to the table.  And really, the amount of money I have isn't that much compared to some of the people here.\"", 2);

				result.emotions[12] = new String[]{"Uncomfy"};
				result.screens[12].attach("\"If I make an enemy of the more powerful people here, then they'll kick me out of this little group.  And anybody else who did business with me would risk getting kicked out as well.\"\n\n", 2);
				result.screens[12].attach("They'd be willing to lose access to " + DuMont() + "'s money just to get back at " + himHer(2) + " for offending them?\n\n");
				result.screens[12].attach("\"When you have more money than a person could ever spend, satisfying your own ego becomes more valuable than any number of business dealings.\"\n\n", 2);
				result.screens[12].attach("This room seems to be packed with overinflated egos.  It must be hard to tiptoe around without puncturing any of them.\n\n");
				result.screens[12].attach("\"It's nerve-racking.  I must admit that I've been giddy with excitement at the prospect of having you here with me to take the edge off.\"", 2);

				result.emotions[13] = new String[]{"Happy"};
				result.screens[13].attach("It's hard to say whether the promise of power here is worth the cost of your dignity.  But if it would make things easier for " + DuMont() + ", then that's plenty of reason to come along, at least every once in awhile.\n\n");
				result.screens[13].attach("\"I truly am grateful.  I promise that I'll make sure you have no reason to regret it.\"", 2);

				result.characters[14] = new String[0];
				result.screens[14].attach("The tedious introductions continue for another full hour, but afterward, " + DuMont() + " thanks you again for going along with it.  Now that you've watched how she deals with those even richer and more powerful than " + himHer(2) + "self, you've seen a new side of " + himHer(2) + ".\n\n");
				result.screens[14].attach("For your part, you need to decide just how willing you are to immerse yourself in this world of business.  " + DuMont() + " seems utterly convinced that you'll be able to reach your full potential here.  But is it worth it?");
			} else if (g.tier == 3) {
                result = new Scene(23);

                result.backgrounds[0] = "mansion";
                if (getGoalLevel(11, false) <= 2) {
                    result.screens[0].attach("The relationship you share with " + DuMont() + " is less of an employer-employee one and more of a personal friendship.  You aren't a regular worker at " + hisHer(2) + " mansion, and even if " + heShe(2) + "'s part-owner of the nightclub, your work as a bartender there doesn't involve directly reporting to " + himHer(2) + ".\n\n");
                    result.screens[0].attach("But you are still technically a part-time employee of " + hisHers(2) + ".  ");
                } else {
                    result.screens[0].attach("By now, your authority in the matters of " + DuMont() + "'s household is second only to the head butler himself.  " + DuMont() + " trusts you.  Whenever some problem comes up and you're the only one available, the other servants don't hesitate at all to bring the problem to you.\n\n");
                    result.screens[0].attach("Most of the time, you're able to handle those problems without even needing to trouble Horace or " + DuMont() + ".  ");
                }
                result.screens[0].attach("So, it isn't surprising when " + heShe(2) + " invites you for a special job.");

                result.characters[1] = new String[]{"dumont"};
                result.emotions[1] = new String[]{"Smug"};
                result.screens[1].attach("\"The resort has its own staff, but I find it more relaxing when I'm not having to deal with strangers.  And relaxation is the whole point, isn't it?\"\n\n", 2);
                result.screens[1].attach("Has " + DuMont() + " been feeling especially stressed lately?\n\n");
                result.screens[1].attach("\"Oh yes, terribly stressed.  I hardly know what to do with myself.  But a couple of hours in the spa should set me right.\"\n\n", 2);
                result.screens[1].attach("You can smell alcohol on " + DuMont() + "'s breath.  It's normal for " + himHer(2) + " to indulge in a few drinks over the course of the day, but for the smell to be this strong, " + heShe(2) + " really must be having a hard time dealing with something.");

                result.emotions[2] = new String[]{"Happy"};
                result.screens[2].attach("Of course, you'd be happy to help " + DuMont() + " deal with " + hisHer(2) + " stress.  Which other serving staff is " + heShe(2) + " bringing?\n\n");
                result.screens[2].attach("\"None of them.  It will just be the two of us.\"\n\n", 2);
                result.screens[2].attach("It's a little unusual, but you aren't too surprised.  If " + DuMont() + "'s stress comes from having to deal with people, with " + hisHer(2) + " servants and with business partners, then it makes sense that " + heShe(2) + "'d want " + hisHer(2) + " moments of relaxation to involve as few other people as possible.");

                result.characters[3] = new String[0];
                result.backgrounds[3] = "black";
                result.screens[3].attach(DuMont() + "'s driver takes the two of you to the nearby resort.  It's a spacious complex with luxurious facilities, but you don't see many other guests there.  Apparently you have to be a member to come here, with membership on an invite-only basis.  The exclusivity is part of the appeal.\n\n");
                result.screens[3].attach("In order to get you inside, " + DuMont() + " has you added to the membership roll.  The process is surprisingly painless.  One of the resort staff comes by to verify " + DuMont() + "'s credentials and take your personal information.  And just like that, you're officially a member of high society.\n\n");
                result.screens[3].attach("A glance at the price for the services here is enough to make your eyes pop, though.  You'd have a hard time relaxing if you knew that it was costing you that much.  But fortunately, you're actually being paid to come here today.");

                result.tracks[4] = Music.SILENCE;
                result.screens[4].attach(DuMont() + " leads you to the spa.  Normally, there are supposed to be staff here to give you massages and such, but this time, " + DuMont() + " has asked them to leave " + himHer(2) + " alone.  Apparently it really will just be the two of you.\n\n");
                if (currentPlaythrough.ownGender.presentation() == currentPlaythrough.personGenders[2].presentation()) {
                    result.screens[4].attach("You're a bit surprised when " + heShe(2) + " invites you into the changing room with " + himHer(2) + " and starts to strip without a hint of modesty.  ");
                } else {
                    result.screens[4].attach("You're a bit surprised when " + heShe(2) + " casually mentions on the way to the changing rooms that " + heShe(2) + " won't be wearing any clothes in there.  " + HeShe(2) + " seems to be hinting that you should strip too.  ");
                }
                if (getGoalLevel(11, true) <= 2) {
                    result.screens[4].attach("But in the course of your work getting " + himHer(2) + " up in the mornings, you've seen more of " + hisHer(2) + " body than a person would normally show in public.  Maybe it's only fair that you let your guard down too.\n\n");
                } else {
                    result.screens[4].attach("But " + heShe(2) + "'s more like your friend than like your employer, so it's doesn't feel too weird to be in a situation like this.  At least, it doesn't bother you.\n\n");
                }
                result.screens[4].attach("You wrap yourself in a towel and join " + DuMont() + " in the spa.");

                result.backgrounds[5] = "dumont7";
                result.screens[5].attach(DuMont() + " is already soaking in the pool.  The water is steaming hot.  " + HeShe(2) + " raises " + hisHer(2) + " glass to you as you enter.\n\n");
                result.screens[5].attach("\"Get in, the water's fine.  I poured you a drink, too.\"\n\n", 2);
                result.screens[5].attach("Is it really alright for you to drink right now?\n\n");
                result.screens[5].attach("\"Of course it's alright.  Come on, it's lonely to drink alone.\"", 2);

                result.screens[6].attach("It just seems like there should be somebody sober here if " + DuMont() + " is going to be in the water.  That's why " + heShe(2) + " brought you were with " + himHer(2) + ", right?\n\n");
                result.screens[6].attach("\"I brought you with me because... I was lonely.  That's all.\"\n\n", 2);
                result.screens[6].attach("Is that what's been stressing " + himHer(2) + " out?  Loneliness?\n\n");
                result.screens[6].attach("\"Sometimes, being surrounded by too many people can be lonelier than actually being alone.\"", 2);

                result.screens[7].attach(DuMont() + " gives you a little smirk.\n\n");
                result.screens[7].attach("\"If you don't want to get in, then I suppose I could just get out.\"\n\n", 2);
                result.screens[7].attach("That won't be necessary.  You might not end up drinking, but at least you can join " + DuMont() + " in the pool.\n\n");
                result.screens[7].attach("You sit down on the pool edge and slide in, leaving the towel behind.  You had expected that " + DuMont() + " might avert " + hisHer(2) + " eyes a little to let you keep some modesty, but " + hisHer(2) + " eyes stay glued to you until your body is hidden beneath the surface of the water.");

                result.screens[8].attach("It actually feels really nice.  The warm water already seems to be melting away all the aches and tension of the day's work.  But it's hard to completely relax when you're 'on the clock'.\n\n");
                result.screens[8].attach("\"It's fine.  You have my permission to cut loose and enjoy yourself.  Forget about being my servant for awhile.\"\n\n", 2);
                result.screens[8].attach("That's easier said than done.  " + DuMont() + " is actually paying you to be here, after all.\n\n");
                result.screens[8].attach("\"Ah, that's what it always comes down to, isn't it?\"", 2);

                result.backgrounds[9] = "dumont8";
                result.screens[9].attach("\"I suppose it's the tradeoff for being able to live in a big house, having people to take care of my chores, being able to decide to spend a day lazing around in a private spa, being able to drink as much as I want...  It means that there's always a wall around me.\"\n\n", 2);
                result.screens[9].attach("There's a slight slur to " + DuMont() + "'s words.  Just how many drinks has " + heShe(2) + " had today?\n\n");
                result.screens[9].attach("\"It's nonsense.  I'm the last person to have any right to complain, but it's still nonsense.  All these rules about how you're supposed to treat people based on where the money is flowing from and where it's flowing to.  All to determine who gets to live where and have what.  Nonsense.\"\n\n", 2);
                result.screens[9].attach("It's a little hard to follow " + DuMont() + "'s rambling, but it seems like " + heShe(2) + " feels stifled by the awkwardness of employer-employee relationships.");

                result.screens[10].attach("What about making friends with people who aren't " + hisHer(2) + " employees?\n\n");
                result.screens[10].attach("\"I've tried.  But sooner or later, it always comes out that I have money, and then... they change.  They stop trying to improve their own lives, stop trying to help others.  They act like they hit the jackpot.\"\n\n", 2);
                result.screens[10].attach("Then what about making friends with other wealthy people?  There's nothing weird about socializing mostly within your own 'class'.\n\n");
                result.screens[10].attach("\"That's even worse!  They're all such... such hollow, superficial people.  They talk about wanting to improve our society, but their actions never match up...\"", 2);

                result.screens[11].attach("\"And the marriage offers!  They're absolutely incessant!\"\n\n", 2);
                result.screens[11].attach("Well, that's hardly surprising.\n\n");
                if (getGoalLevel(11, false) <= 2) {
                    result.screens[11].attach("\"I have my own plans for the rest of my life, and they don't involve helping some other business" + currentPlaythrough.personGenders[2].inverse().manWoman() + " grow " + currentPlaythrough.personGenders[2].inverse().hisHer() + " business empire even larger.\"\n\n", 2);
                    result.screens[11].attach("Not even if " + heShe(2) + " were in love with " + currentPlaythrough.personGenders[2].inverse().himHer() + "?\n\n");
                    result.screens[11].attach("\"None of them are my type.  ", 2);
                } else {
                    result.screens[11].attach("\"I've already told you about my plan for the rest of my life.  I plan to fade away gracefully, not join some other business" + currentPlaythrough.personGenders[2].inverse().manWoman() + "'s pointless quest to make " + currentPlaythrough.personGenders[2].inverse().hisHer() + " net worth even larger.\"\n\n", 2);
                    result.screens[11].attach("It's easy to say that now, but what if " + DuMont() + " were to actually fall for one of them?\n\n");
                    result.screens[11].attach("\"That would never happen.  ", 2);
                }
                result.screens[11].attach("I'm only interested in... 'powerful' " + menWomen(-1) + ".\"", 2);

                result.backgrounds[12] = "dumont7";
                result.screens[12].attach("If " + DuMont() + " likes powerful " + menWomen(-1) + ", then there shouldn't be any shortage of those in the business world.\n\n");
                result.screens[12].attach("\"Not that kind of 'power'.  If anything, being born into wealth makes you less likely to end up 'powerful'.  I know better than anyone that having money just... makes it easier to be lazy.  Just resisting that temptation takes everything you have...\"\n\n", 2);
                result.screens[12].attach("So when " + DuMont() + " says 'power', " + heShe(2) + "'s talking about strength of character?\n\n");
                result.screens[12].attach("\"Something like that.\"", 2);

                result.screens[13].attach("\"Someone... driven.  Unstoppable.  Mentally... and physically too, if I'm being honest.  ", 2);
                if (getAttributeLevel(4, false).intValue()*currentPlaythrough.upgradeLevels[4] >= 5) {
                    result.screens[13].attach("Intelligent.  ", 2);
                }
                if (getAttributeLevel(3, false).intValue()*currentPlaythrough.upgradeLevels[3] >= 5) {
                    result.screens[13].attach("And... maybe a little dangerous, too.\"\n\n", 2);
                } else {
                    result.screens[13].attach("But also... gentle.  Someone who chooses to make the world better for those fortunate enough to be part of " + hisHer(-1) + " life.\"\n\n", 2);
                }
                result.screens[13].attach("You realize abruptly that " + DuMont() + " isn't speaking in hypotheticals here.  " + HeShe(2) + "'s looking at you.  " + HeShe(2) + "'s talking about you.\n\n");
                result.screens[13].attach("In retrospect, maybe it should have been obvious when " + DuMont() + " wanted to get naked alone with you.  Despite all the nice things " + DuMont() + "'s saying about you, you might be a bit slow on the uptake.\n\n");
                result.screens[13].attach("\"Hah.  I like that innocence, too.  You don't realize just how amazing you are.\"\n\n", 2);
                if (getRoute() >= 0) {
                    result.screens[13].attach("It's just... awkward.  You already have a " + boyGirl(getRoute()) + "friend.");

                    result.screens[14].attach("\"Of course you do.  Ah, I was born too early.  Too early...\"\n\n", 2);
                } else {
                    result.screens[13].attach("You aren't quite sure how to respond.  And while you hesitate, the moment passes.");

                    result.screens[14].attach("\"Ah, I've said too much.  Don't mind me.  I know very well that... it wouldn't work out...\"\n\n", 2);
                }

                result.backgrounds[14] = "dumont9";
                result.screens[14].attach("You realize that while you were trying to think of what to say to " + DuMont() + ", " + hisHer(2) + " eyes were starting to drift closed.  Is " + heShe(2) + " alright?\n\n");
                result.screens[14].attach("\"Mm...\"\n\n", 2);

                result.screens[15].attach("And now " + heShe(2) + "'s starting to slide downward, into the water.  Is " + heShe(2) + " really passing out?\n\n");
                result.screens[15].attach("Before " + hisHer(2) + " head can go under, you surge forward to catch " + himHer(2) + ".");

                result.backgrounds[16] = "black";
                result.screens[16].attach(DuMont() + "'s body is light.  You have no trouble lifting " + himHer(2) + " up and onto the edge of the pool.  " + HeShe(2) + " really has gone completely limp.\n\n");
                result.screens[16].attach("With a little more difficulty, you bring " + himHer(2) + " into the dressing room, then wrap a towel around yourself and go find some of the resort staff to help " + himHer(2) + " out.");

                result.screens[17].attach("While they take care of " + DuMont() + ", you get yourself dressed and get out of their way so that a trained medic can look " + DuMont() + " over.  Apparently it's pretty normal for visitors here to get drunk and pass out when they relax in the hot water afterward.  Though, normally, the resort staff will be on-hand to watch over them.\n\n");
                result.screens[17].attach("The minutes stretch onward as you wait outside the dressing rooms.  You can't help but start to worry that something actually has gone wrong with " + DuMont() + "'s health.  But when " + heShe(2) + " finally emerges, " + heShe(2) + "'s walking without assistance, looking more sober and steady than " + heShe(2) + " had on the way here.  It looks like " + heShe(2) + " was taking a cold shower.");

                result.backgrounds[18] = "country";
                result.characters[18] = new String[]{"dumont"};
                result.emotions[18] = new String[]{"Blush"};
                result.tracks[18] = Music.LIFE;
                result.screens[18].attach("\"I really must apologize.  I crossed a line today.\"\n\n", 2);
                result.screens[18].attach("It's fine.  You hadn't realized that " + DuMont() + " was keeping all of that bottled up.\n\n");
                result.screens[18].attach("\"That's no excuse.  I... I tried to use my money to... to put you in a vulnerable position.  A position where I could do whatever I wanted with you...\"\n\n", 2);
                result.screens[18].attach(HeShe(2) + " did, but it was pretty clear that " + hisHer(2) + " heart wasn't in it.");

                result.emotions[19] = new String[]{"Neutral"};
                result.screens[19].attach("And more importantly, now that it didn't work, " + DuMont() + " shouldn't need to worry anymore.\n\n");
                result.screens[19].attach("\"Worry about what?\"\n\n", 2);
                result.screens[19].attach("About whether you're treating " + himHer(2) + " differently because of " + hisHer(2) + " money.  About whether you'll feel pressured to do what " + heShe(2) + " wants because of " + hisHer(2) + " money.");

                result.emotions[20] = new String[]{"Blush"};
                result.screens[20].attach("\"... Just what sorts of things was I saying while drunk out of my mind?\"\n\n", 2);
                result.screens[20].attach(HeShe(2) + " was talking about why " + heShe(2) + " was stressed out.  It wasn't the sort of thing you could ignore.\n\n");
                result.screens[20].attach("\"I'd really prefer if you'd forget all about it.\"\n\n", 2);
                result.screens[20].attach("Well, you can't.  But it should be fine, shouldn't it?  Now, you understand " + DuMont() + " a little better.  You should be able to be there for " + himHer(2) + " more now.  Not because you're being paid to, but because you're " + hisHer(2) + " friend.");

                result.emotions[21] = new String[]{"Happy"};
                result.screens[21].attach("\"You really do know just how to cheer me up.\"\n\n", 2);
                result.screens[21].attach("Is " + heShe(2) + " feeling better now?\n\n");
                result.screens[21].attach("\"Oh, don't worry about me.  You don't reach my age without learning how to deal with a little bit of heartbreak.\"", 2);

                result.characters[22] = new String[0];
                result.screens[22].attach("You feel like a barrier between you and " + DuMont() + " has faded away.  Now that " + heShe(2) + " no longer needs to conceal " + hisHer(2) + " feelings, things might actually become less awkward in the long run.\n\n");
                result.screens[22].attach("Even if things didn't turn out as " + heShe(2) + " had hoped, " + heShe(2) + " really does seem less stressed now.");
            }
        } else if (g.index == 7) {
            if (g.tier == 0) {
                result = new Scene(2);

                result.backgrounds[0] = "club";
                result.screens[0].attach("The orientation for your bartending job is complete, and now you're finally being trusted to tend the bar by yourself.  It's an interesting job.\n\n");
                result.screens[0].attach("Learning all the most common cocktails by heart so that you can prepare them without referring to a recipe is actually the easy part.  The real challenge is dealing with the people, making them feel welcome, and building a relationship where they feel like they can relax and let their guard down.  For many of them, the time spent making smalltalk while you mix drinks for them is the highlight of their day.");

                result.screens[1].attach("It's nothing like the regular social interaction with your friends, but you're starting to get the hang of it.  And as you start putting more effort into making your customers comfortable, you notice that the amount of money you receive in tips starts to go up too.  Maybe " + DuMont() + " was right about you having a talent for this.");
            }
		} else if (g.index == 8) {
			if (g.tier == 0) {
				result = new Scene(13);
				
				String house = "dump";
				if (getGoalLevel(9, false) > 0) {
					house = "cleaner";
				}
				
				result.backgrounds[0] = house;
				result.tracks[0] = Music.BEACH;
				result.screens[0].attach(Yumeno() + "'s original reason for inviting you to " + hisHer(1) + " house was to play video games together, but the more often you visit, the less often you find yourself doing that.  Your standard routine still involves jumping straight into a multiplayer game as soon as you arrive, but after playing a few rounds together, you're usually ready to take a break, and " + Yumeno() + " will want to get started on cooking dinner.\n\n");
				result.screens[0].attach(HeShe(1) + " always encourages you to keep playing without " + himHer(1) + ", but it feels awkward to be alone in someone else's room, so you'll follow " + himHer(1) + " out to the kitchen and chat with " + himHer(1) + " while " + heShe(1) + " cooks.  Usually, you end up having a discussion about whichever game you had been playing beforehand, which is often just as interesting as playing the game itself.\n\n");
				result.screens[0].attach("And meanwhile, you get to watch how " + Yumeno() + " cooks.");
				
				result.characters[1] = new String[]{"yumeno"};
				result.emotions[1] = new String[]{"Neutral"};
				result.screens[1].attach("It's still a very strange sight.  " + HeShe(1) + " always has " + hisHer(1) + " tablet computer in front of " + himHer(1) + " while cooking.  At first, you assumed that " + heShe(1) + " was using it to refer to a recipe or something.  But apparently " + heShe(1) + " has it all memorized.\n\n");
				result.screens[1].attach("Instead, " + heShe(1) + "'s playing a game on it even while " + heShe(1) + " cooks.  " + HeShe(1) + "'ll chop the vegetables, then make a move.  Put them in the pan, then make another move.  Stir them to stop them from sticking to the bottom, then make another move.\n\n");
				result.screens[1].attach("Apparently " + heShe(1) + " really likes multitasking.  Is that why " + heShe(1) + " brings " + hisHer(1) + " tablet with " + himHer(1) + " to Arcade Infinity?  Eventually, as you're taking your customary break after getting settled in at " + hisHer(1) + " house, you decide to ask " + himHer(1) + " about it.");
				
				result.emotions[2] = new String[]{"Happy"};
				result.screens[2].attach("\"That's right.  Even the most fast-paced game still has little pauses in the action where I can play a turn in another game.\"\n\n", 1);
				result.screens[2].attach("It's really surprising.  With how well " + heShe(1) + " plays, you'd never guess that " + heShe(1) + " was actually being distracted by trying to play another game at the same time.");
				
				result.emotions[3] = new String[]{"Neutral"};
				result.screens[3].attach("\"Well, they're completely different kinds of game.  Um, currently the game I've been playing on my tablet is a turn-based grand strategy game.  You give orders to your generals, decide whether you want to change any of your domestic policies, and then advance to the next day.  It has no realtime elements whatsoever.\"\n\n", 1);
				result.screens[3].attach("It doesn't exactly sound simple.\n\n");
				result.screens[3].attach("\"It's not.  But I can think about it while doing something else.  While we're playing that mecha game, I can think about my next move, because it doesn't take much brainpower to just aim my cannons at the enemy and pull the trigger.  Then, in between skirmishes, I quickly click ahead to the next turn on my tablet.  If we were playing a thoughtful turn-based game together, then I'd probably be playing a twitchy shooter on my tablet instead.\"", 1);
				
				result.emotions[4] = new String[]{"Pout"};
				result.screens[4].attach("Playing two games at once seems like it'd be exhausting.  Those little breaks in the action are supposed to be a chance to catch your breath and relax a little.  Is it really worth it to fill those gaps with another game?\n\n");
				result.screens[4].attach("\"I guess it depends on what you mean by 'worth it'.  Is it more fun?  Probably not.  But I'm getting more out of it this way.\"\n\n", 1);
				result.screens[4].attach("More of what?\n\n");
				result.screens[4].attach("\"More value.  More skills.  More experience.  My " + dadMom(-1) + " always said that successful people are the ones who manage to make every moment as productive as possible.\"", 1);
				
				result.emotions[5] = new String[]{"Neutral"};
				result.screens[5].attach("It's just strange to think of time spent gaming as 'productive'.\n\n");
				result.screens[5].attach("\"There's nothing strange about it.  Why do we feel the urge to play games in the first place?  It's our instinct to develop our skills.  Animals do it too.  The games that dogs and cats enjoy - chasing and catching toys - are basically just practice for the skills that they'd need to survive in the wild.\"\n\n", 1);
				result.screens[5].attach("Then at least the two of you will be prepared if your survival ever depends on your giant mecha piloting skills.\n\n");
				result.screens[5].attach("\"Even if it never comes to that, hand-eye coordination is never a bad thing to have.  Teamwork skills, too - you always see companies organizing teambuilding events for their employees, using games that obviously don't have any direct applicability to their work they do.  And in management and simulation games, the skills are even more obviously applicable to real life.  Even when the rules don't accurately reflect reality, just learning how to apply math to find the optimal strategy is still useful.\"", 1);
				
				result.emotions[6] = new String[]{"Happy"};
				result.screens[6].attach("It's a bit of a shock.  You had been approaching your gaming sessions as nothing but a carefree passtime, and you had assumed that " + Yumeno() + " felt the same way.  But this whole time, " + heShe(1) + "'s been focused on a real objective.  Is " + heShe(1) + " even enjoying this?\n\n");
				result.screens[6].attach("\"I enjoy building my skills.  Um, I like to win, obviously.  But it's not because I care about the end goal or unlocking the achievement or whatever.  It's because it lets me know that I've learned what the game has to teach me.  And then it's time to see if I can apply those skills to another game.  A lot of times, I'll already be able to master a game the first time I play it, because I've already mastered the skills associated with the game.\"\n\n", 1);
				result.screens[6].attach("Is it really that often that skills learned from one game can be applied to another?\n\n");
				result.screens[6].attach("\"If they can't be applied outside that one game, then they're not really skills.  And if they actually can be applied outside that one game, then they can probably be applied in real life, too.  After all, the things we need to do in order to be successful in real life are also basically just 'games'.  And I'm good at games.\"", 1);

				result.emotions[7] = new String[]{"Pout"};
				result.screens[7].attach("\"The only problem is that some skills can't really be learned from video games.  Like, people skills.  And being good at dealing with people is really, really important for being successful in real life!\"\n\n", 1);
				result.screens[7].attach("That is true.  Being good at dating sims certainly doesn't translate to actually being charismatic.\n\n");
				result.screens[7].attach("\"Exactly.  Seriously, I spent days and days playing dating sims, and it didn't get me anywhere at all, so I figured I'd... u-um...\"", 1);
				
				result.emotions[8] = new String[]{"Scared"};
				result.screens[8].attach(Yumeno() + " trails off, looking suddenly mortified.  Is " + heShe(1) + " that embarrassed about playing dating sims?  " + HeShe(1) + " didn't even specify whether they were pornographic ones.  Though, given " + hisHer(1) + " expression now, they probably were.\n\n");
				result.screens[8].attach("\"I, uh...  H-Hey, I guess I should actually get started on cooking, shouldn't I...?\"", 1);
				
				result.emotions[9] = new String[]{"Neutral"};
				result.screens[9].attach("Actually, you had been planning on changing up the usual routine, and now seems like as good a time as any to bring it up.  You suggest to " + Yumeno() + " that " + heShe(1) + " take a break and play some games while you handle the cooking for today.\n\n");
				result.screens[9].attach("\"Huh?  You know how to cook?\"\n\n", 1);
				if (getGoalLevel(11, false) >= 2) {
					result.screens[9].attach("You do, but by watching " + Yumeno() + ", you've learned some new recipes, and you want " + himHer(1) + " to judge how well you can replicate them.  ");
				} else {
					result.screens[9].attach("Well, you originally didn't.  But after carefully watching " + Yumeno() + ", you think you're ready to try it out.  ");
				}
				
				result.screens[9].attach("After all, it's not like you can expect " + Yumeno() + " to cook for you every day.\n\n");
				result.screens[9].attach("\"Oh.  R-Right, of course not...\"", 1);
				
				result.backgrounds[10] = "black";
				result.characters[10] = new String[0];
				result.screens[10].attach("You and " + Yumeno() + " continue to chat while you get to work making today's meal.  " + HeShe(1) + " stands back and gives you a chance to demonstrate that you've learned how to do it on your own.\n\n");
				result.screens[10].attach("In the end, all you're really doing is copying " + Yumeno() + " step-by-step.  " + HeShe(1) + "'s talked before about how " + heShe(1) + " made " + hisHer(1) + " own improvisations and adjustments based on your tastes, and you aren't confident enough to try something like that yet.  But you do feel a sense of accomplishment when the meal is ready to be served.");
				
				result.backgrounds[11] = house;
				result.characters[11] = new String[]{"yumeno"};
				result.emotions[11] = new String[]{"Pout"};
				result.modifiers[11] = new Modifier[]{Modifier.CLOSEUP};
				result.screens[11].attach("But when you sit down next to " + Yumeno() + " eat it, " + heShe(1) + " doesn't exactly look happy.  It tastes fine to you, but is it possible that you did something wrong?\n\n");
				result.screens[11].attach("\"No.  It's really good.  As good as what I make, even though you're just a beginner.\"\n\n", 1);
				result.screens[11].attach("Then what's wrong?\n\n");
				result.screens[11].attach("\"I'm realizing that I should start taking this more seriously.\"", 1);
				
				result.characters[12] = new String[0];
				result.screens[12].attach(Yumeno() + " really does have a surprisingly competitive side.  Fortunately, " + heShe(1) + " brightens up again as you continue eating and playing together, and the two of you have a good time.\n\n");
				result.screens[12].attach("And now you've picked up another skill that you can use even when staying home for the day.  It beats living on fast food.");
			}
		} else if (g.index == 9) {
			if (g.tier == 0) {
				result = new Scene(21);
				
				result.backgrounds[0] = "cleaner";
				result.screens[0].attach("Today should hopefully be the day that you 'finish' cleaning up " + Yumeno() + "'s house.  It's a big building, and there are a few side rooms that are still horribly cluttered, but at least all the food waste will be gone, and you'll be able to walk down the main hallways without needing to step around piles of trash.  " + Yumeno() + " has said that " + heShe(1) + "'s fine with handling the less urgent stuff on " + hisHer(1) + " own.");
				
				result.characters[1] = new String[]{"yumeno"};
				result.emotions[1] = new String[]{"Neutral"};
				result.screens[1].attach("And you think that " + Yumeno() + " really will be able to handle the rest on " + hisHer(1) + " own.  Surprisingly, " + heShe(1) + " wasn't bluffing at all about " + hisHer(1) + " encyclopedic knowledge of cleaning.  "  + HeShe(1) + " knew exactly which products to use in order to get the stains out of each material and surface, and you've learned a thing or two about fabric care from the way that " + heShe(1) + " sorted all of the discarded clothes according to which cleaning methods were appropriate for the material.  " + Yumeno() + "'s skills as a maid may be even greater than " + hisHer(1) + " skills as a cook.\n\n");
				result.screens[1].attach("Even so, " + heShe(1) + " definitely needed your help.  " + Yumeno() + " has neither the strength nor the stamina to keep doing this all day.  Before long, " + heShe(1) + " always ends up exhausted and out of breath.  The two of you had to work together to move some of the heavier furniture in order to clean around them, too.  You've caught " + himHer(1) + " mumbling about how " + heShe(1) + " needs to study effective workout methods next.");
				
				result.emotions[2] = new String[]{"Pout"};
				result.screens[2].attach("\"Alright, this pile of junk is the 'final boss'.  Let's do it!\"\n\n", 1);
				result.screens[2].attach("The two of you get to work sorting the last bit of the garbage left in the living room.  Fortunately, it's not as bad as some of the messes you've already dealt with here.  Working your way through the house has been like stepping back through time.  The receipts from the boxes of delivery food mixed into the clutter have been dated further and further back, month by month.  It seems like " + Yumeno() + "'s living habits have been getting worse over time, which means that the older messes are actually easier to deal with.\n\n");
				result.screens[2].attach("And this mess is one of the oldest, dated to almost two years ago.  This corner of the room had been rendered inaccessible by the piles of garbage that had grown around it, and that had kept it from getting any worse.  It's mostly a tangle of electrical cords and discarded clothes, with only a little bit of decomposed pizza sticking them together.  You and " + Yumeno() + " execute a pincer attack on the target, working from opposite sides of the pile as you coil up the wires and sort the clothes by material.");
				
				result.emotions[3] = new String[]{"Neutral"};
				result.modifiers[3] = new Modifier[]{Modifier.CLOSEUP};
				result.screens[3].attach("At the very end, you and " + Yumeno() + " meet up in the middle of where the pile once stood.  When the last tangle of cords is moved away, it reveals a blocky handheld gaming system.  " + Yumeno() + " picks it up.\n\n");
				result.screens[3].attach("\"That brings back memories.  How old was I when I first played this one?\"\n\n", 1);
				result.screens[3].attach("It looks really old.  Is it actually an antique?\n\n");
				result.screens[3].attach("\"Yeah.  My grandparents bought it for my " + dadMom(-1) + ", and then " + heShe(-1) + " passed it down to me.  I think this might actually have been the first video game system I played.\"\n\n", 1);
				result.screens[3].attach("Really?  So " + heShe(-1) + " wanted to introduce " + Yumeno() + " to the games " + heShe(-1) + " enjoyed as a kid?\n\n");
				result.screens[3].attach("\"I think it's more that " + heShe(-1) + " needed something to keep me busy while " + heShe(-1) + " was talking with investors.\"", 1);
				
				result.emotions[4] = new String[]{"Happy"};
				result.modifiers[4] = new Modifier[]{Modifier.CLOSEUP};
				result.screens[4].attach("\"A-Anyway, we're already done for the day, so I guess now it's time to get cleaned up!\"\n\n", 1);
				result.screens[4].attach("With how messy " + Yumeno() + "'s house was, it was inevitable that the two of you would get pretty messy yourselves while cleaning it.  The house has two large bathrooms, each with its own shower, and " + Yumeno() + " has been lending you one of them so that you can wash yourself off without having to go all the way home.  You've even brought over a spare change of clothes for yourself.\n\n");
				result.screens[4].attach("But because the mess wasn't so bad today, you actually aren't really dirty.  You can probably just give your hands a thorough scrubbing and then spend the rest of the morning playing games with " + Yumeno() + ".");
				
				result.emotions[5] = new String[]{"Scared"};
				result.modifiers[5] = new Modifier[]{Modifier.CLOSEUP};
				result.screens[5].attach("\"N-No!  I-I mean, I still think I got kinda dirty, so I'm gonna be self-conscious about it if I don't take a shower.  So, um, we might as well both get cleaned up, right?\"\n\n", 1);
				result.screens[5].attach("Maybe this is " + Yumeno() + "'s way of telling you that you smell worse than you think you do.  You might as well go along with " + Yumeno() + "'s suggestion.  You head off to the bathroom you've been using, while " + Yumeno() + " heads off to " + hisHer(1) + " room to grab some clothes.");
				
				result.backgrounds[6] = "black";
				result.characters[6] = new String[0];
				result.screens[6].attach("Still, you aren't in any rush.  " + Yumeno() + " takes quick showers, but " + heShe(1) + " had said that " + heShe(1) + " wanted to make lunch today in order to thank you for helping out, so it's not like you'll be able to play together until " + heShe(1) + "'s done with that.  You might as well take your time.\n\n");
				result.screens[6].attach("And after working so hard, you definitely feel like you could use a break.  It's good to be finished.  During the more difficult parts, there were a few moments where you regretted promising to help " + Yumeno() + " out.  But this will also make it more enjoyable to spend time at " + hisHer(1) + " house, so it's not like you were doing it entirely for " + Yumeno() + "'s sake.  And " + heShe(1) + " does seem sincere about making it up to you.  You're already salivating at the thought of eating another one of " + hisHer(1) + " meals.");
				
				result.tracks[7] = Music.SILENCE;
				result.screens[7].attach("The sound of footsteps running rapidly down the hall breaks your train of thought.  At first, your brain writes it off as just " + Yumeno() + " walking around the house, but then you realize where " + heShe(1) + " must be going.\n\n");
				result.screens[7].attach("You look up in surprise and inhale in order to shout out a warning, but you're a moment too late.  " + Yumeno() + " bursts into the bathroom.");
				
				result.backgrounds[8] = "yumeno3";
				result.screens[8].attach("\"Oops, I forgot that this was the bathroom you were using!\"\n\n", 1);
				result.screens[8].attach("Though " + heShe(1) + " quickly moves " + hisHer(1) + " towel to cover " + himHer(1) + "self, " + Yumeno() + " otherwise seems to be unbothered by the fact that you're seeing " + himHer(1) + " naked.  From the strange smile on " + hisHer(1) + " face, it almost looks like " + heShe(1) + "'s about to burst out laughing.\n\n");
				result.screens[8].attach("Well, the expression on your own face probably does look pretty funny.  You're completely dumbstruck.  ");
				if (currentPlaythrough.ownGender.presentation() == currentPlaythrough.personGenders[1].presentation()) {
					if (currentPlaythrough.personGenders[1].presentation() == Gender.MALE) {
						result.screens[8].attach("With " + Yumeno() + "'s slight figure and smooth skin, you could almost mistake " + himHer(1) + " for a girl.  ");
					} else {
						result.screens[8].attach("It's easy to forget with how " + heShe(1) + " usually dresses, but " + Yumeno() + "'s actually pretty cute.  ");
					}
				} else {
					if (currentPlaythrough.personGenders[1].presentation() == Gender.MALE) {
						result.screens[8].attach(Yumeno() + "'s physique can hardly be called manly, but " + heShe(1) + "'s not unpleasant to look at.  ");
					} else {
						result.screens[8].attach(Yumeno() + "'s assets are nothing special, but " + heShe(1) + " certainly has a girl's figure.  ");
					}
				}
				result.screens[8].attach("Even if it's rude to stare, you can't pull your eyes away.");
				
				result.screens[9].attach("An awkward silence stretches.  " + Yumeno() + " is looking right back at you.  Is " + heShe(1) + " having similar thoughts of " + hisHer(1) + " own?\n\n");
				result.screens[9].attach("No, that's impossible.  You had only just started to get undressed, so your appearance is still decent.  Then, what could it be?  The smile is frozen on " + Yumeno() + "'s face.  Actually, " + hisHer(1) + " entire body seems to be rooted to the spot.");
				
				result.backgrounds[10] = "yumeno4";
				result.screens[10].attach("Then, " + hisHer(1) + " knees start shaking.\n\n");
				result.screens[10].attach("\"Oh.  Oh, wow.  Th-This is actually really embarrassing!\"\n\n", 1);
				result.screens[10].attach("Maybe it was a delayed reaction.  The rest of " + Yumeno() + "'s body starts to tremble as well.  " + HeShe(1) + " looks down at " + himHer(1) + "self and seems to realize that the towel isn't covering everything.  " + HeShe(1) + " tries to move it to the side, but that just makes it flip up and reveal even more.");
				
				result.screens[11].attach("It's only when you reach out to offer your own towel that " + Yumeno() + " seems to realize that there's a simpler solution.\n\n");
				result.screens[11].attach("\"Th-That's alright!  I'll just go back!  S-S-Sorry for walking in on you!\"\n\n", 1);
				result.screens[11].attach(Yumeno() + " takes a few steps backward, then stumbles over the threshold to the hallway.  For a moment, it looks like " + heShe(1) + "'s about to fall down.");
				
				result.backgrounds[12] = "black";
				result.screens[12].attach("But " + heShe(1) + " recovers quickly, keeping " + hisHer(1) + " footing and turning to flee.  You get a quick glimpse of " + hisHer(1) + " bare ass, and then " + heShe(1) + "'s gone.  You hear " + hisHer(1) + " footsteps thumping all the way to the other side of the house.\n\n");
				result.screens[12].attach("Well, that was unexpected.  You feel like it might be best to take a cold shower this time.");
				
				result.backgrounds[13] = "cleaner";
				result.characters[13] = new String[]{"yumeno"};
				result.emotions[13] = new String[]{"Scared"};
				result.tracks[13] = Music.BEACH;
				result.screens[13].attach("The lunch afterward is as awkward as you were expecting.  " + Yumeno() + " can't stop apologizing.\n\n");
				result.screens[13].attach("\"S-Seriously, it's unbelievable that I'd walk into the wrong bathroom...\"\n\n", 1);
				result.screens[13].attach("Really, it feels more like you're the one who should be apologizing to " + Yumeno() + ".  You really shouldn't have stared at " + himHer(1) + " like that.\n\n");
				result.screens[13].attach("\"You wouldn't have had the chance to stare if I hadn't come in like that in the first place.  I just keep embarrassing myself in front of you...\"", 1);
				
				result.emotions[14] = new String[]{"Pout"};
				result.screens[14].attach("\"L-Let's just change the subject.  Here, hold on, let me find where I put it...\"\n\n", 1);
				result.screens[14].attach(Yumeno() + " rummages around in one of the boxes of electronics you were cleaning up.  " + HeShe(1) + " pulls out the antique handheld game from earlier.  Then, after thinking to " + himHer(1) + "self for a moment, " + heShe(1) + " nods decisively, as if reaching a decision.\n\n");
				result.screens[14].attach("Is " + heShe(1) + " going to give it to you as a gift?");
				
				result.emotions[15] = new String[]{"Neutral"};
				result.modifiers[15] = new Modifier[]{Modifier.CLOSEUP};
				result.screens[15].attach("But to your surprise, " + Yumeno() + " puts the antique game in " + hisHer(1) + " own pocket.  And then " + heShe(1) + " hands you the tablet computer " + heShe(1) + "'s always bringing everywhere with " + himHer(1) + ".\n\n");
				result.screens[15].attach("\"I want you to have this.  It has a lot of interesting games on it.  I'd be really interested to hear what you think of them!\"\n\n", 1);
				result.screens[15].attach("Is this really alright?  The tablet itself is a high-end model, and with all the software on it, there's no way that this is a fair trade for a few hours of manual labor.\n\n");
				result.screens[15].attach("\"I-It's fine!  I'm going to spend some time playing through older games that I played through as a kid.  I think I might be able to get something new out of them since I was so little when I played them the first time.  I can see how they compare with my memories.\"", 1);
				
				result.emotions[16] = new String[]{"Pout"};
				result.modifiers[16] = new Modifier[]{Modifier.CLOSEUP};
				result.screens[16].attach("\"And I've definitely already gotten everything valuable out of that grand strategy game I was playing.  It's funny to start as some little landlocked nation and paint the whole world in your color, but you can only spend so many hours doing that before you realize that you're wasting your time.  S-So it's completely okay, go ahead and take it.\"\n\n", 1);
				result.screens[16].attach(HeShe(1) + " pushes the tablet into your arms.  You should probably object more strenuously.  Lending it is one thing, but " + heShe(1) + "'s clearly trying to give it to you permanently.  This is a completely unequal exchange.");
				
				result.emotions[17] = new String[]{"Neutral"};
				result.modifiers[17] = new Modifier[]{Modifier.CLOSEUP};
				result.screens[17].attach("But when you try to find the words to refuse, you find that your brain isn't able to put them together.  You're distracted.  The more you try to articulate the question of how much compensation is appropriate for the help you've given, the more you find your thoughts pulled toward a question of a completely different sort:\n\n");
				result.screens[17].attach("Has " + Yumeno() + " always smelled so nice?\n\n");
				result.screens[17].attach("The arcade is full of its own distracting stimuli, and of course " + Yumeno() + "'s house had its own overpowering smell up until today.  But now, your head is full of other scents.  These must be the soap and shampoo " + heShe(1) + " was using in the shower.  The thought reminds you of the sight of " + hisHer(1) + " naked body...");
				
				result.emotions[18] = new String[]{"Smug"};
				result.modifiers[18] = new Modifier[]{Modifier.CLOSEUP};
				result.screens[18].attach(Yumeno() + " seems to see right through you.\n\n");
				result.screens[18].attach("\"What is it?  Aren't you looking at me a little differently than you usually do?\"\n\n", 1);
				result.screens[18].attach("It's surprising how pleased " + heShe(1) + " seems to be.  Wasn't that encounter even more embarrassing for " + himHer(1) + " than it was for you?  " + HeShe(1) + " was literally paralyzed by shame at the time.\n\n");
				result.screens[18].attach("No, " + heShe(1) + "'s still embarrassed.  As " + heShe(1) + " pushes the tablet toward you, " + hisHer(1) + " hands are shaking.  " + HeShe(1) + "'s breathing quickly, and if you could feel " + hisHer(1) + " heartbeat, you're sure that it'd be hammering.\n\n");
				result.screens[18].attach("But at the same time, " + Yumeno() + "'s also clearly happy.  Why?");
				
				result.emotions[19] = new String[]{"Happy"};
				result.screens[19].attach(HeShe(1) + " steps back, leaving the tablet in your arms.  It seems that " + heShe(1) + "'s managed to get you to accept it after all.\n\n");
				result.screens[19].attach("\"I'm really happy.  When I realized that so much of our time together had been spent in such a disgusting house, I was worried that you'd think of me as being disgusting too.\"\n\n", 1);
				result.screens[19].attach("You're not sure how to respond.  In truth, you probably were thinking of " + himHer(1) + " like that for awhile.\n\n");
				result.screens[19].attach("\"Now that we're done with this, it's a real weight off my mind.  You'll come over more often now, right?  I want to make it up to you however I can.\"", 1);
				
				result.backgrounds[20] = "cleaner";
				result.characters[20] = new String[0];
				result.screens[20].attach("With the time you have left before the arcade opens, you and " + Yumeno() + " play some more games together like always.  But even though " + heShe(1) + "'s not sitting any closer to you than " + heShe(1) + " was before, something feels different.  You might not be able to see " + himHer(1) + " in the same way from now on.");
			}
		} else {
			result = getCompletionScene2(g);
		}
		if (result != null) {
			result.associatedGoalIndex = g.index;
			result.associatedGoalTier = g.tier;
			String storedBackground = null;
			String[] storedCharacters = new String[0];
			String[] storedOutfits = new String[0];
			String[] storedEmotions = new String[0];
			
			for (int i = 0; i < result.screens.length; i++) {
				if (result.backgrounds[i] == null || result.backgrounds[i].isEmpty()) {
					result.backgrounds[i] = storedBackground;
				} else {
					storedBackground = result.backgrounds[i];
				}
				if ((result.characters[i] == null || result.characters[i].length == 0) && result.emotions[i] != null && result.emotions[i].length == storedEmotions.length) {
					result.characters[i] = storedCharacters;
					if (result.emotions[i].length == 0) {
						result.emotions[i] = storedEmotions;
					}
				} else {
					storedCharacters = result.characters[i];
					storedEmotions = result.emotions[i];
				}
                if (result.outfits[i] == null || result.outfits[i].length == 0) {
                    result.outfits[i] = storedOutfits;
                } else {
                    storedOutfits = result.outfits[i];
                }
			}
		}
		return result;
	}

	public static Scene getCompletionScene2(Goal g) {
		Scene result = null;
        if (g.index == 10) {
            if (g.tier == 0) {
                result = new Scene(13);

                result.backgrounds[0] = "alley";
                result.tracks[0] = Music.DARKNESS;
                result.screens[0].attach("You and " + Hashimoto() + " have been meeting up after dark to hang out, chat, and sometimes get into a tiny bit of mischief.  Apparently, whenever a cleaning crew shows up to scrub the graffiti from the walls, their cleaning procedure involves power washing the entire wall, even the spots that don't have any graffiti on them.  So, even if you spray some of your own graffiti next to " + Hashimoto() + "'s, it doesn't really make any extra work for them.  Your conscience is mostly clear.");

                result.characters[1] = new String[]{"hashimoto"};
                result.emotions[1] = new String[]{"Frown"};
                result.screens[1].attach("But as a result, the two of you are going through spray paint pretty quickly.  " + Hashimoto() + " headed out to grab some more, but when " + heShe(0) + " gets back, " + heShe(0) + "'s carrying some other supplies, too.\n\n");
                result.screens[1].attach("\"Here.  This shit is bad for your lungs if you breathe it in.\"\n\n", 0);
                result.screens[1].attach(Hashimoto() + " hands you a heavy-duty particle filter mask.  Well, " + heShe(0) + "'s probably right that this is a good idea.  But why doesn't " + Hashimoto() + " have one too?\n\n");
                result.screens[1].attach("\"Can't stand 'em.  Hate the way they smell.\"\n\n", 0);
                result.screens[1].attach("Is the smell really worse than inhaling a bunch of spray paint?\n\n");
                result.screens[1].attach("\"Just wear the fucking mask.\"", 0);

                result.emotions[2] = new String[]{"Neutral"};
                result.screens[2].attach("It seems like " + Hashimoto() + " isn't in the mood to talk.  " + HeShe(0) + " picks up a can and starts spraying.  A few moments later, you mask up and join " + himHer(0) + ".\n\n");
                result.screens[2].attach(Hashimoto() + " actually isn't a bad teacher.  " + HeShe(0) + "'s already managed to show you the basics of how to get the shapes and colors of your graffiti to work out the way you want them to.  You feel pretty good about what you've managed to paint, even if it's probably going to get erased in a few days anyway.\n\n");
                result.screens[2].attach("Eventually, you both finish and step back to admire each other's work.");

                result.emotions[3] = new String[]{"Frown"};
                result.screens[3].attach("However, when you take off your mask, you smell something other than spraypaint.  It seems like " + Hashimoto() + " grabbed some coffee along with the other supplies.  Two huge thermoses are sitting atop a cardboard box where they've been cooling while you painted.\n\n");
                result.screens[3].attach("Well, you've been wondering just how " + Hashimoto() + " functions, considering that " + heShe(0) + "'s awake all night.  If " + heShe(0) + " drinks that much coffee in one sitting, then it's no wonder that " + heShe(0) + " doesn't need to sleep.\n\n");
                result.screens[3].attach("\"One of those cups is for you, dumbass.  And it's not like I never sleep.\"", 0);

                result.emotions[4] = new String[]{"Uncomfy"};
                result.screens[4].attach("When, though?  ");
                if (currentPlaythrough.currentDay >= classStartDay) {
                    result.screens[4].attach("You've seen " + himHer(0) + " in class, and even if " + heShe(0) + "'s clearly dozing sometimes, it's not like " + heShe(0) + " can get a full night's sleep like that.\n\n");
                } else {
                    result.screens[4].attach(Yumeno() + " has said that " + heShe(0) + "'s seen " + Hashimoto() + " attending class like a normal " + guyGirl(0) + ".  Will " + heShe(0) + " go back to sleeping at night once summer break is over?\n\n");
                }
                result.screens[4].attach("\"There's a trick I learned about from my doctor.  " + HeShe(4) + "'d probably be pissed if " + heShe(4) + " knew I was doing it myself, though.  It's called, uh, 'polyphasic sleep', I think.  By taking a bunch of small naps, you can get away with a whole lot less than 8 hours of rest per day.\"\n\n", 0);
                result.screens[4].attach("That sounds frankly awful.  Waking up in the morning is always a pain.  It can be an hour or more between when your alarm goes off and when you stop feeling groggy.  Why would you voluntarily go through that experience multiple times in the same day?\n\n");
                result.screens[4].attach("\"It's not that bad.  I just chug some coffee to let my body know that it's time to start moving again.  Within a few minutes of getting up, I'm fully awake.\"", 0);

                result.emotions[5] = new String[]{"Grin"};
                result.screens[5].attach("\"And in exchange, I get a few more hours of being awake each day.  It's a pretty sweet deal.  If a regular person's day is 16 hours of being awake, then I'm basically getting to have 9 or 10 days a week.\"\n\n", 0);
                result.screens[5].attach("There are other drawbacks, though.  " + HeShe(0) + " has to head home every few hours instead of being able to stay out all day, right?  And sleeping at different times than everybody else has got to lead to schedule conflicts with " + hisHer(0) + " friends.  Is it really that important to scrape up a few more hours of activity each day?\n\n");
                result.screens[5].attach("\"What can I say?  I'm a busy " + guyGirl(0) + " with lots of work to do.  All those people aren't gonna fuck with themselves.\"", 0);

                result.emotions[6] = new String[]{"Frown"};
                result.screens[6].attach("\"But seriously, I fucking hate sleep.  It's a waste of time.  You're just laying there doing nothing, and you can't even think.\"\n\n", 0);
                result.screens[6].attach("It can be nice to sleep in until noon every once in awhile, though.\n\n");
                result.screens[6].attach("\"What's so nice about sleeping in?  It doesn't even feel 'good'.  You're unconscious, just like before you're born and after you're dead.  You're experiencing nothing, and you're accomplishing nothing.  Might as well just jump off a bridge and get it over with.\"\n\n", 0);
                result.screens[6].attach("That's pretty harsh.\n\n");
                result.screens[6].attach("\"It wasn't directed at you, dumbass.  You're actually doing something with your life.\"", 0);

                result.emotions[7] = new String[]{"Neutral"};
                result.screens[7].attach("Are you really doing something with your life?  You feel like you haven't accomplished much.\n\n");
                result.screens[7].attach("\"It's like I said before.  You're leaving an impression on me.  You're probably leaving an impression on other people, too, right?  There's no way you're just rolling around in bed for half the day before coming out here to see me.  That'd be way too pathetic.\"", 0);
                if (currentPlaythrough.weeklyActions[weekDayNumber()][0].ownSpot == Spot.HOME && currentPlaythrough.weeklyActions[weekDayNumber()][1].ownSpot == Spot.HOME && currentPlaythrough.weeklyActions[weekDayNumber()][2].ownSpot == Spot.HOME && (currentPlaythrough.weeklyActions[weekDayNumber()][3].ownSpot == Spot.HOME || currentPlaythrough.weeklyActions[weekDayNumber()][3].relationship == 0)) {
                    result.screens[7].attach("\n\nMaybe you'd better change the subject.");
                }

                result.emotions[8] = new String[]{"Frown"};
                result.screens[8].attach("That's right.  You were trying to convince " + Hashimoto() + " that there were better things " + heShe(0) + " could be doing instead of just causing trouble for random people.  If " + heShe(0) + " really wants to do something with " + hisHer(0) + " life, then why not focus on making the world a better place?\n\n");
                result.screens[8].attach("\"Better for who?  Whenever you try to do some sort of charitable work, there always seems to be some asshole who ends up profiting from it.\"\n\n", 0);
                result.screens[8].attach("Did " + Hashimoto() + " have a bad experience volunteering for some organization?\n\n");
                result.screens[8].attach("\"No.  I've just seen the other side of that situation too many times.  Some of my family members are real shitheads.\"", 0);

                result.emotions[9] = new String[]{"Neutral"};
                result.screens[9].attach("Then if " + heShe(0) + " doesn't want to make the world a better place for others, why not make it a better place for " + himHer(0) + "self?  If " + heShe(0) + " put as much work into building a career as " + heShe(0) + " does into causing trouble, then " + heShe(0) + " could probably become a millionaire in no time.  And then, " + heShe(0) + " could use that money to make a bigger impact on a bigger number of people than " + heShe(0) + " would have by just doing vandalism every day.\n\n");
                result.screens[9].attach("\"That's not a bad plan.  Maybe you should try it yourself.  But it's not gonna work for me.  I'm never going to be some sort of bigshot CEO.\"\n\n", 0);
                result.screens[9].attach("Why not?  Although, admittedly, it does seem like " + Hashimoto() + "'s personality isn't really suited to office work.\n\n");
                result.screens[9].attach("\"Sure.  Let's go with that.\"", 0);

                result.emotions[10] = new String[]{"Uncomfy"};
                result.screens[10].attach("It doesn't seem like " + Hashimoto() + " is actually interested in finding something better to do with " + hisHer(0) + " time.  " + HeShe(0) + " keeps shooting down your suggestions right away.\n\n");
                result.screens[10].attach("\"... I'm sorry.\"\n\n", 0);
                result.screens[10].attach("Oh.  You didn't expect " + himHer(0) + " to actually apologize.\n\n");
                result.screens[10].attach("\"They're pretty good ideas, but I had already thought about them and thrown them away a long time ago.  That doesn't mean I want to stop searching.  Maybe your next idea will be something I haven't thought about before.\"", 0);

                result.emotions[11] = new String[]{"Neutral"};
                result.screens[11].attach("\"All I know for sure is that laying around and doing nothing isn't the answer.  So until I find something better to do, I'll spend every single moment pushing against the world.  It might not amount to much, but at least it's something.\"\n\n", 0);
                result.screens[11].attach("Originally, it seemed like " + Hashimoto() + " was causing trouble because " + heShe(0) + " had too much time on " + hisHer(0) + " hands.  But " + heShe(0) + "'s actually causing trouble because " + heShe(0) + " doesn't want to waste " + hisHer(0) + " time.");

                result.characters[12] = new String[0];
                result.screens[12].attach("The two of you continue to chat while you sip the coffee " + Hashimoto() + " brought you.  You still aren't able to come up with a better answer for " + himHer(0) + " just yet.  But in the meantime, maybe it'd be worthwhile to take some of " + Hashimoto() + "'s advice to heart.  If you sleep a little less, you can probably find something better to do with the extra time than just causing random trouble.");
            } else if (g.tier == 1) {
                result = new Scene(17);

                result.backgrounds[0] = "alley";
                if (currentTimeSlot == TimeSlot.PREDAWN && currentPlaythrough.weeklyActions[weekDayNumber()][4] == Action.VANDALISM) {
                    result.screens[0].attach("Tonight, you're pulling an all-nighter with " + Hashimoto() + ".  This time, you're the one who's headed out to grab some coffee to share with " + himHer(0) + ".  When you get back to the alleyway, you see ");
                } else {
                    result.screens[0].attach("Tonight, you're a bit late to your hangout spot with " + Hashimoto() + ".  You had wanted to grab some coffee to share with " + himHer(0) + ", but the line was moving much slower than normal.  By now, " + heShe(0) + "'s probably assuming that you're not going to make it.\n\n");
                    result.screens[0].attach("When you finally get to the alleyway, you see ");
                }
                result.screens[0].attach(Hashimoto() + " seated with " + hisHer(0) + " back to the wall, relaxing for once.  You set your coffees down on a nearby cardboard box and sit down next to " + himHer(0) + ".");

                result.screens[1].attach(Hashimoto() + " doesn't acknowledge your arrival, but that's pretty normal.  Even though " + heShe(0) + " looks like " + heShe(0) + "'s resting, " + heShe(0) + "'s actually probably deep in thought.  If " + heShe(0) + "'s trying to think of a more productive use of " + hisHer(0) + " time than petty vandalism, then that's great, and you definitely shouldn't interrupt " + himHer(0) + ".  And if " + heShe(0) + "'s just trying to decide what specific kind of vandalism " + heShe(0) + " feels like committing today...  Well, there's not much you can do about it.\n\n");
                result.screens[1].attach("So, you just grab your own coffee and sip on it while doing some thinking of your own.  It seems obvious enough that " + Hashimoto() + " isn't accomplishing anything meaningful by bullying people and defacing their property, but that's only half the equation.  The other half is to show that there's something " + heShe(0) + " could be doing which actually would be a meaningful accomplishment, something within " + hisHer(0) + " means to do.\n\n");
                result.screens[1].attach(Hashimoto() + " is adamant that " + heShe(0) + "'s never going to rise to any sort of position of power in politics or business.  " + HeShe(0) + " speaks of it less as something " + heShe(0) + " doesn't want to do, and more as something that's already been determined, as if " + heShe(0) + "'s already seen the future.  But what other options are there?  How can somebody change the world without being in a position of authority?");

                result.screens[2].attach("As you're thinking to yourself, you become conscious of the warmth of " + Hashimoto() + "'s body next to you.  It's not a cold night, and you didn't notice at first.  But now " + heShe(0) + "'s starting to lean on your shoulder.\n\n");
                result.screens[2].attach("Most of your physical contact with " + Hashimoto() + " until now has just been shoving and grabbing, so this is a pretty bizarre feeling.  You look over at " + Hashimoto() + " to see what " + heShe(0) + "'s trying to do.");

                result.backgrounds[3] = "hashimoto2";
                result.tracks[3] = Music.SILENCE;
                result.screens[3].attach("Oh.  " + Hashimoto() + " actually is sleeping.  The idea was so absurd that you dismissed it outright, but here " + heShe(0) + " is, snoozing while sitting upright.\n\n");
                result.screens[3].attach("Now that " + heShe(0) + "'s leaning on you, you're sort of trapped.  If you hadn't been sitting here when " + heShe(0) + " started to keel over, " + heShe(0) + " would've faceplanted into the pavement and woken up on " + hisHer(0) + " own.  And if you move now, that's exactly what will happen.  It'd be pretty funny, but for some reason you feel like you shouldn't do it.");

                result.screens[4].attach("You could always just wake " + himHer(0) + " up without letting " + himHer(0) + " fall on " + hisHer(0) + " face, you suppose.  But if " + heShe(0) + " fell asleep like this, then " + heShe(0) + " probably actually does need the sleep.  You should let " + himHer(0) + " rest until " + hisHer(0) + " body decides that it's had enough.\n\n");
                result.screens[4].attach("The problem is that you hadn't planned on serving as an armrest when you took your seat next to " + Hashimoto() + ", and you picked a sitting position that's going to start getting uncomfortable pretty quickly.  You can already feel your legs getting sore.  You won't be able to stay like this for long.\n\n");
                result.screens[4].attach("Maybe you can gently straighten " + Hashimoto() + "'s posture so that " + heShe(0) + " can stay up on " + hisHer(0) + " own?");

                result.backgrounds[5] = "hashimoto3";
                result.sounds[5] = Effect.RUSTLE;
                result.screens[5].attach("But when you press your shoulder against " + Hashimoto() + ", " + heShe(0) + " reflexively wraps " + hisHer(0) + " arm around yours and pulls it close.  Now you're well and truly trapped.\n\n");
                result.screens[5].attach("On the bright side, you're surprised to see that " + Hashimoto() + " is even capable of making this sort of expression.  " + HeShe(0) + " must be having a good dream.  Maybe you should take a picture.");

                result.screens[6].attach("It doesn't feel bad to be clung to like this, either.  Even in " + hisHer(0) + " sleep, " + Hashimoto() + " is pretty strong.  You probably wouldn't be able to pull away even if you wanted to.\n\n");
                result.screens[6].attach(Hashimoto() + "'s soft, steady breathing confirms that " + heShe(0) + "'s still deeply asleep.  Obviously, " + heShe(0) + " wouldn't be displaying affection like this if " + heShe(0) + " were even slightly awake.  It really would be a waste to wake " + himHer(0) + " up now and put an end to it.");

                result.backgrounds[7] = "black";
                result.screens[7].attach("As the minutes stretch onward, the cramping pain in your legs gets worse and worse.  But by now, you're tough enough to endure it.  You rigidly hold your position to avoid disturbing " + Hashimoto() + ".\n\n");
                result.screens[7].attach("Mercifully, the pain eventually gives way to numbness.  It takes a long time before " + Hashimoto() + " starts to wake up on " + hisHer(0) + " own.");

                result.backgrounds[8] = "alley";
                result.characters[8] = new String[]{"hashimoto"};
                result.emotions[8] = new String[]{"Angry"};
                result.tracks[8] = Music.DARKNESS;
                result.screens[8].attach("\"Shit!  I slept for a whole goddamn hour!\"\n\n", 0);
                result.screens[8].attach("As expected, " + Hashimoto() + " isn't happy after " + heShe(0) + " wakes up.  But fortunately, " + heShe(0) + " doesn't seem to blame you for it.\n\n");
                result.screens[8].attach("\"I never asked you to be my fucking alarm clock in the first place.  It's my fault for forgetting to set my alarm before I fell asleep.\"", 0);

                result.emotions[9] = new String[]{"Frown"};
                result.screens[9].attach("That was really surprising, though.  You didn't expect to find " + Hashimoto() + " dozing off, and you definitely didn't expect " + himHer(0) + " to cuddle up to you like that.\n\n");
                result.screens[9].attach("\"Well, too bad.  That's what you get for having such a comfy shoulder.\"\n\n", 0);
                result.screens[9].attach(HisHer(0) + " response is surprisingly nonchalant.  You were expecting " + Hashimoto() + " to be flustered after showing you " + hisHer(0) + " vulnerable side.  Getting the chance to tease " + himHer(0) + " about it was half the reason you were willing to hold still for so long.\n\n");
                result.screens[9].attach("\"I don't have the time to waste on being all coy and pretending I didn't like it.  And you liked it too, right?  That's all that matters.  Next time your shoulder's available when I need to take a nap, maybe I'll use it again.\"", 0);

                result.emotions[10] = new String[]{"Uncomfy"};
                result.screens[10].attach("At this rate, you might actually be the one who ends up getting flustered.  Maybe it'd be better to change the subject.\n\n");
                result.screens[10].attach("Something did strike you as strange about " + Hashimoto() + "'s wording earlier.  " + HeShe(0) + " said that " + heShe(0) + " forgot to set " + hisHer(0) + " alarm before falling asleep.  Does that mean that " + himHer(0) + " sleeping here in this alley was actually intentional?\n\n");
                result.screens[10].attach("\"Well, yeah.  If you're only sleeping for half an hour at a time, there's no point in using a bed.  Since we were planning on hanging out in this spot anyway, just dozing off here saves me some travel time.\"\n\n", 0);
                result.screens[10].attach("There's no reason that it has to be this spot, right?  You wouldn't mind switching to a hangout spot closer to " + Hashimoto() + "'s house so that " + heShe(0) + " could actually sleep in " + hisHer(0) + " own room.\n\n");
                result.screens[10].attach("\"Not interested.  I'm used to doing it like this.\"", 0);

                result.emotions[11] = new String[]{"Neutral"};
                result.screens[11].attach(HeShe(0) + " sleeps in an alleyway on a regular basis?  Is " + Hashimoto() + " homeless or something?\n\n");
                result.screens[11].attach("\"I have a home.  The problem is that it's currently occupied by a couple of shitheads who call themselves my parents.  I'm sure as hell not going to make a habit of spending every night there.\"\n\n", 0);
                result.screens[11].attach("Even if " + heShe(0) + " doesn't have a great relationship with " + hisHer(0) + " parents, it's got to be safer than sleeping in public.\n\n");
                result.screens[11].attach("\"Still not worth it.  I've never run into any trouble doing this before.  What's the worst that could happen?\"\n\n", 0);
                result.screens[11].attach("Well, if the wrong person finds " + himHer(0) + " while " + heShe(0) + "'s sleeping and helpless, " + heShe(0) + " could die.\n\n");
                result.screens[11].attach("\"Everybody dies sooner or later.\"", 0);

                result.emotions[12] = new String[]{"Uncomfy"};
                result.screens[12].attach("Isn't " + Hashimoto() + " determined to do something meaningful with " + hisHer(0) + " life?  If " + heShe(0) + " dies, then " + heShe(0) + " really will become irrelevant.  You can't mess with people after you're dead.\n\n");
                result.screens[12].attach("\"Mm...  I guess not.  It's not like I want to die, you know.\"\n\n", 0);
                result.screens[12].attach("Then " + heShe(0) + " shouldn't risk it.  The small amount of time saved from sleeping wherever " + heShe(0) + " happens to be isn't worth the possibility of losing it all.\n\n");
                result.screens[12].attach("\"Still, going back to my parents isn't an option.  I wouldn't put it past them to hire armed guards to keep me from doing anything interesting.  And I don't have the cash to get a place of my own.\"\n\n", 0);
                result.screens[12].attach("There's one possibility that immediately comes to mind.  At first, it seems dubious, but the more you think about it, the better it sounds.");

                result.emotions[13] = new String[]{"Surprise"};
                result.screens[13].attach("Why not let " + Hashimoto() + " come sleep at your dorm?\n\n");
                result.screens[13].attach("\"Are you serious?\"\n\n", 0);
                result.screens[13].attach("Of course.  Why wouldn't you be?\n\n");
                result.screens[13].attach("\"I mean, you didn't seem to hold a grudge, so I was fine with leaving it in the past... but still, you remember how we met, right?\"\n\n", 0);
                result.screens[13].attach("You do remember.  But even when you were stunned on the arcade floor, " + Hashimoto() + " never kicked you in the head or anything.  So it should be a safe bet that " + heShe(0) + " won't kick you in the head when you're sleeping in your own bed, either.\n\n");

                result.emotions[14] = new String[]{"Neutral"};
                result.screens[14].attach("Plus, " + Hashimoto() + " sleeps for two hours a day and hates spending time inside.  " + HeShe(0) + " seems like " + heShe(0) + "'ll be an easy roommate.\n\n");
                result.screens[14].attach("\"Yeah, I'll barely ever be there.  And even if we are there at the same time, one of us can sleep while the other watches their back.\"\n\n", 0);
                result.screens[14].attach("Well, there's a lock on your door, so there's no need for anybody to watch anybody else's back.\n\n");
                result.screens[14].attach("\"Oh...  Right.\"", 0);

                result.emotions[15] = new String[]{"Uncomfy"};
                result.screens[15].attach("Privately, you feel a lot of trepidation about letting a remorseless troublemaker like " + Hashimoto() + " into your own living space.  But after seeing " + hisHer(0) + " reaction, you're confident that you made the right decision.  " + HeShe(0) + " seems genuinely grateful.\n\n");
                result.screens[15].attach("It makes you curious about " + Hashimoto() + "'s home life.  You get the impression that " + hisHer(0) + " parents are pretty well-off.  " + Hashimoto() + " seems to want to rebel against them.  Is that really all there is to it?\n\n");
                result.screens[15].attach("But you don't bring it up for the time being.  Instead, you just give " + Hashimoto() + " directions to your dorm and let " + himHer(0) + " know when you'll be around to let " + himHer(0) + " in.  It's against the dorm's policy, but you might also be able to get a spare key made for " + himHer(0) + " at some point.\n\n");
                result.screens[15].attach("\"... Thanks.\"", 0);

                result.backgrounds[16] = "alley";
                result.characters[16] = new String[0];
                result.screens[16].attach("Now that that's settled, the two of you get back to your regularly scheduled vandalism.  At the same time, you talk about the world and about how best to meaningfully leave an impact on it.  Despite " + hisHer(0) + " gratitude, " + Hashimoto() + " is still as stubborn as ever.  But now you'll have some more chances to talk " + himHer(0) + " around to your way of thinking.");
            } else if (g.tier == 2) {
                result = new Scene(19);

                result.backgrounds[0] = "alley";
                result.tracks[0] = Music.DARKNESS;
                result.screens[0].attach("Tonight, you're hanging out with " + Hashimoto() + " again.  Between your chatting and your petty vandalism, it's been a busy night.\n\n");
                result.screens[0].attach("The night is still young, but you've run out of spraypaint.  Even though it's " + Hashimoto() + "'s turn to head out and grab supplies, you're right in the middle of a conversation, so you figure you might as well walk with " + himHer(0) + ".");

                result.characters[1] = new String[]{"hashimoto"};
                result.emotions[1] = new String[]{"Uncomfy"};
                result.screens[1].attach("\"... Sure.  We can keep chatting on the way\"\n\n", 0);
                result.screens[1].attach("Together, you make your way out of the alley.");

                result.backgrounds[2] = "night";
                result.emotions[2] = new String[]{"Neutral"};
                result.screens[2].attach("But " + Hashimoto() + " immediately starts leading you in a different direction than the 24-hour hardware store you've been visiting when it's your turn to grab supplies.  Does " + heShe(0) + " know of one closer by?  It would explain why " + heShe(0) + "'s sometimes able to make the trip much faster than you do.  You had always just assumed that " + heShe(0) + " was jogging the whole way.\n\n");
                result.screens[2].attach("You see a different hardware store up ahead.  On closer inspection, though, this one's closed.  " + Hashimoto() + " is still walking in that direction, so presumably, there's another one further along the road that's still open.\n\n");
                result.screens[2].attach("However, " + Hashimoto() + " surprises you by leading you into the closed hardware store's back parking lot.  And then " + heShe(0) + " pulls out a set of thin metal rods and inserts two of them into the keyhole.");

                result.emotions[3] = new String[]{"Frown"};
                result.screens[3].attach("Hold on.  You weren't exactly planning on becoming an accessory to a crime here.\n\n");
                result.screens[3].attach("\"What do you mean?  We've been committing vandalism all night.\"\n\n", 0);
                result.screens[3].attach("That's different.  Breaking and entering seems a lot more serious.  Is it a felony?  You haven't had much reason to familiarize yourself with the local criminal codes until now.\n\n");
                result.screens[3].attach("\"It's fine.  I've only been caught a couple of times.  You can head back on your own if you like.\"", 0);

                result.emotions[4] = new String[]{"Neutral"};
                result.screens[4].attach("Maybe you should head back.  But you're a little bit mesmerized by the sight of " + Hashimoto() + "'s lockpicking.  It's obvious that " + heShe(0) + "'s done this before.  Even if you didn't leave your door unlocked for " + himHer(0) + ", " + heShe(0) + " probably wouldn't have any trouble getting inside.\n\n");
                result.screens[4].attach("\"I'm... not so sure about that.  There are more people around the student dorms who might see me.  And besides, I'm not comfortable breaking into a building where somebody lives.  I don't steal from humans.\"\n\n", 0);
                result.screens[4].attach("So " + heShe(0) + " only steals from non-humans.  Did this store get bought by space aliens or something?\n\n");
                result.screens[4].attach("\"If it did, then I'd stop stealing from it.  But the stuff in this store isn't owned by anybody at all.\"", 0);

                result.emotions[5] = new String[]{"Uncomfy"};
                result.screens[5].attach("The store's goods are owned by the company, right?\n\n");
                result.screens[5].attach("\"I've never met a 'company' before.  I'm pretty sure they don't really exist.\"\n\n", 0);
                result.screens[5].attach("The company is just a group of people, right?  " + Hashimoto() + " could easily meet any of them face-to-face and verify that they exist.\n\n");
                result.screens[5].attach("\"But those people don't own the stuff here.  If any of them tried to grab it and walk out without paying, then they'd get arrested for shoplifting.  The people don't own it.  The company does.\"", 0);

                result.emotions[6] = new String[]{"Neutral"};
                result.screens[6].attach("\"The way you're supposed to do this is that you go inside, pick out what you want, and then hand over some money to this vague 'company', like you're giving an offering to some sort of really boring god.  But I don't have time for those bullshit rituals.  There's stuff in there that nobody's using, and it's not owned by any real person.  So I'm gonna take it.\"\n\n", 0);
                result.screens[6].attach("Those rituals have a point, though.  The store only exists here because people paid money to build it and to ship the goods here.  They expect to recoup that money by selling those goods.  Every item that " + Hashimoto() + " steals means that less money goes to those people.\n\n");
                result.screens[6].attach("\"It's true that everything I steal results in less money for somebody.  But the people who actually paid to build the store aren't the ones who are losing out.\"\n\n", 0);
                result.screens[6].attach("If not them, then who?");

                result.emotions[7] = new String[]{"Frown"};
                result.screens[7].attach("\"Look at it this way.  ", 0);
                if (currentPlaythrough.currentDay >= classStartDay ) {
                    result.screens[7].attach("You know how our class just started a segment on the era of silent films?\"\n\n", 0);
                    result.screens[7].attach("You're a little surprised that " + Hashimoto() + " has been listening to the lessons enough to talk about that.  Wasn't " + heShe(0) + " sleeping in class?\n\n");
                    result.screens[7].attach("\"I was, but my parents work in the film industry, so I already know all about it.  ", 0);
                } else {
                    result.screens[7].attach("Have you read the material for our class's upcoming segment on the era of silent films?\"\n\n", 0);
                    result.screens[7].attach("You've thumbed through it.  Is " + Hashimoto() + " really such a diligent student to have studied ahead?\n\n");
                    result.screens[7].attach("\"No, but my parents work in the film industry, so I already know all about it.  ", 0);
                }
                result.screens[7].attach("And it's an industry that only sprang up in the past couple hundred years, so it makes for a good example.\"", 0);

                result.emotions[8] = new String[]{"Neutral"};
                result.screens[8].attach("\"Early on, making movies was really expensive, and showing them to the public was expensive too.  Some of those big epic films would hire a thousand extras just to appear in a single scene.  The movie crew would need to travel all across the country to get to the shooting location.  Even after the movie was done, the film was super flammable, and they'd have to ship it in special containers to make sure it didn't blow up.  All it takes is one single fuckup anywhere in the process to make your costs go through the roof.  Can you guess how many of those films were profitable?\"\n\n", 0);
                result.screens[8].attach("You don't have anywhere near enough information to make a reasonable estimate.  Maybe half of them?\n\n");
                result.screens[8].attach("\"That's right, actually.  About half of all movies made enough money to cover their costs.  If you put your money into making a movie, then on average, you could expect to make a few percent of it back as profit.\"", 0);

                result.emotions[9] = new String[]{"Uncomfy"};
                result.screens[9].attach("\"But now, our technology is way better.  You don't to bring a bunch of extras halfway across the country.  You can just use CGI.  You don't need to use flammable film, 'cause everything's digital.  It costs less to make the movie, and you've got more people buying movie tickets.  Can you guess how many films are profitable now?\"\n\n", 0);
                result.screens[9].attach("Maybe it's better to just let " + Hashimoto() + " tell you.\n\n");
                result.screens[9].attach("\"... Still about half.  And investors can still expect to make a few percent of their investment as profit.  No matter how much technology makes the process cheaper, the reported profits are the same.\"", 0);

                result.emotions[10] = new String[]{"Frown"};
                result.screens[10].attach("\"The reason is that all of the people along the production chain have developed their own ways of skimming the extra money off the top.  If you hire the cheapest casting company possible, then the investors will see a larger profit.  But if you hire your friend's more expensive company, which supposedly does a 'better' job, then he can pay you a kickback under the table.  And when the costs of actually producing the product go down, that just means that you can skim even more money off the top.\"\n\n", 0);
                result.screens[10].attach("That might explain how one movie could be successful and still show a low profit.  But if one studio consistently shows lower profits due to corrupt executives, then surely filmmakers would start choosing other studios instead, and the corrupt studio would go out of business.  That kind of competition is the whole basis for capitalism.\n\n");
                result.screens[10].attach("\"So what if they go out of business?  That's only a problem if you imagine the 'company' as something real, something with its own needs and desires.  But like I was just telling you, 'companies' aren't real.  The people actually making the decisions are a bunch of shitheads who'll still be rich even if their 'company' fails.\"", 0);

                result.emotions[11] = new String[]{"Neutral"};
                result.screens[11].attach("Letting your own company go out of business just to embezzle its funding seems like a pretty short-sighted decision.  Wouldn't you make more money in the long run by keeping it profitable?\n\n");
                result.screens[11].attach("\"If you didn't have anywhere else to work, sure.  But there are people who have built their whole career around being hired as CEO and then driving their businesses into the ground, getting paid their 'termination bonus', and then moving on to the next one.  You can see for yourself.  If there's some franchise or product you used to like, and then it went to shit, you can look up who was CEO of the company at the time.  Smart money says that they're still employed as CEO somewhere.\"\n\n", 0);
                result.screens[11].attach("That makes no sense.  Why would you hire a CEO who has a proven track record of destroying their companies?\n\n");
                result.screens[11].attach("\"Because CEOs are hired and paid by the company's board of directors.  And for those assholes, it's way easier to skim money off the top than it is to actually make a company more profitable.\"", 0);

                result.emotions[12] = new String[]{"Frown"};
                result.screens[12].attach("\"Even if a company is making millions in profit, the board only gets a little bit of that for themselves.  The rest goes to the shareholders.  So the board hires a CEO who will add a bunch of bullshit 'business consultant' positions to the company, and then hire the directors' friends and relatives to those positions at six-figure salaries.  That way, all of the money goes back to the board.  And meanwhile, those friends and relatives get to pad their resumes with years of experience which 'proves' that they're worthy to be appointed to the boards of directors of other companies later on.  It's all a big scam.\"\n\n", 0);
                result.screens[12].attach("But what if a company shows up whose board of directors isn't corrupt?  Wouldn't they be able to offer products at a lower price and outcompete the existing companies?\n\n");
                result.screens[12].attach("\"Big companies don't just 'show up'.  If you want to compete with a multinational, you need to start with lots of investment capital.  And investment capital comes from investment firms, which have their own boards of directors.  They're all part of the same fucking 'class'.  You think they're going to want to help you fight against the system that makes them rich?\"", 0);

                result.emotions[13] = new String[]{"Neutral"};
                result.screens[13].attach("\"It's all one big clique of shitheads, the 'interlocking directorate'.  If you're not one of them, if you haven't been born into the right family and gone to the same university and networked with them all your life, then you're frozen out.  All they care about is that you're one of the 'right people', the people they can trust to not rock the boat.\"\n\n", 0);
                result.screens[13].attach("That doesn't seem like a very good way of finding competent people to run things.\n\n");
                result.screens[13].attach("\"You wouldn't think so, but that hasn't stopped the nobles of every other era from doing the same thing.  Because that's basically what business executives are: the modern nobility.  Our world starts making a lot more sense when you stop thinking in terms of stocks and equity, and start thinking in terms of prince-electors and royal alliances.  The 'invisible hand' of the free market is just a repackaged version of the 'divine right' of kings.  They're both explanations for why it's a good thing that our rulers rule over us.\"", 0);

                result.emotions[14] = new String[]{"Uncomfy"};
                result.screens[14].attach("First it was the era of silent films, and now it's the middle ages.  Is it possible that " + Hashimoto() + " is actually a history nerd?\n\n");
                result.screens[14].attach("\"I mean, I picked that class for a reason.  It's just that some other shit came up, and now I'm not really feeling it.  Anyway, don't change the subject, I'm trying to make a point here.\"\n\n", 0);
                result.screens[14].attach("Really?\n\n");
                result.screens[14].attach("\"Yes, really!  I'm just saying that when a company does well, the interlocking directorate just skims more money off the top.  And if you look at it from the other direction, when the company does worse, that just means that they can't skim quite as much.\"", 0);

                result.emotions[15] = new String[]{"Neutral"};
                result.screens[15].attach("\"If we were looking at a situation where society was on the edge of collapse, then yeah, I'd be thinking harder about who would get hurt by my shoplifting.  But as things stand, I'm just stealing money that those shitheads up top were going to steal anyway.  I'm not gonna feel bad about that.\"\n\n", 0);
                result.screens[15].attach("It sounds like " + Hashimoto() + " has some sort of personal grievance here.\n\n");
                result.screens[15].attach("\"Well, maybe.  It just pisses me off when people act like the world is perfectly set up so that following the rules gets everybody exactly what they deserve.  It doesn't.  Bad people always seem to win in the end, and half the time, the law itself is set up to let them get away with it.\"", 0);

                result.emotions[16] = new String[]{"Frown"};
                result.screens[16].attach("Even so, you don't think it would be a good idea for " + Hashimoto() + " to steal from this shop.\n\n");
                result.screens[16].attach("\"Why not?  Are you gonna come up with some argument against my reasoning?\"\n\n", 0);
                result.screens[16].attach("Maybe later.  But for now, the two of you have been standing here with " + Hashimoto() + "'s lockpicks sticking out of the door, and several passing pedestrians have been giving you strange looks.  It wouldn't be surprising if the police showed up at any moment.");

                result.emotions[17] = new String[]{"Surprise"};
                result.screens[17].attach("\"Oh.  Shit.  You're right.  ", 0);
                if (currentTimeSlot.placement == 4 && currentPlaythrough.weeklyActions[weekDayNumber()][5].relationship == 0) {
                    result.screens[17].attach("Let's head back to the alley and find something else to do.  Might be better to lay low for awhile...\"\n\n", 0);
                } else {
                    result.screens[17].attach("Let's call it a night here.\"\n\n", 0);
                }
                result.screens[17].attach("You and " + Hashimoto() + " hurriedly make your escape.");

                result.characters[18] = new String[0];
                result.screens[18].attach("Still, it seemed like " + Hashimoto() + " would be more than willing to teach you how to use those lockpicks.  ");
                if (getAttributeLevel(2, false).compareTo(BigInteger.ONE) > 0) {
                    result.screens[18].attach("And you can easily afford a set of your own.");
                } else {
                    result.screens[18].attach(HeShe(0) + " says " + heShe(0) + " can't part with them, but ");
                    if (barVisible(2)) {
                        result.screens[18].attach("if you save up some cash, you should be able to buy a set of your own.");
                    } else {
                        result.screens[18].attach("if you can find a job somewhere, you might be able to save up enough cash to buy a set of your own.");
                    }
                }
                result.screens[18].attach("\n\nYour policy for who to steal from might be different from " + Hashimoto() + "'s, but you're pretty sure you could rob a drug den or payday loan shop and still sleep like an innocent baby afterwards.  ");
                if (currentPlaythrough.personStatus[5] != Locale.COLLEGETOWN) {
                    result.screens[18].attach("You have a pretty good excuse for needing money right now.");
                } else {
                    result.screens[18].attach("You have an odd premonition that you might need a lot of cash soon.");
                }
            } else if (g.tier == 3) {
                result = new Scene(17);

                result.backgrounds[0] = "alley";
                result.tracks[0] = Music.DARKNESS;
                result.screens[0].attach("Tonight, you and " + Hashimoto() + " are spraying graffiti in the alleyway where you always meet, as usual.  But " + Hashimoto() + " is oddly quiet, this time.  Normally, " + heShe(0) + "'s more than capable of chatting while " + heShe(0) + " sprays.  Tonight, though, " + heShe(0) + " barely seems to be paying attention to you.  Whenever you try to make conversation, " + heShe(0) + " just nods absently, gives a monosyllabic reply, and continues to paint.\n\n");
                result.screens[0].attach("Eventually, you decide to just leave " + himHer(0) + " to it and focus on your own graffiti as well.  It means that you go through your spraypaint more quickly than usual.\n\n");
                result.screens[0].attach("And so, surprisingly soon, your can runs dry.");

                result.characters[1] = new String[]{"hashimoto"};
                result.emotions[1] = new String[]{"Frown"};
                result.screens[1].attach("It's your turn to head out for supplies this time, so you tell " + Hashimoto() + " that you'll be back soon.\n\n");
                result.screens[1].attach("\"Don't bother.  I'm finished.\"\n\n", 0);
                result.screens[1].attach(Hashimoto() + " steps back to admire " + hisHer(0) + " own work.  It's an abstract piece, clashing colors in shapes that almost seem to suggest letters, but they don't actually spell anything out.  It's actually somewhat unpleasant to look at, but " + Hashimoto() + " seems to be satisfied with how it turned out.  " + HeShe(0) + " drops " + hisHer(0) + " own empty spray can to the ground.\n\n");
                result.screens[1].attach("It's still pretty early.  Even accounting for how long it'll take you to go shopping, there should still be time to start on another piece tonight, if " + heShe(0) + " wants to.\n\n");
                result.screens[1].attach("\"Yeah.  But I don't want to.  I'm finished.\"", 0);

                result.emotions[2] = new String[]{"Neutral"};
                result.screens[2].attach("What does " + Hashimoto() + " mean by that?  Does " + heShe(0) + " just want to start fresh with a new piece of graffiti tomorrow?\n\n");
                result.screens[2].attach("\"Nope.\"\n\n", 0);
                result.screens[2].attach("Then is " + heShe(0) + " actually done with spraying graffiti?  Completely and forever?\n\n");
                result.screens[2].attach("\"That's right.  This here is my last piece.  And now I'm finished.\"", 0);

                result.emotions[3] = new String[]{"Uncomfy"};
                result.screens[3].attach("This came out of nowhere.  " + Hashimoto() + " really seemed to be enjoying your nights here.\n\n");
                result.screens[3].attach("\"I was.  But it was turning into a waste of time.\"\n\n", 0);
                result.screens[3].attach("It never felt to you like talking with " + Hashimoto() + " was a waste of time.\n\n");
                result.screens[3].attach("\"I don't mean the talking.  I mean the stuff we were doing while we were talking.  This.  Vandalism.  Creating chaos.\"\n\n", 0);
                result.screens[3].attach("Has " + Hashimoto() + " figured out a better way to make an impact on the world?\n\n");
                result.screens[3].attach("\"No.  But thanks to you, I'm starting to get an idea of what that 'better way' will look like.\"", 0);

                result.emotions[4] = new String[]{"Neutral"};
                result.screens[4].attach("\"If you just want to have 'any' effect on people, it's easy enough to break things and get in people's way and just generally make chaos.  But if you actually want to have a 'specific' effect, then it takes more effort.  You actually have to talk to people.  Understand them.  Maybe scuffle with them a little bit.\"\n\n", 0);
                result.screens[4].attach("And " + Hashimoto() + " credits you with teaching " + himHer(0) + " this lesson?\n\n");
                result.screens[4].attach("\"I guess you sort of demonstrated it for me.  You changed your lifestyle in order to hang out here with me, right?  Seriously, who else is up at this hour?  And that change is probably bigger and more meaningful than the entire sum total of what I've accomplished by committing vandalism and harassing dumbasses who spend all their time playing video games.\"", 0);

                result.emotions[5] = new String[]{"Frown"};
                result.screens[5].attach("\"And you're having an effect on me, too.  I'm going to stop coming out here at night.\"\n\n", 0);
                result.screens[5].attach("What's " + heShe(0) + " going to do instead?\n\n");
                result.screens[5].attach("\"I dunno.  Sleep, maybe.\"\n\n", 0);
                result.screens[5].attach("Wait, really?  After everything " + Hashimoto() + "'s said about how sleep is a waste of time?\n\n");
                result.screens[5].attach("\"It's a waste of time, sure.  But not all time is equally valuable.\"", 0);

                result.emotions[6] = new String[]{"Uncomfy"};
                result.screens[6].attach("\"Honestly, I'm embarrassed that it took me this long to realize it.  Having an effect on the world means having an effect on people.  That much is obvious.  But if you want to have an effect on people, then it helps to be awake at the same time as them.\"\n\n", 0);
                result.screens[6].attach("Then " + Hashimoto() + " is going to adopt a more normal sleep schedule?\n\n");
                result.screens[6].attach("\"Uh, I wouldn't go that far.  Sleeping for eight hours a day is just ridiculous.  But instead of trying to 'stay awake for as many hours as possible', I think I should probably go for 'have as many hours as possible where I'm awake at the same time as most people'.  I'll figure something out.\"", 0);

                result.emotions[7] = new String[]{"Grin"};
                result.screens[7].attach("It sounds like " + Hashimoto() + " might be wanting to sleep at your dorm more often.\n\n");
                result.screens[7].attach("\"About that.  We're gonna need a new hangout spot.\"\n\n", 0);
                result.screens[7].attach(HeShe(0) + " doesn't want to keep coming here?\n\n");
                result.screens[7].attach("\"There are too many people passing through here during the day.  Come on, I've already picked out a place that's more quiet.\"", 0);

                result.emotions[8] = new String[]{"Neutral"};
                result.backgrounds[8] = "night";
                result.screens[8].attach("You follow " + Hashimoto() + " out of the alleyway and down the sidewalk.  " + HeShe(0) + " seems to be bringing you toward the rougher part of town.  Maybe you should be worried.\n\n");
                result.screens[8].attach("As you leave, you can't help but cast one last forlorn back at the alleyway.  You had been right in the middle of painting something when " + Hashimoto() + " declared that " + heShe(0) + " was finished.  Now, it's looking like you'll never get a chance to complete it.");

                result.emotions[9] = new String[]{"Angry"};
                result.screens[9].attach("When you mention offhand that you're leaving an unfinished piece behind in the alleyway, " + Hashimoto() + " actually gets angry.\n\n");
                result.screens[9].attach("\"Why the fuck did you start on it if you didn't have enough paint to finish?  You were the one holding the spray can.  You should have been able to tell that it was getting empty.\"\n\n", 0);
                result.screens[9].attach("You had figured that you'd just be able to get another one from the store.\n\n");

                result.emotions[10] = new String[]{"Uncomfy"};
                result.screens[10].attach("In any case, it isn't a big deal.  It'll just get scrubbed off by the next cleaning crew anyway.\n\n");
                result.screens[10].attach("\"Still, it's a dumb mistake to make.  You shouldn't assume that you'll get a chance to finish everything you start.\"\n\n", 0);
                result.screens[10].attach("The two of you walk in silence for the next few minutes until you reach the city's old industrial district.");

                result.characters[11] = new String[0];
                result.backgrounds[11] = "hideout";
                result.screens[11].attach("Eventually, you make your way into an abandoned chemical plant, past several 'no trespassing' signs.\n\n");
                result.screens[11].attach("But when " + Hashimoto() + " leads you upstairs to what was apparently some sort of supervisor's office, you're surprised at how comfortable it looks.  The place has been furnished as a bedroom, with a roll of blankets in one corner, a portable stove in the middle, some simple workout equipment up against one wall, and books stacked neatly along the other.  As you walk down the row, you see that the collection consists of titles by various philosophers, political theorists, and even theologians.  Has " + Hashimoto() + " read all of these?  Or is " + heShe(0) + " just planning to do so?");

                result.characters[12] = new String[]{"hashimoto"};
                result.emotions[12] = new String[]{"Grin"};
                result.screens[12].attach("\"I heard about this place from one of my dad's associates.  Apparently it's owned by a mogul who's holding out for property values to rise so he can sell it off to some developer for a big profit.  In the meantime, he rents it out for movie shoots.  It looks shabby, but it's actually climate-controlled and certified to meet the actor's guild's safety regulations.\"\n\n", 0);
                result.screens[12].attach("So, just to be clear, " + Hashimoto() + " isn't actually supposed to be here?  " + HeShe(0) + "'s not paying rent or anything?\n\n");
                result.screens[12].attach("\"Of course I'm not paying rent.  If someone shows up and throws me out, I've got half a dozen other nice spots lined up.\"\n\n", 0);
                result.screens[12].attach("And the books?\n\n");
                result.screens[12].attach("\"Stole 'em.\"", 0);

                result.emotions[13] = new String[]{"Neutral"};
                result.screens[13].attach("Well, even if " + heShe(0) + "'s turning over a new leaf, " + Hashimoto() + " is still " + Hashimoto() + ".  Is it really necessary to have this place when " + heShe(0) + " can just come sleep at your dorm?\n\n");
                result.screens[13].attach("\"It's less about having a place to sleep, and more about having a quiet place to read stuff and think.  It's nice to be alone sometimes.\"\n\n", 0);
                result.screens[13].attach("It really is hard to find a place in this city that's quiet during the daytime.  Even your dorm can't quite shut out the sound of people living their lives just outside the window.\n\n");

                result.emotions[14] = new String[]{"Uncomfy"};
                result.screens[14].attach("\"Uh, not that I'd mind if you came around here to chat.  In fact, I'd appreciate it.  Though, I'm gonna be trying to get most of my sleep at night from now on...'\"\n\n", 0);
                result.screens[14].attach("It should actually be easier to find time to visit " + Hashimoto() + " if " + heShe(0) + "'s going to be awake at the same time as everyone else.\n\n");
                result.screens[14].attach("\"I guess.  But I can tell that you were pushing yourself to come hang out with me at night.  It feels stupid to ask you to change your sleep schedule again just for my sake.\"\n\n", 0);
                result.screens[14].attach("If you weren't enjoying it, you wouldn't have done it.\n\n");
                result.screens[14].attach("\"Yeah, well, if you want to keep doing it, you can still call me up.  I know I said I was 'finished', but that doesn't mean you have to be finished too.  Just, uh, don't be surprised if I'm a little groggy at that hour from now on.\"", 0);

                result.emotions[15] = new String[]{"Grin"};
                result.screens[15].attach("But " + Hashimoto() + " would prefer to hang out during the daytime?\n\n");
                result.screens[15].attach("\"That's right.  I've been getting some ideas about how to make my impact on the world, but I wanna bounce 'em off you first.  See if you can poke some more holes in my way of thinking.\"\n\n", 0);
                result.screens[15].attach("The way " + heShe(0) + " says it, it sounds almost like " + Hashimoto() + " is challenging you to a fight.\n\n");
                result.screens[15].attach("\"Damn right I am.  And I'm gonna use these books to arm myself.  You'd better be ready.\"", 0);

                result.characters[16] = new String[0];
                result.screens[16].attach("But for tonight, " + Hashimoto() + " wants to get started on " + hisHer(0) + " new resolution of sleeping while the sun is down.  It's probably best to leave " + himHer(0) + " to it.\n\n");
                result.screens[16].attach("From now on, " + heShe(0) + "'ll be awake at the same hours as the people whose lives " + heShe(0) + " wants to affect.  If you want to meet " + hisHer(0) + " challenge, you'll have to do so then.");
            }
        } else if (g.index == 11) {
            if (g.tier == 0) {
                result = new Scene(20);

                result.backgrounds[0] = "mansion";
                result.tracks[0] = Music.LIFE;
                result.screens[0].attach("You're starting to get settled in at your job at " + DuMont() + "'s mansion.  It's not at all what you had expected.  Much of your time has been spent learning the skills needed to work as a high class servant, like etiquette and cleaning.  But just as much time has been spent learning to deal with the other servants.");

                result.screens[1].attach("Horace, the butler in charge of the household, hadn't been kidding when he said that " + DuMont() + " had a penchant for hiring those who wouldn't be able to get a job anywhere else.  Your colleagues all seem to be grappling with some sort of major issue, whether it's substance addiction or psychological problems or abusive family members.  They all have their own stories.  ");
                if (currentPlaythrough.personStatus[5] != Locale.COLLEGETOWN || (currentPlaythrough.currentDay == classStartDay && currentTimeSlot.placement > 3)) {
                    result.screens[1].attach("Though, when you finally tell them about " + Tanaka() + ", they act like you're the one deserving of sympathy.  It's a strange feeling.\n\n");
                } else {
                    result.screens[1].attach("You feel sort of like you're the odd one out.  Fortunately, they don't seem to resent you for having enjoyed a relatively easy life.\n\n");
                }
                result.screens[1].attach("On top of that, even though " + DuMont() + "'s mansion isn't exactly small, the number of servants hired to maintain it is clearly much higher than necessary.  Apparently " + DuMont() + " hires needy people as a way of helping them out, because money given as an outright gift would be taxed at a higher rate and result in " + himHer(2) + " not being able to help as many people overall.  The list of tasks you're required to perform for each shift is quite short.");

                result.screens[2].attach("But that isn't to say that you can just relax all day.  Rather than taking care of the mansion, it might be more accurate to say that your main job is taking care of the other servants.  The shifts are organized into a sort of buddy system so that servants are never left to finish a task alone.  Very few of the tasks actually require two sets of hands to complete; the real purpose of the system is to let the servants keep an eye on each other.\n\n");
                result.screens[2].attach("It makes a sort of sense.  Even people with psychological problems can watch a recovering drug addict and make sure that he doesn't have a chance to shoot up.  Even a recovering drug addict can have enough moral integrity to watch a kleptomaniac and make sure he doesn't have a chance to steal anything.  Even a kleptomaniac can show basic human compassion to people with psychological problems and help motivate them to get their issues under control.  They'd all run into problems alone, but they can compensate for each other's weaknesses and function as a unit together.\n\n");
                result.screens[2].attach("After you've gotten to know the rest of the serving staff, you take another look at the week's shift schedule, and it strikes you that Horace has deftly managed to avoid pairing up any servants whose vices might enable each other.  He might actually be a real genius at this.");

                result.characters[3] = new String[]{"dumont"};
                result.emotions[3] = new String[]{"Smug"};
                result.screens[3].attach("As one of the more functional servants, you don't need somebody watching your every move.  But maybe that's why Horace was so eager to sign you on; you can be paired with anybody.  Now that you've learned the ropes, it also means that you can be trusted to accompany " + DuMont() + " in public and take care of minor tasks while " + heShe(2) + " focuses on " + hisHer(2) + " meetings with various businessmen and managers.\n\n");
                result.backgrounds[3] = "night";
                if (currentTimeSlot.placement < 3) {
                    result.backgrounds[3] = "city";
                    if (currentTimeSlot.placement < 2) {
                        result.emotions[3] = new String[]{"Neutral"};
                        result.screens[3].attach("Today, " + DuMont() + " has an early meeting to attend, and " + heShe(2) + " seems to be suffering.  Apparently " + heShe(2) + "'s not a morning person.  ");
                    } else {
                        result.screens[3].attach("Today, " + DuMont() + "'s schedule is booked with meetings all across the town.  ");
                    }
                } else {
                    result.screens[3].attach("Tonight, " + DuMont() + " has to deal with some unexpected matters that can't wait until morning.  ");
                }
                result.screens[3].attach("It's your first time accompanying " + himHer(2) + " to business like this, but there's no time to chat with " + himHer(2) + ".  There's luggage that needs to be carried, refreshments and paperwork that need to be delivered.  From the brief snippets of conversation you're able to catch, " + DuMont() + " seems to be negotiating an arrangement between one of " + hisHer(2) + " businesses and a local charity organization.");

                result.backgrounds[4] = "mansion";
                result.emotions[4] = new String[]{"Happy"};
                result.screens[4].attach("But after it's all done and you get back to the mansion, you and " + DuMont() + " both have a chance to relax.  " + HeShe(2) + " invites you to the parlor to sit down with " + himHer(2) + ".\n\n");
                result.screens[4].attach("\"So?  What do you think?  Are you fitting in well here?\"\n\n", 2);
                result.screens[4].attach("Well, 'fitting in' is probably the wrong term to use.  You aren't struggling with the same demons as the other members of " + DuMont() + "'s household.  But you're still getting along well with them.\n\n");
                result.screens[4].attach("\"It wasn't what you were expecting, was it?  In truth, I think I'd be about as happy living in a little apartment somewhere...  Well, giving up my wine cellar would be difficult.  But doing it this way allows me to touch a few more lives.\"", 2);

                result.emotions[5] = new String[]{"Uncomfy"};
                result.screens[5].attach("It really is a strange arrangement.  It's not terrible for the workers here, but it also seems far from perfect.  For most of them, the job cleaning the mansion is just a pretense to keep them out of trouble with enough watchful eyes nearby to let somebody know if something seems to be wrong with them.  At this point, you're pretty much certain that " + DuMont() + " isn't profiting in the slighest from this arrangement - " + heShe(2) + "'s not paying them any less than a more competent serving staff would demand, and there don't seem to be any local government programs that would compensate " + himHer(2) + " for hiring ex-felons or whatever.  Even for someone as wealthy as " + himHer(2) + ", keeping this many fulltime employees doing busywork must be a huge drain on " + hisHer(2) + " finances.\n\n");
                result.screens[5].attach("Is this actually worth it?  It just seems to convoluted and wasteful.\n\n");
                result.screens[5].attach("\"Wasteful, hm...?\"\n\n", 2);
                result.screens[5].attach(DuMont() + " doesn't respond immediately, thinking deeply to " + himHer(2) + "self.");

                result.emotions[6] = new String[]{"Neutral"};
                result.screens[6].attach("\"Did you hear about the attempted theft we had a few weeks before you came here?\"\n\n", 2);
                result.screens[6].attach("You recall hearing about something like that.  It was one of the new maids, right?\n\n");
                result.screens[6].attach("\"Yes.  She set her sights on the vase sitting on that very table, and she came up with a plan to steal it from the mansion.\"\n\n", 2);
                result.screens[6].attach("And then she was caught while trying to put that plan into motion.\n\n");
                result.screens[6].attach("\"Indeed.  But what do you suppose she would have done, had she succeeded?  Why did she want to steal the vase in the first place?\"", 2);

                result.emotions[7] = new String[]{"Uncomfy"};
                result.screens[7].attach("She would have sold it off, obviously.  A maid has no need for an expensive vase in her her house.\n\n");
                result.screens[7].attach("\"Of course.  But what would she have done with the money?  What did she need it for?\"\n\n", 2);
                result.screens[7].attach("You aren't quite sure where " + DuMont() + " is going with this.  Is " + heShe(2) + " saying that the maid would have just used the money to buy drugs?\n\n");
                result.screens[7].attach("\"No.  She had no history with drug abuse.  Her only vice was... perhaps a bit of laziness.  She would have quit her job here, certainly.  And then she would move into a better apartment.  She would start ordering delivery for every meal so that she didn't need to cook.  And... I think she would probably have bought a car so that she wouldn't need to use public transportation to get around.  All practical things that increase " + hisHer(2) + " quality of life.\"", 2);

                result.emotions[8] = new String[]{"Sad"};
                result.screens[8].attach("\"Meanwhile, the loss of the vase would have only a negligible effect on my own life.  I only bought it because it's important for other investors visiting the mansion to come away with the impression that I'm a successful person whose investments pay off, so that they'll follow my lead and give my businesses the capital they need to flourish.  I lose something that can be easily replaced, while the maid's life becomes measurably easier and happier.\"\n\n", 2);
                result.screens[8].attach("It really sounds like " + DuMont() + " is arguing that " + heShe(2) + " should have let the maid get away with stealing the vase.\n\n");
                result.screens[8].attach("\"It would be a reasonable position to hold, at least on first glance.  But I believe that there's another point to consider.\"", 2);

                result.emotions[9] = new String[]{"Neutral"};
                result.screens[9].attach("\"Take the car that the maid would have bought if she had succeeded in her heist.  What will happen to it now?\"\n\n", 2);
                result.screens[9].attach("Well, it might sit in the dealership for awhile, and then somebody else will buy it.\n\n");
                result.screens[9].attach("\"Does that mean that, if the maid were successful, the other buyer wouldn't be able to get a car?\"\n\n", 2);
                result.screens[9].attach("Of course not.  He'd just buy a different car.\n\n");
                result.screens[9].attach("\"And that different car, the one that he would've bought, what happens to it here in the real world?\"\n\n", 2);
                result.screens[9].attach("It's probably bought by yet another person.");

                result.emotions[10] = new String[]{"Uncomfy"};
                result.screens[10].attach("\"If the maid steals enough money to buy a car, then the event sends little ripples throughout the universe.\"\n\n", 2);
                result.screens[10].attach("That's a pretty grandiose way of describing people ending up with different cars than they'd have otherwise bought.\n\n");
                result.screens[10].attach("\"But it's more than that.  There are only a limited number of cars in the world.  At some point along that chain of events, you ask 'what does the person who would have bought that car do', and the answer is 'walk home without a car', because there are no cars left to buy at that price point.\"", 2);

                result.emotions[11] = new String[]{"Neutral"};
                result.screens[11].attach("\"Some people don't end up owning a car.  If the maid isn't able to get away with theft, then she remains a member of that group.  And if she does steal the money, then somebody else joins that group in her place.\"\n\n", 2);
                result.screens[11].attach("So, " + DuMont() + " is trying to say that even if the maid's theft doesn't make " + DuMont() + " " + himHer(2) + "self less happy, it does make somebody else less happy?\n\n");
                result.screens[11].attach("\"Yes.  In practice, market forces spread out the damage so that it doesn't fall entirely on one person, of course.  Demand is increased while supply remains the same.  The people who buy cars do so at a slightly higher price, depriving them of whatever they would have bought with the extra money.  Everything is connected.\"", 2);

                result.emotions[12] = new String[]{"Uncomfy"};
                result.screens[12].attach("\"The important thing is to not fall into the trap of attributing the happiness she gets from the car to the act of theft she used to afford it.  The ones who are truly responsible for that happiness are the ones who performed the labor of making the car in the first place.  And the same can be said for the other things she'd buy.  If she upgrades to a nicer apartment, then somebody else will lose that opportunity.  If she orders takeout instead of cooking for herself, then workers who would have been relaxing will instead be busier.\"\n\n", 2);
                result.screens[12].attach("When " + DuMont() + " puts it like that, " + heShe(2) + " makes it sound like life is a zero-sum game.  As if you can only become happy by taking somebody else's happiness.\n\n");
                result.screens[12].attach("\"No, I wouldn't agree with that at all.  But I would say that making everybody happier is more difficult than most people think.\"", 2);

                result.emotions[13] = new String[]{"Neutral"};
                result.screens[13].attach("\"Food.  Shelter.  Healthcare.  These things are the foundations of human happiness.  If you can make them, then you're definitely making the world a better place.  If you can't make them, then you can still provide the tools for others to make them.  If you can't even do that, then you can help deliver them to those who need them.  And if you can't do even that much, then you can at least protect them until they can be used.  If your job doesn't fall into one of those categories, then you aren't actually producing happiness - you're just moving it from one person to another.\"\n\n", 2);
                result.screens[13].attach("Using that system, how would " + DuMont() + " classify your own function in society?\n\n");
                result.screens[13].attach("\"When you work in the bar, you're the endpoint of a supply chain that delivers food and drink to people.  When you work here in the mansion, you're keeping it in functional condition, and I'd say that you're also providing care for some of the servants who can't quite take care of themselves.  And when you attend class, you're receiving training to help you more efficiently perform more valuable roles.", 2);
                if (currentPlaythrough.currentDay < classStartDay) {
                    result.screens[13].attach("\"\n\n", 2);
                    result.screens[13].attach("And what about " + DuMont() + "'s own function in society?");
                } else {
                    result.screens[13].attach("  You have still been attending all your classes, right...?\"\n\n", 2);
                    result.screens[13].attach("Maybe you'd better change the subject.  What about " + DuMont() + "'s own function in society?");
                }

                result.emotions[14] = new String[]{"Smug"};
                result.screens[14].attach("\"Myself?  I would say that I contribute to society in the smallest, most indirect way possible, just barely short of being absolutely useless.  I try to invest my money in such a way that people have monetary incentive to take on the jobs that involve helping each other.\"\n\n", 2);
                result.screens[14].attach("It's a bit surprising that " + DuMont() + " would demean " + hisHer(2) + " own role like that.\n\n");
                result.screens[14].attach("\"It's hardly a revolutionary idea.  For most of human history, merchants have been ranked among the lowest parasites on society, no better than actors or prostitutes.  I have no illusions about the respectability of what I do.\"", 2);

                result.emotions[15] = new String[]{"Neutral"};
                result.screens[15].attach("\"But even so, I'm one of the few people in a position to do it.  The structure of our society is flawed.  Landlords makes the greatest profits when they set their prices such that one or two units are always left vacant.  Grocers fear lawsuits if people eat food past its sell-by date, so they destroy it rather than giving it away.  Preventative care is cheaper and therefore generates less revenue than late-stage disease treatment.  The people involved aren't necessarily evil, but the incentives in place encourage such terrible policies.  It's tragically, horrifically wasteful.\"\n\n", 2);
                result.screens[15].attach("You haven't seen " + DuMont() + " get like this before.  " + HeShe(2) + " actually seems a bit angry.\n\n");
                result.screens[15].attach("\"Once you reach a certain level of wealth, having money becomes less about fulfilling your personal needs and more about the size of the impact you can make on society.  You should expect to lose it in exchange for touching people's lives in the way you want to.  As long as you achieve the desired result, it's not wasted, even if it's not profitable in the slightest.\"", 2);

                result.emotions[16] = new String[]{"Uncomfy"};
                result.screens[16].attach("\"But not everybody sees it that way.  Some people just view money as a tool to get more money.  They treat it as a goal in itself, like they're trying to get a high score in some kind of... video game.  And after those people are gone, it's like they were never born in the first place.  Maybe I'd understand better if I had children of my own.  It's a parent's responsibility to pave the way for their child, so I can understand wanting to leave as big a nest egg as possible.  But that doesn't absolve you of responsibility for the things your businesses do.\"\n\n", 2);
                result.screens[16].attach(DuMont() + " sighs, calming " + himHer(2) + "self down.\n\n");
                result.screens[16].attach("\"I'm sorry.  I strayed from the point I wanted to make.  What I'm saying is that money is a tool.  If just strewn around randomly, it doesn't necessarily make the world a better place.  But by investing only in companies with ethical business practices, I can change the landscape of the city for the better.\"", 2);

                result.emotions[17] = new String[]{"Happy"};
                result.screens[17].attach("\"Twenty years ago, I was seriously considering giving my entire estate to charity.  But I decided that it would be better to maintain control of the businesses I inherited, and simply donate as much of the proceeds as possible to good causes.  Now, twenty years later, the total sum of what I've donated is higher than my entire net worth back then.\"\n\n", 2);
                result.screens[17].attach("Is that counting the wages of the excess serving staff here?\n\n");
                result.screens[17].attach("\"No.  But I don't count that as a waste, either.  I want to put as many people as possible into a position where pursuing their own happiness also results in happiness for others.  When I hear Horace talk about how you're easing the burden and brightening the lives of the rest of the serving staff, I feel like I've made the right decision.\"", 2);

                result.emotions[18] = new String[]{"Smug"};
                result.screens[18].attach("It feels good to know that " + DuMont() + " appreciates you.  You'll try not to steal any vases and get fired.\n\n");
                result.screens[18].attach("\"Hm?  Oh, no, I didn't fire the maid.  Why would I?  Now that she's been caught, she knows that she's being watched a little more closely.  And I think it's finally sunk in for her that she doesn't need to pull any tricks to get what she wants.  However much work she puts in, that's how much she'll get back.  That's the kind of place I want to cultivate here.\"\n\n", 2);

                result.characters[19] = new String[0];
                result.screens[19].attach("You and " + DuMont() + " chat a bit longer, but eventually, " + heShe(2) + " has to go review some paperwork, and you have your own work to attend to.  You feel like you understand " + himHer(2) + " a bit better now.  " + HeShe(2) + "'s trying to use the tools at " + hisHer(2) + " disposal to make the world a better place as " + heShe(2) + " sees it.\n\n");
                result.screens[19].attach("And now that you're a full-fledged member of the serving staff, you should have some more opportunities to chat with " + himHer(2) + ".  Accompanying " + himHer(2) + " outside the mansion is a bit exhausting, but it's nothing you can't handle.  And it does pay well.");
            } else if (g.tier == 1) {
                result = new Scene(3);

                result.backgrounds[0] = "mansion";
                result.screens[0].attach("The skills you've learned at " + DuMont() + "'s mansion are an extremely mixed bag.  A household servant's job is, in effect, to provide a high standard of living for " + hisHer(-1) + " employer.  The array of skills that go into providing a high standard of living are as varied as the number of aspects that make up a person's daily life.");

                result.screens[1].attach("Knowledge of etiquette is pretty much useless to you in your own life.  Knowledge of cleaning and household maintenance is a little bit helpful, but your own living space is small enough that it didn't pose much of a challenge in the first place.\n\n");
                result.screens[1].attach("However, knowledge of cooking seems like it actually has some potential to make your life a lot better.");

                if (routineElementVisible(RoutineElements.HOMECOOKING)) {
                    result.screens[2].attach("It's a bit embarrassing that you had been so impressed by " + Yumeno() + "'s cooking skills.  " + HeShe(1) + "'s certainly not bad, but in truth, you had just been living on fast food for so long that you had forgotten what real food tastes like.  ");
                } else {
                    result.screens[2].attach("After living on fast food for so long, you had begun to forget what real food tastes like.  ");
                }
                result.screens[2].attach("And after helping out in the kitchen so much, you think you've managed to pick up the skills to dine like a true member of the modern nobility.  You can make food that's as healthy as it is delicious.\n\n");
                if (getAttributeLevel(2, false).compareTo(BigInteger.valueOf(3)) >= 0) {
                    result.screens[2].attach("On your way home, you grab some high-quality cooking implements.  You'll also need ingredients, and while the price seems pretty high for something that's just going to go through your digestive tract, it doesn't feel so bad when you think of it as an investment in your own health.  Looking forward to your next meal keeps you motivated to finish your shift.");
                } else {
                    result.screens[2].attach("Or at least, you will once you have enough money to afford the high-quality cooking implements and premium ingredients for your meals.  Time to get back to work.");
                }
            } else if (g.tier == 2) {
                result = new Scene(16);

                result.tracks[0] = Music.LIFE;
                result.backgrounds[0] = "mansion";
                result.screens[0].attach("Over the course of your time working at " + DuMont() + "'s mansion, you've managed to quickly pick up the skills required to do pretty much any of the daily chores there.  The butler has essentially put you in charge of handling the small emergencies that happen whenever a servant needs to take a sick day or some element of " + DuMont() + "'s schedule unexpectedly changes.  You aren't a master of any of those skills, but you're competent enough to be reliable.\n\n");
                result.screens[0].attach("As a result, you're already next in line to be promoted to a more prestigious position.  Bigger paychecks and more authority over the household are on the horizon.  But with the things you've seen and heard while getting to this point, it's hard to get too excited.  You've begun to wonder just how much longer " + DuMont() + " will be able to afford to pay you.");

                result.screens[1].attach("The world of business finance is an esoteric labyrinth which is certainly outside your area of expertise.  But " + DuMont() + " frequently hosts parties for other members of high society, people who live in that world.  In the process of welcoming them and serving them refreshments, you've been able to overhear their discussions about their business.\n\n");
                result.screens[1].attach("And it was shocking to hear how much they looked down on " + DuMont() + ".  They see " + himHer(2) + " as a fool.  They laugh at " + himHer(2) + " behind " + hisHer(2) + " back.  They only attend " + hisHer(2) + " social functions because it's so easy to swindle " + himHer(2) + " out of " + hisHer(2) + " money, and they want to get their cut before " + heShe(2) + " ends up completely broke.\n\n");
                result.screens[1].attach("Some of them think that " + DuMont() + "'s fortune will be gone with five years.  Others expect that day to come even sooner.\n\n");
                result.screens[1].attach(DuMont() + " has always come across as a very intelligent, professional " + manWoman(2) + " who knows " + hisHer(2) + " business.  Whenever you accompany " + himHer(2) + " to a business meeting, " + heShe(2) + " always seems more than capable of keeping up with the negotiations.  Whenever " + hisHer(2) + " business partners have questions, " + heShe(2) + " has the answers.\n\n");
                result.screens[1].attach("So, why do the other socialites have such a low opinion of " + himHer(2) + "?");

                result.screens[2].attach("Maybe it's not really your business.  You have other responsibilities.  As of today, you're being entrusted with the prestigious task of waking " + DuMont() + " in the morning and delivering " + hisHer(2) + " breakfast.  ");
                if (currentTimeSlot.placement == 5) {
                    result.screens[2].attach("And since " + heShe(2) + " has an early morning meeting scheduled for today, you'll be delivering it before the sun even starts to come up.  ");
                } else if (currentTimeSlot.placement > 2) {
                    result.screens[2].attach("And since " + heShe(2) + " spent all of last night and this morning in an emergency meeting, today's 'breakfast' is happening after the sun has already gone down.  ");
                }
                result.screens[2].attach("You retrieve the cart carrying the food and push it from the kitchen toward " + DuMont() + "'s bedroom.\n\n");
                result.screens[2].attach("This is different from the work you've done around the mansion until now.  Those jobs are all about utility, keeping the mansion running and facilitating " + DuMont() + "'s business dealings.  But this job is about " + DuMont() + "'s own comfort and happiness.  " + HeShe(2) + "'s chosen you to be the first face " + heShe(2) + " sees every morning.");

                if (getRelationshipLevel(2, true).compareTo(BigInteger.valueOf(3)) >= 0) {
                    result.screens[3].attach("Maybe this should be more nerve-racking, but you get along well with " + DuMont() + ".  Rather than a high-pressure critical job, you feel more like you're just heading over to wake up your room-mate.  ");
                } else {
                    result.screens[3].attach("It's a bit nerve-racking.  " + DuMont() + " has certainly taken a liking to you, but that could change just as quickly as it started.  ");
                }
                result.screens[3].attach("Either way, you signed up for this duty, so all that's left now is to carry it out.\n\n");
                result.screens[3].attach("You gently knock on the door to let " + himHer(2) + " know that you're there.  Then, a couple of seconds later, you open it up and push the cart inside.");

                result.backgrounds[4] = "dumont4";
                result.screens[4].attach(DuMont() + " is already awake when you enter the room.  You start to give " + himHer(2) + " your practiced morning greeting, but " + DuMont() + " just chuckles and motions for you to stop.\n\n");
                result.screens[4].attach("\"Is that how Horace told you to wake me up?  Please, no need to be so formal.  It's just the two of us here.\"\n\n", 2);
                result.screens[4].attach("That's right.  This is your first time being alone with " + DuMont() + " since that first day you accompanied " + himHer(2) + " out on the town.  At the nightclub, there are other patrons.  While " + heShe(2) + "'s working, there are always other servants and business partners.  But from now on, private encounters like this will become routine.");

                result.screens[5].attach("You take a moment to look at " + DuMont() + ".  Out in public, " + heShe(2) + " always seems to radiate power, even when " + heShe(2) + "'s not accompanied by " + hisHer(2) + " serving staff.  " + HeShe(2) + " moves with purpose and speaks with authority, an unstoppable social giant who can grant dreams or crush them with a moment's effort.\n\n");
                result.screens[5].attach("But here in " + hisHer(2) + " own bed, ");
                if (currentPlaythrough.personGenders[2].presentation() == Gender.FEMALE) {
                    result.screens[5].attach("without " + hisHer(2) + " makeup, ");
                }
                result.screens[5].attach(heShe(2) + "'s just a " + manWoman(2) + " who looks like " + heShe(2) + " could use a few more hours of sleep.  This must be why the job of bringing " + himHer(2) + " breakfast is reserved for just a few trusted servants.  If everyone saw " + himHer(2) + " like this, they wouldn't be thinking of " + himHer(2) + " as someone to protect and provide for them.  They'd be thinking of " + himHer(2) + " as somebody who needs to be protected.\n\n");
                result.screens[5].attach(HisHer(2) + " gaze is still sharp as " + heShe(2) + " looks back at you.  Are your thoughts obvious on your face?");

                result.screens[6].attach("\"You've looked like you had something on your mind, these past few days.  Now that we're alone, do you want to talk?\"\n\n", 2);
                result.screens[6].attach("The whole point of this job is that you're supposed to be giving " + DuMont() + " a pleasant start to " + hisHer(2) + " day.  Bringing up the ridicule " + heShe(2) + " receives from " + hisHer(2) + " peers definitely doesn't seem like a good way of doing that.  The proper course of action here would be to deflect, put " + hisHer(2) + " worries at ease, and leave " + himHer(2) + " to enjoy " + hisHer(2) + " breakfast.\n\n");
                result.screens[6].attach("But you aren't sure if you'd actually be able to fool " + DuMont() + ".  Now that " + heShe(2) + "'s figured out that something's bothering you, " + heShe(2) + " won't let it go until " + heShe(2) + "'s gotten to the bottom of it.  That's just the kind of person " + heShe(2) + " is.");

                result.screens[7].attach("And so you tell " + himHer(2) + " what you've heard.  About the other socialites disparaging " + hisHer(2) + " business acumen.  About their predictions for " + DuMont() + "'s fortune to run out in a matter of a few years.\n\n");
                result.screens[7].attach(DuMont() + " doesn't seem bothered in the slightest.  " + HeShe(2) + " doesn't even seem to be surprised.  This must not be news to " + himHer(2) + ".\n\n");
                result.screens[7].attach("\"Of course they don't think much of me.  In the game of trying to increase one's net worth as much as possible, I appear to be quite a poor player.  But the truth is that I'm playing a different game entirely.\"", 2);

                result.backgrounds[8] = "dumont5";
                result.screens[8].attach("\"Ah, there I go, referring to it as a 'game' again.  I wonder how many more years it will be before I can break that habit.  This is no game.  People's lives hang in the balance.  The important thing is that maximizing my net worth is not the goal.\"\n\n", 2);
                result.screens[8].attach("This is something " + heShe(2) + "'s talked about before.  " + HeShe(2) + " wants to use " + hisHer(2) + " money to do good, right?\n\n");
                result.screens[8].attach("\"Well, 'doing good' might be a rather grandiose way of putting it.  The objective fact is that I use my wealth to strong-arm businesses into doing things my way.  Say, I dislike the way that a company is treating its workers, so I try to buy a controlling share in them and change their policies.  Or I buy a competitor and have them lower their prices in order to undercut the company and force them out of business.\"", 2);

                result.backgrounds[9] = "dumont4";
                result.screens[9].attach("\"It's not a good strategy for making money.  After all, if the most moral course of action were also the most profitable one, then the company never would have started mistreating its workers in the first place.  By setting limits on what I'm willing to let my companies do, I put them at a competitive disadvantage against their rivals.  They tend to fail in the long-term.\"\n\n", 2);
                result.screens[9].attach("Then why are " + DuMont() + "'s business partners willing to work with " + himHer(2) + "?\n\n");
                result.screens[9].attach("\"That's the tricky part.  The deals we make have to benefit them in some way.  Clauses for what happens if the business goes under, or an unequal split of the potential profits that makes them greedy enough to sign on with me.  They think themselves terribly clever for taking advantage of my lack of business sense.  But in truth, I'm the one who's manipulating them into following my ethical demands.\"", 2);

                result.backgrounds[10] = "dumont6";
                result.screens[10].attach("\"Of course, they're quite right that I won't be able to keep it up forever.  Every bad deal takes another little chunk out of the fortune I inherited.  Between that and hitting the tax thresholds for charitable donations, I think it should all be gone within twenty years or so.  But if we hit a recession at the wrong time, I suppose it might dry up sooner.\"\n\n", 2);
                result.screens[10].attach("And what happens then?\n\n");
                result.screens[10].attach("\"I do some downsizing.  Sell off the mansion, start trying to divest my various holdings to other investors who seem unlikely to misuse them.  Once I can no longer maintain the appearance of bottomless wealth, my former partners will know that they no longer have anything to gain by staying in my good graces.  The end will come quickly after that.  I suppose that if they're already openly disparaging me, it might mean that we're closer to that point than I had thought.\"", 2);

                result.backgrounds[11] = "dumont5";
                result.screens[11].attach("\"I suppose you have a right to know.  Horace seems to fancy the idea of having you take over as butler when he retires, but there's no telling how much longer that position will even exist.  Perhaps you should move on to another career before that day comes.  Someone as talented as you shouldn't be wasting " + hisHer(-1) + " youth doing something like this.\"\n\n", 2);
                result.screens[11].attach("It hasn't been a waste.  You've learned some valuable skills.  Not to mention that the pay is good.\n\n");
                result.screens[11].attach("\"And I've certainly enjoyed having you here.  I just hope you won't hesitate when the time comes for you to go your own way.\"", 2);

                result.backgrounds[12] = "dumont6";
                result.screens[12].attach("Well, that answers what will happen to the household.  But what about " + DuMont() + " " + himHer(2) + "self?  What's " + heShe(2) + " going to do once " + hisHer(2) + " money runs out?\n\n");
                result.screens[12].attach("\"Oh, don't you worry about me.  I intend to set aside enough money to pay for a little house and a live-in servant until the age of 80 or so.  I suppose it might be a good idea to take a job bagging groceries or something if it starts to look like I'll be living longer than that.\"\n\n", 2);
                result.screens[12].attach("Why not set aside a little bit of extra money to make sure it doesn't come to that?  " + DuMont() + " is a multimillionaire.  Even if " + heShe(2) + " wants to spend most of that fortune on influencing local companies, " + heShe(2) + " could always set aside a larger portion to give " + himHer(2) + "self a more comfortable future.  So why not do so?\n\n");
                result.screens[12].attach("\"Because it would be unconscionable.  I already feel terribly guilty about the luxuries I'm enjoying now.  A whole mansion to myself, the finest food and clothes, being able to pick whichever cute " + boyGirl(-1) + " I want to wake me up in the morning.  Some if it is necessary to maintain appearances so that other investors will think me prosperous and follow my lead.  But I wonder whether that's really enough to justify all this excess.\"", 2);

                result.screens[13].attach("It's true that " + DuMont() + " is hardly living an ascetic lifestyle.  If " + heShe(2) + " wanted to devote even more of " + hisHer(2) + " fortune to doing good in the world, " + heShe(2) + " could always cut back further on those luxuries, live a lifestyle closer to that of the average " + manWoman(2) + ".  " + HeShe(2) + " seems to be planning to live more humbly in the future, but to enjoy such wealth for even a few decades is far more than most people ever get to experience.\n\n");
                result.screens[13].attach("Is " + DuMont() + " a selfish person?  You're currently benefitting from " + hisHer(2) + " decision to maintain a mansion and a serving staff, so maybe you don't have the objectivity to judge " + himHer(2) + " one way or the other.\n\n");
                result.screens[13].attach("But at least you can say with certainty that " + heShe(2) + " believes " + hisHer(2) + " own words.  " + HeShe(2) + " really does plan on giving up all this wealth.  " + HeShe(2) + " really is trying to do the right thing.");

                result.backgrounds[14] = "dumont4";
                result.screens[14].attach("\"Ah, I just wanted to settle whatever questions were on your mind, but now you look even more troubled.  I must apologize.  This is what I get for trying to hold a conversation before I've completely woken up.\"\n\n", 2);
                result.screens[14].attach("It isn't really " + DuMont() + "'s fault.  In the first place, you're the one who's being paid to serve " + himHer(2) + ", so " + heShe(2) + " shouldn't be worrying about you.\n\n");
                result.screens[14].attach("\"Yes... I suppose that's all there is to it.  Well, I shouldn't keep you here any longer.  We both have a busy day ahead of us.\"", 2);

                result.backgrounds[15] = "mansion";
                result.screens[15].attach("You leave " + DuMont() + " to eat " + hisHer(2) + " breakfast, then head back to the kitchen to grab a bite for yourself.\n\n");
                result.screens[15].attach("It seems like you'll be spending a lot more time with " + DuMont() + " from now on.  Maybe you should try to come up with some less weighty subjects to make smalltalk with " + himHer(2) + ".");
            } else if (g.tier == 3) {
                result = new Scene(3);

                result.backgrounds[0] = "mansion";
                result.screens[0].attach("The more time you spend serving " + DuMont() + "'s fellow aristocrats, the better you understand them.  For the regular person, the behaviors of the rich make no sense, and so it's common to just dismiss all the rituals of high society as 'random' or 'pointless'.  But the truth is a bit more complicated.\n\n");
                result.screens[0].attach("Nowhere is that more evident than in their choices of fashion.");

                result.screens[1].attach("As with many aspects of high society, keeping up with the latest fashion is admired precisely because it is so arbitrary and difficult to follow.  When money is no object, the only limitation on how you can dress is your own personal taste.  But dressing in a way that fits well with the latest trends is something that money alone can't buy.\n\n");
                result.screens[1].attach("And the trends aren't entirely random.  When people see an outfit, they form an opinion about whether it looks good or not.  That opinion depends somewhat on the culture in which they were raised, but there's an instinctive element to it as well.  If a type of outfit is unpleasant to look at, or if it makes the wearer " + himHer(-1) + "self look unappealing, then it won't catch on as a trend.\n\n");
                result.screens[1].attach("At the same time, 'looking just like everyone else' is an unappealing trait, and of course it's a trait that changes to follow whatever the prevailing style of yesterday was.  This is why popular fashions seem to just arbitrarily change all the time.");

                result.screens[2].attach("There's no limit to how far a person could go in trying to become a trendsetter, discovering a new look which is so appealing that everybody else changes their fashion in order to follow you.  But if you try to dress the way that nobody else does, then you run the risk of picking an outfit that everybody had very good reason to avoid - you might end up looking completely ridiculous.\n\n");
                result.screens[2].attach("But there's no need for you to go that far.  ");
                if (currentPlaythrough.ownGender.presentation() == Gender.MALE) {
                    result.screens[2].attach("A secondhand suit that more or less fits your measurements.  A brand-name pocketwatch rented at a daily rate.\n\n");
                } else {
                    result.screens[2].attach("A secondhand dress that more or less fits your measurements.  A brand-name purse rented at a daily rate.\n\n");
                }
                result.screens[2].attach("The real aristocrats might mistake you for a business" + manWoman(-1) + " who just doesn't care enough to follow the latest trends.  And the time-tested style will leave an impression on everyone else.\n\n");
                if (getAttributeLevel(2, false).compareTo(BigInteger.valueOf(6)) >= 0) {
                    result.screens[2].attach("You'll just have to be careful not to damage any of the rented apparel.  If you're forced to actually buy any of it, it'll put you into life-ending debt.");
                } else {
                    result.screens[2].attach("It'll cost money that you don't really have right now, but apparently there's a thriving business of renting out fashionable apparel for relatively reasonable rates.  It's something you could see yourself doing.");
                }
            }
        } else if (g.index == 12) {
            result = new Scene(21);

            result.tracks[0] = Music.HOME;
            result.backgrounds[0] = "suburb";
            if (getGoalLevel(1, false) > 1) {
                result.screens[0].attach("Now that classes have started again, it seems only natural for you to start walking " + Tanaka() + " home, too.  ");
                if (getGoalLevel(1, false) > 3) {
                    result.screens[0].attach("There are no longer any illusions between the two of you, now.  Even if " + hisHer(5) + " old pretense of being afraid of a stalker was nothing but a lie, the truth of the matter is that " + heShe(5) + " just likes being with you.  And that's reason enough to do this.");
                } else if (getGoalLevel(1, false) > 2) {
                    result.screens[0].attach("Things between you were awkward for awhile after " + heShe(5) + " revealed the cynicism beneath " + hisHer(5) + " kind demeanor, but as soon as you catch sight of each other after class, it feels surprisingly natural to walk side-by-side and make your usual smalltalk.");
                } else {
                    result.screens[0].attach("At this time of day, the streets are full of other students walking home, so there shouldn't be any risk of any hypothetical stalker making a move.  But considering that you live just down the street from " + himHer(5) + ", there's no real reason to head home separately.");
                }
            } else {
                result.screens[0].attach("After class, " + Tanaka() + " surprises you by approaching you and asking you to walk " + himHer(5) + " home.  You haven't felt like going out of your way to hang out with " + himHer(5) + ", but considering that you live just down the street from each other, you don't see any reason to refuse.");
            }

            result.characters[1] = new String[]{"tanaka"};
            result.modifiers[1] = new Modifier[]{Modifier.CLOSEUP};
            result.emotions[1] = new String[]{"Grin"};
            result.screens[1].attach(Tanaka() + " looks pretty tired out.  " + HeShe(5) + " just got done trying out for the cheerleading team.\n\n");
            result.screens[1].attach("\"I'm sorry for being late.  The tryouts were complete chaos.  I'm lucky that my turn came when it did.  Some of those " + guyGirl(5) + "s are probably going to be there until dark.\"\n\n", 5);
            result.screens[1].attach("It's no big deal.  You figured it was something like that.\n\n");
            result.screens[1].attach("\"You should've just gone home without me.  I feel bad for making you wait so long.\"", 5);

            result.modifiers[2] = new Modifier[]{Modifier.CLOSEUP};
            if (getGoalLevel(1, false) > 3) {
                result.emotions[2] = new String[]{"Lovestruck"};
                result.screens[2].attach(Tanaka() + " should know better.  Needing to wait for an hour or two is nothing between friends.\n\n");
                result.screens[2].attach("\"I-If you say so...\"\n\n", 5);
            } else if (getGoalLevel(1, false) > 2) {
                result.emotions[2] = new String[]{"Shifty"};
                result.screens[2].attach("Doesn't " + Tanaka() + " remember?  There's no need for " + himHer(5) + " to pretend to be concerned for your sake anymore.  If you had a problem with waiting, you wouldn't be here.\n\n");
                result.screens[2].attach("\"Th-That's right, I almost forgot...\"\n\n", 5);
            } else {
                result.emotions[2] = new String[]{"Happy"};
                result.screens[2].attach("With how much " + Tanaka() + "'s always helping everybody, " + heShe(5) + " shouldn't feel guilty about running late every now and then.\n\n");
                result.screens[2].attach("\"... Yeah.  I guess you're right.\"\n\n", 5);
            }
            result.screens[2].attach("Will " + heShe(5) + " at least be able to relax for the rest of the day?\n\n");
            result.screens[2].attach("\"I will.  My schedule's actually clear for once...\"", 5);

            result.modifiers[3] = new Modifier[]{Modifier.CLOSEUP};
            result.emotions[3] = new String[]{"Grin"};
            result.screens[3].attach("That's rare.  And if " + heShe(5) + " gets picked for the team, then " + hisHer(5) + " schedule is about to get even busier.\n\n");
            result.screens[3].attach("\"If I didn't think I could handle it, then I wouldn't have gone to the tryouts.  And personally, I think my odds are pretty good.\"\n\n", 5);
            result.screens[3].attach("It's great that " + heShe(5) + "'s confident, but right now, " + heShe(5) + " looks like " + heShe(5) + "'s having trouble walking.  Is " + heShe(5) + " sore?\n\n");
            result.screens[3].attach("\"Maybe a little.  I did give it my 100%, after all.  Are you offering to give me a leg massage?\"", 5);

            result.modifiers[4] = new Modifier[]{Modifier.CLOSEUP};
            if (getGoalLevel(1, false) > 3) {
                result.screens[4].attach(HeShe(5) + " might actually not be joking.  But ");
                result.emotions[4] = new String[]{"Lovestruck"};
            } else {
                result.emotions[4] = new String[]{"Happy"};
                result.screens[4].attach("Jokes aside, ");
            }
            result.screens[4].attach("you were thinking of a more short-term solution.  There's a vending machine just around the corner.  Maybe " + Tanaka() + " should rest for a moment while you grab " + himHer(5) + " a drink.\n\n");
            result.screens[4].attach("\"Aw, you're so sweet.  Sure, that sounds great.\"\n\n", 5);
            result.screens[4].attach("What kind of drink would " + heShe(5) + " like?\n\n");
            result.screens[4].attach("\"Surprise me.  We'll see if you can guess what I'm in the mood for.\"", 5);

            result.characters[5] = new String[0];
            result.screens[5].attach("Of course, " + Tanaka() + " isn't going to make it easy for you.  While " + heShe(5) + " takes a seat on a nearby bench, you head around the corner to the vending machine to pick something out for " + himHer(5) + ".\n\n");
            result.screens[5].attach("You've known " + Tanaka() + " for awhile, so you have a pretty good idea of " + hisHer(5) + " tastes.  But that's not enough to guarantee success here.  You also have to account for the fact that " + heShe(5) + "'s tired after doing some intense physical activity.  " + HeShe(5) + "'ll be more inclined to have something cold and refreshing.  You stop in front of the vending machine and ponder your options.");

            result.backgrounds[6] = "black";
            result.screens[6].attach("Well, bottled water would be the cheapest option.  And it might also be an amusing way to poke fun at " + himHer(5) + " for leaving the decision to you.  But you're pretty sure that it's not what " + heShe(5) + "'s hoping for.\n\n");
            result.screens[6].attach("You know that " + Tanaka() + " likes iced coffee.  But the sun's already on its way down, and " + Tanaka() + " mentioned earlier that " + heShe(5) + "'ll just be relaxing for the rest of the day.  A caffeine rush might not be welcome.\n\n");
            result.screens[6].attach(Tanaka() + " doesn't normally drink soda.  But that's not because " + heShe(5) + " dislikes the taste - " + heShe(5) + " just doesn't think that it's a good idea to make a habit of having high-calorie drinks.  Maybe " + heShe(5) + "'d be willing to have one as a treat?  Especially since the fact that you're buying it for " + himHer(5) + " would provide an easy excuse to indulge.");

            result.screens[7].attach("If you take too long to make a decision, then you'll fail the test by default.  You pull a coin out of your pocket and reach for the coin slot.");

            result.tracks[8] = Music.SILENCE;
            result.screens[8].attach("But before you can push the coin into the slot, the sound of a scream causes you to pull up short.\n\n");
            result.screens[8].attach("\"Let go of me!  Help!  Somebody help!\"\n\n", 5);
            if (getGoalLevel(1, false) > 3) {
                result.screens[8].attach("In an instant, you're sprinting at full speed back the way you came.  That was " + Tanaka() + "'s voice.\n\n");
                result.screens[8].attach("There's no time for hesitation.  Adrenaline surges through your veins.  The coin bounces off the concrete behind you.");
            } else {
                result.screens[8].attach("It's obvious that somebody needs help, so you immediately turn and start running toward the voice.  But it doesn't immediately register for you that the voice belongs to " + Tanaka() + ".  " + HeShe(5) + "'s always calm and in control.  It seems impossible that " + heShe(5) + "'d be capable of screaming in that kind of panicked tone.\n\n");
                result.screens[8].attach("But even as you break into a run, the truth starts to sink in.  The scream came from the direction of the spot where you left " + Tanaka() + ".  The voice really does sound like " + hisHers(5) + ".  What does that mean?  Your brain refuses to process it.");
            }

            result.screens[9].attach("When you turn the corner, you see a scene from your nightmares.\n\n");
            result.screens[9].attach("It makes no sense.  ");
            if (getGoalLevel(1, false) > 2) {
                result.screens[9].attach("When " + Tanaka() + " told you that " + heShe(5) + " was worried about getting attacked, it was just an excuse to get you to spend time with " + himHer(5) + ".  There was never supposed to be any stalker.");

                result.screens[10].attach("And there definitely shouldn't have been three of them.  ");
            } else {
                result.screens[9].attach(Tanaka() + " said that " + hisHer(5) + " worries about a stalker were probably just all in " + hisHer(5) + " head.  Walking with " + himHer(5) + " was just a way to help " + himHer(5) + " feel safer, and it could also serve as an easy precaution.  You felt pretty confident that you could scare off a lone stalker.");

                result.screens[10].attach("But why are there three of them?  ");
            }

            result.backgrounds[10] = "tanaka5";
            result.tracks[10] = Music.REPORTING;
            result.screens[10].attach("No, there's more than that.  In the black van at the end of the side street, there's a driver and at least one other guy waiting inside.\n\n");
            result.screens[10].attach(Tanaka() + " isn't making it easy for them.  " + HeShe(5) + "'s fighting as hard as " + heShe(5) + " can, screaming and kicking wildly.  But they're still dragging " + himHer(5) + " back toward the van, inch by inch.");

            result.screens[11].attach("Your assumptions about what it would take to deter any potential stalker were wrong from the start.  Maybe a lone individual would've been afraid of attacking " + Tanaka() + " in public, or when " + heShe(5) + " was walking with someone.  But a group this large would only be dissuaded by a full police escort.  Who even are they?\n\n");
            result.screens[11].attach("It's a brazen attack in broad daylight.  There are several bystanders watching it happen.  None of them are lifting a finger to help.\n\n");
            result.screens[11].attach("But it's hard to blame them.  These people have guns.  They look like hardened killers.  Only a complete fool would try to get in their way.");

            result.sounds[12] = Effect.WHOOSH;
            result.backgrounds[12] = "tanaka6";
            result.screens[12].attach("Oh.  Apparently you're a complete fool.\n\n");
            result.screens[12].attach("The bystanders had good reason not to get involved with this, though.  Those guns aren't just for show.  While two of the men dragged " + Tanaka() + " toward the van, the third was keeping watch for anybody who would try to play hero.  And sure enough, he spots you immediately.\n\n");
            result.screens[12].attach("You're only a few seconds behind them, but it might as well be an eternity.  The gunman raises his weapon and points it toward your center mass.  He braces himself for the recoil from the shot that will kill you.  Time seems to slow down.");

            result.screens[13].attach("But he doesn't pull the trigger.  Why?  The dark glasses make it hard to read his expression, but from the way his stance abruptly shifts, it seems like something's caught him by surprise.  ");
            if (currentPlaythrough.ownGender.presentation() == Gender.MALE) {
                result.screens[13].attach("Was he not prepared to kill a person after all?  ");
            } else {
                result.screens[13].attach("Was he not prepared to kill a girl?  ");
            }
            result.screens[13].attach("Or is there something about you, specifically, that's making him reluctant to kill you?\n\n");
            result.screens[13].attach("It doesn't matter why.  The important thing is that this gives you a chance.  They clearly want to take " + Tanaka() + " alive.  And if they aren't willing to kill you, either, then those guns of theirs are just useless pieces of metal.\n\n");
            result.screens[13].attach(Tanaka() + " is still fighting.  If you can back " + himHer(5) + " up, then it won't matter that you're outnumbered.  You don't need to win.  You just need to put the gunmen on the defensive.  Once they're busy dealing with you, they won't be able to point their guns at anybody else who steps forward to stop them.  You only need one or two bystanders to join your side in order to turn the number advantage around.  You only need to stall until the police arrive.");

            result.screens[14].attach("You realize that you're shouting at the top of your lungs.  Your senses feel sharper than they've ever been.  Compared to the rest of your life, this is the only time that there have been actually life-or-death consequences for your actions.  Everything has led up to this moment.\n\n");
            result.screens[14].attach("It's time to see if you're up to the task.  You lunge forward, reaching out to grab the gunman.");

            result.backgrounds[15] = "black";
            result.sounds[15] = Effect.PUNCH;
            result.screens[15].attach("But that's as far as you get.  The gunman uses his pistol as a club to strike the side of your head, and you go down hard.\n\n");
            result.screens[15].attach("\"No!\"\n\n", 5);
            result.screens[15].attach(Tanaka() + "'s scream seems to fill you with strength.  But the world is still twisting and tilting around you.  Even standing up is hard enough, and when you try to take a step forward, you collapse again, the harsh asphalt scraping against your face.");

            result.screens[16].attach("It takes only a few seconds to get your bearings again.  But by that time, the van is already driving away.");

            result.screens[17].attach("The next few hours pass by as a blur.  The police want to take a statement, and you also need to stop by the hospital to make sure that your head injury isn't serious.\n\n");
            result.screens[17].attach("On a rational level, you know that you don't bear any blame for what happened.  In fact, you have a lot to be proud about.  During the scuffle, you tore away a few threads of the gunman's jacket, and you're able to hand them to the police as evidence.  There's no way that you could actually singlehandedly stop a group of attackers like that from abducting " + Tanaka() + ".  Just providing a clue to help with the investigation is as much as anybody could ask for.\n\n");
            result.screens[17].attach("But it's hard to be satisfied with that.  It feels like the police aren't taking this as seriously as they should.  It's just another case number to them.  Apparently abductions like this have been getting more common over the past few weeks.  Too bad nobody told you ahead of time.");

            if (getGoalLevel(6, true) == 0) {
                if (getGoalLevel(1, false) > 3) {
                    result.screens[18].attach("This isn't how things were supposed to go.  " + Tanaka() + " was finally starting to open up to you.  Even if " + heShe(5) + " wasn't actually the " + guyGirl(5) + " " + heShe(5) + " had always pretended to be, you were beginning to find that " + hisHer(5) + " true self was also somebody you enjoyed being with.  Maybe even as more than friends.\n\n");
                } else if (getGoalLevel(1, false) > 2) {
                    result.screens[18].attach("Your relationship with " + Tanaka() + " was... complicated.  " + HeShe(5) + " had made it clear that " + heShe(5) + " didn't really care about you, or about anyone else for that matter.  If it had been you who got abducted, then it's hard to imagine " + Tanaka() + " losing much sleep over it.  But can you really abandon " + himHer(5) + "?\n\n");
                } else {
                    result.screens[18].attach("You had thought that you'd have more chances to spend time with " + Tanaka() + " after your summer break was over.  You never could have imagined that things would turn out like this.  Now, there's a very real chance that you'll never even see " + himHer(5) + " again.\n\n");
                }
                result.screens[18].attach("It seems like there should be more you can do.  And needless to say, " + Tanaka() + "'s admirers want to help.  After dozens of messages sent back and forth between yourself and " + Tanaka() + "'s other friends, everyone agrees on a plan.");

                result.screens[19].attach("They agree to pool their funds in order to hire a bounty hunter or a private investigator or something.  There's some talk of searching online, or perhaps even using the dark web, but the consensus is that it'd be better to meet someone face-to-face in order to judge whether they seem competent and trustworthy enough.  And fortunately, there seems to be a good place to do just that.\n\n");
                result.screens[19].attach("Over on the bad side of town, there's a nightclub which is known as a notorious gathering hub for individuals who operate in the gray areas of the law.  It wouldn't even be surprising if the people who abducted " + Tanaka() + " were actually regulars there.  If you want to catch them, you'll need to descend to their level.");

                result.screens[20].attach("By the time the plan is established, it's gotten too late to carry it out tonight.  It'd be best to do this as quickly as possible, considering that the trail is already going cold - to say nothing of what " + Tanaka() + " might be going through with every hour of delay.  But it's necessary to give everybody the time to scrape up funds and head there in a group.\n\n");
                if (currentPlaythrough.weeklyActions[weekDayNumber()][5] == Action.DANCE) {
                    result.screens[20].attach("At least you got the address of the nightclub where they'll be meeting up.  Maybe you can check it out ahead of time.");
                } else {
                    result.screens[20].attach("If you want to help out, then it looks like they're meeting at the nightclub tomorrow.");
                }
            } else {
                result.backgrounds[18] = "callingMansion";
                result.characters[18] = new String[]{"", "dumont"};
                result.emotions[18] = new String[]{"", "Sad"};
                result.screens[18].attach("And so you decide to call up " + DuMont() + " and see if " + heShe(2) + " can help.  But " + hisHer(2) + " response isn't exactly encouraging.\n\n");
                result.screens[18].attach("\"I already have someone looking into it.  I must warn you, though... if the abductors manage to get your friend out of the country, it'll be beyond my means to find " + himHer(5) + ".\"\n\n", 2);
                result.screens[18].attach(DuMont() + " is rich.  Would reaching across national borders really be so difficult for " + himHer(2) + "?\n\n");
                result.screens[18].attach("\"We're talking about staging an international manhunt here.  If my resources were truly limitless, I'd have already fed all the hungry and housed all the homeless in this city by now.  I do believe in using my wealth to do as much good as possible, but... that doesn't mean gambling it on somebody who might already be gone.\"", 2);

                result.emotions[19] = new String[]{"", "Uncomfy"};
                result.screens[19].attach("Even if " + DuMont() + " is going to write " + Tanaka() + " off as a lost cause, you're still starting to make some money of your own.  Maybe you can hire somebody yourself.\n\n");
                result.screens[19].attach("\"I understand that you don't want to give up on your friend, but you need to be realistic.  Even dedicating your whole life to bringing " + himHer(5) + " back might not be enough to get it done.  If you throw away your own happiness because you aren't willing to accept what happened to " + himHer(2) + ", then that will only make for a worse tragedy.\"\n\n", 2);
                result.screens[19].attach("And what if spending your money to track down " + Tanaka() + " is what makes you happiest?\n\n");
                result.screens[19].attach("\"Then... at least I can make sure that you don't throw that money away on some scam artist.  I'll put you in touch with the person I hired to look into the abduction.  I suppose " + heShe(3) + " might be willing to quote you a cheaper price than " + heShe(3) + " did for me.  But if all goes well, maybe it won't even come to that.  If anybody can find your friend before the trail goes cold, it's " + himHer(3) + ".\"", 2);

                result.backgrounds[20] = "dorm";
                result.screens[20].attach("As " + DuMont() + " says, there's nothing to do now but wait and see.  You try your best to put the situation out of your mind for the rest of the night.\n\n");
                result.screens[20].attach("However, the next morning, you'll learn that it was just as " + DuMont() + " feared.  The abductors seem to have fled the country with " + Tanaka() + ".  And " + DuMont() + " isn't willing to commit the kind of resources that would be necessary to reliably find " + himHer(5) + ".\n\n");
                result.screens[20].attach("If anybody's going to rescue " + Tanaka() + ", it'll have to be you.");
            }
        } else if (g.index == 13) {
            if (getGoalLevel(21, false) > 0) {
                result = new Scene(11);

                result.tracks[0] = Music.SILENCE;
                result.backgrounds[0] = "club";
                boolean alreadyWorkingTogether = loopActionFirstUsed(Action.WORKTOGETHER, currentPlaythrough) >= 0;
                if (alreadyWorkingTogether) {
                    result.screens[0].attach("You aren't feeling up to working together with " + Jackal() + " tonight, so you're just paying " + himHer(3) + " to head out alone.  It's a strange feeling.  Even though you know that " + Jackal() + " is more than capable of taking care of " + himHer(3) + "self, you still can't help but wonder what kind of trouble " + heShe(3) + "'ll have to get through on " + hisHer(3) + " own tonight.\n\n");
                    result.screens[0].attach("Until now, you've always met up wherever you'd be searching that night.  But this time, you're actually heading into the nightclub to meet with " + himHer(3) + " like any other client.");
                } else {
                    result.screens[0].attach("Tonight, you're finally taking " + Jackal() + " up on " + hisHer(3) + " offer to start searching for " + Tanaka() + ".  Needless to say, you have the money prepared as well.  " + HeShe(3) + " may be a friend of a friend, but " + heShe(3) + " still expects to be paid for " + hisHer(3) + " work.\n\n");
                    result.screens[0].attach("And when " + heShe(3) + "'s working, " + heShe(3) + " conducts " + hisHer(3) + " business from inside " + DuMont() + "'s nightclub.  You head inside to meet with " + himHer(3) + ".");
                }

                result.screens[1].attach("It doesn't take long to find where " + Jackal() + " has set " + himHer(3) + "self up.  " + HeShe(3) + " has a corner of the nightclub all to " + himHer(3) + "self.  There's no danger of any nearby patrons overhearing " + hisHer(3) + " discussion with any clients.  And as you get closer, it's plain to see why the nearby booths are all empty.\n\n");
                result.screens[1].attach("On the table in front of " + himHer(3) + "...");

                result.backgrounds[2] = "jackal1";
                result.tracks[2] = Music.DESERT;
                result.screens[2].attach(HeShe(3) + " has some sort of partially-disassembled firearm.  It's hard to tell with the gun in this state, but it doesn't look like the sort of thing you'd go hunting with.  It looks like military-issue.\n\n");
                result.screens[2].attach("And what about that tube on the end?  Is that an actual grenade launcher?  There's no way that this is legal.  Does " + Jackal() + " flaunt this stuff for every client who comes by?\n\n");
                result.screens[2].attach("\"Yes.  It is useful for illustrating an important point.  The work I do is nominally illegal, but the distinction between 'legal' and 'illegal' is less meaningful than people usually think.\"\n\n", 3);
                result.screens[2].attach("So, it's like a marketing pitch.");

                result.backgrounds[4] = "jackal2";
                result.screens[3].attach("\"Well, sometimes it scares off the client, so if it is a 'marketing pitch', then it is a poor one.  But the clients who are scared off are those I prefer to avoid.  When a client loses his nerve in the middle of a job, it creates trouble for me.\"\n\n", 3);
                result.screens[3].attach("The atmosphere around here is pretty rough.  A lot of those clients probably lose their nerve after one glance at the clientele here.\n\n");
                result.screens[3].attach("\"It is not as bad as it used to be.  " + DuMont() + " has been watching over this place for some time.  Whenever a particularly desperate person steps in, " + DuMont() + " will offer them a chance to turn his life around.  It is... amazing, to see just how much one person can do.\"", 3);

                result.backgrounds[4] = "jackal1";
                result.screens[4].attach("\"But you are not paying me to make smalltalk.  We should discuss the situation surrounding your friend.\"\n\n", 3);
                if (alreadyWorkingTogether) {
                    result.screens[4].attach("Is " + Jackal() + " really going to be alright on " + hisHer(3) + " own?  Some of the scuffles you've gotten into while 'negotiating' with gangsters have been pretty rough.\n\n");
                    result.screens[4].attach("\"It is true that I will need to be more cautious than usual tonight.  But I know my own limits.\"", 3);

                    result.screens[5].attach("\"We are getting closer to finding the abductors.  Every local gang we rule out as not being involved is another step forward.\"\n\n", 3);
                    result.screens[5].attach("It was a bit of a shock to see how many criminal organizations were operating around here.  This town had seemed so peaceful and law-abiding.  How have the police failed to notice all these gangs?\n\n");
                    result.screens[5].attach("\"The police know.  They simply have no reason to care.\"", 3);
                } else {
                    result.screens[4].attach("That's right.  Just what is " + Jackal() + " going to be doing out there?\n\n");
                    result.screens[4].attach("\"I will make an educated guess about who might have met with the men responsible.  And then I will interrogate them at gunpoint and steal anything that might be a clue.  This will be repeated as necessary until your friend turns up.\"", 3);

                    result.screens[5].attach("This is starting to sound pretty extreme.  " + DuMont() + " left you with the impression that you'd basically be hiring a private eye.  But " + Jackal() + " seems to be ready to go on a violent rampage across the entire city.\n\n");
                    result.screens[5].attach("\"Only the parts of the city that are complicit in human trafficking.  I am certain that no innocents will be harmed.\"\n\n", 3);
                    result.screens[5].attach("If " + Jackal() + " is so certain of who's innocent and who isn't, then why not go to the police with " + hisHer(3) + " evidence?\n\n");
                    result.screens[5].attach("\"It would be a waste of time.  The police are already more or less aware of what happens in the slums here.  But they have no reason to care.\"", 3);
                }

                result.screens[6].attach("\"The gangs are an integral part of the city.  The drugs they smuggle into the city are enjoyed by the ruling class.  And the people trafficked in and out of the city... are also enjoyed by the ruling class, in various ways.  Cheap labor, girls forced into prostitution.  To try to stop it is to make some very dangerous enemies.\"\n\n", 3);
                result.screens[6].attach("And that's why " + Jackal() + " warned you against getting involved?\n\n");
                result.screens[6].attach("\"Yes.  ", 3);
                if (alreadyWorkingTogether) {
                    result.screens[6].attach("I can teach you how to avoid getting shot or stabbed, but the risk of making powerful enemies never quite goes away.  Although, if " + DuMont() + " is right about your talent in politics and business, you might be able to overcome even that danger.\"", 3);
                } else {
                    result.screens[6].attach("You should step carefully when dealing with the rich and powerful.  This is something to keep in mind while " + DuMont() + " is introducing you to politicians and businessmen.\"", 3);
                }

                result.backgrounds[7] = "club";
                result.characters[7] = new String[]{"jackal"};
                result.emotions[7] = new String[]{"Neutral"};
                result.sounds[7] = Effect.RELOAD;
                result.screens[7].attach("\"For my part, there is nothing I can do about our rulers.  My reach doesn't extend above the slums.  And now that the sun has fallen, it is time for me to put that reach to use.\"\n\n", 3);
                result.screens[7].attach("With practiced movements, " + Jackal() + " finishes assembling " + hisHer(3) + " gun and gets to " + hisHer(3) + " feet.\n\n");
                result.screens[7].attach("\"I will call to let you know how tonight's search goes.\"", 3);

                result.characters[8] = new String[0];
                result.screens[8].attach("As quickly as that, " + Jackal() + " is gone.  You're left to contemplate " + hisHer(3) + " words on your own.\n\n");
                result.screens[8].attach("What happened to " + Tanaka() + " wasn't some sort of unavoidable tragedy.  Crimes like that are allowed to happen because those in power tolerate them.\n\n");
                result.screens[8].attach("And now, " + DuMont() + " has started to introduce you to some of those powerful people.  " + HeShe(2) + " even seems to believe that you have the potential to become one of those powerful people, in another 10 or 20 years.\n\n");
                result.screens[8].attach("If you do become powerful, just what will you do with that power?");

                result.screens[9].attach("A couple of hours later, you get a phone call from " + Jackal() + ".\n\n");
                result.screens[9].attach("\"I was able to cross another gang off the list of likely suspects.\"\n\n", 3);
                result.screens[9].attach("It's progress, but it looks like the mystery of who took " + Tanaka() + " will remain unsolved for another night.");

                result.screens[10].attach("And now, it's gotten late.  ");
                if (currentPlaythrough.weeklyActions[weekDayNumber()][5].baseCost.compareTo(BigInteger.ZERO) < 0) {
                    result.screens[10].attach("You need to get some sleep.\n\n");
                } else if (currentPlaythrough.weeklyActions[weekDayNumber()][4].relationship == 0) {
                    result.screens[10].attach(Hashimoto() + " is probably waiting for you.\n\n");
                } else {
                    result.screens[10].attach("You need to get moving.\n\n");
                }
                if (alreadyWorkingTogether) {
                    result.screens[10].attach("Maybe you'll feel good enough to head out with " + Jackal() + " again tomorrow.");
                } else {
                    result.screens[10].attach("Maybe you should take " + Jackal() + " up on " + hisHer(3) + " offer to train you.  Having a partner would probably help " + himHer(3) + " do this a lot faster.");
                }
            } else {
                result = new Scene(26);

                result.tracks[0] = Music.SILENCE;
                result.backgrounds[0] = "club";
                result.screens[0].attach("You finally have a decent amount of money saved up.  According to " + DuMont() + ", this much should be enough to get the attention of the 'fixer' " + heShe(2) + " recommended to you.\n\n");
                result.screens[0].attach("Apparently, the fixer conducts " + hisHer(3) + " business right here in the nightclub.  You take a look around, and you quickly spot somebody matching the description that " + DuMont() + " gave you.");

                result.screens[1].attach("The fixer has " + hisHer(3) + " corner of the nightclub all to " + himHer(3) + "self.  There's no danger of any nearby patrons overhearing " + hisHer(3) + " discussion with any clients.  And as you get closer, it's plain to see why the nearby booths are all empty.\n\n");
                result.screens[1].attach("On the table in front of " + himHer(3) + "...");

                result.backgrounds[2] = "jackal1";
                result.tracks[2] = Music.DESERT;
                result.screens[2].attach(HeShe(3) + " has some sort of partially-disassembled firearm.  It's hard to tell with the gun in this state, but it doesn't look like the sort of thing you'd go hunting with.  It looks like military-issue.\n\n");
                result.screens[2].attach("And what about that tube on the end?  Is that an actual grenade launcher?  There's no way that this is legal.\n\n");
                result.screens[2].attach("\"If it is illegal, then why have the police not arrested me for it?\"\n\n", 3);
                result.screens[2].attach("You can't quite place " + hisHer(3) + " accent.  Maybe " + heShe(3) + "'s legitimately uncertain about the local laws?");

                result.screens[3].attach("But one look into " + hisHer(3) + " eye tells you that " + heShe(3) + " knows exactly what " + heShe(3) + "'s doing.  " + HeShe(3) + "'s challenging you to answer - why haven't the police arrested " + himHer(3) + " for having an illegal weapon?  You feel like you're being tested.\n\n");
                result.screens[3].attach("Well, maybe the police just don't know?  This nightclub's clientele don't seem like the type to seek out interaction with the cops.  It's easy to believe that nobody's called to report " + himHer(3) + ".\n\n");
                result.screens[3].attach("\"This place is known for criminal activity.  Drug deals and the like.  If the police did a raid, then people carrying illegal weapons are the least of what they would find.  I promise you that they know this.\"\n\n", 3);
                result.screens[3].attach("Can " + heShe(3) + " really be so certain?  The simplest explanation is that the police just don't know.  It makes more sense than all of them silently agreeing to turn a blind eye, right?");

                result.backgrounds[4] = "jackal2";
                result.screens[4].attach("\"There are plenty of other examples of the police doing just that.  Take speed limits, for example.  The sign says that the limit is 60, but everybody drives at 65 or 70 or more.\"\n\n", 3);
                result.screens[4].attach("Does that really count as the same thing?  Everybody knows that speed limits are only enforced if you go way over the posted number.\n\n");
                result.screens[4].attach("\"Then why do they not simply post a number that accurately reflects how fast one must go in order to be pulled over for it?\"\n\n", 3);
                result.screens[4].attach("Because it gives them discretion to look at other factors.  Like if the driver is driving a bit erratically, or if it makes the cop suspicious that the driver is involved in some crime.  Aside from that, the only time people get pulled over for going 5 over the limit is if they're in a small town where the cops have a grudge against them specifically, or if the cops have a quota of speeding tickets to meet, and the driver is just in the wrong place at the wrong time.");

                result.backgrounds[5] = "jackal1";
                result.screens[5].attach("\"In that case, they're not being pulled over for speeding.  They're being pulled over for those other things.  Those are the things which can meaningfully be considered 'illegal'.  If nobody's willing to punish you on the basis of a law, then that law is nothing more than pointless words in a pointless book.\"\n\n", 3);
                result.screens[5].attach("It might be reasonable to say that erratic driving is more of a crime than going slightly above the speed limit.  But requiring cops to meet ticket quotas is itself illegal, and it would take a very fringe theory of civics to say that making a cop dislike you is against the law.\n\n");
                result.screens[5].attach("And the other side of the argument is even worse.  Does getting away with a crime mean that it isn't actually a crime?  By that logic, you could avoid being a criminal just by outrunning the cops, or bribing the judge, or-\n\n");
                result.screens[5].attach("\"Or by fleeing the country after abducting a " + boyGirl(5) + " off the street in broad daylight.\"", 3);

                result.screens[6].attach("Well, " + DuMont() + " said that " + Jackal() + " was a skilled investigator, so it's not surprising that " + heShe(3) + "'d already be familiar with your circumstances.  It looks like no introductions are necessary.\n\n");
                result.screens[6].attach("\"" + DuMont() + " hired me to look into " + Tanaka() + "'s abduction on the very same night that it happened.  ", 3);
                if (getGoalLevel(12, false) > 0) {
                    result.screens[6].attach("In the process, I obtained a transcript of your report to the police.\"\n\n", 3);
                } else {
                    result.screens[6].attach("I was most likely aware of the situation even before you were.\"\n\n", 3);
                }
                result.screens[6].attach("And what was " + heShe(3) + " able to find out?\n\n");
                result.screens[6].attach("\"Not much.  None of the usual suspects among the local criminal gangs were responsible.  I reported back to " + DuMont() + " that it would take up to three months for me to work my way through all the other possible groups until I hit the one that has " + Tanaka() + ".\"", 3);

                if (currentPlaythrough.currentDay < 40) {
                    result.screens[7].attach("Up to three months?  Then " + heShe(3) + "'s barely gotten started.\n\n");
                    result.screens[7].attach("\"No, I have not started at all.  ", 3);
                } else {
                    if (currentPlaythrough.currentDay < 61) {
                        result.screens[7].attach("So, it should only be a couple more months now, right?\n\n");
                    } else if (currentPlaythrough.currentDay < 91) {
                        result.screens[7].attach("So, " + heShe(3) + " should probably be able to find " + Tanaka() + " within the next month?\n\n");
                    } else {
                        result.screens[7].attach("Does that mean that " + heShe(3) + "'s almost done by now?\n\n");
                    }
                    result.screens[7].attach("\"No, I never even started searching.  ", 3);
                }
                result.screens[7].attach(DuMont() + " decided that it wasn't worth the price, so I have been spending the time on other jobs.\"\n\n", 3);
                result.screens[7].attach("Couldn't " + Jackal() + " offer a discount for jobs where somebody's life hangs in the balance?\n\n");
                result.screens[7].attach("\"I have less than two years to live.  I do not think that the time I have left should be sold cheaply.\"\n\n", 3);
                result.screens[7].attach(Jackal() + " is sick?\n\n");
                result.screens[7].attach("\"Something like that.\"", 3);

                result.screens[8].attach("Well, this isn't unexpected.  When " + DuMont() + " referred you to somebody who uses violence to get jobs done beyond the reach of the law, you weren't expecting " + himHer(3) + " to be running a charity.  Nobody's going to care about helping to save " + Tanaka() + " unless they stand to gain something by doing so.\n\n");
                result.screens[8].attach("\"You have my sympathy.  According to the letter of the law, situations like what happened to your friend should never be permitted.  But nobody wants to do what is necessary to save " + himHer(5) + ", because it would get them branded as a criminal.\"\n\n", 3);
                result.screens[8].attach("What exactly does " + Jackal() + " mean by 'what is necessary to save " + himHer(5) + "'?\n\n");
                result.screens[8].attach("\"Make an educated guess about who might have met with the men responsible.  Interrogate them at gunpoint and steal anything that might be a clue.  Repeat as necessary until your friend turns up.\"", 3);

                result.screens[9].attach("This is starting to sound pretty extreme.  " + DuMont() + " left you with the impression that you'd basically be hiring a private eye.  But " + Jackal() + " seems to be ready to go on a violent rampage across the entire city.\n\n");
                result.screens[9].attach("\"Only the parts of the city that are complicit in human trafficking.  I am certain that no innocents will be harmed.\"\n\n", 3);
                result.screens[9].attach("If " + Jackal() + " is so certain of who's innocent and who isn't, then why not go to the police with " + hisHer(3) + " evidence?  Isn't human trafficking illegal?\n\n");
                result.screens[9].attach("\"Of course it isn't.  It is merely 'driving a little above the speed limit'.  Human trafficking is an industry worth millions, but how often do you hear about millionaires being prosecuted for their part in it?  If a trafficker is too blatant, or if he causes trouble in some other way, then a trafficking charge may be used to get rid of him.  But overall, the upper class has little reason to care about human trafficking.  They are always protected by armed security details, so they never need fear it happening to them, and they stand to benefit from the practice.\"", 3);

                result.screens[10].attach("\"Trafficked labor is cheap labor.  It is useful to have a workforce that is too afraid to speak up about being underpaid or abused.  On top of that, smuggling people goes hand-in-hand with smuggling drugs.  You are familiar with cocaine's popularity among the political class, yes?  They do not put much effort into seeing their own suppliers arrested.\"\n\n", 3);
                result.screens[10].attach("This seemed like such a nice little town.  It's hard to believe that it has such a dark criminal underbelly.\n\n");
                result.screens[10].attach("\"It is a nicer place than most.  It allows most of its people to grow up in comfort and leisure without needing to confront such matters.  But across the world, very few people have that luxury.  If you were to see the way that the majority of people live, you would think it only natural for the world to work this way.  It would be obvious that peace and safety are the exception to the rule.\"", 3);

                result.backgrounds[11] = "jackal2";
                result.screens[11].attach("Why is " + Jackal() + " telling you this?  Wouldn't it be easier for " + himHer(3) + " to just take your money and tell you what " + heShe(3) + " finds afterward?\n\n");
                result.screens[11].attach("\"I wish to make sure that you understand what you are getting involved with.  My work may end up causing inconveniences for some powerful people.  They may follow the money and find that you are the ultimate cause for their troubles.\"\n\n", 3);
                result.screens[11].attach("But why does " + Jackal() + " care?  " + HeShe(3) + " just got done telling you about how the world is an uncaring place where right and wrong don't matter.  Can " + heShe(3) + " really afford to worry about endangering people like you?\n\n");
                result.screens[11].attach("\"Do not mistake me.  It is true that the police are mostly unconcerned with right and wrong.  It is true that the upper class care only for their profits and their pleasures.  They are powerful, and so their desires become the law.\"", 3);

                result.backgrounds[12] = "jackal1";
                result.screens[12].attach("\"But I am also powerful.  In the space between the barrel of my gun and the nearest bulletproof cover, it does not matter what others may say about what is illegal and what is deserving of punishment.  There is nobody else who can overrule my decisions.  I am the only law that matters.\"\n\n", 3);
                result.screens[12].attach("At least until " + heShe(3) + " causes enough trouble that " + heShe(3) + " gets an arrest warrant put on " + hisHer(3) + " head.\n\n");
                result.screens[12].attach("\"Yes.  But so far, that has not happened.  The police and their masters tolerate people like me, just as the common people tolerate them in turn.  We each have our own sphere of authority defined by our ability to use violence to defend it.\"", 3);

                result.screens[13].attach("\"And within my own sphere, I have resolved that no more innocents shall be harmed through no fault of their own.  My decision is final.\"\n\n", 3);
                result.screens[13].attach("Well, it's nice that " + heShe(3) + " cares enough to give you a chance to back out.  If you weren't so set on this, then " + heShe(3) + " might actually have lost out on a lot of money.\n\n");
                result.screens[13].attach("Even so, three months is a long time.  You aren't exactly made of money, but if you were to somehow scrape up enough to hire another person, would that speed it up?\n\n");
                result.screens[13].attach("\"As much as it would help to have somebody watching my back, I would not recommend it in this case.  The risk is too high that our enemies would buy them off for a higher price than you could pay, and they would betray us.\"", 3);

                result.screens[14].attach("If all " + heShe(3) + " needs is somebody to watch " + hisHer(3) + " back, then why not have you come along with " + himHer(3) + "?\n\n");
                result.screens[14].attach("\"Do not be ridiculous.  Did I not just tell you that I am unwilling to put innocents in the line of fire?\"\n\n", 3);
                result.screens[14].attach(HeShe(3) + " also told you that just hiring " + himHer(3) + " to investigate this could attract dangerous attention from powerful people.  In that case, wouldn't it actually be safer for you to help " + himHer(3) + " complete the investigation as quickly as possible?\n\n");
                result.screens[14].attach("\"Only if you actually have the skills to be useful.  If not, then babysitting you will only slow me down.\"\n\n", 3);

                result.screens[15].attach("Do you have the skills to be useful?  It's true that you've never done anything like this before, but you've been getting more fit lately.  You're pretty sure you can handle it.\n\n");
                result.screens[15].attach(Jackal() + " stares at you for several moments.  It's clear that " + heShe(3) + " doesn't like the idea, but " + heShe(3) + " must find your argument persuasive.  You stare back at " + himHer(3) + " as the silence stretches onward.");

                result.sounds[16] = Effect.RELOAD;
                result.backgrounds[16] = "club";
                result.characters[16] = new String[]{"jackal"};
                result.outfits[16] = new String[]{"Coat"};
                result.emotions[16] = new String[]{"Neutral"};
                result.screens[16].attach("Then, " + heShe(3) + " abruptly gets to " + hisHer(3) + " feet, assembling " + hisHer(3) + " gun and sliding it under " + hisHer(3) + " coat.\n\n");
                result.screens[16].attach("\"Fine.  Show me what you can do.\"", 3);

                result.backgrounds[17] = "black";
                result.characters[17] = new String[0];
                result.screens[17].attach(Jackal() + " leads you out of the nightclub and into the side street behind it.  By this hour, the crowds are mostly gone, so you have plenty of space to yourselves.  " + Jackal() + " directs you to walk into a nearby alleyway.  Meanwhile, " + heShe(3) + " takes off " + hisHer(3) + " coat, then walks over to stand at the alley's mouth, putting " + himHer(3) + "self between you and the street.");

                result.backgrounds[18] = "night";
                result.characters[18] = new String[]{"jackal"};
                result.outfits[18] = new String[]{""};
                result.emotions[18] = new String[]{"Neutral"};
                result.screens[18].attach("\"Alright.  We will pretend that I am a hired thug on guard duty, and you just stole some documents from my employer.  I am trying to prevent you from making your escape.  Try to get past me.\"\n\n", 3);
                result.screens[18].attach("Are these the skills that " + Jackal() + " expects to be relevant for this job?  You've never been in a situation like this before, but it seems pretty straightforward.  The passage out to the street is narrow, so you'll have to actually confront " + Jackal() + " in order to get out there.  " + HeShe(3) + "'ll try to grab you, and then...\n\n");
                result.screens[18].attach("And then what?  " + HeShe(3) + " didn't mention any other rules for this training exercise, but the goal is just to get past " + himHer(3) + ", not to actually beat " + himHer(3) + " in a fight.  All you have to do is shove " + himHer(3) + " aside.");

                result.emotions[19] = new String[]{"Uncomfy"};
                result.screens[19].attach("That shouldn't be too hard, right?  " + Jackal() + " looks a lot less imposing without " + hisHer(3) + " coat.  " + HeShe(3) + "'s probably not any tougher than " + Hashimoto() + ".\n\n");
                result.screens[19].attach("It makes sense.  This is just a test to show that you have the basic abilities required to not slow " + himHer(3) + " down in the field.  Of course it would be stacked in your advantage.  All you have to do is keep focused on your goal, and resist the temptation to try anything fancy.  Just get past " + himHer(3) + ".\n\n");
                result.screens[19].attach(Jackal() + " has been patiently waiting while you think about your approach.  But now, you signal to " + himHer(3) + " that you're ready.  You hunch yourself down, ready to make a dash past " + himHer(3) + ".");

                result.sounds[20] = Effect.PUNCH;
                result.backgrounds[20] = "black";
                result.characters[20] = new String[0];
                result.screens[20].attach("The next couple of minutes are missing from your memory.  Apparently you hit your head pretty hard.  Sharp waves of pain radiate through your entire body.\n\n");
                result.screens[20].attach("Come to think of it, aren't you supposed to put down a padded mat when practicing this sort of thing?  You try to voice your complaints, but the words get jumbled up in your brain before they reach your mouth.  Maybe it's better to just hold still for now.");

                result.backgrounds[21] = "jackal3";
                if (currentPlaythrough.upgradeLevels[3] > 2) {
                    result.screens[21].attach("\"How disappointing.  You clearly have some talent, but you have somehow managed to go your entire life without developing it.  If I were born in this country, would I have turned out as soft as you?\"\n\n", 3);
                } else {
                    result.screens[21].attach("\"Well, that is more or less what I expected.  You are decently fit, but you have not worked at all to develop the necessary skills.\"\n\n", 3);
                }
                result.screens[21].attach("You realize that " + Jackal() + " is talking to you.  It sounds like you didn't pass.\n\n");
                result.screens[21].attach("\"As you are now, there would be no point in bringing you along.  You would be dead weight.\"", 3);

                result.backgrounds[22] = "jackal4";
                result.screens[22].attach("You'd only be dead weight 'as you are now'?  Does that mean that " + Jackal() + " would be willing to bring you along if you practice some more?\n\n");
                result.screens[22].attach("\"I am not sure you would survive that.  At least wait until you can pick yourself up off the street before you start talking about going another round.\"\n\n", 3);
                result.screens[22].attach("You're already starting to feel better.  What matters now is figuring out how to reach the point where you'll actually be able to accomplish something.  Is there some sort of class that offers lessons on how to do this?\n\n");
                result.screens[22].attach("\"No.  At least there are none that I would trust.  I would want to give you some lessons myself.  That is the only way that I would feel confident about letting you watch my back.\"", 3);

                result.backgrounds[23] = "night";
                result.sounds[23] = Effect.RUSTLE;
                result.characters[23] = new String[]{"jackal"};
                result.emotions[23] = new String[]{"Uncomfy"};
                result.screens[23].attach("And how much would those lessons cost?\n\n");
                result.screens[23].attach("\"... No charge.  My workday starts when the sun goes down.  Anything I do before then is just... how do you say it?  'Killing time'.\"\n\n", 3);
                result.screens[23].attach("Really?  No charge at all?\n\n");
                result.screens[23].attach("\"If I ever do end up relying on you to watch my back, then it works out to my benefit too.  But if you do not take it seriously, then I will find something else to do while I wait for night to fall.\"", 3);

                result.emotions[24] = new String[]{"Neutral"};
                result.screens[24].attach("\"Let me know ahead of time, and I will come here early so that we can meet up and do some training.  Be certain that you have rested well beforehand.  I intend to push you hard.\"\n\n", 3);
                result.screens[24].attach("That sounds ominous.  But if you can get skilled enough to meet " + Jackal() + "'s standards, then you'll be able to save a lot of time and money.  And who knows where else those skills might help you?");

                result.characters[25] = new String[0];
                result.screens[25].attach("There's no time for any proper lessons tonight, since " + Jackal() + " needs to head out and resume the search for " + Tanaka() + ".  But apparently " + heShe(3) + "'s willing to start teaching you as early as tomorrow.  ");
                if (currentPlaythrough.weeklyActions[weekDayNumber()][4].baseCost.compareTo(BigInteger.ZERO) > 0 || currentPlaythrough.weeklyActions[weekDayNumber()][5].baseCost.compareTo(BigInteger.ZERO) > 0) {
                    result.screens[25].attach("Better rest up.");
                } else {
                    result.screens[25].attach("Maybe it'd be best to plan on sleeping in tomorrow morning.");
                }
            }
		} else if (g.index == 14) {
			result = new Scene(21);

			result.backgrounds[0] = "night";
			if (getCurrentAction() == Action.HIREFIXER) {
				result.backgrounds[0] = "club";
				result.screens[0].attach("Tonight, you're hiring " + Jackal() + " once again to head out and see what" + heShe(3) + " can dig up regarding who might have been involved with " + Tanaka() + "'s abduction.  It's impossible to know how close " + heShe(3) + " is to finding a lead.  All you can do is trust that " + heShe(3) + "'s on the right track.\n\n");
				result.screens[0].attach("But that doesn't mean that you're just paying " + himHer(3) + " for " + hisHer(3) + " time and sending " + himHer(3) + " on " + hisHer(3) + " way.  Before and after every excursion, you discuss the case with " + himHer(3) + " and talk about which of the city's gang hideouts " + heShe(3) + " should be investigating next.  This is far outside your area of expertise, but you get the impression that " + Jackal() + " just finds it helpful to have somebody to bounce ideas off.  And on occasion, you do get a chance to provide some genuinely useful input.");

				result.characters[1] = new String[]{"jackal"};
				result.outfits[1] = new String[]{"Coat"};
				result.emotions[1] = new String[]{"Uncomfy"};
				if (currentPlaythrough.personGenders[5].presentation() == Gender.FEMALE) {
					result.screens[1].attach("\"" + Tanaka() + " is... beautiful, obviously.  ", 3);
				} else {
					result.screens[1].attach("\"" + Tanaka() + " is so pretty that " + heShe(5) + " could easily be mistaken for a girl.  ", 3);
				}
				result.screens[1].attach("I have been working from the assumption that " + heShe(5) + " was abducted in order to force " + himHer(5) + " into sex work.\"\n\n", 3);
				result.screens[1].attach(Jackal() + " can be pretty blunt at times.  That's not a pleasant thought.\n\n");
				result.screens[1].attach("\"I am sorry.  But it is the kind of question which must be asked if we are going to identify who is most likely to know where " + heShe(5) + " is.\"", 3);

				result.emotions[2] = new String[]{"Neutral"};
				result.screens[2].attach("Why would they take " + Tanaka() + " to another country just to pimp " + himHer(5) + " out?\n\n");
				result.screens[2].attach("\"Because it would make it more difficult for " + himHer(5) + " to escape.  " + HeShe(5) + " would not be able to talk to the locals, " + heShe(5)+ " would not know the neighborhoods, " + heShe(5) + " would not end up running into anybody who recognizes " + himHer(5) + ".  " + HeShe(5) + " would not even know if the local police were trustworthy, or whether they would be working with " + hisHer(5) + " captors.\"\n\n", 3);
				result.screens[2].attach("Is that really enough to justify the cost of smuggling a captive across international lines?\n\n");
				result.screens[2].attach("\"It can be.  Slave labor is profitable for the owner, and national borders have been getting more porous lately.  It is not as expensive as you would think.\"", 3);

				result.emotions[3] = new String[]{"Uncomfy"};
				result.screens[3].attach("If " + Jackal() + " thinks that that's the most likely cause behind " + Tanaka() + "'s abduction, then you're in no position to argue against it.  But why bring it up now?\n\n");
				result.screens[3].attach("\"Because I am questioning my assumption.\"\n\n", 3);
				result.screens[3].attach("Did some new piece of evidence come up?\n\n");
				result.screens[3].attach("\"No.  But after investigating most of the local gangs that engage in large-scale sex trafficking, I am running out of suspects.  The only ones left are the ones I have not dealt with as often.  Figuring out how to get some answers from them will be... time-consuming.\"", 3);

				result.emotions[4] = new String[]{"Frown"};
				result.screens[4].attach("\"So, I must ask myself.  Were we simply unlucky in that the gang that smuggled " + Tanaka() + " out of the country was coincidentally one of the few which is difficult for me to touch?  Or should I shift focus to investigating those gangs which I had previously written off as unlikely to be involved?\"\n\n", 3);
				result.screens[4].attach("It would be nice if " + Tanaka() + " weren't actually captured by one of the sex-trafficking gangs, and that they were just taking their time before sending a ransom demand or something.\n\n");
				result.screens[4].attach("\"And it would be nice if there were no need for me to go up against a gang that will take multiple nights of bloody work to investigate.  But I cannot allow the desire for an easier mission to distort my judgment of which gang is actually most likely to be responsible.  If I make the wrong choice, then it could mean weeks of wasted work.\"", 3);

				result.emotions[5] = new String[]{"Sigh"};
				result.screens[5].attach("At times like this, you're reminded of the immense pressure that " + Jackal() + " faces in " + hisHer(3) + " line of work.  It would be easy if " + heShe(3) + " only cared about making money, but " + heShe(3) + " seems genuinely serious about helping " + hisHer(3) + " clients.\n\n");
				result.screens[5].attach("There's no workplace manual " + heShe(3) + " can consult to determine what to do in any given situation.  " + HeShe(3) + " has no manager to whom " + heShe(3) + " can refer difficult cases.  " + HeShe(3) + " deals in matters of life and death, and if something goes wrong, " + heShe(3) + " has nobody but " + himHer(3) + "self to blame.\n\n");
				result.screens[5].attach("\"I apologize.  I should not be burdening you with this question.  You paid to receive my expertise, not to hear my doubts.\"\n\n", 3);
				result.screens[5].attach("If " + Jackal() + " finds it useful to vent, then it's in your interest to hear " + himHer(3) + " out too.  Though, at the same time, it wouldn't be good for your wishful thinking to influence " + himHer(3) + " in the wrong direction.");

				result.emotions[6] = new String[]{"Uncomfy"};
				result.screens[6].attach("\"Wishful thinking...  Hm, but at the same time, if I second-guess myself because I am worried about what might be influencing my thought process, then I am just erring in the other direction.  That is not necessarily any better.\"\n\n", 3);
				result.screens[6].attach("It sounds like " + Jackal() + " might have reached a conclusion.\n\n");
				result.screens[6].attach("\"Yes.  I think it is time to start casting a slightly wider net.\"", 3);

				result.emotions[7] = new String[]{"Neutral"};
				result.screens[7].attach("\"And now it is starting to get dark.  I am heading out.\"\n\n", 3);
				result.screens[7].attach(Jackal() + " turns to leave.  You watch " + himHer(3) + " walk down to the nightclub's ground floor and out the front doors.");

				result.characters[8] = new String[0];
				result.tracks[8] = Music.SILENCE;
				result.screens[8].attach("Once " + Jackal() + "'s gone, there's nothing for you to do but wait for " + himHer(3) + " to get back.  It always feels like there ought to be something more useful you could be doing while " + Jackal() + " works.\n\n");
				result.screens[8].attach("But waiting here means that you can receive " + hisHer(3) + " report and discuss it with " + himHer(3) + " immediately as soon as " + heShe(3) + " gets back.  And it's not always possible to predict just when that will be.  Sometimes " + heShe(3) + " gets back after midnight.  Other times, " + heShe(3) + " comes in early, limping and spattered with other people's blood, but still bearing whatever useful information " + heShe(3) + " was able to extract in the process of " + hisHer(3) + " violence.\n\n");
				if (getGoalLevel(15, false) < 3) {
					result.screens[8].attach("Somehow, no matter how beat up " + heShe(3) + " is, " + heShe(3) + " always waves aside any of your concerns that " + heShe(3) + " might need to take the next day off.  " + HeShe(3) + " seems to be almost superhumanly tough.");
				} else {
					result.screens[8].attach("With the medical treatments " + heShe(3) + "'s receiving at The Tower, " + heShe(3) + "'s always ready to head out again the next night, no matter what injuries " + heShe(3) + " takes.");
				}

				result.screens[9].attach("As usual, you just buy a drink and settle into your usual routine of pacing restlessly while you wait for " + Jackal() + " to return.  But before you even have a chance to touch the glass, you're interrupted by the ringing of your phone.  It's " + Jackal() + ".\n\n");
				result.screens[9].attach("\"I have found something.  Can you come out to meet me?  I am going to park here and make some phone calls.\"\n\n", 3);
				result.screens[9].attach(HeShe(3) + " found 'something'?  The vague announcement leaves you with so many questions that you can't even decide which to ask first.  But maybe that's for the best.  " + Jackal() + "'s tone is urgent.  If you let " + himHer(3) + " make those phone calls, maybe " + heShe(3) + "'ll be able to answer all your questions afterward.\n\n");
				result.screens[9].attach("\"I am just a few blocks away.  You can let yourself into the van when you get here.\"", 3);

				result.backgrounds[10] = "night";
				result.sounds[10] = Effect.RUN;
				result.screens[10].attach("You set out at a run, leaving the drink untouched behind you.  After so long spent searching, it's hard to believe that you're finally making some progress.\n\n");
				result.screens[10].attach("But now you have something.  If " + Jackal() + " is already returning from " + hisHer(3) + " search, then it can only mean that " + heShe(3) + "'s confident in whatever lead " + heShe(3) + "'s found.\n\n");
				result.screens[10].attach("You haven't run all-out like this in awhile.  But you don't feel fatigued in the slightest.  Your destination is just ahead.");

				result.backgrounds[11] = "black";
				result.screens[11].attach("Around the next corner, you catch sight of " + Jackal() + "'s vehicle parked up against the curb.  ");
			} else {
				result.screens[0].attach("Tonight, you're investigating the latest gangster hideout that " + Jackal() + " has pointed out as possibly being involved with " + Tanaka() + "'s abduction.  From the outside, it just looks like a typical run-down apartment, but apparently the gang that runs the place is involved in smuggling operations.  The 'residents', foreigners who don't speak the language and can't go to the police for help, are all forced to work as drug mules.\n\n");
				result.screens[0].attach("This fits with the pattern of places you and " + Jackal() + " have investigated together.  In order to smuggle " + Tanaka() + " out of the country, the abductors must have had local contacts with the leverage to bypass screening regulations.  That makes for a pretty long list of suspects, but you and " + Jackal() + " have been working your way through it.");

				result.characters[1] = new String[]{"thug"};
				result.emotions[1] = new String[]{""};
				result.screens[1].attach("You walk around the block, finding the back alley that runs behind the apartment.  It's cramped and full of garbage.  You're so focused on finding your footing in the dark that it's almost a surprise when a voice calls out to you.\n\n");
				result.screens[1].attach("\"Hey!  Where do you think you're going?\"\n\n");
				result.screens[1].attach("It's a man's rough voice.  You start to give him your prepared story about how you're walking home to the nearby housing projects after a long night at the bar, but he doesn't even let you finish.\n\n");
				result.screens[1].attach("\"Don't bother with the bullshit.  Your friend sold you out.  We know why you're here.  Come quietly with us, we just want to have a little chat.\"");

				result.sounds[2] = Effect.RUN;
				result.characters[2] = new String[0];
				result.emotions[2] = new String[0];
				result.screens[2].attach("You run.  By the time you've gotten up to speed, the man is already shouting to the other thugs.\n\n");
				result.screens[2].attach("\"" + HeShe(-1) + "'s here!  Get " + himHer(-1) + "!\"\n\n");
				result.screens[2].attach("A dark figure emerges from the direction you came, blocking the mouth of the alley.  With the garbage ruining your footing, you aren't confident that you'll be able to get him out of the way without falling down in the process.  If you falter now, the thug behind you and the others closing in will be able to catch up, and it'll all be over.\n\n");
				result.screens[2].attach("But just over your head, you see the ladder of a fire escape.");

				result.screens[3].attach("You get as good of a running start as you can, launching yourself at the brick wall and clambering up to reach the lowest rung of the ladder.  You've trained for this.  Your fingertips are barely able to wrap around the metal, and you pull yourself up just as the two thugs close in beneath you.\n\n");
				result.screens[3].attach("But even as you pull yourself up and start to climb to the rooftops, you know that it's far from over.  Below you, one of the thugs is crouching down to give a boost to the other so that he can follow you.  And you hear more footsteps approaching from above.\n\n");
				result.screens[3].attach("You climb as fast as you can, and you reach the top of the ladder just in time to see another thug charging across the rooftop at you.");

				result.sounds[4] = Effect.PUNCH;
				result.screens[4].attach("He swings his fist at you, but you go low, kicking his leg out from under him and giving him a push, using his momentum against him.  You've trained for this, too.\n\n");
				result.screens[4].attach("The thug stumbles past you, off the rooftop, and you hear a pair of mingled screams as he collides with the other thug that was climbing up after you.  By the time they crash into the garbage below, you're already running at top speed.\n\n");
				result.screens[4].attach("There's yet another thug on the rooftop with you, so you head in the opposite direction - toward the other edge of the rooftop.");

				result.sounds[5] = Effect.WHOOSH;
				result.screens[5].attach("The gap between this rooftop and the next is a long one.  You jump, but your feet don't quite make it to the other side.  The impact of the rooftop's corner against your abdomen knocks the wind out of you, and you just barely manage to cling to the concrete surface.\n\n");
				result.screens[5].attach("As you struggle to haul yourself all the way up to the rooftop, you look behind you and see the thug watching from across the gap.  Apparently he doesn't have the nerve to attempt the jump.\n\n");
				result.screens[5].attach("\"" + HeShe(-1) + "'s on the roof of the sandwich shop!  Get up there!  Don't let " + himHer(-1) + " escape!\"\n\n");
				result.screens[5].attach("But you're far from safe.  You're still outnumbered by the thugs below, and you're already slowing down.  If you can't lose them, then it's only a matter of time until they block off your escape and catch you.");

				result.sounds[6] = Effect.RUN;
				result.tracks[6] = Music.SILENCE;
				result.backgrounds[6] = "black";
				result.screens[6].attach("And so you keep running.  Two more rooftop jumps, then another scuffle with a thug who had climbed up ahead of you.  A chase.  An attempt to reach the populated main thoroughfare, blocked off by three more thugs who had anticipated the move.  It feels like half the city is chasing you.\n\n");
				result.screens[6].attach("But eventually, the sound of pursuing footsteps on the sidewalks below you becomes quieter.  You drop down into an alleyway, breaking the line of sight of your rooftop pursuers, and by the time they reach that alleyway, you're already two streets over.\n\n");
				result.screens[6].attach("After one last check over your shoulder to make sure that you aren't being watched, you drop prone and roll under one of the cars parked alongside the road.  You hear footsteps running past... and then silence.\n\n");
				result.screens[6].attach("A few minutes later, you roll out from under the car and jog toward the sound of traffic.  Just in case they come back to look for you, you want to return to the safety of the crowd as soon as possible.");

				result.backgrounds[7] = "night";
				result.screens[7].attach("You make your way to an outdoor market.  As the sound of the crowd washes over you, your phone begins to vibrate.  It's " + Jackal() + ".\n\n");
				result.screens[7].attach("\"Did everything go well?\"\n\n", 3);
				result.screens[7].attach("You reply with the passphrase that the two of you had agreed upon for this mission.  If you had said anything else, then it'd indicate to " + Jackal() + " that you had been caught and were being forced to answer at gunpoint.  In that case, " + heShe(3) + "'d immediately begin a rescue operation.\n\n");
				result.screens[7].attach("But by replying with the passphrase, you're letting " + himHer(3) + " know that everything went exactly as planned.");

				result.screens[8].attach("This is the plan that the two of you had agreed upon.  Shortly before your arrival, " + Jackal() + " would use " + hisHer(3) + " underworld contacts to pass along a 'warning' that somebody was coming to spy on the gang's activity.  They would scramble all their available thugs to prepare for you, and then you'd lead them on a chase.\n\n");
				result.screens[8].attach("While they were chasing you, " + Jackal() + " had the chance to walk in through the front door, head straight to the boss's office, and shake some answers out of him.");

				result.screens[9].attach("You stomach still feels a bit bruised after that chase, but you should be fine to hit the next gang hideout on " + Jackal() + "'s list tonight.\n\n");
				result.screens[9].attach("\"That... might not be necessary.\"\n\n", 3);
				result.screens[9].attach("Did this gang boss actually know something about " + Tanaka() + "?  Have you finally found the group that's responsible for " + hisHer(5) + " abduction?\n\n");
				result.screens[9].attach("\"Maybe.  Come back to where we parked the van.  We can talk more there.  In the meantime, I have some phone calls to make.\"", 3);

				result.screens[10].attach("It's a shock to have finally made some progress.  You've been going down " + Jackal() + "'s list of gangs, starting with the ones " + heShe(3) + " thought were most likely to have been involved with the abduction.  The further you got through the list, the more likely it seemed that there was a flaw in " + Jackal() + "'s assumptions.  Maybe a new gang had sprung up without catching " + Jackal() + "'s attention, or maybe the abductors had found a way to smuggle " + Tanaka() + " out of the country without involving any of the local gangs.\n\n");
				result.screens[10].attach("But now you have something.  If " + Jackal() + " has called off the rest of the night's search, then it can only mean that " + heShe(3) + " thinks the time is better spent on this new lead.\n\n");
				result.screens[10].attach("Your pain and fatigue are gone, as if they were never there.  You move at a jog back toward the spot where you and " + Jackal() + " split up.");

				result.backgrounds[11] = "black";
				result.screens[11].attach("The vehicle is right where you left it.  ");
			}
			result.screens[11].attach("It's a stakeout van filled with surveillance equipment and other electronics, pretty high-tech stuff.  ");
            if (getGoalLevel(15, false) > 3) {
                result.screens[11].attach("Even if " + heShe(3) + " gives away most of " + hisHer(3) + " money, " + heShe(3) + " still keeps enough to buy this kind of thing.\n\n");
            } else {
                result.screens[11].attach("This must be the kind of thing that " + Jackal() + " spends your money on.\n\n");
            }
			result.screens[11].attach("When you open the back door of the van, you see that " + Jackal() + " is already inside, " + hisHer(3) + " back toward you.  Judging by the information on the terminals inside, " + heShe(3) + "'s been busy communicating with " + hisHer(3) + " contacts and looking up information.  And on the central display...");

			result.tracks[12] = Music.NEON;
			result.backgrounds[12] = "jackal8";
			result.screens[12].attach("There's a map.\n\n");
			result.screens[12].attach("\"This is where the abductors came from.\"\n\n", 3);
			result.screens[12].attach("Isn't that country on the other side of the world?\n\n");
			result.screens[12].attach("\"I was surprised as well.  It is not common for ", 3);
			if (currentPlaythrough.personGenders[5].presentation() == Gender.FEMALE) {
				result.screens[12].attach("girls ", 3);
			} else {
				result.screens[12].attach("victims ", 3);
			}
			result.screens[12].attach("from this city to be trafficked such great distances.  But the evidence is solid.", 3);
			if (getGoalLevel(12, false) > 0) {
				result.screens[12].attach("  Those threads you grabbed from the abductor's suit actually turned out to be a pointer in the right direction.  They are from a brand which is popular in that part of the world.", 3);
			}
			result.screens[12].attach("\"\n\n", 3);

			result.screens[13].attach("\"According to the gang boss I just interrogated, ", 3);
			if (currentPlaythrough.currentDay < 60) {
				result.screens[13].attach("a few weeks ago, ", 3);
			} else {
				result.screens[13].attach("a couple of months ago, ", 3);
			}
			result.screens[13].attach("an unfamiliar foreign crime syndicate reached out to form a partnership.  He sent a liaison to meet with them in person, and they made a deal.  Seven people to be smuggled into the city.  Eight to be smuggled out.  The extra person fits " + Tanaka() + "'s description.\"\n\n", 3);
			result.screens[13].attach("Then " + Tanaka() + " was the only person they abducted?\n\n");
			result.screens[13].attach("\"It would seem so.  It was a targeted abduction.  They were not simply grabbing the first " + boyGirl(5) + " they could find.\"\n\n", 3);
			result.screens[13].attach("But why " + Tanaka() + "?  And what are they doing with " + himHer(5) + "?\n\n");
			result.screens[13].attach("\"You have done a good job of staying focused up to this point.  Do not get distracted by unneeded questions now.\"", 3);

			result.screens[14].attach("That's right.  Before, " + Tanaka() + " could have been anywhere in the whole world.  But now you've narrowed it down to a single city.\n\n");
			result.screens[14].attach("\"Better than that.  We also have the address of the building where the liaison met with the abductors' organization.  It sounds like it is their headquarters.\"\n\n", 3);
			result.screens[14].attach(Jackal() + " opens a display window that shows the view from the street outside the building.  It's a bit surreal to think that " + Tanaka() + " might be just on the other side of one of those walls.\n\n");
			result.screens[14].attach("\"Well, it is unlikely that they will be holding " + himHer(5) + " in their headquarters.  But somewhere inside there will be the information about where " + heShe(5) + " was ultimately taken.\"", 3);

			result.screens[15].attach("How can you get ahold of that information?  Can you give a tip to the local authorities about what's happening there?\n\n");
			result.screens[15].attach("\"I would not recommend it.  Their police force is notoriously corrupt.  Far worse than here.  All you would accomplish is letting them know that somebody is chasing after them.  They would increase their security on " + Tanaka() + ", and then it would become even harder to get " + himHer(5) + " back.\"\n\n", 3);
			result.screens[15].attach("Then what about hiring somebody who lives there, a 'fixer' like " + Jackal() + "?  They could break in, do some investigation, and maybe even set " + Tanaka() + " free.\n\n");
			result.screens[15].attach("\"It could work, but if you pick a fixer who is affiliated with their crime family, then the fixer will only take your money and then warn them that some foreigner is trying to hire somebody to free " + Tanaka() + ".  It would be a roll of the dice, and if you are unlucky, then it is no better than going to the police.\"\n\n", 3);
			result.screens[15].attach("Well, that's fine.  If you can't rely on anybody else to rescue " + Tanaka() + ", then you'll just have to go there and do it yourself.");

			result.screens[16].attach("\"Do you speak the local language?\"\n\n", 3);
			result.screens[16].attach("You aren't even sure off the top of your head which language is spoken in that country.  But maybe you can learn it.\n\n");
			result.screens[16].attach("\"If you are going to be interrogating gangsters and searching for information, you cannot afford to be carrying a phrasebook in one hand the whole time.  You will need to be fluent.\"\n\n", 3);
			result.screens[16].attach("It doesn't take that long to get fluent in a new language, right?  If you're willing to spend most of the day studying, then you can compress a few months' worth of language courses into a much shorter time.\n\n");

			result.screens[17].attach("\"Even if you can learn the language so quickly, that will only matter if you can get a permit to enter the country in the first place.  I do not know how closely you have been following the news, but international relations are... tense at the moment.\"\n\n", 3);
			result.screens[17].attach("What do you need to do in order to get that kind of permit?\n\n");
			result.screens[17].attach("\"You need to give their customs officials the impression that you are the kind of wealthy tourist who will bring enough money to the country to be worth letting in.  " + DuMont() + " will be able to help you with that, but it will go easier if you really do have some legitimate income you can point to.  Work history and such.\"\n\n", 3);
			if (getAttributeLevel(2, false).compareTo(BigInteger.valueOf(11)) >= 0) {
				result.screens[17].attach("You aren't exactly rich, but you do have a pretty good nest egg saved up.  It sounds like you and " + DuMont() + " should be able to figure something out.");
			} else {
				result.screens[17].attach("It sounds like it might be time to shift your focus toward bringing in some more money.");
			}

			result.backgrounds[18] = "night";
			result.characters[18] = new String[]{"jackal"};
			result.outfits[18] = new String[]{"Coat"};
			result.emotions[18] = new String[]{"Uncomfy"};
			result.modifiers[18] = new Modifier[]{Modifier.CLOSEUP};
			result.sounds[18] = Effect.RUSTLE;
			result.screens[18].attach("You and " + Jackal() + " climb out of the back of the van to get some fresh air.\n\n");
			result.screens[18].attach("\"If you are determined to do this, then I think you can.  I only wish I could come with you to see it through to the end.  But I do not know the language", 3);
			if (getGoalLevel(25, false) == 0) {
				result.screens[18].attach(" either", 3);
			}
			result.screens[18].attach(".  I would be the one who slows you down.\"\n\n", 3);
			if (getGoalLevel(15, false) < 3) {
				result.screens[18].attach(Jackal() + " has mentioned that " + heShe(3) + " doesn't have much longer to live.  ");
			} else {
				result.screens[18].attach(Jackal() + " doesn't have much time left.  ");
			}
			result.screens[18].attach("You can't exactly ask " + himHer(3) + " to spend what's left of " + hisHer(3) + " time learning a language that " + heShe(3) + " might not even get much of a chance to use.");

			result.emotions[19] = new String[]{"Neutral"};
			result.screens[19].attach("But you have what you need.  " + Jackal() + "'s done enough.  From here on, it's up to you.\n\n");
			result.screens[19].attach("\"I will still be here to offer whatever help I can provide.  If you need some advice about how to deal with an unfamiliar country, I am only a phone call away.  And even before then, ", 3);
			if (getGoalLevel(15, false) < 2) {
				result.screens[19].attach("if you want some training on how to stay alive while dealing with gangsters, I can give you some lessons.\"\n\n", 3);
			} else {
				result.screens[19].attach("if you need help gathering funds, we can work together.  You have proven that you make for a reliable partner.\"\n\n", 3);
			}
			result.screens[19].attach("It seems like this isn't merely business for " + Jackal() + " anymore.  " + HeShe(3) + " must be coming to see you as a friend.");

			result.characters[20] = new String[0];
			result.screens[20].attach("The two of you continue to talk for a bit longer about your plans for rescuing " + Tanaka() + ", but before long, it's time for you to head home.\n\n");
			result.screens[20].attach("You're close to achieving your goal.  And with " + Tanaka() + "'s rescue potentially only a matter of weeks away, every single day of delay feels more significant than ever.");
		} else if (g.index == 15) {
			if (g.tier == 0) {
				result = new Scene(13);

				result.tracks[0] = Music.DESERT;
				result.backgrounds[0] = "street";
				result.screens[0].attach("You've settled into a new routine of training with " + Jackal() + ".  The two of you meet up in the alleyway behind the nightclub, " + Jackal() + " will explain one of the things you'll need to know how to do in order to work with " + himHer(3) + ", and then " + heShe(3) + " gives you a hands-on demonstration.  At first, most of the lessons fell under the category of general athleticism.  Moving quickly, always having an escape route, being able to jump and climb.  But now, " + heShe(3) + "'s finally starting to teach you about hand-to-hand combat.\n\n");
				result.screens[0].attach("It's nothing like your scuffles with " + Hashimoto() + ".  No matter how you try to fight, " + Jackal() + " always gets your legs out from under you in a matter of seconds, slams you down against the pavement, then steps back and tells you to get up again.  It's even more exhausting than the running and jumping " + heShe(3) + " was having you do before.\n\n");
				result.screens[0].attach("It's frustrating.  It doesn't feel like you're making much progress.  And it's hard to believe that it'll actually be useful out there.  Who even fights hand-to-hand these days?");

				result.characters[1] = new String[]{"jackal"};
				result.emotions[1] = new String[]{"Neutral"};
				result.screens[1].attach("While recovering after getting thrown to the ground for what feels like the twentieth time today, you finally voice your misgivings.  Why bother learning martial arts when guns exist?\n\n");
				result.screens[1].attach("\"Because guns represent an escalation.  When the shooting starts, people begin to die.  Nobody wants that.\"\n\n", 3);
				result.screens[1].attach("Then what was all " + Jackal() + "'s talk about " + hisHer(3) + " gun making " + himHer(3) + " the only law that mattered?  When you first met " + himHer(3) + ", " + heShe(3) + " made it sound like " + heShe(3) + " was actually going to kill some people.\n\n");
				result.screens[1].attach("\"If I have to fire this gun, then something has already gone very wrong.  Even after we find whoever abducted your friend, there should not be any need for a shootout.  As long as they understand what I can do, they should be happy to accept a deal where everybody gets to walk away alive.\"", 3);

				result.emotions[2] = new String[]{"Uncomfy"};
				result.screens[2].attach("It's reassuring to see that " + Jackal() + " isn't outright bloodthirsty, but this still seems like just another way of saying that " + heShe(3) + "'ll be using intimidation and death threats to get them to cooperate.\n\n");
				result.screens[2].attach("\"That is just how civilization works.  If you want something from somebody, then you demonstrate that they will face violent consequences for not giving it to you.\"\n\n", 3);
				result.screens[2].attach("It isn't exactly common to see people holding each other at gunpoint around here.  And even if it were, such behavior can hardly be called 'civilized'.\n\n");
				result.screens[2].attach("\"All interaction within a civilization is done at gunpoint.  Even the most mundane business transactions are backed by the threat of violence.  Suppose you take a loan, but you cannot pay it back.  Your creditor will obtain a court order to take the money directly from your bank account.  If your bank account does not have enough money, then an order of seizure and sale will allow them to take some other property to pay the difference.\"", 3);

				result.emotions[3] = new String[]{"Neutral"};
				result.screens[3].attach("\"If you resist having your property seized, then a warrant will be issued for your arrest.  And if you successfully resist all attempts to arrest you, then eventually, you will be shot.\"\n\n", 3);
				result.screens[3].attach("It's pretty rare for things to get that far.\n\n");
				result.screens[3].attach("\"And that is why the system works.  Nobody wants to get shot, and there are plenty of opportunities to avoid that escalation.  That is what 'civilization' means.  The alternative is for people to immediately kill each other to get what they want.\"\n\n", 3);
				result.screens[3].attach("Wouldn't an even better system be one where people just focus on helping each other instead of needing a gun held to their heads?\n\n");
				result.screens[3].attach("\"I hope you manage to find a place like that someday.\"", 3);

				result.emotions[4] = new String[]{"Frown"};
				result.screens[4].attach("\"But for now, we are going to be dealing with some people who will definitely need some more persuasion before they will give us what we want.  And judging by how brazen they were about abducting your friend in broad daylight, I do not expect it to be easy.  I might bring a few extra guns just in case.\"\n\n", 3);
				result.screens[4].attach("Shouldn't " + heShe(3) + " be teaching you to shoot a gun as well, then?\n\n");
				result.screens[4].attach("\"No.\"\n\n", 3);
				result.screens[4].attach("Why not?\n\n");
				result.screens[4].attach("\"Because if you lose your cool and start shooting, then it could make everything much worse.  You have not nearly enough time in the field.\"", 3);

				result.emotions[5] = new String[]{"Neutral"};
				result.screens[5].attach("Even though you're the one who offered to watch " + Jackal() + "'s back, it doesn't feel great to think that " + heShe(3) + "'s expecting you to walk into a possible firefight without any relevant equipment.\n\n");
				result.screens[5].attach("\"Guns are not the only way to protect yourself.  I suppose it is time to show this to you.\"\n\n", 3);
				result.screens[5].attach(Jackal() + " walks over to the small pile of props " + heShe(3) + "'s been using during your training sessions together and pulls out a bundle of cloth.  When " + heShe(3) + " unrolls it, you can see that it seems to be a set of armored clothing.  The pants and shirt have plates of firm synthetic material to cover the limbs, and there's also a heavy vest that comes all the way down to your thighs.\n\n");
				result.screens[5].attach("Did " + Jackal() + " really buy this just for you?\n\n");
				result.screens[5].attach("\"No.  It belonged to one of my partners, and I have been looking for an excuse to get rid of it.  It is all military-grade, except for a hole in the chest which I had to repair it with what I had on hand.\"", 3);

				result.emotions[6] = new String[]{"Uncomfy"};
				result.screens[6].attach("Wait, so something blew a hole in the chest section of this armor?  Was it being worn at the time?  Wearing a dead " + manWoman(-1) + "'s armor seems a bit strange.  You'd rather not get cursed.\n\n");
				result.screens[6].attach("\"If you have no choice but to put yourself in front of people who are trying to shoot you, then your life is already cursed.  Wearing this will at least make you less likely to die from it.\"\n\n", 3);
				result.screens[6].attach("If " + heShe(3) + "'s giving this to you now, then does that mean-\n\n");
				result.screens[6].attach("\"No, I do not yet trust you to watch my back.  But I think that you are at least ready to get some real-world experience.\"", 3);

				result.emotions[7] = new String[]{"Neutral"};
				result.screens[7].attach("\"You can think of this as homework.  Some of my old associates are in need of more people to stand guard on their territory.  You will be up against thieves and troublemakers who are trying to do the same sorts of things that we will be doing once it is time to search for your friend together.\"\n\n", 3);
				result.screens[7].attach("So, this is your chance to see how it works from the other side.\n\n");
				result.screens[7].attach("\"And you can make some good money in the process.  Normally, doing security work requires a certificate which shows that you trained at an accredited institution, but I can put in a good word for you.  And once you have this on your resume, nobody will care how you got your training.\"", 3);

				result.emotions[8] = new String[]{"Uncomfy"};
				result.screens[8].attach("\"It is hard work, though, so nobody would think less of you for putting our training sessions here on hold while you get started.\"\n\n", 3);
				result.screens[8].attach(Jackal() + " is offering you a way out - an excuse to give up on searching for " + Tanaka() + ".  You can take what you've learned from " + himHer(3) + " and put it to use so that you don't feel like you've wasted your time.  And the longer you spend putting your training sessions 'on hold', the easier it will become to tell yourself that it's probably too late to save " + Tanaka() + " anyway.\n\n");
				result.screens[8].attach("Does " + Jackal() + " not want to teach you anymore?\n\n");
				result.screens[8].attach("\"If you still want to learn, then I am happy to keep teaching you.  And that applies regardless of whether you want to keep searching for your friend.\"", 3);

				result.emotions[9] = new String[]{"Frown"};
				result.screens[9].attach("It sounds more like " + Jackal() + " wants you to stop searching for " + Tanaka() + ".\n\n");
				result.screens[9].attach("\"No, I would not say that either.  I just want to ensure that you have no regrets about whatever you choose.\"\n\n", 3);
				result.screens[9].attach("Does " + Jackal() + " have regrets about " + hisHer(3) + " own life?\n\n");
				result.screens[9].attach("\"This is not about me.  You are the one with your whole life ahead of you.  You still have the option of going back to your regular routine alongside the friends you have left.  Are they less important to you than " + Tanaka() + " was?\"", 3);

				result.emotions[10] = new String[]{"Neutral"};
				result.screens[10].attach("Maybe you were asking the wrong question.  Does " + Jackal() + " think you'll be happier if you give up the search?\n\n");
				result.screens[10].attach("\"I could not honestly say.  I do not know you well enough.  But I feel like I should at least make sure you have a chance to think about it.  As much as I would like to resolve this situation without any bloodshed, I cannot guarantee that it will work out so nicely.  You might end up having to kill people.  Or you might end up getting killed.\"\n\n", 3);
				result.screens[10].attach("When " + heShe(3) + " puts it that way, it sounds a little bit crazy not to go back to your peaceful life.\n\n");
				result.screens[10].attach("\"It depends on who you ask.  Myself, I would say that it's better to die than to live with regrets.\"", 3);

				result.emotions[11] = new String[]{"Uncomfy"};
				result.screens[11].attach("\"In any case, the choice is yours.  I will still be available, whatever you end up deciding to do.\"\n\n", 3);
				result.screens[11].attach("It's getting late, so you and " + Jackal() + " end the day's training session there.  ");
				if (currentPlaythrough.weeklyActions[weekDayNumber()][4] == Action.HIREFIXER) {
					result.screens[11].attach(HeShe(3) + " heads out to start on tonight's investigation.");
				} else {
					result.screens[11].attach(HeShe(3) + " heads into the nightclub to prepare for tonight's work.");
				}

				result.characters[12] = new String[0];
				result.screens[12].attach("As you walk home, you have plenty of time to think.  Despite " + hisHer(3) + " dispassionate manner, it seems like " + Jackal() + " actually cares a lot about making sure that you don't get in over your head.  The least you can do is think about " + hisHer(3) + " advice.\n\n");
				result.screens[12].attach("But you don't have to make your decision just yet.  In the short term, you have a new part-time job to check out.  If " + Jackal() + "'s lessons are any indication, it'll probably take a pretty heavy toll on your body.  But as long as it pays well, it might be worth it.");
			} else if (g.tier == 1) {
				result = new Scene(19);

				result.tracks[0] = Music.DESERT;
				result.backgrounds[0] = "street";
				result.screens[0].attach("You feel like you're finally making progress with " + Jackal() + "'s training.  Your muscle memory is definitely developing, and you're able to react a lot faster to whatever " + Jackal() + " does to try to trip you up.  Even if you still don't stand much of a chance against " + himHer(3) + " in a straight fight, you're better at rolling with the punches than you were before.  You're able to keep going for longer before you need to take a break.");

				result.sounds[1] = Effect.WHOOSH;
				result.screens[1].attach("Today, you're having another sparring session.  ");
				if (currentPlaythrough.ownGender.presentation() == Gender.MALE) {
					if (currentPlaythrough.personGenders[3].presentation() == Gender.MALE) {
						result.screens[1].attach(Jackal() + " isn't an especially large guy, but " + heShe(3) + "'s covered in lean muscle, and " + hisHer(3) + " hand-to-hand combat skill is so far beyond yours that a true fight would be completely one-sided.  So instead, " + heShe(3) + " holds back and lets you make the first move, only punishing you if you make a mistake in your approach.");
					} else {
						result.screens[1].attach("Even though " + Jackal() + " is smaller and lighter than you, " + hisHer(3) + " years of hand-to-hand combat experience more than make up for the difference.  If you try to overwhelm " + himHer(3) + " with brute force, " + heShe(3) + " knows exactly how to punish you for it.");
					}
				} else {
					if (currentPlaythrough.personGenders[3].presentation() == Gender.MALE) {
						result.screens[1].attach(Jackal() + " has every advantage over you - " + heShe(3) + "'s larger, more muscular, and overwhelmingly more practiced.  But, as " + heShe(3) + " constantly reminds you, you don't need to be able to beat some big thug in a straight fight.  Most of the time, creating an opening to escape is all you need to do in order to 'win'.");
					} else {
						result.screens[1].attach(Jackal() + " isn't a large woman, but " + hisHer(3) + " lean muscle and " + hisHer(3) + " hand-to-hand combat skills make " + himHer(3) + " a suitable substitute for the bigger male thugs you're likely to go up against in the field.  " + HeShe(3) + " frequently reminds you that that your goal shouldn't be to 'beat' " + himHer(3) + ", but just to escape.");
					}
				}
				result.screens[1].attach("\n\nYour latest challenge is a repeat of your very first lesson with " + Jackal() + ".  " + HeShe(3) + " has you cornered, and your goal is to get past " + himHer(3) + ".  By now, you've learned that there's no point in just trying to shove " + himHer(3) + ".  " + HeShe(3) + "'ll just plant " + hisHer(3) + " feet and redirect your momentum to throw you off-balance.  You'll end up flat on the ground again.\n\n");
				result.screens[1].attach("But now, you have a few more tricks in your arsenal.  You approach slowly, staying light on your feet, then feint to one side, preparing to grab " + Jackal() + "'s wrist when " + heShe(3) + " reaches out to stop you.  You definitely don't want to get into a prolonged wrestling match with " + himHer(3) + ", but if you can't avoid a confrontation entirely, then it's best to engage on your own terms.");

				result.sounds[2] = Effect.RUSTLE;
				result.backgrounds[2] = "jackal5";
				result.screens[2].attach("It doesn't go quite as you had hoped.  " + Jackal() + " seemed to be prepared for what you were going to try, and you each end up grabbing the other by the forearm.  As you had planned, " + Jackal() + " was forced to overextend " + himHer(3) + "self in order to stop you, but " + heShe(3) + " still had the leverage to bring you down with " + himHer(3) + ".  It's only by quickly shifting your weight that you're able to come down atop " + himHer(3) + " rather than being trapped underneath.\n\n");
				result.screens[2].attach("But this isn't the worst position to be in.  In fact, it's the first time you've managed to get into any sort of advantageous position in these sparring matches.  " + Jackal() + " is on " + hisHer(3) + " back, " + hisHer(3) + " range of movement restricted.  You have the initiative.");

				result.screens[3].attach("Even so, you know that this isn't the time to let your guard down.  You haven't won until you've managed to get past " + himHer(3) + ".  And if anyone can wiggle out of a disadvantageous position in the blink of an eye, it's " + Jackal() + ".\n\n");
				result.screens[3].attach("Without hesitation, you make your next move.");

				result.sounds[4] = Effect.WHOOSH;
				result.backgrounds[4] = "street";
				result.screens[4].attach(Jackal() + "'s knee flashes upward toward your groin.  But you're already rolling to the side, and the impact glances off the side of your hip.  It stings, but it doesn't stop you from getting your feet under you and sprinting away.\n\n");
				result.screens[4].attach("There's no time to look back.  You dive forward, scramble atop the dumpster at the other end of the alley, then jump up to grab the edge of the rooftop above.  As you pull yourself up, you hear " + Jackal() + "'s footsteps approaching from behind.\n\n");
				result.screens[4].attach("Once onto the rooftop, you break out into a run.  You vault the gap to the next rooftop, then slide down into an adjoining alleyway.  You haven't won until you've truly escaped from " + Jackal() + ", and that starts with breaking " + hisHer(3) + " line of sight to you.");

				result.screens[5].attach("But eventually, you start to feel secure enough to turn around and look back the way you came.  There's no sign of " + Jackal() + ".  Did you make it?\n\n");
				result.screens[5].attach("For awhile, you keep looking over your shoulder, expecting " + Jackal() + " to jump out from behind a streetlight and throw you to the ground.  But eventually, you realize that you actually managed to make your escape.\n\n");
				result.screens[5].attach("And so, you head back toward the nightclub with a bit of swagger in your step.");

				result.characters[6] = new String[]{"jackal"};
				result.emotions[6] = new String[]{"Neutral"};
				result.screens[6].attach("You find " + Jackal() + " setting " + hisHer(3) + " clothes back in order.  " + HeShe(3) + " gives you a nod when " + heShe(3) + " sees you.\n\n");
				result.screens[6].attach("\"Good work.  You did not let up, even when it started to look like you were in the clear.\"\n\n", 3);
				result.screens[6].attach("If " + Jackal() + " only got back here a short while ago, then " + heShe(3) + " must have followed you pretty far.\n\n");
				result.screens[6].attach("\"Correct.  I lost you after you climbed that fire escape.\"\n\n", 3);
				result.screens[6].attach("That was just before you started to slow down.  It's good that it worked out this time, but you'll have to work on your stamina so that you aren't cutting it so close when your life depends on it.");

				result.emotions[7] = new String[]{"Frown"};
				result.screens[7].attach("\"It is always easier to escape than it is to catch somebody.  You will be relying on that fact, once it is time for the real thing.  There could be dozens of people chasing you instead of just one, and they might be closing in from multiple directions.\"\n\n", 3);
				result.screens[7].attach("Getting past one person trying to stop you is hard enough.  It's hard to imagine trying to make your escape against a whole gang of pursuers.\n\n");
				result.screens[7].attach("\"That is why it is so important to work fast.  The longer you spend scuffling with some thug, the greater the odds that some of his friends will show up.  Or somebody might hear the fighting and call the police.  That is never a good thing.\"\n\n", 3);
				result.screens[7].attach("For all " + Jackal() + "'s talk of how the threat of violence is necessary for civilization to function, it's a bit surprising that " + heShe(3) + " has such a negative view of the police.\n\n");
				result.screens[7].attach("\"I would not say that my view of them is negative.  There are times that they are useful.  But when you are in this line of work, they are more likely to cause problems for you.\"", 3);

				result.emotions[8] = new String[]{"Uncomfy"};
				result.screens[8].attach("\"The way that civilization is supposed to work is that everybody goes about their lives peacefully, keeping to themselves as much as they can, and whenever they have a conflict, the local authority rules one way or the other so that they can get over the conflict and go back to what they are supposed to be doing.\"\n\n", 3);
				result.screens[8].attach(Jackal() + " doesn't think that people should fix their own problems?\n\n");
				result.screens[8].attach("\"If they can, then that is wonderful.  But if they cannot, then there must be somebody they can appeal to.  In a country with a weak police force, it might be tribal or religious leaders instead.  And even in this country, there are other authorities.  I have heard my clients complain about disruptive behavior at their workplace.  Fish in the break room microwave and such.  When this happens, they ask their manager to intervene.  Or when there is disagreement about who is at fault for a minor traffic accident, the people involved have their insurance providers figure it out.\"\n\n", 3);
				result.screens[8].attach("Middle managers and insurance providers aren't exactly known for making fair and equitable decisions.\n\n");
				result.screens[8].attach("\"Perhaps not.  It would be more satisfying to grab the other guy and... 'beat some sense into him', yes?  But if this were permitted, then civilization would descend into chaos.\"", 3);

				result.emotions[9] = new String[]{"Neutral"};
				result.screens[9].attach("\"The more steps of escalation there are between the initial conflict and being forced to resort to violence, the better.  The closer people get to the end of their rope, the more likely they are to get desperate and do something... stupid.  And by the time the police get involved, there are not many more steps left.\"\n\n", 3);
				result.screens[9].attach("It's a very orderly view of society, a hierarchy of authority figures that people can bring in one-by-one until their problem is fixed.  First they try to reach a mutual agreement with the other person.  Then they try to appeal to whichever private company has the power to solve the problem.  Then they file a police report.  And if that doesn't work...\n\n");
				result.screens[9].attach("\"Then they come to people like me.  In other words, for somebody to hire me to help them, it means that the police were at best unwilling to help them first.  And at worst, it means that the police will be actively protecting the target or concealing whatever it is I am trying to find.\"\n\n", 3);
				result.screens[9].attach("What about in this case?  Will the police be a problem?\n\n");
				result.screens[9].attach("\"I am afraid that they will.\"", 3);

				result.emotions[10] = new String[]{"Frown"};
				result.screens[10].attach("\"Organized crime almost always has the backing of the local law enforcement.  Politicians often want access to things that are against the law.  Drugs, underage prostitutes.  They make a deal with local crime families to get those things in exchange for telling the police to turn a blind eye toward the crime family's activities.\"\n\n", 3);
				result.screens[10].attach("And the police just go along with that?\n\n");
				result.screens[10].attach("\"Police chiefs are appointed by politicians.  And regular police officers do as their chain of command tells them.  If an officer tries to do an investigation on his own initiative, without being ordered to do so by his superiors, then he will be reprimanded and eventually fired.\"\n\n", 3);
				result.screens[10].attach("So, you really can't expect them to give you any help here?\n\n");
				result.screens[10].attach("\"None.  No matter where you live, a good rule of thumb is to trust the local police exactly as much as you trust the local politicians.  No more and no less.\"", 3);

				result.emotions[11] = new String[]{"Uncomfy"};
				result.screens[11].attach("That's discouraging, but it doesn't change what needs to be done.  As long as you're careful to avoid committing any crimes during your investigation, the police shouldn't be able to touch you.\n\n");
				result.screens[11].attach("\"Even then, there is no guarantee that you will be safe.  They could charge us with something they know will not stick, then tip off gang members among the inmates to stab you while we are awaiting trial.  The only way to avoid that possibility is to make sure that the crime families never even notice that you are investigating them in the first place.\"\n\n", 3);
				result.screens[11].attach("How exactly can you make sure that the crime families don't catch you investigating them?\n\n");
				result.screens[11].attach("\"By staying home and leaving it to me.  Even then, there is no guarantee that they will not come after you for hiring me to go after them, but it will be more difficult for them to find you if you are not personally out there poking around in their territory.\"\n\n", 3);
				result.screens[11].attach("Well, that's not an option.  If you were really that afraid, then you would've already quit before now.");

				result.emotions[12] = new String[]{"Neutral"};
				result.screens[12].attach("\"Alright.  In that case, you should take this chance to rest up.  We are done for today.  Just let me know when you are prepared to head out together and search for your friend.\"\n\n", 3);
				result.screens[12].attach("Already?  Have you made enough progress for " + Jackal() + " to trust you to watch " + hisHer(3) + " back?\n\n");
				result.screens[12].attach("\"I started trusting you awhile ago.  But I also wanted to make sure you were really prepared for the consequences.\"", 3);

				result.emotions[13] = new String[]{"Sigh"};
				result.screens[13].attach("\"To be honest, I am still not happy about dragging someone innocent like you down into this world.  But I get the feeling that if I kept refusing to bring you along, you might start going behind my back to do some investigation of your own.\"\n\n", 3);
				result.screens[13].attach("Fortunately, it looks like that won't be necessary.\n\n");
				if (currentPlaythrough.upgradeLevels[3] > 2) {
					result.screens[13].attach("\"With your talent, ", 3);
				} else {
					result.screens[13].attach("\"You do not have much talent, but if you put in enough effort, ", 3);
				}
				result.screens[13].attach("you could actually make a career doing this kind of work.\"", 3);

				result.emotions[14] = new String[]{"Uncomfy"};
				result.screens[14].attach("\"I also wanted to make sure that you had a good understanding of what kind of role people like us have in our civilization.\"\n\n", 3);
				result.screens[14].attach("For a hired gun, " + Jackal() + " sure seems to spend a lot of time thinking about social issues.\n\n");
				result.screens[14].attach("\"I guess it is more common for people in violent lines of work to just care about making money quick so that they can retire to a peaceful life.  But I do not have much longer to live, so that is not an option for me.\"\n\n", 3);
				result.screens[14].attach("That's right, " + Jackal() + " has mentioned that before.  " + HeShe(3) + " had less than two years left, right?  If " + heShe(3) + " has no need for a retirement fund, then why is " + heShe(3) + " working in a stressful, high-risk job like this?  Wouldn't it be better to just relax and enjoy " + himHer(3) + "self?\n\n");
				result.screens[14].attach("\"What else would I do?  This is the only talent I have.  In any case, the closer you to get to leaving this world, the more you find yourself thinking about what you will leave behind you.  Relaxing now would feel like wasting the time I have left.\"", 3);

				result.emotions[15] = new String[]{"Neutral"};
				result.screens[15].attach("Maybe it was unthoughtful of you to bring up " + Jackal() + "'s illness.\n\n");
				result.screens[15].attach("\"No, it is fine.  It raises an important point.  If we ever get separated, or if I look like I am pinned down under fire, do not bother coming back and trying to save me.  You already have one person relying on you to rescue " + himHer(5) + ".\"\n\n", 3);
				result.screens[15].attach("Two years is still a long time to live.  Just because " + Jackal() + "'s life expectancy is lower than most, that doesn't mean you should let " + himHer(3) + " get shot.\n\n");
				result.screens[15].attach("\"Well, getting shot is less of an issue for me than it is for most people.\"", 3);

				result.emotions[16] = new String[]{"Uncomfy"};
				result.screens[16].attach("That's a strange way to put it.  " + Jackal() + " is good at avoiding getting shot in the first place, but if " + heShe(3) + " actually does get shot, then it hurts " + himHer(3) + " as much as it would hurt anybody else, right?\n\n");
				result.screens[16].attach("\"... I have said too much.  Forget what I just said.\"\n\n", 3);
				result.screens[16].attach("Even if " + heShe(3) + " trusts you to watch " + hisHer(3) + " back, apparently that doesn't mean " + heShe(3) + "'s willing to open up about everything.  Maybe it's best to drop the subject for now.");

				result.emotions[17] = new String[]{"Neutral"};
				result.screens[17].attach("\"Anyway, you are not in any shape to head out together tonight, but we could start as soon as tomorrow.  You still have a lot to learn, though, so it would not be a bad idea to continue these lessons.\"\n\n", 3);
				result.screens[17].attach("Considering how worn-out you always feel after a training session with " + Jackal() + ", it's hard to imagine that you could handle both practice and the real thing on the same day.\n\n");
				result.screens[17].attach("\"Probably not.  But I will leave it up to you.  By now, I think you have a good idea of your own limits.\"", 3);

				result.characters[18] = new String[0];
				result.screens[18].attach(Jackal() + " heads ");
				if (currentPlaythrough.weeklyActions[weekDayNumber()][4] == Action.HIREFIXER) {
					result.screens[18].attach("out to do another night of investigation for you, possibly the last one " + heShe(3) + "'ll be doing alone.  ");
				} else {
					result.screens[18].attach("back into the nightclub.  ");
				}
				result.screens[18].attach("For your part, you sit down and catch your breath.  You've learned some skills, and you're capable of doing more, but there are still only so many hours in a day.  Can you afford to be reckless?  Can you afford to take it slow and steady?  You'll need to reach a decision by tomorrow.");
			} else if (g.tier == 2) {
				result = new Scene(16);

				result.tracks[0] = Music.DESERT;
				result.backgrounds[0] = "street";
				if (currentPlaythrough.personStatus[5] == Locale.METROPOLIS) {
					if (getGoalLevel(14, false) > 0) {
						result.screens[0].attach("Now that " + Tanaka() + "'s location has been confirmed, you have more time to train with " + Jackal() + ".  ");
					} else {
						result.screens[0].attach("You ended up deciding to spend more time training with " + Jackal() + " before heading out to search for " + Tanaka() + "'s trail.  ");
					}
				} else {
					result.screens[0].attach("Even if you're already competent enough to work alongside " + Jackal() + ", you're still interested in learning more.  ");
				}
				result.screens[0].attach("If you can beat " + Jackal() + " one time out of fifty, then you should be fine against some random thugs - but considering that you'll be putting your life on the line, that isn't good enough.  You still have plenty more room for improvement.\n\n");
				result.screens[0].attach("Today, it's back to the same old training exercise.  The scenario is that " + Jackal() + " is trying to stop you from escaping, and you need to get past " + himHer(3) + ".  " + HeShe(3) + " isn't going easy on you at all anymore, but the conditions are stacked in your favor.  You're starting to win on a more regular basis.\n\n");
				result.screens[0].attach("You rush at " + Jackal() + ", mentally preparing yourself for half a dozen possible outcomes.  However " + Jackal() + " tries to stop you, you'll be ready.");

				result.backgrounds[1] = "jackal6";
				result.sounds[1] = Effect.RUSTLE;
				result.screens[1].attach("Ah, this feels familiar.  It'd be better to avoid getting pulled down to the ground in the first place, but if you can't manage that, then just keeping " + Jackal() + " from pinning you down is still pretty good.\n\n");
				result.screens[1].attach("When you come down on your hands and knees like this, it's generally pretty simple to extricate yourself from " + Jackal() + " and get back onto your feet before " + heShe(3) + " can recover.  Now all that's left is to roll to the side and-");

				result.screens[2].attach("Hold on.  Something's not right.  The last time " + Jackal() + "'s shirt got pulled up like that, it was during a sparring match just like this one.  And when " + hisHer(3) + " shirt was pulled up, you noticed...\n\n");
				result.screens[2].attach("What was it?  Why does this feel wrong?");

				result.backgrounds[3] = "jackal7";
				result.screens[3].attach(HisHer(3) + " scar.  It looked like an old wound " + heShe(3) + " must have gotten in a knife fight or something.  Given " + hisHer(3) + " line of work, it seemed only natural that " + heShe(3) + "'d have a scar or two, so you didn't think too much of it.\n\n");
				result.screens[3].attach("But during your training together, you've seen most of " + Jackal() + "'s body.  " + HisHer(3) + " shoulders, " + hisHer(3) + " belly, " + hisHer(3) + " back, " + hisHer(3) + " arms.  Aside from " + hisHer(3) + " missing eye, that one scar is the only sign you've seen of " + himHer(3) + " taking an injury.  Should that have stood out as strange to you?  " + HeShe(3) + "'s very good at what " + heShe(3) + " does, so maybe it would be believable for " + himHer(3) + " to have only taken a serious injury once or twice in " + hisHer(3) + " life.");

				result.backgrounds[4] = "jackal6";
				result.screens[4].attach("Except that now, even that one scar is gone.  How?  It looked like an old scar, the kind that takes months to form and never fully goes away.  It shouldn't be able to fully disappear like that, especially not in a matter of days.\n\n");
				result.screens[4].attach("You try to take a closer look-");

				result.backgrounds[5] = "white";
				result.sounds[5] = Effect.PUNCH;
				result.screens[5].attach("Only for an explosion of pain in your nether regions to completely break your train of thought.\n\n");
				result.screens[5].attach("That's right.  That's always " + Jackal() + "'s next move when " + heShe(3) + "'s pinned down like that.  You should have seen it coming.\n\n");
				result.screens[5].attach("For the next couple of minutes, you're in too much pain to think about the implications of what you just saw.");

				result.backgrounds[6] = "street";
				result.characters[6] = new String[]{"jackal"};
				result.emotions[6] = new String[]{"Sigh"};
				result.screens[6].attach("When you come back to your senses, " + Jackal() + " is setting " + hisHer(3) + " clothes back in place with an exasperated expression on " + hisHer(3) + " face.\n\n");
				result.screens[6].attach("\"That should have been an easy win for you.  What kind of fool stops to stare at " + hisHer(-1) + " opponent's chest in the middle of a sparring match?  ", 3);
				if (currentPlaythrough.ownGender.presentation() == currentPlaythrough.personGenders[3].presentation()) {
					result.screens[6].attach("I had no idea you swung that way.\"\n\n", 3);
				} else {
					result.screens[6].attach("I am beginning to question your true motives for coming to train with me so often.\"\n\n", 3);
				}
				result.screens[6].attach("It isn't that.  Well, maybe it is a little bit.");

				result.emotions[7] = new String[]{"Uncomfy"};
				result.screens[7].attach("But more importantly, you saw that " + hisHer(3) + " scar disappeared.\n\n");
				result.screens[7].attach("\"Oh.\"\n\n", 3);
				result.screens[7].attach("You wait for " + himHer(3) + " to explain, but as the silence stretches on, it becomes clear that no explanation will be forthcoming, so you ask " + himHer(3) + " directly.  How is it that " + hisHer(3) + " scar disappeared?\n\n");
				result.screens[7].attach("\"Like I said before, you do not need to worry about me getting shot.  I can heal from just about any injury within a week.\"\n\n", 3);
				result.screens[7].attach("That isn't really an answer.\n\n");
				result.screens[7].attach("\"It is the only answer you need.  This has nothing to do with you.\"", 3);

				result.emotions[8] = new String[]{"Frown"};
				result.screens[8].attach("It's not something you can just ignore.  If " + Jackal() + " has access to some cutting-edge medical treatment, then " + heShe(3) + " should let you in on it too.  After all, there's a decent chance that you'll get shot too while you're working with " + Jackal() + ".\n\n");
				result.screens[8].attach("\"It is not worth the price.\"\n\n", 3);
				result.screens[8].attach("Then why does " + Jackal() + " use it?\n\n");
				result.screens[8].attach("\"Because when I first came here, I had some powerful enemies.  It was the only way for me to do what I needed to do.\"", 3);

				result.emotions[9] = new String[]{"Sigh"};
				result.screens[9].attach("At this rate, you're going to be making some powerful enemies of your own.  You'll need all the help you can get.\n\n");
				result.screens[9].attach("\"You are not going to let this go, are you?\"\n\n", 3);
				result.screens[9].attach(Jackal() + " has taught you pretty well.  Now that you know that there's some sort of experimental medical treatment taking place in this town, you can already think of a few places to investigate on your own.\n\n");
				result.screens[9].attach("\"There is no need for you to go that far.  I suppose their security is not really that tight, but I worry about what they would do to you if you did get caught.\"", 3);

				result.emotions[10] = new String[]{"Uncomfy"};
				result.screens[10].attach("If " + Jackal() + " doesn't want that to happen, then " + heShe(3) + " should just put you in contact with them.\n\n");
				result.screens[10].attach("\"I will.  But I want to warn you ahead of time to be careful.  If they make you an offer, you should think very carefully about your response.  Think about what you want to do with your life, and about whether working with them will actually serve that purpose.\"\n\n", 3);
				result.screens[10].attach(HeShe(3) + " makes it sound like some sort of deal with the Devil.\n\n");
				result.screens[10].attach("\"Maybe that is a good way to think about it.\"\n\n", 3);
				result.screens[10].attach("Well, that's fine.  You'll be careful.\n\n");
				result.screens[10].attach("\"... Alright.  The medicine I am using comes from a group of scientists doing research on human longevity.  They are affiliated with The Tower.\"", 3);

				result.characters[11] = new String[0];
				result.backgrounds[11] = "elohim1";
				if (getGoalLevel(27, false) >= 2) {
					result.screens[11].attach("So, it was The Tower after all.  It's not exactly common for people in this city to have direct dealings with the research institute, but once it became clear that something was unusual about " + Jackal() + "'s body, they were the most obvious suspect.");
				} else {
					result.screens[11].attach("The name is familiar to you, as it is to everybody who lives here.  The Tower is a research institute located in the city center.  Academics from around the world congregate here to take part in cutting-edge research.  Over the years, a prestigious college was built around The Tower.  And as the college grew, so did the surrounding town.\n\n");
					result.screens[11].attach("It common knowledge that they do medical research there, but the fact that they're capable of speeding up the human healing process to such a great degree is surprising.  Has medical technology really advanced so far?");
				}

				result.backgrounds[12] = "street";
				result.characters[12] = new String[]{"jackal"};
				result.emotions[12] = new String[]{"Neutral"};
				result.screens[12].attach("\"The Tower needs a supply of test subjects who will not be able to complain if their treatments result in serious side effects.  For those of us who work outside the law, trying to file a lawsuit against The Tower would mean putting our medical history on record.  It would give the police more opportunity to connect us to unsolved crimes where the perp took an injury.\"\n\n", 3);
				result.screens[12].attach("If you don't have any legal recourse against them, then how can you be sure that they'll keep their end of the deal?  What's to keep them from just injecting you with whatever they want?\n\n");
				result.screens[12].attach("\"Nothing.  Which is why it is important to build a sense of trust.  The scientist I worked with told me exactly what I'd be getting into.  If you are going to be seeking out these people anyway, then I can at least make sure that " + hisHer(4) + " lab is the one you are dealing with.\"\n\n", 3);
				result.screens[12].attach("That's a pretty flimsy assurance.\n\n");
				result.screens[12].attach("\"It is the best you are going to get.  If you do not like it, then you should not go to The Tower.  I would not blame you in the slightest.\"", 3);

				result.emotions[13] = new String[]{"Uncomfy"};
				result.screens[13].attach("And if you accept their deal, then your body will be able to completely heal itself in a matter of days like " + Jackal() + "'s?\n\n");
				result.screens[13].attach("\"No.  The treatment they gave me is something that is only used in special cases.  But they also have some less extreme procedures that are not ready to be revealed to the public yet.  They should be willing to use those on you.\"\n\n", 3);
				result.screens[13].attach("Why should you settle for the 'less extreme' procedures, though?  Why not have them give you the same thing they gave " + Jackal() + "?\n\n");
				result.screens[13].attach("\"Because that one involves a permanent change to how your body deals with injuries.  And once you make that change, your days are numbered.\"\n\n", 3);
				result.screens[13].attach("Is that why " + Jackal() + " said " + heShe(3) + " has less than two years to live?\n\n");
				result.screens[13].attach("\"Correct.  Soon, the rest of my body will not be able to keep up with what it is being asked to do.  And then I will die.\"", 3);

				result.emotions[14] = new String[]{"Neutral"};
				result.screens[14].attach("\"At the time, it was the right choice for me to make.  If I were going to change anything, it would be the decisions before that point which put me in that position in the first place.  But it is too early for you to do something like that.\"\n\n", 3);
				result.screens[14].attach("You're already committed to going up against career criminals, which means accepting a risk of getting shot and killed.  On average, doing something like that every night might give you a life expectancy even shorter than two years.  But it feels somehow different to put a definite limit on your lifespan.  It means that no matter how lucky or skilled you are, you won't be able to escape your fate.\n\n");
				if (currentPlaythrough.personStatus[5] == Locale.METROPOLIS) {
					if (getGoalLevel(14, false) > 0) {
						result.screens[14].attach("\"We have already found your friend, so going that far would just be excessive.\"\n\n", 3);
						result.screens[14].attach("But " + heShe(5) + "'s still in danger.  If you didn't have to worry about getting hurt, there's a lot more you could do.\n\n");
						result.screens[14].attach("\"Do you really think " + heShe(5) + " would approve of you shaving fifty or sixty years off your life just for that?\"", 3);
					} else {
						result.screens[14].attach("\"You do not need to go that far in order to find your friend.\"\n\n", 3);
						result.screens[14].attach("It could help you find " + himHer(5) + " faster, though.  Every moment counts.\n\n");
						result.screens[14].attach("\"Do you really think " + heShe(5) + " would approve of you shaving fifty or sixty years off your life in order to rescue " + himHer(5) + " just a week or two sooner?\"", 3);
					}
				} else {
					result.screens[14].attach("\"It would let you work more often and more recklessly.  But what is the point, if it gets you killed anyway?\"", 3);
				}

				result.characters[15] = new String[0];
				result.screens[15].attach("As that last question rings in your ears, " + Jackal() + " gives you the contact information of the laboratory where you can obtain the experimental medical treatments.  The two of you continue training until the sun goes down, but your mind is elsewhere.\n\n");
				result.screens[15].attach("Right now, your ability to work is limited by the time your body needs to recover from every bruise and sprain.  The more you can reduce that time, the more you'll be able to do.  Just how much would that be worth to you?\n\n");
				result.screens[15].attach("But maybe it's too soon to be worrying about that.  As " + Jackal() + " said, they only offer the treatment they gave to " + himHer(3) + " in special cases.  For now, all you can do is check out the address " + heShe(3) + " gave you and see for yourself what they can do.");
			} else if (g.tier == 3) {
                result = new Scene(22);

                result.backgrounds[0] = "street";
                result.tracks[0] = Music.DESERT;
                if (getCurrentAction() == Action.FIXERTALK) {
                    result.screens[0].attach("When you talk with " + Jackal() + " at the country club and " + heShe(3) + " tells you about " + hisHer(3) + " work, " + heShe(3) + " usually speaks in theoretical or hypothetical terms.  But today, it seems that " + heShe(3) + " wants to give you a personal demonstration.  " + HeShe(3) + " asks you to accompany " + himHer(3) + " after the charity luncheon is over.\n\n");
                    result.screens[0].attach("Once you're alone, " + heShe(3) + " asks you to ");
                } else if (getCurrentAction().attribute == 2) {
                    result.screens[0].attach("Most of the time, you and " + Jackal() + " work together for associates of " + hisHers(3) + ", people who are willing to pay for your skills.  But sometimes, " + Jackal() + " " + himHer(3) + "self is the one who's paying you to help " + himHer(3) + " with something " + heShe(3) + " wants to do.  Today's job falls into the latter category.\n\n");
                    result.screens[0].attach(Jackal() + " has hired you to ");
                } else {
                    result.screens[0].attach("As part of your training with " + Jackal() + ", " + heShe(3) + "'s having you ");
                }
                result.screens[0].attach("help " + himHer(3) + " 'clean up' the neighborhoods in the rougher parts of town.  Apparently, the local gangs have been pushing more illegal drugs here lately, and they've even started targeting children.  " + HeShe(3) + " tries to make things more difficult for them wherever " + heShe(3) + " can.  Nobody's paying " + himHer(3) + " to do it, but " + Jackal() + " seems to treat the work as its own reward.\n\n");
                result.screens[0].attach(Jackal() + " still does most of the work " + himHer(3) + "self.  Your own task is relatively simple.");

                result.characters[1] = new String[]{"thug"};
                result.screens[1].attach(Jackal() + " is on pretty good terms with some of the gang leaders.  Sometimes, they're the ones hiring " + himHer(3) + " to find out who killed one of their people or to handle a dispute before it can escalate into an all-out gang war.  " + HeShe(3) + "'s made agreements with them to stop pushing drugs in " + Jackal() + "'s neighborhood, but sometimes the gang members 'forget' that they aren't supposed to come here.\n\n");
                result.screens[1].attach("Even when it looks like a gang member is breaking their deal, " + Jackal() + " has a hard time investigating by " + himHer(3) + "self, because they'll never admit to " + hisHer(3) + " face what they're doing.  But if you can catch them in the act, then " + Jackal() + " will be able to prove that they can't pull one over on " + himHer(3) + ".\n\n");
                result.screens[1].attach("The two of you spot a suspicious-looking guy loitering in the neighborhood, and then you split up so that you can see if " + heShe(3) + "'ll try to sell you something.");

                result.screens[2].attach("\"Hey, " + manWoman(-1) + "!  You look busy!  You look like you could use a rest!\"\n\n");
                result.screens[2].attach("Accurate.\n\n");
                result.screens[2].attach("\"Let me help you out!  Help you relax, make you feel good.\"\n\n");
                result.screens[2].attach("Is this guy a prostitute?\n\n");
                result.screens[2].attach("\"What?  No!  I'm saying I can hook you up with the good shit!  Here, take a look-\"");

                result.characters[3] = new String[]{"thug", "jackal"};
                result.outfits[3] = new String[]{"", "Coat"};
                result.emotions[3] = new String[]{"", "Frown"};
                result.screens[3].attach("The drug dealer starts to show you a suspicious bundle, but then " + heShe(3) + " catches sight of " + Jackal() + " approaching.\n\n");
                result.screens[3].attach("\"Oh, shit!\"\n\n");
                result.screens[3].attach("This seems to be a pretty common reaction when people see " + Jackal()+ ".\n\n");
                result.screens[3].attach("\"Fuck you!\"\n\n");
                result.screens[3].attach("He breaks out into a run, his eyes still glued to " + Jackal() + ".  But he's not looking where he's going.");

                result.backgrounds[4] = "black";
                result.sounds[4] = Effect.PUNCH;
                result.screens[4].attach("And as a result, he crashes straight into you.\n\n");
                result.screens[4].attach("You weren't prepared for the collision.  You and the drug dealer go down together in a heap.  You're briefly stunned.");

                result.characters[5] = new String[]{"thug", "jackal"};
                result.outfits[5] = new String[]{"", "Coat"};
                result.emotions[5] = new String[]{"", "Sigh"};
                result.screens[5].attach("When you regain your senses, " + Jackal() + " has the drug dealer cornered.\n\n");
                result.screens[5].attach("\"Your boss told me that there would be no one else pushing drugs in this neighborhood.  Do I need to tell him that one of his people is disobeying him?  Or... Is he going back on our deal?  Are we going to have trouble?\"\n\n", 3);
                result.screens[5].attach("\"It... It was an honest mistake!  I was just walking along and didn't read the street signs!  I didn't know where I was!\"");
                result.screens[5].attach("\"I see...\"", 3);

                result.emotions[6] = new String[]{"", "Neutral"};
                result.screens[6].attach("\"You... You aren't gonna hurt me, right?\"\n\n");
                result.screens[6].attach("\"Of course not.  If you got hurt, you would not be able to turn your life around and make an honest living.  You would be even more likely to keep doing this kind of work.\"\n\n", 3);
                result.screens[6].attach("\"Oh, phew...\"\n\n");
                result.screens[6].attach("\"So, if I catch you here again, I will simply kill you.\"", 3);

                result.characters[7] = new String[0];
                result.screens[7].attach("For a moment, the two of them just stare at each other as the drug dealer tries to figure out whether " + Jackal() + " is being serious.  Then, he abruptly scrambles to his feet.\n\n");
                result.screens[7].attach("\"Okay, okay, I'm gone!  You won't see me again, I promise!\"\n\n");
                result.screens[7].attach("Without waiting for a response, he flees at top speed, turning around a corner.  His frantic footsteps fade into the distance.");

                result.characters[8] = new String[]{"jackal"};
                result.emotions[8] = new String[]{"Uncomfy"};
                result.outfits[8] = new String[]{"Coat"};
                result.screens[8].attach("\"He was just saying whatever he thought I wanted to hear.  I really might need to kill him...\"\n\n", 3);
                result.screens[8].attach("Is " + Jackal() + " really capable of killing somebody in cold blood?  With how principled " + heShe(3) + " is, it doesn't seem like the kind of thing " + heShe(3) + "'d do lightly.  But at the same time... " + heShe(3) + "'s certainly not soft.\n\n");
                result.screens[8].attach("You try to walk over to " + Jackal() + ", but a sudden jolt of pain from your ankle causes you to falter.  " + Jackal() + " notices.");

                result.emotions[9] = new String[]{"Neutral"};
                result.screens[9].attach("\"Are you okay?\"\n\n", 3);
                result.screens[9].attach("You must have twisted something when the drug dealer ran into you.\n\n");
                result.screens[9].attach("\"I apologize.  I should have been more mindful of what he might do when frightened.\"\n\n", 3);
                result.screens[9].attach("It doesn't feel serious.  You probably just need to walk it off.\n\n");
                result.screens[9].attach("\"You should not push yourself...  Hm.  My house is a short walk away.  Let me lend you my shoulder, and you can rest there.\"", 3);

                result.characters[10] = new String[0];
                result.screens[10].attach(Jackal() + " insists on helping you walk to " + hisHer(3) + " place.  The pain isn't that bad, though, and more than anything else, you find yourself curious about " + Jackal() + "'s home.  This is " + hisHer(3) + " first time inviting you there.\n\n");
                result.screens[10].attach("This is the rougher side of town, but it wasn't always run down like this.  If you look closely, you can see the traces of what was once a cozy middle-class neighborhood.  Some of the houses are big, the yards spacious.  Everything is in a state of disrepair, and the suspicious eyes peeking out of every window speak of too many people crammed into too little space and forgotten by society.  If " + Jackal() + " cares enough to defend this place from drug dealers, then " + heShe(3) + " must have something here " + heShe(3) + " cares about.\n\n");
                result.screens[10].attach("After only a couple of blocks, you reach your destination.");

                result.backgrounds[11] = "shack";
                result.screens[11].attach("You're shocked to see where " + Jackal() + " actually lives.  It's a shack, not a house.  A one-room shack squeezed in between two larger houses, probably constructed in defiance of the city's building codes.  If inspectors were to miraculously start coming to this part of town again, it wouldn't be surprising for the place to end up instantly bulldozed.\n\n");
                result.screens[11].attach("It's clean and tidy enough, at least.  A folding cot set up against one wall, a stove and oven built into the opposite wall just a few steps away.  A heavy-duty safe bolted into the floor - you don't doubt that " + Jackal() + " has even more guns in there.  But it still looks like the entire building might fall down in a stiff breeze.");

                result.characters[12] = new String[]{"jackal"};
                result.emotions[12] = new String[]{"Neutral"};
                result.outfits[12] = new String[]{""};
                result.screens[12].attach("\"Sit down here and put your leg up.  I will warm up some water for a bottle you can put against the sprain.  You should drink something as well.  Do you enjoy coffee?  Tea?\"\n\n", 3);
                result.screens[12].attach(Jackal() + " is a good host, but you have a hard time thinking of your own comfort.  You're just flabbergasted that " + Jackal() + " lives like this.\n\n");
                result.screens[12].attach("Yes, " + Jackal() + " may be a good host, but perhaps you aren't a very good guest.  Without a doubt, it's extremely bad manners to ask your host why " + hisHer(3) + " house is so awful.  But you're having a hard time containing yourself.");

                result.emotions[13] = new String[]{"Sigh"};
                result.screens[13].attach("It just doesn't add up.  You know the hourly rate " + Jackal() + " demands for " + hisHer(3) + " work.  " + HeShe(3) + " brings in a lot of money with " + hisHer(3) + " work.  Where exactly does that money go?\n\n");
                result.screens[13].attach("\"I give it away.\"\n\n", 3);
                result.screens[13].attach(HeShe(3) + "... " + HeShe(3) + " what?\n\n");
                result.screens[13].attach("\"I give it away.  " + DuMont() + " keeps tabs on which charitable organizations seem to be sincerely using their funds to do as much good as possible.  When I make money I do not need, I give it to them.\"", 3);

                result.emotions[14] = new String[]{"Neutral"};
                if (loopActionFirstUsed(Action.HIREFIXER, currentPlaythrough) >= 0 || loopActionFirstUsed(Action.WORKTOGETHER, currentPlaythrough) >= 0) {
                    result.screens[14].attach("It feels almost like a joke.  You work for " + DuMont() + ", and " + heShe(2) + " pays you money.  You pay the money to " + Jackal() + " in turn.  And then " + Jackal() + " lets " + DuMont() + " decide how it's spent.\n\n");
                    result.screens[14].attach("You find yourself vividly recalling the moment that " + Hashimoto() + " spilled your arcade coins all over the floor.  Is it all just a waste?\n\n");
                    result.screens[14].attach("\"It is not a waste.\"\n\n", 3);
                    result.screens[14].attach("You're just a bit shocked to find out that " + Jackal() + " isn't keeping the money you give " + himHer(3) + ".  Why does " + heShe(3) + " charge you in the first place?");

                    result.emotions[15] = new String[]{"Uncomfy"};
                    result.screens[15].attach("\"Because I do not work for free.\"\n\n", 3);
                    result.screens[15].attach("What's the difference, if " + heShe(3) + " just gives the money away regardless?\n\n");
                    result.screens[15].attach("\"More people are helped this way.\"\n\n", 3);
                    result.screens[15].attach("If " + heShe(3) + " only cares about helping people, then it would've been better not to wait before going after " + Tanaka() + "?  Why wait for you to make enough money first?\n\n");
                    result.screens[15].attach("\"Because if I had pledged unconditional help for your friend, then you never would have had a reason to step up and start helping people yourself.\"", 3);

                    result.emotions[16] = new String[]{"Neutral"};
                    result.screens[16].attach("\"None of this was a waste.  Before we started searching for your friend in earnest, I was doing other important work.  I was cleaning up the streets here.  I was earning money that could be spent toward other important causes.\"\n\n", 3);
                    result.screens[16].attach("But " + heShe(3) + " was still prepared to leave " + Tanaka() + " to " + hisHer(5) + " fate.\n\n");
                    result.screens[16].attach("\"I was.  Fortunately, it did not come to that.  And now, instead of only " + Tanaka() + " being helped, there are also many other people whose lives are being improved by your work.\"\n\n", 3);
                    result.screens[16].attach("It feels sort of like " + Jackal() + " and " + DuMont() + " tricked you into it.  You could have stayed home and played video games if they were willing to just take care of the situation themselves.");

                    result.emotions[17] = new String[]{"Uncomfy"};
                    result.screens[17].attach("But " + Jackal() + " is right.  There are a lot of people who are better off this way.  People " + DuMont() + " has helped with the funds " + heShe(2) + " would have needed to spend.  People " + Jackal() + " helped while " + heShe(3) + " wasn't looking for " + Tanaka() + ".  Even the people you've helped while working.  Their problems might have been smaller, but there were a lot more of them.\n\n");
                    result.screens[17].attach("\"I used to speak with " + DuMont() + " about this quite often.  The " + DuMont() + " of three years ago would have helped you unconditionally...  Or, more likely, " + heShe(2) + " would have gone broke before ever meeting you.  " + HeShe(2) + " simply helped whoever was lucky enough to cross " + hisHer(2) + " path.\"\n\n", 3);
                    result.screens[17].attach("Is that how " + Jackal() + " met " + himHer(2) + "?");

                    result.emotions[18] = new String[]{"Smile"};
                    result.screens[18].attach("\"Yes.  I owe " + himHer(3) + " my life.\"\n\n", 3);
                    if (getGoalLevel(21, false) > 0) {
                        result.screens[18].attach("Oh, " + Jackal() + "'s actually smiling.  So, that's what it looks like.\n\n");
                    } else {
                        result.screens[18].attach("Oh, " + Jackal() + "'s actually smiling.  Somehow, it's hard to believe that " + heShe(3) + " has an expression like that on " + hisHer(3) + " face when " + heShe(3) + " talks to other people about you.\n\n");
                    }
                    result.screens[18].attach("\"" + HeShe(2) + " has come a long way in the last few years.  At first, " + heShe(2) + " was determined to try to accompany me on my work.\"\n\n", 3);
                    result.screens[18].attach("Wait, " + DuMont() + " tried to help " + Jackal() + " beat up thugs and protect " + hisHer(3) + " neighborhood?  That's hard to imagine.\n\n");
                    result.screens[18].attach("\"It was even harder to watch.  ", 3);
                    if (currentPlaythrough.upgradeLevels[3] < 3) {
                        result.screens[18].attach(HeShe(2) + " actually managed to have less talent than you.\"", 3);
                    } else {
                        result.screens[18].attach(HeShe(2) + " was nowhere near as talented as you.\"", 3);
                    }

                    result.emotions[19] = new String[]{"Uncomfy"};
                    result.screens[19].attach("\"But " + heShe(2) + " learned what " + heShe(2) + " needed to.  Sometimes, in order to help people, you need to be willing to turn your back on them.\"\n\n", 3);
                    result.screens[19].attach("That sounds like a lesson that " + DuMont() + " would have trouble learning.\n\n");
                    result.screens[19].attach("\"It is a hard lesson for anyone.  People are kind by nature.  They need to be taught harshness.  And it's important that they learn it sooner or later.\"", 3);

                    result.emotions[20] = new String[]{"Neutral"};
                    result.screens[20].attach("\"Anyway, how is your leg?\"\n\n", 3);
                    result.screens[20].attach("You try putting some weight on it.  It doesn't hurt anymore.\n\n");
                    result.screens[20].attach("\"Good.  You may continue to rest it here if you wish.  Or, since I normally train at this hour, you may join me.  Even if your leg is tender, we can still work on your upper body.  And... if you would like to stay for dinner, you're welcome to that as well.\"\n\n", 3);
                    result.screens[20].attach(Jackal() + " returns to " + hisHer(3) + " usual businesslike demeanor, but you sense that " + heShe(3) + "'s opening up to you just a tiny bit.  If " + heShe(3) + "'s open to it, maybe you can come over and visit " + himHer(3) + " like this more often.");

                    result.characters[21] = new String[0];
                    result.screens[21].attach("You do end up taking " + Jackal() + " up on " + hisHer(3) + " offer of dinner.  But as the sun goes down, a wind starts blowing, and you find that " + hisHer(3) + " shack really does get cold and drafty.  By that point, you're fine to walk on your own, and it's not like " + Jackal() + " has a guest room for you to use.  You excuse yourself, and " + Jackal() + " sees you off at the door.\n\n");
                    result.screens[21].attach("Maybe you should see about coming over here earlier, before " + Jackal() + " heads off to work.");
                }
            }
		} else if (g.index == 16) {
			if (g.tier == 0) {
				result = new Scene(2);

				result.backgrounds[0] = "street";
				result.screens[0].attach("You're starting to build a reputation among the local private security contractors.  At first, the only ones willing to hire you were the ones which " + Jackal() + " had put in a good word with.  But by now, your history of steadfastly guarding whichever spot you're assigned to guard has begun to speak for itself.  Apparently most people who enter this line of work end up quitting once they realize just how dangerous it is to make a target of yourself in the rougher parts of the city.\n\n");
				result.screens[0].attach("But you've stood your ground.  If you keep it up, you might end up being offered a job on the personal security detail of one of the city's social elites.");

				result.screens[1].attach("It's not just the way that others see you which has changed.  You've noticed some changes in yourself as well.  Pain doesn't bother you as much, and your mind no longer freezes up in panic when some thug pulls out a knife.  You've become fearless.\n\n");
				result.screens[1].attach("And the way that you see others has changed too.  The first thing you do when meeting a new person is assess how much of a threat they are.  You're prepared to be attacked at any moment.\n\n");
				result.screens[1].attach("It's a bit unsettling to think about.  You're starting to view people as enemies by default.  If you keep going down this path, you're not sure that you'll be able to go back to how you used to be.");
			}
		} else if (g.index == 17) {
			result = new Scene(2);

			result.backgrounds[0] = "lab";
			result.screens[0].attach("The medical treatment they offer at The Tower is on a whole different level.  When you go in with cuts, they spread an ointment over the wound which causes your skin to become almost painfully hot, and then the injury is gone by the time you get home.  When you go in with bad bruises, they give you pills that seem to work instantly, restoring your full range of movement and functionality with hardly any pain at all.\n\n");
			result.screens[0].attach("But it's still not good enough.  The scientists are evasive about the principles on which their medicine works, but they have told you that your body's own metabolism still limits how much they can do.  If your injuries are too extensive, they'll prioritize whichever one is more severe and tell you to go home and rest for the night before they'll give you any more treatment.\n\n");
			result.screens[0].attach("When you ask them about ways to heal even faster, they tell you that it's not possible.  And when you hint that you've seen somebody heal faster with your own eyes, they just shrug and tell you that you must be mistaken.  They aren't good actors.  It's obvious that they're hiding something, but you can't exactly force them to treat you.");

			result.screens[1].attach("However, something's different tonight.  On your way out of the building, you look through the usual pages of instructions they gave you for tonight's wound care.  But when you flip to the page containing the details of your next appointment, you find that it's not at the usual location.  Instead, you're being asked to come directly to the office of one of the doctors who work here.\n\n");
			result.screens[1].attach("It seems like you must have gotten somebody's attention.  Hopefully this means that you're on the right track.");
		} else if (g.index == 18) {
			if (g.tier == 0) {
				result = new Scene(14);

				result.backgrounds[0] = "lab";
				result.tracks[0] = Music.SILENCE;
				result.screens[0].attach("You step out of the elevator and into the upper levels of The Tower.  This is where your appointment instructed you to go.  It seems to be where the upper echelon of the facility conducts their business.  A few figures in labcoats pass by you, giving you curious glances but continuing about their business without interruption.  You feel out of place.\n\n");
				result.screens[0].attach("Your instructions tell you exactly where you need to go.  You turn down a hallway and then consult a sign which shows you which office numbers are located in which direction.  Your destination is just ahead.");

				result.screens[1].attach("You arrive in front of a door whose nameplate reads \"Dr. " + fullName(4) + "\".  This is the place.\n\n");
				result.screens[1].attach("You knock on the door, and a " + manWoman(4) + "'s voice immediately answers.\n\n");
				result.screens[1].attach("\"Come in.\"", 4);

				result.tracks[2] = Music.POWER;
				result.backgrounds[2] = "heilig1";
				result.screens[2].attach("Inside, you find a sparsely-decorated office, its owner sitting across from you at " + hisHer(4) + " desk.  This must be Dr. " + Heilig() + ".\n\n");
				result.screens[2].attach("At first glance, " + heShe(4) + "'s younger than you'd expect for a senior researcher at a facility like this, probably younger than " + DuMont() + ".  But with " + hisHer(4) + " slumped posture and the hint of worry lines around " + hisHer(4) + " eyes, " + heShe(4) + " already looks like " + heShe(4) + "'s been worn down by " + hisHer(4) + " experiences.  " + HeShe(4) + " looks tired.");

				result.screens[3].attach("But even so, " + hisHer(4) + " gaze is sharp as " + heShe(4) + " glances down at the papers in front of " + himHer(4) + " and then back up to your face.  You feel like you're being studied under a microscope.\n\n");
				result.screens[3].attach("\"I won't waste your time with pleasantries.  We're both in a hurry.  ", 4);
				if (currentPlaythrough.personStatus[5] == Locale.COLLEGETOWN) {
					result.screens[3].attach("In your case, you're interested in being able to act without concern for injury.  ", 4);
				} else {
					result.screens[3].attach("In your case, you're attempting to pursue the men who abducted " + fullName(5) + ".  ", 4);
				}
				result.screens[3].attach("In order to do that, you seek the same treatment we offered to '" + Jackal() + "'.\n\n", 4);
				result.screens[3].attach("It's straight to business, then.  What about " + Heilig() + "?  What's " + heShe(4) + " in a hurry to do?\n\n");
				result.screens[3].attach("\"To collect further data so that this treatment can be perfected and released to the public as soon as possible.  Even as we speak, people are needlessly dying.\"", 4);

				result.screens[4].attach(Heilig() + "'s answer is a little bit surprising.  When you learned that they had injected " + Jackal() + " with some 'medicine' that would ultimately end up killing " + himHer(3) + ", the natural assumption was to think of The Tower as a bunch of mad scientists doing research for its own sake.  But " + Heilig() + " seems to be motivated by the idea of using it to help people.\n\n");
				result.screens[4].attach("\"Of course.  Finding new ways to help people is the entire purpose of science.\"\n\n", 4);
				result.screens[4].attach("In that case, why keep all this technology hidden?  Even if the stuff they gave " + Jackal() + " still isn't ready yet, the other medical treatment you've been receiving seems safe enough.  There are people currently facing long-term hospitalization for injuries that could be healed up in a matter of days with the technology here.\n\n");
				result.screens[4].attach("\"We simply don't have enough of it.  We sell that medicine to you at a loss, because studying how your body responds to it is what gives us the data we need in order to improve it.  If the public were aware of what we could do, then there would be no way to keep up with demand.\"\n\n", 4);

				result.screens[5].attach("\"Every one of those injections represents thousands of man-hours of skilled labor.  I call it 'medicine', but it isn't a single simple compound that gets metabolized by the body.  Every molecule is extremely large and complicated, straddling the line between 'chemical' and 'tiny machine'.  It's costly to manufacture.\"\n\n", 4);
				result.screens[5].attach("So, only the rich would be able to afford it.\n\n");
				result.screens[5].attach("\"And as nice as it might be to receive their funding, there would be other consequences if knowledge of these treatments became public.  The technology here isn't only useful for healing from external injuries.  It also seems to be effective against the wear-and-tear of regular aging.\"\n\n", 4);

				result.screens[6].attach("\"The common people accept their own hardships because they believe themselves to have no other choice.  They take solace in the fact that even if the lives of the rich are slightly more comfortable, death comes equally for everyone in the end.  They cherish the time they have, even if it means wasting time that could otherwise be spent making more money.  But if they knew just how much further their lives could be extended...\"\n\n", 4);
				result.screens[6].attach("It's a strange thought.  What would you do differently if you knew you could become immortal by accumulating enough money?\n\n");
				result.screens[6].attach("\"Every monetary exchange would become a matter of life or death.  You couldn't give money away without shortening your own lifespan.  The line between theft and murder becomes blurred.  People would go to even further extremes to get rich, because the alternative would be a relatively early grave.\"\n\n", 4);
				result.screens[6].attach("If " + Heilig() + " thinks that this technology will have such a negative effect on society, then why develop it?  There's no way that " + heShe(4) + "'ll be able to keep it under wraps forever.\n\n");
				result.screens[6].attach("\"If we don't develop it here, then somebody else will eventually do the same.  And... I have a certain plan to avoid the worst outcome.\"", 4);

				result.backgrounds[7] = "heilig2";
				result.screens[7].attach("\"In order to prevent our longevity-enhancing treatments from tearing the fabric of society, we must render them obsolete before they ever become public knowledge.\"\n\n", 4);
				result.screens[7].attach(Heilig() + " momentarily seems much less tired.  A spark of almost religious fervor lights up in " + hisHer(4) + " eyes.\n\n");
				result.screens[7].attach("\"They must be replaced by something with the same effect, something which cannot be commodified.  Every individual must be able to produce their own supply of this 'medicine', without needing to fight against each other for scarce manufacturing resources.  And the only manufacturing facility available equally to everyone is the human body itself.  The solution is to modify the body's biological processes so that they produce endogenous longevity-enhancing nanomachines.\"\n\n", 4);

				result.backgrounds[8] = "heilig1";
				result.screens[8].attach("\"A single injection, performed on every newborn, so that they shall not perish, but have eternal life.  No need for regular doses of medicine sold by some corporation.  No need to worry about tomorrow.\"\n\n", 4);
				result.screens[8].attach(Heilig() + " pauses, frowning to " + himHer(4) + "self.  " + HisHer(4) + " manner once again becomes more subdued.\n\n");
				result.screens[8].attach("\"Unfortunately, at present, the treatment does more harm than good.  The changes to the body's metabolism are unpredictable, and the regenerative effects are negligible unless a customized cocktail of regulator compounds is taken on a daily basis.  Even then, the accelerated cell division results in genetic damage that propagates over time and inevitably leads to early death.  This is why I have named it 'cancer juice'.\"\n\n", 4);

				result.screens[9].attach("That's the treatment that " + Heilig() + " gave to " + Jackal() + "?  An early version of a serum meant to make people immortal?  It's obviously something that a lot of people would be interested in, but 'cancer juice' isn't the most marketable name.\n\n");
				result.screens[9].attach("\"I do not want it to be marketable.  At least not yet.  If you decide that you aren't interested, then I'll be happy to see you go.  I don't enjoy condemning people to die young.\"\n\n", 4);
				result.screens[9].attach("But then " + heShe(4) + "'d lose a potential test subject.\n\n");
				result.screens[9].attach("\"Yes.  When I say I'd be happy, I'm speaking from a purely sentimental perspective.  But as a researcher, I'm obligated to do everything in my power to convince you to accept.\"", 4);

				result.backgrounds[10] = "heilig3";
				result.screens[10].attach("No wonder " + heShe(4) + " looks so tired.  It doesn't seem like " + heShe(4) + " enjoys " + hisHer(4) + " job much.\n\n");
				result.screens[10].attach("\"It's less of a job and more of a calling.  The stakes are high.  I'll be happy when I can rest.\"\n\n", 4);
				result.screens[10].attach("When will that be?\n\n");
				result.screens[10].attach("\"I don't know.  We are getting closer to perfecting the treatment.  When '" + Jackal() + "' took " + hisHer(3) + " first dose, the life expectancy for subjects was five years.  Now, it's up to ten.  If you accept it yourself, then you will help us perfect it a little sooner.  But if you refuse, then perhaps you will live long enough to benefit from the completed version and become effectively immortal along with the rest of humanity.\"", 4);

				result.backgrounds[11] = "heilig1";
				result.screens[11].attach("\"Based on the information we were able to collect about your life and personality, I've calculated that you'll choose to inject our 'cancer juice'.  But you don't need to rush to a decision either way.  Take it home and think about it.\"\n\n", 4);
				result.screens[11].attach(Heilig() + " slides a small package across " + hisHer(4) + " desk to you.\n\n");
				result.screens[11].attach("\"Please treat this as carefully as you would any other lethal poison.\"\n\n", 4);
				result.screens[11].attach("That's it?  No need for payment up front?\n\n");
				result.screens[11].attach("\"The way you'll pay us is by allowing us to observe how it destroys your body.  Nothing else is necessary.\"", 4);

				result.backgrounds[12] = "heilig4";
				result.screens[12].attach(Heilig() + " closes " + hisHer(4) + " eyes and sighs when you take the package and tuck it away.\n\n");
				result.screens[12].attach("\"If you have any further questions, feel free to call me at any hour.  It would also be helpful if you'd allow us to run some tests on your body here at The Tower.  However... some of the tests are time-consuming, so you don't need to feel obligated to come.  If you're going to sacrifice your life to accomplish something, then your first priority should be to make sure you do it right.\"", 4);

				result.backgrounds[13] = "lab";
				result.screens[13].attach("As you leave The Tower, the package " + Heilig() + " gave you feels heavy.  ");
				if (currentPlaythrough.loops == 0 || currentPlaythrough.personStatus[5] == Locale.COLLEGETOWN) {
					result.screens[13].attach("From a rational perspective, it would be completely insane to consume this 'cancer juice'.  ");
					if (getGoalLevel(1, false) > 3) {
						result.screens[13].attach("If " + Tanaka() + " loves you, then that's all the more reason to make sure you don't burden " + himHer(5) + " with the guilt of knowing that you went to an early grave for " + hisHer(5) + " sake.  ");
					} else if (getGoalLevel(1, false) == 3) {
						result.screens[13].attach(Tanaka() + " made it clear that you're nothing to " + himHer(5) + ", and " + heShe(5) + " shouldn't be anything to you either.  ");
					} else {
						result.screens[13].attach(Tanaka() + " was a good friend, but that's all.  ");
					}
					result.screens[13].attach("So why is your hand itching to tear open the package and inject it right here and now?  Something's very wrong here.  A part of you wants to throw it out the window immediately in order to make sure you don't do something stupid.  But somehow, you can't...");
				} else {
					result.screens[13].attach("It seems like it still hasn't sunk in that this could be what kills you.  It doesn't feel real, almost as if this is all just a dream and you'll wake up fine and healthy no matter what you do.  Maybe that's a sign that you aren't mentally competent to make a decision like this.  But competent or not, the decision is yours now...");
				}
			} else if (g.tier == 1) {
				result = new Scene(15);

				result.backgrounds[0] = "lab";
				result.tracks[0] = Music.POWER;
				result.screens[0].attach(Heilig() + " seemed to be pleasantly surprised when you showed up to go through the routine tests " + heShe(4) + " asked you for.  ");
				if (currentPlaythrough.personStatus[5] == Locale.COLLEGETOWN) {
					result.screens[0].attach("Apparently " + heShe(4) + " expected you to ignore " + himHer(4) + " as soon as you had gotten the medicine you needed from " + himHer(4) + ".\n\nBut ");
				} else {
					result.screens[0].attach("Apparently " + heShe(4) + " expected you to run off after " + Tanaka() + " right away, but ");
					if (getGoalLevel(25, false) > 0) {
						if (getAttributeLevel(2, false).compareTo(BigInteger.TEN) >= 0) {
							result.screens[0].attach("you aren't quite ready to leave yet.");
						} else {
							result.screens[0].attach("you're still gathering the funds you'll need, so it's not like you have much else to do at this hour.");
						}
					} else if (getGoalLevel(14, false) > 0) {
						result.screens[0].attach("you need a break from your language study, and this makes for as good an excuse as any.");
					} else {
						result.screens[0].attach("you don't actually know where " + heShe(5) + " is yet, so you don't really have anything better to be doing at this hour.");
					}
					result.screens[0].attach("\n\nAnd ");
				}
				result.screens[0].attach("it's not like " + heShe(4) + "'s asking you to do anything difficult.  Mostly, " + heShe(4) + " just wants to know about your daily routine, your hobbies, your medical history, and anything else that might be affecting the results of your blood tests and physical exams.  It quickly becomes clear that " + heShe(4) + "'s already somehow obtained a full copy of your official medical records, but " + heShe(4) + " still wants to confirm them with you for the sake of redundancy.\n\n");
				result.screens[0].attach("On top of that, " + heShe(4) + "'s also asking a surprising number of questions about your personal philosophy, your worldview, and your opinions about right and wrong.  It almost seems like " + heShe(4) + "'s trying to make friends with you - but whenever you try to respond in kind, " + heShe(4) + " immediately goes back to a purely professional demeanor, shutting down any attempt to get to know " + himHer(4) + " better in turn.  " + HeShe(4) + " seems to be deliberately putting up a wall between the two of you.");

				result.characters[1] = new String[]{"heilig"};
				result.emotions[1] = new String[]{"Neutral"};
				result.screens[1].attach("When you finally ask " + himHer(4) + " about the purpose behind " + hisHer(4) + " non-medical-related questions, " + heShe(4) + " thinks for a long moment before seeming to come to a decision.\n\n");
				result.screens[1].attach("\"It's important for us to be able to identify what kind of person you are.  By offering you access to our technology, we're giving you a lot of power.  Depending on your values, it could be dangerous.\"\n\n", 4);
				result.screens[1].attach("Because you might use that power to hurt others?\n\n");
				result.screens[1].attach("\"Yes, but not only that.  As I explained to you before, it's important that these treatments don't become public knowledge.  The demand would be too high, and there would be chaos.  It would cause problems for us if you were to threaten to go to the media.\"", 4);

				result.emotions[2] = new String[]{"Uncomfy"};
				result.screens[2].attach("But " + Heilig() + " has already given you a working sample of " + hisHer(4) + " 'cancer juice'.  What good is it to start looking into your personality now?  Even if you did intend to go to the media, what could " + heShe(4) + " actually do?\n\n");
				result.screens[2].attach("\"We'd have you killed, of course.\"\n\n", 4);
				result.screens[2].attach("Oh.  That's pretty cold.  It's jarring to hear " + Heilig() + " talk so casually about murder.\n\n");
				if (loopRoutineCount(RoutineElements.CANCERJUICE, currentPlaythrough) > 0) {
					result.screens[2].attach("\"I'm already responsible for your death, along with your mercenary friend's and many others.  Why should I balk at moving yours forward by a few years?\"", 4);
				} else {
					result.screens[2].attach("\"I already accepted responsibility for your death when I sent you home with that package.  Why should I balk at moving it forward by a few years?\"", 4);
				}

				result.emotions[3] = new String[]{"Neutral"};
				result.screens[3].attach("It's bizarre.  Whenever " + Heilig() + " talks about " + hisHer(4) + " work, " + heShe(4) + " seems truly passionate about changing the world for the better, saving as many lives as possible.  But " + heShe(4) + " doesn't hesitate at all when it comes to sacrificing lives toward that end.\n\n");
				result.screens[3].attach("\"I'm sorry.  It was insensitive of me to phrase it like that.\"\n\n", 4);
				result.screens[3].attach("That isn't the issue here.  If " + Heilig() + " cares so much about helping people, then why is " + heShe(4) + " so willing to kill them?\n\n");
				result.screens[3].attach("\"It's precisely because I care so much that I'm willing to do everything in my power to help, no matter the cost.\"", 4);

				result.emotions[4] = new String[]{"Uncomfy"};
				result.screens[4].attach("But what about medical ethics?\n\n");
				result.screens[4].attach("\"Ethics...  Mm, what exactly are 'ethics'?\"\n\n", 4);
				result.screens[4].attach("Is that a joke?  Ethics are the lines that shouldn't be crossed, no matter the payoff for doing so.\n\n");
				result.screens[4].attach("\"Yes, I know.  Those lines have caused so much trouble.  Let me tell you a story about my experiences with ethics.\"", 4);

				result.emotions[5] = new String[]{"Neutral"};
				result.screens[5].attach("\"During my residency, I worked under a doctor who specialized in the treatment of extremely rare diseases.  Such diseases are often called 'orphan diseases' because there's so little institutional interest in developing treatments for them.  For most diseases, our civilization has built up centuries' worth of knowledge about them, and we can lean on that knowledge to treat them as effectively as possible.  But if you're diagnosed with an orphan disease, then you're on your own.  Because there aren't many other people suffering from the same disease, there isn't much money available for researching and treating it.\"\n\n", 4);
				result.screens[5].attach("Was " + Heilig() + " motivated by the idea of being there for 'orphans' who couldn't rely on anyone else?\n\n");
				result.screens[5].attach("\"Perhaps.  To be honest, it wasn't my first choice.  I was never an especially brilliant doctor, and I had to take whatever position I could get.  But my time there taught me some important lessons.  One of my patients was a " + boyGirl(-1) + " with a genetic condition that affected the way " + hisHer(-1) + " body processed oxygen.\"\n\n", 4);
				result.screens[5].attach("'Never an especially brilliant doctor'?  It's a bit strange for someone in " + Heilig() + "'s prestigious position to refer to " + hisHer(4) + " abilities in such a self-deprecating way, but " + heShe(4) + "'s already continuing with " + hisHer(4) + " story, so you don't have an opportunity to interject.");

				result.emotions[6] = new String[]{"Uncomfy"};
				result.screens[6].attach("\"At the time, I still hadn't learned the importance of maintaining emotional distance from my patients.  I became quite obsessed with the idea of saving " + himHer(-1) + ".  Curing the disease was out of the question, but I tried every possible treatment just to keep " + himHer(-1) + " alive.  As long as we kept " + himHer(-1) + " attached to a ventilator with a high enough oxygen concentration, " + hisHer(-1) + " cells would be able to get just enough to remain functional.  But as " + heShe(-1) + " grew up and the condition worsened, the required concentrations reached the point of causing oxygen toxicity, and we had to try to find a way to help " + hisHer(-1) + " body process that oxygen more efficiently.\"\n\n", 4);
				result.screens[6].attach("What happened to " + himHer(-1) + "?\n\n");
				result.screens[6].attach("\"" + HeShe(-1) + " died, of course.  Eventually, the hypoxia began to lead to brain damage, and " + heShe(-1) + " soon ended up in a persistent vegetative state.  I unplugged " + hisHer(-1) + " life support myself.\"", 4);

				result.emotions[7] = new String[]{"Neutral"};
				result.screens[7].attach("\"A couple of months later, a revolutionary new drug to treat that same disease was approved for clinical trials.  The drug turned out to be a complete success, and ever since then, not a single person has died from that disease.\"\n\n", 4);
				result.screens[7].attach("That's unlucky, but it's not " + Heilig() + "'s fault.  It sounds like " + heShe(4) + " did everything " + heShe(4) + " could.  There was nothing else that could be done.\n\n");
				result.screens[7].attach("\"Is that really true?  I don't blame myself much for failing to keep my patient alive those extra sixty-seven days that would have given " + himHer(-1) + " the chance to take the drug and survive.  It simply wasn't possible for me as I was then.  But why couldn't the drug have come a bit sooner?  Was it ordained by God that it would be developed on that particular day, month, and year?\"", 4);

				result.emotions[8] = new String[]{"Anger"};
				result.screens[8].attach("\"No!  All inventions are the work of human hands.  The harder we strive, the earlier they come.\"\n\n", 4);
				result.screens[8].attach("Then " + Heilig() + " blames other scientists for not working hard enough?\n\n");
				result.screens[8].attach("\"I'm sure that they put in as much effort as they could.  But effort means little if it isn't pointed in the proper direction.  How much faster could they have worked if they hadn't been burdened by notions of medical ethics?  Why must the regulations that surround new drugs be so restrictive?\"", 4);

				result.emotions[9] = new String[]{"Neutral"};
				result.screens[9].attach("So, that's what this is about.  But if doctors are permitted to just inject people with whatever experimental drugs they come up with, people will die.\n\n");
				result.screens[9].attach("\"People are already dying.  I want that to stop as soon as possible.\"\n\n", 4);
				result.screens[9].attach("And that's why " + Heilig() + " is willing to kill some people in order to save others?\n\n");
				result.screens[9].attach("\"As long as the number of people killed is smaller than the number of people saved, yes.  When you look at it in those terms, the moral dilemma becomes extremely simple.  If you take one course of action, one group of people will die.  If you take the other course of action, another group of people will die.  So, simply choose the course of action that results in the smaller number of people dying.\"\n\n", 4);
				result.screens[9].attach("Even if one group of people dies naturally, while the other group dies as a direct result of " + Heilig() + "'s actions?\n\n");
				result.screens[9].attach("\"I reject that distinction.\"", 4);

				result.emotions[10] = new String[]{"Anger"};
				result.screens[10].attach("\"In my experience, the notion of 'ethics' is nothing more than a shield used by cowards to deflect their responsibility.  If an experimental medical treatment kills the patient, then people can point fingers at the doctor and say that " + heShe(4) + "'s the one responsible.  But when a patient dies because no cure yet exists, people don't assign any blame whatsoever.  They treat it as a tragedy that couldn't have been avoided, and nobody needs to feel guilty about it.\"\n\n", 4);
				result.screens[10].attach("And " + Heilig() + " disagrees?\n\n");
				result.screens[10].attach("\"Yes.  There's no tragedy that can't be avoided.  There's no obstacle that can't be overcome by human ingenuity.\"", 4);

				result.emotions[11] = new String[]{"Neutral"};
				result.screens[11].attach("\"Um, to be clear, I don't exactly blame the medical community for being so reluctant to push the limits of ethics.  Because any harm caused by an experimental treatment can be pinned to an obvious 'culprit', it's easy to end up being targeted by lawsuits and even criminal charges.  It's only natural that people would be cautious about opening themselves up to that kind of trouble.\"\n\n", 4);
				result.screens[11].attach(Heilig() + " " + himHer(4)+ "self doesn't seem to be worried about getting sued, let alone arrested.\n\n");
				result.screens[11].attach("\"The Tower has some powerful benefactors.  Once it became clear that our species was on the cusp of immortality, those benefactors began to gather scientists with perspectives like my own.\"\n\n", 4);
				result.screens[11].attach("Would " + Heilig() + " happen to know a millionaire by the name of " + fullName(2) + "?\n\n");
				result.screens[11].attach("\"If " + heShe(2) + "'s a mere millionaire, then " + heShe(2) + " probably doesn't have the pull to be a part of a group like this.\"", 4);

				result.emotions[12] = new String[]{"Uncomfy"};
				result.screens[12].attach("\"In any case, I must apologize for rambling like this.  We've barely gotten started on the night's questions.\"\n\n", 4);
				result.screens[12].attach("It really is fine.  You don't have anywhere else you need to be.\n\n");
				result.screens[12].attach("\"Mm.  If you really do have the time to spare, then there is another battery of tests I'd like to run on you.  This isn't related to the 'cancer juice', though.  I've simply noticed some anomalies in your physical data, and I'd like to get to the bottom of it.\"\n\n", 4);
				result.screens[12].attach("That sounds reasonable enough.\n\n");
				result.screens[12].attach("\"You shouldn't agree just yet.  These tests involve pushing your endurance to the absolute limit.  I suppose you could think of it as a workout regimen.  It might actually improve your physical fitness in the long term.  But I warn you that the tests are quite gruelling.\"", 4);

				result.emotions[13] = new String[]{"Neutral"};
				result.screens[13].attach("As quickly as that, " + Heilig() + " is once again behind " + hisHer(4) + " wall of professionalism.\n\n");
				result.screens[13].attach("\"I'll send you home with some paperwork so you can decide whether you're interested in participating.  But for now, we need to take another blood sample immediately if we want the results to be ready before you leave.\"\n\n", 4);
				result.screens[13].attach("The rest of your visit proceeds pretty much as normal.");

				result.characters[14] = new String[0];
				result.screens[14].attach("But at least for a little while, you got a glimpse of who " + Heilig() + " really is.  " + HeShe(4) + " was speaking to you from the heart.  Even if " + heShe(4) + " doesn't follow the common notion of medical ethics, it seems like " + heShe(4) + " really is trying to be a good person.\n\n");
				result.screens[14].attach("And it seems like " + heShe(4) + "'s feeling more comfortable with you as well.  If " + heShe(4) + "'s inviting you to be part of more experiments at The Tower, then " + heShe(4) + " must be satisfied that you won't betray them.  Hopefully that means " + heShe(4) + " won't see any need to have you killed.");
			} else if (g.tier == 2) {
                result = new Scene(1);

                result.backgrounds[0] = "black";
                result.screens[0].attach("Placeholder - " + Heilig() + " begins to trust the protagonist enough to involve " + himHer(-1) + " in more experiments.");
            }
        } else if (g.index == 20) {
            result = new Scene(1);

            result.backgrounds[0] = "black";
            result.screens[0].attach("Placeholder - protagonist obtains membership in the country club independent of " + DuMont() + ".");
        } else if (g.index == 21) {
            result = new Scene(14);

            result.backgrounds[0] = "country";
            result.tracks[0] = Music.LIFE;
            result.screens[0].attach("Once again, you and " + DuMont() + " are visiting the country club together.  Now that you're not a completely new face, there's not as much attention directed at you, and it's a bit less onerous.\n\n");
            result.screens[0].attach("And with more time to observe your surroundings, you're noticing things you didn't notice before.");

            result.screens[1].attach("In particular, you consciously notice that you aren't the only non-aristocrat present here.  It was obvious that there would have to be serving staff present, of course, but they were so unobtrusive that you never even spared a complete thought for them.\n\n");
            result.screens[1].attach("And there's security, too.  With so many powerful people concentrated in one place, anyone looking to abduct somebody for ransom would have more opportunities here than anywhere else.  Not to mention that powerful people have a way of making enemies who might be willing to pay good money to see them dead.");

            if (getGoalLevel(13, true) > 0) {
                result.tracks[2] = Music.SILENCE;
                result.screens[2].attach("Among the security staff on your last visit, you thought you recognized a familiar silhouette, but " + DuMont() + " was introducing you to an important associate at the time, and you couldn't spare more than a glance.  By the time you were free, the silhouette was gone.\n\n");
                result.screens[2].attach("This time, you've excused yourself from " + DuMont() + " and gone to stretch your legs, exploring the country club.  You're only going into the areas that are open to guests, so you have every right to be there, but it still feels like sort of like you're sneaking around somewhere you shouldn't be.");

                result.screens[3].attach("But your search pays off.  Near the back entrance, you spot the familiar silhouette again, giving instructions to some of the other security guards.  Even though " + heShe(3) + " said " + heShe(3) + " prefers to work alone, " + heShe(3) + " certainly seems comfortable enough dealing with subordinates.\n\n");
                result.screens[3].attach("At first, you thought you had managed to sneak up on " + himHer(3) + ".  But as soon as " + heShe(3) + " dismisses the security guards, " + heShe(3) + " smoothly turns toward you, no sign of surprise on " + hisHer(3) + " face.");

                result.tracks[4] = Music.DESERT;
                result.characters[4] = new String[]{"jackal"};
                result.emotions[4] = new String[]{"Neutral"};
                result.screens[4].attach("\"Hello.  It seems you noticed me, this time.\"\n\n", 3);
                result.screens[4].attach("You noticed " + himHer(3) + " last time, too.  You just didn't get the chance to come say hi.\n\n");
                result.screens[4].attach("\"" + DuMont() + " has been keeping you busy.\"\n\n", 3);
                result.screens[4].attach(Jackal() + " seems pretty busy " + himHer(3) + "self.  Is " + Jackal() + " in charge of the security here?\n\n");
                result.screens[4].attach("\"No, I am simply a consultant.  " + DuMont() + " convinced the owners to hire me to survey the security here and provide advice.\"", 3);

                result.emotions[5] = new String[]{"Sigh"};
                result.screens[5].attach("Given how high-class this place is, that must be a pretty lucrative gig.  Has " + Jackal() + " been passing up on work here in order to make " + himHer(3) + "self available for your training?\n\n");
                result.screens[5].attach("\"Yes.  It is not a big deal.  Even without my help, the security here is... decent.\"\n\n", 3);
                result.screens[5].attach("But " + Jackal() + " said that " + hisHer(3) + " workday only starts when the sun goes down.  In truth, " + heShe(3) + "'s actually been missing out on a lot of money.  Is it really alright for " + himHer(3) + " to pass up on that?\n\n");
                result.screens[5].attach("\"It is... too much money.  I do not like it.  Sometimes, money earned by keeping people alive feels more dirty than money earned killing them.\"", 3);

                result.emotions[6] = new String[]{"Uncomfy"};
                result.screens[6].attach("\"No, I should not say that.  Most of the people here are more or less innocent.  Even if they are involved in bad business, it is business that would continue happening with or without them.\"\n\n", 3);
                result.screens[6].attach("Either way, it gives you a new appreciation for how nice " + Jackal() + " is being by opening up " + hisHer(3) + " afternoons to teach you.  Considering " + hisHer(3) + " talents, maybe it shouldn't have been surprising that people are usually willing to pay so much for " + hisHer(3) + " time.\n\n");
                result.screens[6].attach("\"It is not as though I am getting nothing from the arrangement.  All of this work will return to benefit me during any work we end up doing together.\"", 3);

                result.characters[7] = new String[]{"dumont", "jackal"};
                result.emotions[7] = new String[]{"Smug", "Sigh"};
                result.screens[7].attach("\"So, it's true.  You really are trying to steal " + himHer(-1) + " away into your world.\"\n\n", 2);
                result.screens[7].attach(DuMont() + " really has a talent for barging into other people's conversations, doesn't " + heShe(2) + "?  And once again, the subject is your fate.  How does this keep happening?\n\n");
                result.screens[7].attach("\"I should be the one saying that to you, " + DuMont() + ".  Were you not only going to hire " + himHer(-1) + " as a bartender or perhaps a housekeeper?  How is it that I find " + himHer(-1) + " waist-deep in this filth?\"\n\n", 3);
                result.screens[7].attach("\"I'm simply teaching " + himHer(-1) + " to take care of " + himHer(-1) + "self, " + Jackal() + ".\"\n\n", 2);
                result.screens[7].attach("\"Once again, you steal the words from my mouth.  Or would you have " + himHer(-1) + " trust " + hisHer(-1) + " safety to whichever bodyguard bids lowest?\"", 3);

                result.emotions[8] = new String[]{"Happy", "Neutral"};
                result.screens[8].attach("You don't sense any serious tension in the air, though.  It feels less like " + DuMont() + " and " + Jackal() + " are seriously sniping at each other, and more like they're comfortable enough with each other that they can joke around without needing to watch their words.\n\n");
                result.screens[8].attach("\"Really, though, if you want to give " + himHer(-1) + " a few lessons right here and now, that works out just fine for me.  It'll simply add to " + hisHer(-1) + " dangerous mystique and get the other socialites talking about " + himHer(-1) + " even more.\"\n\n", 2);
                result.screens[8].attach("\"You speak as if it is difficult or worthwhile to impress the likes of them.  No, I would not intrude on the arrangement you have here.  It was not my intention to interfere.\"\n\n", 3);
                result.screens[8].attach("\"Are you sure?  Even if it's not for a combat training lesson, I don't mind if you two head off to do your own thing.  You could both use a break now and then.\"", 2);

                result.emotions[9] = new String[]{"Neutral", "Uncomfy"};
                result.screens[9].attach("\"I am sure.  You two should do what you came here to do.  And I should do the same.  It was enjoyable to see you again.\"\n\n", 3);
                result.screens[9].attach("With a last nod toward " + DuMont() + ", " + Jackal() + " heads through one of the employees-only doors.");

                result.characters[10] = new String[]{"dumont"};
                result.emotions[10] = new String[]{"Uncomfy"};
                result.screens[10].attach(DuMont() + " sighs.\n\n");
                result.screens[10].attach("\"" + HeShe(3) + "'s the same as ever.  I was hoping that after seeing you here, " + heShe(3) + " might be willing to loosen up a little.  But I should've known that " + heShe(3) + "'d just see it as an opportunity for another training session.\"\n\n", 2);
                result.screens[10].attach("Does this mean that " + DuMont() + " actually knows about how you're training with " + Jackal() + "?\n\n");
                result.screens[10].attach("\"Of course.  The two of us visit on a regular basis.\"", 2);

                result.emotions[11] = new String[]{"Smug"};
                result.screens[11].attach("\"And lately, we've been talking about you quite a bit.  You should see the way that " + Jackal() + " smiles whenever you come up.\"\n\n", 2);
                if (getGoalLevel(15, false) < 4) {
                    result.screens[11].attach(Jackal() + " smiles?  You find hard to imagine.\n\n");
                    result.screens[11].attach("\"It's true.  " + HeShe(3) + "'s quite fond of you.\"", 2);
                } else {
                    result.screens[11].attach("It's probably pretty similar to the way " + heShe(3) + " smiles when talking about " + DuMont() + ".\n\n");
                    result.screens[11].attach("\"I find that difficult to believe, but it's kind of you to say so.\"", 2);
                }

                result.emotions[12] = new String[]{"Happy"};
                result.screens[12].attach("\"Well, I'll get " + himHer(3) + " to relax one of these days.  At least " + heShe(3) + " seems to be coming around to the idea of leaving the streets behind and working as a security consultant fulltime.  " + HeShe(3) + " says that " + heShe(3) + "'s only interested in working as a 'fixer' for a couple more years at most.\"\n\n", 2);
                result.screens[12].attach("Oh.  This is awkward.  Does " + DuMont() + " not know that " + Jackal() + " won't even be alive for more than a couple of years?  It sounds like " + heShe(2) + " doesn't, but it's probably not your place to tell " + himHer(2) + ".\n\n");
                result.screens[12].attach("\"For now, we should be focusing on you.  There are a couple more people that I want you to meet tonight...\"", 2);

                result.characters[13] = new String[0];
                result.screens[13].attach("You return to the party with " + DuMont() + ".  Knowing that there's another friendly face here actually makes it easier to tolerate the socialites.\n\n");
                result.screens[13].attach("If it ever gets to be too much, you can always duck out of the party and find " + Jackal() + " again.  Knowing " + himHer(3) + ", " + heShe(3) + " really will try to use the meetup as an impromptu training session.  But that might not be such a bad thing.");
            } else {
                result.tracks[1] = Music.SILENCE;
                result.screens[2].attach("It's a glimpse into a world you've only imagined up to this point.  Normal people have no choice but to accept that they might be mugged or assaulted, and they can only hope that the police and the insurance companies will be able to mitigate whatever happens to them.  There's not much they can do to actually make themselves less of a target.\n\n");
                result.screens[2].attach("But for the people powerful enough to come to a place like this, another option is available.  They can pick and choose between the most qualified security experts in the world, professionals who have spent their entire lives developing the skills required to make sure that their clients never need face the slightest inconvenience from any criminal act.\n\n");
                result.screens[2].attach("Just what does such an expert look like?");

                result.characters[3] = new String[]{"jackal"};
                result.tracks[3] = Music.DESERT;
                if (currentPlaythrough.personStatus[5] == Locale.COLLEGETOWN) {
                    result.emotions[3] = new String[]{"Frown"};
                    result.screens[3].attach("");
                } else {
                    result.emotions[3] = new String[]{"Uncomfy"};
                    result.screens[3].attach("While exploring the back rooms of the country club, you catch sight of a small group of security personnel.  They seem to be reporting to their superior.  You're too far away to hear their words clearly, and you're hesitant to get any closer.  Every single one of them practically radiates a sense of danger.\n\n");
                    result.screens[3].attach("The " + manWoman(3) + " in charge calmly gives an order, and the group disperses.  Suddenly, you're alone with " + himHer(3) + ".\n\n");
                    result.screens[3].attach(HeShe(3) + " strides toward you, nodding in greeting.");

                    result.emotions[4] = new String[]{"Neutral"};
                    result.screens[4].attach("\"I did not expect to meet you here.\"\n\n", 3);
                    result.screens[4].attach(HeShe(3) + " already knows you?  How?\n\n");
                    result.screens[4].attach("\"" + DuMont() + " hired me to look into " + fullName(5) + "'s abduction.  ", 3);
                    if (getGoalLevel(12, true) > 0) {
                        result.screens[4].attach("I saw your report to the police.\"\n\n", 3);
                    } else {
                        result.screens[4].attach(HeShe(2) + " showed me a photo of you and told me that you might seek me out.\"\n\n", 3);
                    }
                    result.screens[4].attach("So, this is the 'fixer' " + DuMont() + " told you about.  If you recall correctly, " + heShe(3) + " went by '" + Jackal() + "'.");

                    result.emotions[5] = new String[]{"Uncomfy"};
                    if (currentPlaythrough.currentDay == classStartDay+1) {
                        result.screens[5].attach("\"You didn't come here specifically to meet with me?  This is... a strange coincidence.\"\n\n", 3);
                    } else {
                        result.screens[5].attach("\"But it seems that you had no interest in tracking " + himHer(5) + " down after all.\"\n\n", 3);
                    }
                    if (currentPlaythrough.weeklyActions[weekDayNumber()][3] == Action.HIREFIXER) {
                        result.screens[5].attach("You had actually been planning to come see " + Jackal() + " at the nightclub tonight, although you weren't sure if there was any point in doing so.  ");
                    } else {
                        result.screens[5].attach("You hadn't even been sure whether there was any point in discussing the matter with " + Jackal() + ".  ");
                    }
                    result.screens[5].attach(DuMont() + " had given you the impression that trying to save " + Tanaka() + " would be a lost cause at this point.\n\n");
                    result.screens[5].attach("\"... I see.  If " + DuMont() + " wishes to keep you from getting involved, then it is not my place to interfere.\"", 3);

                    result.emotions[6] = new String[]{"Neutral"};
                    result.screens[6].attach("With the way " + Jackal() + " says that, it sounds almost like finding " + Tanaka() + " wouldn't be impossible at all.\n\n");
                    result.screens[6].attach("\"It would not be impossible.  But it also would not be easy.  And... it would not be safe.\"\n\n", 3);
                    result.screens[6].attach("Less safe than working as a bodyguard for high-profile targets like this?\n\n");
                    result.screens[6].attach("\"I do not mean that it would be dangerous for me.  I mean that it would be dangerous for you.  The group that abducted your friend was... unusual.  Bold enough to take somebody off the street in board daylight.  Probably well-connected.  They might retaliate against anyone trying to track them down.\"", 3);

                    result.emotions[7] = new String[]{"Frown"};
                    result.screens[7].attach("\"If " + DuMont() + " advised you to let the matter go, then " + heShe(2) + " did so for your own sake.\"\n\n", 3);
                    result.screens[7].attach("Somehow, being told that it was for your own good just makes you more inclined to get yourself involved anyway.\n\n");
                    result.screens[7].attach("\"Do not take this lightly.  Being targeted by a group like this would be the end of you.  Unless you think you would be capable of fighting them off?\"\n\n", 3);
                    if (getGoalLevel(2, true) > 6) {
                        result.screens[7].attach("You doubt that the little bit of martial arts training you've done with " + Yumeno() + " would be enough to let you take on a bunch of criminals.  ");
                    } else {
                        result.screens[7].attach("No, you've never had to defend yourself in a life-or-death situation before.  ");
                    }
                    result.screens[7].attach("That's actually why you were seeking out the security personnel here in the first place.  You thought you might be able to learn something from them.");

                    result.emotions[8] = new String[]{"Uncomfy"};
                    result.screens[8].attach("\"And if you were to obtain those skills, what exactly would you do with them?\"\n\n", 3);
                    result.screens[8].attach("Well, for one thing, you'd be able to help your friends without needing to worry about retaliation.\n\n");
                    result.screens[8].attach("\"I see...  " + DuMont() + " will not be happy with me if I put you in the way of danger.  But " + heShe(2) + " should have no complaints about me helping you learn to defend yourself.\"\n\n", 3);

                    result.emotions[9] = new String[]{"Frown"};
                    result.screens[9].attach("It looks like you've found a teacher.  But how much will " + Jackal() + " want to charge you for lessons?\n\n");
                    result.screens[9].attach("\"There is no charge.  Just let me know ahead of time, and I will come to the nightclub early.  We can use the empty lot out back.\"\n\n", 3);
                    result.screens[9].attach("Really?  Just what is " + Jackal() + " getting out of this arrangement, then?  Is " + heShe(3) + " just helping you because you're also a friend of " + DuMont() + "?\n\n");
                    result.screens[9].attach("\"You could say that.  " + DuMont() + " has been speaking of you often lately.  I wish to see just what sort of person you are.\"\n\n", 3);
                    result.screens[9].attach("Maybe it shouldn't be surprising that " + Jackal() + " would be protective toward " + DuMont() + ".  You'll have to be on your best behavior around " + himHer(3) + ".");

                    result.emotions[10] = new String[]{"Neutral"};
                    result.screens[10].attach("\"We will be practicing during daylight hours, so if you decide that you do want to hire me to look for your friend, then it will not interfere with that.\"\n\n", 3);
                    result.screens[10].attach("What about having " + Jackal() + " let you come along while " + heShe(3) + " searches for " + Tanaka() + "'s trail?  You could learn something from watching " + himHer(3) + " work.\n\n");
                    result.screens[10].attach("\"Do not get ahead of yourself.  Until you've developed some skills, having you along would be dangerous for us both.\"", 3);

                    result.emotions[11] = new String[]{"Uncomfy"};
                    result.screens[11].attach("\"Even after you actually have developed your skills, I imagine that " + DuMont() + " will not want you to be involved with this kind of work.  But... it is not " + hisHer(2) + " decision to make.  It is yours and yours alone.\"\n\n", 3);
                    result.screens[11].attach("So, despite being protective of " + DuMont() + ", " + Jackal() + " is willing to defy " + himHer(2) + ".  Just what sort of relationship do they have?\n\n");
                    result.screens[11].attach("\"A... very special one.  I owe " + himHer(2) + " my life.  But that is all the more reason to live that life according to my own values.  I have less than two years to live.  I will not waste the time that " + DuMont() + " has given me.\"", 3);

                    result.emotions[12] = new String[]{"Neutral"};
                    result.screens[12].attach("\"But this is not the time and place for idle chatter.  At least not for the likes of us.  I should return to my work.  If you wish to make use of my skills, you know how to find me.\"\n\n", 3);
                    result.screens[12].attach(Jackal() + " turns to go.");

                    result.characters[13] = new String[0];
                    result.screens[13].attach("When " + DuMont() + " brought you here to meet important people, you doubt that " + Jackal() + " was the kind of person " + heShe(2) + " had in mind.  But you feel like " + Jackal() + " might actually be able to do more for you than any of the millionaires here.  Even if you are able to afford your own private security detail someday, it'd be nice to have some skills of your own to fall back on.\n\n");
                    result.screens[13].attach("You'll have to take " + Jackal() + " up on " + hisHer(3) + " offer soon.  But in the meantime, you should probably get back to " + DuMont() + ".");
                }
            }
        } else if (g.index == 22) {
            result = new Scene(27);

            result.backgrounds[0] = "lab";
            result.tracks[0] = Music.POWER;
            result.screens[0].attach("You've been putting a lot of effort into the battery of tests that " + Heilig() + " asked you to complete.  At first, you were under the impression that it would be like all the 'routine tests' " + Heilig() + " wanted to administer after " + heShe(4) + " gave you " + hisHer(4) + " cancer juice.  But " + heShe(4) + " wasn't kidding about this set of tests being more gruelling.\n\n");
            result.screens[0].attach("And so, you've been pushing yourself to the limit, sweating out what feels like your entire body weight in water, then pushing yourself even past that point.  It seems almost like some sort of innovative torture technique.  After every test, " + Heilig() + " gives you some new task, whether it's running in circles or climbing up a wall or lifting weights or punching a bag attached to a sensor.  For whatever reason, the spacious testing chamber here is apparently equipped for use as a gymnasium.\n\n");
            result.screens[0].attach(Heilig() + " really doesn't seem to be pleased by the results.  The whole time, " + heShe(4) + "'s glued to " + hisHer(4) + " stack of papers, apparently reviewing the results of each test as they come in.  " + HisHer(4) + " eyebrows climb higher and higher, and you sometimes see " + himHer(4) + " break out into a cold sweat.\n\n");
            result.screens[0].attach("You aren't sure what " + heShe(4) + " could be so surprised by.  The obvious answer would be that you have some sort of superhuman physical abilities, but you were able to rule that out pretty quickly.  You've looked up the world records for the kinds of things " + Heilig() + "'s asking you to do, and while you're surprisingly close to reaching some of them, you still aren't setting any records yourself.  You're just in better shape than you thought you were.");

            result.characters[1] = new String[]{"heilig"};
            result.emotions[1] = new String[]{"Neutral"};
            result.screens[1].attach("\"That's enough.  There's no point in going further.\"\n\n", 4);
            result.screens[1].attach("At " + Heilig() + "'s words, you immediately collapse onto the floor.  Finally.  Maybe you'll actually be able to get some answers now.\n\n");
            result.screens[1].attach("\"First, I have more questions.  Have you experienced anything unusual recently?  Any possible symptoms of illness, even if you didn't actually get sick?  Any... Anything strange that happened to you, even if you wouldn't normally consider it 'health-related'?\"\n\n", 4);
            result.screens[1].attach("This again?  The wording of the question is different, but it seems like " + Heilig() + "'s been trying to get something out of you ever since this latest round of tests started.  You've answered honestly, but that hasn't seemed to satisfy " + himHer(4) + ".  And you're too tired to think about what " + heShe(4) + " might be trying to get you to say.  The question is too vague.\n\n");
            result.screens[1].attach("And so you just reply with the first thing that comes to mind.  You had a weird dream on August 1st.");

            result.emotions[2] = new String[]{"Surprise"};
            result.screens[2].attach("\"...\"\n\n", 4);
            result.screens[2].attach("You remember it because you dreamed about " + Tanaka() + ", and then you saw " + himHer(5) + " for the first time in awhile.  It was a really vivid dream, too, though you can't remember the details.\n\n");
            result.screens[2].attach("Actually, you think you remember one detail.  Wasn't " + Tanaka() + " in danger?  ");
            if (currentPlaythrough.personStatus[5] == Locale.COLLEGETOWN) {
                result.screens[2].attach("And then some people tried to abduct " + himHer(5) + ".  ");
            } else {
                result.screens[2].attach("And then " + heShe(5) + " actually did get abducted.  ");
            }
            result.screens[2].attach("What a strange coincidence.\n\n");
            result.screens[2].attach("Maybe you're getting your memories mixed up.  The more you think about it, the less sure you are.");

            result.emotions[3] = new String[]{"Uncomfy"};
            result.screens[3].attach("\"...\"\n\n", 4);
            result.screens[3].attach(Heilig() + " has gone silent ever since you started talking.  Well, it's not surprising.  " + HeShe(4) + " asked you about your medical condition, and you started rambling about some sort of prophetic dream.  " + HeShe(4) + "'s probably annoyed at having you bring up something so unscientific.\n\n");
            result.screens[3].attach("\"I've never approved of using the term 'unscientific' to talk about mystical ideas.  They aren't 'unscientific'.  They're just probably wrong.\"\n\n", 4);
            result.screens[3].attach("Then what exactly does it mean for something to be 'unscientific'?\n\n");
            result.screens[3].attach("\"An unscientific theory is one which doesn't make predictions about future observations.\"", 4);

            result.emotions[4] = new String[]{"Neutral"};
            result.screens[4].attach("\"Science is not a system of beliefs.  It is a method.  You put together a theory about how the world works, a theory which predicts what will happen in the future.  If those predictions tend to come true, then the theory is useful.  And if those predictions do not come true, then the theory is evidently wrong.\"\n\n", 4);
            result.screens[4].attach("So if somebody came out with a theory that ghosts were real and people's bad luck was caused by being haunted by them, then " + Heilig() + " would call that 'scientific'?\n\n");
            result.screens[4].attach("\"Of course.  But it would need to meet certain statistical standards for predicting 'bad luck', so that we could test whether people at risk of being haunted were actually experiencing misfortune at a rate higher than what could be explained by other correlated factors.  The existence of ghosts isn't rejected by the scientific community because it's 'unscientific'.  It's rejected because its predictions do not outperform random guessing.\"", 4);

            result.emotions[5] = new String[]{"Anger"};
            result.screens[5].attach("\"The foundation of science is predictive power.  If a theory predicts something which nobody otherwise would have expected, and if that prediction comes true... then the theory has merit, no matter how 'unscientific' it appears at first glance.\"\n\n", 4);
            result.screens[5].attach(Heilig() + " turns " + hisHer(4) + " clipboard around, showing you what's written on it.  " + HisHer(4) + " deliberate movements and severe expression suggest that this should be the definitive moment, the proof of some profound discovery...\n\n");
            result.screens[5].attach("But you aren't sure what you're looking at.  It's just a scribble.  Was " + heShe(4) + " trying to draw something?  No, the more you look at it, the more you think that it's supposed to be text.\n\n");
            result.screens[5].attach("You can almost make out one of the words.  It says... August...?");

            result.emotions[6] = new String[]{"Sigh"};
            result.screens[6].attach(Heilig() + " sighs.\n\n");
            result.screens[6].attach("\"It says 'Ask subject what happened on August 1st'.\"\n\n", 4);
            result.screens[6].attach("Wow.  " + Heilig() + "'s handwriting is really bad.\n\n");
            result.screens[6].attach("\"Please try to stay focused.  We may be experiencing the greatest breakthrough in medical history.\"", 4);

            result.emotions[7] = new String[]{"Anger"};
            result.screens[7].attach("But what's so special about August 1st?\n\n");
            result.screens[7].attach("\"It's the day you woke up after having that dream about your friend.\"\n\n", 4);
            result.screens[7].attach("Is " + Heilig() + " sure?  You can't actually recall off the top of your head when you had that dream.  Which day of the week was it?  All you're sure of is that it was also the first time you had seen " + Tanaka() + " in awhile.\n\n");
            result.screens[7].attach("\"I'm sure.  You went twenty-five days without seeing " + fullName(5) + ", and then the first time you saw " + himHer(5) + " again was August 1st.\"\n\n", 4);
            result.screens[7].attach("How can " + Heilig() + " be so sure?");

            result.emotions[8] = new String[]{"Neutral"};
            result.screens[8].attach("\"Because we have it on camera.\"\n\n", 4);
            result.screens[8].attach(Heilig() + " pulls out a tablet computer, but hesitates before handing it to you.\n\n");
            result.screens[8].attach("\"First, what else can you tell me about that day?  What do you remember?\"\n\n", 4);
            result.screens[8].attach("You think back.  It was a pretty busy day.  You wandered around randomly for most of it.  You saw " + Tanaka() + ", then ended up killing time at the arcade, where you met " + Yumeno() + " and then " + Hashimoto() + ".  ");
            if (currentPlaythrough.archivedActions[0][5][4] == Action.DANCE) {
                result.screens[8].attach("Then, when you walked past the nightclub, it happened to be open, so you went inside and met " + DuMont() + ".  It was actually a pretty eventful day, wasn't it?");
            } else {
                result.screens[8].attach("And then you got home and went straight to bed.");
            }

            result.emotions[9] = new String[]{"Anger"};
            result.screens[9].attach("\"'Randomly', hm...?\"\n\n", 4);
            result.screens[9].attach(Heilig() + " hands you the tablet.  A video is open.  It looks like a traffic cam from near your dorm.\n\n");
            result.screens[9].attach("You glance up at " + Heilig() + ", and " + heShe(4) + " gives you a nod.  You press the button to start the video.");

            result.characters[10] = new String[0];
            result.screens[10].attach("A moment after the start of the video, you see yourself come into frame.  You're... jogging?\n\n");
            result.screens[10].attach("That's not how you remember it.  You were just wandering around randomly, weren't you?  But the figure in the video seems to have a destination in mind.  As soon as you leave the frame, the viewpoint switches to another traffic camera, showing you jogging into view.\n\n");
            result.screens[10].attach("You watch yourself jog down a side road between two housing developments, taking a shortcut.  You know where you're heading.\n\n");
            result.screens[10].attach("The figure comes to an abrupt stop, standing absolutely still.  If you saw somebody else do that, you'd say that " + heShe(-1) + " was waiting for something.  But you had no intention of waiting for " + Tanaka() + " here.  It was a chance encounter, wasn't it?");

            result.screens[11].attach("From the silent overhead view of the traffic cam, you watch your encounter with " + Tanaka() + ".  As soon as " + heShe(5) + " rounds the corner, the figure you hardly recognize as yourself takes off at a jog again.  Your movements are abrupt, almost robotic.  Unnatural.\n\n");
            result.screens[11].attach("You disappear into the fast food joint you remember eating at.  The video speeds up, pedestrians becoming a blur as the clouds move by overhead.  Then it returns to normal speed as you emerge, jogging in the direction of the arcade.\n\n");
            result.screens[11].attach("After you enter the arcade, the video speeds up again, and you know that you're meeting " + Yumeno() + " and having your first confrontation with " + Hashimoto() + ".");
            if (currentPlaythrough.archivedActions[0][5][4] == Action.DANCE) {
                result.screens[11].attach("  You emerge and head to the nightclub.  Once again, you wait outside until it opens, even though you had recalled it being a spur-of-the-moment decision to check the place out.");
            }

            result.screens[12].attach("And then you go home.  After the video stops, you try to say something, but you realize that your mouth has gone completely dry.  It takes a few moments before you can speak normally.\n\n");
            result.screens[12].attach("What exactly is happening here?");

            result.characters[13] = new String[]{"heilig"};
            result.emotions[13] = new String[]{"Neutral"};
            result.screens[13].attach("\"If you like, I can show you the next few days as well.  Your outward behavior gradually starts to appear more natural, but there are... other abnormalities.\"\n\n", 4);
            result.screens[13].attach("Like what?\n\n");
            result.screens[13].attach("\"Your caloric intake, for one.  By August 4th, you had begun eating over twice as much as you had during the previous week.\"\n\n", 4);
            result.screens[13].attach("You haven't felt like you've been putting on weight.\n\n");
            result.screens[13].attach("\"You haven't.  Your metabolic rate seems to have increased accordingly.  You've become much more physically active.\"", 4);

            result.emotions[14] = new String[]{"Anger"};
            result.screens[14].attach("\"Ever since you first came to The Tower, I've been keeping track of your condition.  Your body has been building lean muscle tissue much faster than should be possible.  And the development of neural connections in your brain is even more accelerated.  Your cognitive ability has sharply increased even during the time you've spent here.  You're exhibiting a level of neuroplasticity normally only seen in small children.\"\n\n", 4);
            if (loopRoutineCount(RoutineElements.CANCERJUICE, currentPlaythrough) > 0) {
                result.screens[14].attach("Is it related to your use of " + Heilig() + "'s cancer juice?\n\n");
            } else {
                result.screens[14].attach("Is it related to the medical treatments you've been receiving here?\n\n");
            }
            result.screens[14].attach("\"No.  It was only after you started coming here that we were able to directly observe the phenomenon, but that doesn't mean it wasn't already happening before then.  My hypothesis was that the start of the phenomenon would be accompanied by a sudden behavioral change.  And you did indeed show a sudden severe change in your behavior - on August 1st.\"", 4);

            result.emotions[15] = new String[]{"Neutral"};
            result.screens[15].attach("And that's why " + Heilig() + " wanted to know if anything unusual happened on August 1st.\n\n");
            result.screens[15].attach("\"Yes.  My theory was that 'something' happened on that day.  My prediction was that you would single out that specific day.  And because that prediction came true, the theory now has a point of data supporting it.\"\n\n", 4);
            result.screens[15].attach("It's a pretty vague theory, though.  What exactly is the 'something' that happened?  Surely " + Heilig() + " doesn't believe that you actually dreamed of the future.\n\n");
            result.screens[15].attach("\"No, for you to have somehow dreamt of the future would defy our current understanding of the world, which has been supported by many, many scientific experiments.  To overturn that understanding would require more points of data than just this one.\"", 4);

            result.emotions[16] = new String[]{"Uncomfy"};
            result.screens[16].attach("\"But feeling that you dreamt of the future does not mean that you actually did.  There is a specific part of the brain which registers of the 'impression of having seen something before'.  That part of the brain is normally activated when you have in fact seen something before, but it can also be activated in any number of other ways.\"\n\n", 4);
            result.screens[16].attach("Like by drugs?\n\n");
            result.screens[16].attach("\"Yes, or by transcranial magnetic stimulation.  One possibility is that someone might have snuck into your dorm on the night before August 1st in order to administer some procedure that changed how your body works.  A side-effect of that procedure might have been to cause a sense of deja vu.\"\n\n", 4);
            result.screens[16].attach("Somebody sneaking into your room to secretly perform experiments on you while you slept?  Who would do something like that?\n\n");
            result.screens[16].attach("\"...\"", 4);

            result.emotions[17] = new String[]{"Neutral"};
            result.screens[17].attach("Wait, is " + Heilig() + " " + himHer(4) + "self in the habit of sneaking into innocent people's rooms in order to perform experiments on them?\n\n");
            result.screens[17].attach("\"I would prefer not to say.  But I can at least assure you that nobody at The Tower is involved with what's happening to your body.  You weren't on our radar until you came here yourself.\"\n\n", 4);
            result.screens[17].attach("Then who's responsible?  Is there some other group of rogue scientists out there injecting people with strange drugs?\n\n");
            result.screens[17].attach("\"I can't imagine so, but I'm not sure how else to explain it.  It's possible that you have some rare genetic trait which just happened to start expressing itself on August 1st.\"", 4);

            result.emotions[18] = new String[]{"Anger"};
            result.screens[18].attach("\"Whatever the cause, this is an amazing discovery.  You were an extremely average person before August 1st.  And now you are on your way to becoming a multi-talented genius athlete.  If we could isolate and reproduce whatever factor has allowed you to develop so quickly, it would mean a new era for humanity.\"\n\n", 4);
            result.screens[18].attach("A new era for humanity?  Isn't that what " + Heilig() + " is already trying to do by creating " + hisHer(4) + " immortality treatment?\n\n");
            result.screens[18].attach("\"Yes, that's precisely why this whole situation is so... irritating.  I'm already quite busy trying to put an end to old age, and now you come along.  To be honest, I almost feel obligated to lock you up here in The Tower so that we can properly study your body.\"", 4);

            result.emotions[19] = new String[]{"Sigh"};
            result.screens[19].attach(Heilig() + " isn't joking.  " + HeShe(4) + " really would be willing to take you prisoner and vivisect you if " + heShe(4) + " thought it were in humanity's best interest.  But if " + heShe(4) + " were going to do that, " + heShe(4) + " wouldn't warn you about it first.\n\n");
            result.screens[19].attach("So, why is " + heShe(4) + " holding back?  Is it because of " + hisHer(4) + " growing affection for you?  Or is it just basic human decency?\n\n");
            result.screens[19].attach("\"Don't be ridiculous.  I have neither of those things.\"\n\n", 4);
            result.screens[19].attach("Then why?");

            result.emotions[20] = new String[]{"Uncomfy"};
            result.screens[20].attach("\"Because I wouldn't be able to keep the knowledge for myself.  In order to make you 'disappear' and avoid a police investigation, I would need to rely on the political power of The Tower's benefactors.  They would likely grow curious as to who you were and what I was doing with you.\"\n\n", 4);
            result.screens[20].attach("It sounds like " + Heilig() + " is desperate to avoid that.\n\n");
            result.screens[20].attach("\"Yes.  With my 'cancer juice', I am to create an immortality that anybody can use, not only the rich.  But there is no guarantee that I would be able to do that with whatever factor gives you your extreme adaptability.  In the worst-case scenario, we would be able to enhance people's abilities, but only a small number of people, and only at extreme cost.\"", 4);

            result.emotions[21] = new String[]{"Neutral"};
            result.screens[21].attach("\"You are a good person.  But many of The Tower's benefactors are not.  If they were to gain your abilities, and use those abilities to further entrench their control over the general public... I shudder to think of how the world would change.  It's been keeping me up at night.\"\n\n", 4);
            result.screens[21].attach("It seems like " + Heilig() + " actually has a pretty high opinion of you.\n\n");
            result.screens[21].attach("\"If I didn't, I wouldn't be permitting you to walk out of here alive.  You're actually rather terrifying, in my opinion.\"\n\n", 4);
            result.screens[21].attach("Hopefully, as your relationship progresses, " + heShe(4) + "'ll stop talking about potentially killing you so often.");

            result.emotions[22] = new String[]{"Uncomfy"};
            result.screens[22].attach("\"From here on, I will be... looking the other way when it comes to your abilities.  To be honest, I probably should have stopped investigating even before we reached this point.  I will admit that I'm extremely curious about what lets you do what you do.  But I'm just not in a position to uncover the truth without risking some very dangerous outcomes.\"\n\n", 4);
            result.screens[22].attach("It's a bit surprising for a scientist like " + Heilig() + " to allow this kind of knowledge to slip through " + hisHer(4) + " grasp.\n\n");
            result.screens[22].attach("\"I'll admit that I'm not happy about it.  And some of my colleagues here would absolutely not make the same decision.  In particular, I have a certain protege who must never, ever be allowed to meet you.  But... in this case, I believe it works against humanity's best interest for me to research further.\"", 4);

            result.emotions[23] = new String[]{"Neutral"};
            result.screens[23].attach("Does that mean that you should stop coming to The Tower?\n\n");
            result.screens[23].attach("\"Why would you even want to keep coming here?  My cancer juice should obviate the need for our other medical treatment, and you should certainly feel no more obligation to help me with my research.\"\n\n", 4);
            result.screens[23].attach("Helping people isn't something you do because of 'obligation'.\n\n");
            result.screens[23].attach("\"... I see.\"", 4);

            result.emotions[24] = new String[]{"Uncomfy"};
            result.screens[24].attach("Even if " + Heilig() + " is willing to let you go without learning the truth behind what happened to you, you're still curious about it yourself.  And " + Heilig() + " said that the main obstacle was that confining you in The Tower would require asking for help from people who " + heShe(4) + " doesn't want to find out about you.  But if you continue to come to The Tower willingly, then there's no need for that, right?\n\n");
            result.screens[24].attach("\"Yes.  I... I must apologize for assuming that you'd want nothing more to do with us.\"\n\n", 4);
            result.screens[24].attach("Not to mention that you might have other things you can do here, too.  If your cognitive abilities really are developing so much, then you might even be able to learn enough about medicine to help " + Heilig() + " perfect " + hisHer(4) + " cancer juice.");

            result.emotions[25] = new String[]{"Sigh"};
            result.screens[25].attach("\"I can't promise that I'll be able to reveal the details of our confidential projects to you.  But... you've proven yourself to be trustworthy.  And if you truly do wish to lend your talents to the betterment of humanity... I can respect that.\"\n\n", 4);
            if (getGoalLevel(27, true) > 1) {
                result.screens[25].attach("At some point, you're going to have to reveal to " + Heilig() + " that you actually have been sneakily snooping into The Tower all along.  Maybe " + heShe(4) + " won't trust you as much after " + heShe(4) + " finds out.  But until then, ");
            } else {
                result.screens[25].attach("Normally, you wouldn't expect it to be possible to go from being a test subject directly to becoming a researcher.  But with how The Tower operates in shady legal territory, it's not like anybody really cares about regulations or certifications.  From now on, ");
            }
            result.screens[25].attach("you'll be able to see what else you can learn here.");

            result.emotions[26] = new String[0];
            result.screens[26].attach("For now, you're pretty exhausted by today's testing.  And if you really are serious about figuring out what happened to your body on August 1st, it might be a good idea to ask " + Heilig() + " to administer more of these tests in the future.\n\n");
            result.screens[26].attach("In the short term, at least you're feeling healthier than you ever have before in your life.  And according to " + Heilig() + ", all indications are that you're only going to get stronger.");
        } else if (g.index == 23) {
            result = new Scene(18);

            result.backgrounds[0] = "lab";
            result.screens[0].attach("Snooping around The Tower for information related to " + Hashimoto() + " has proven easier than you would have expected.  Just like " + Hashimoto() + " said, much of The Tower's business is done 'under the table', without any sort of formal contract.  Wealthy people want to skip organ transplant waiting lists, pharmaceutical companies want data on experimental treatments which can't yet be legally tested on the public, and those deep in debt want money, even if it means selling off their own body parts.\n\n");
            result.screens[0].attach("None of these people want a clear paper trail to connect them to the business that happens at The Tower.  As far as the police are concerned, nothing illegal can be proven to have happened here.  And The Tower's benefactors are willing to spend a fortune in campaign contributions to make sure that it stays that way.\n\n");
            result.screens[0].attach("That lack of paper trails means that there's nobody to ask too many questions about the fake ID " + Hashimoto() + " provided you with.  Apparently you're supposed to be a world-class expert in some obscure sub-field of molecular biology.  But because there aren't any other experts in that exact same field here, there's nobody to test your knowledge.  You just carry your clipboard around, search through the archives of the recent experiments performed at The Tower, and everybody else assumes that you must have been assigned to this work by one of the higher-ups.  It's nobody's job to make sure that you're actually who you say you are.\n\n");
            result.screens[0].attach("In between searching for " + Hashimoto() + "'s files, you actually have been trying to learn about biology in order to better maintain your cover.  It's been a sort of high-stakes crash course where you've had to learn good research habits on your own.  You might actually have a talent for this.");

            result.screens[1].attach("But now, you seem to have reached the end of your search.  After allaying suspicion by supervising some of the experiments happening tonight, you've excused yourself to the records room to continue to look for The Tower's files on " + Hashimoto() + ".  It's been difficult, because The Tower stores all of its information about patients under pseudonyms 'for their own privacy'.  But " + Hashimoto() + " has told you which procedures they were scheduling " + himHer(0) + " for, and " + heShe(0) + "'s told you the dates of the medical examinations " + heShe(0) + " went through here.\n\n");
            result.screens[1].attach("And you've just found a case file that matches all of that information.  All of the patient's details match up with " + Hashimoto() + ".\n\n");
            result.screens[1].attach("There are too many pages for you to read them all right now.  You'll have to smuggle the files out of here and bring them to " + Hashimoto() + " so that the two of you can review it together.");

            result.tracks[2] = Music.SILENCE;
            result.characters[2] = new String[]{"elohim"};
            result.outfits[2] = new String[]{"Mortal"};
            result.emotions[2] = new String[]{"Smile"};
            result.modifiers[2] = new Modifier[]{Modifier.CLOSEUP};
            result.screens[2].attach("\"So, that's what you were after.\"\n\n", 15);
            result.screens[2].attach("You realize too late that you aren't alone.  One of The Tower's scientists has been reading over your shoulder.  You've worked with " + himHer(15) + " a few times during your infiltration here.  " + HeShe(15) + " must have gotten suspicious and followed you.\n\n");
            result.screens[2].attach("Jumping backward, you finish tucking the files away in your coat.  There's no point in playing dumb.  This is your only chance to get the files out of here.  But it looks like " + heShe(15) + " didn't bring any security guards with " + himHer(15) + ".  Will you be able to fight your way out?");

            result.emotions[3] = new String[]{"Laugh"};
            result.screens[3].attach("\"Relax, relax, I'm not here to stop you.\"\n\n", 15);
            result.screens[3].attach("Why would " + heShe(15) + " want to let you go?\n\n");
            result.screens[3].attach("\"Why wouldn't I?  This is really none of my business, right?\"", 15);

            result.emotions[4] = new String[]{"Smile"};
            result.screens[4].attach("If it's none of " + hisHer(15) + " business, then why did " + heShe(15) + " follow you here in the first place?\n\n");
            result.screens[4].attach("\"Well, if you had been planning to destroy records or disrupt our research here, then I would've been very angry with you.\"\n\n", 15);
            result.screens[4].attach("But stealing is okay?\n\n");
            result.screens[4].attach("\"You can't 'steal' something which has no owner.  Knowledge belongs to everybody.\"", 15);

            result.emotions[5] = new String[]{"Neutral"};
            result.screens[5].attach("\"To be honest, I disapprove of the way Dr. " + Heilig() + " runs things here.  All this secrecy, keeping things from the public 'for their own good'.  It's dishonest.\"\n\n", 15);
            result.screens[5].attach(HeShe(15) + " had also talked about Dr. " + Heilig() + " while you were working together before.  You had gotten the impression that " + heShe(15) + " really admires Dr. " + Heilig() + ".\n\n");
            result.screens[5].attach("\"I do.  But admiring somebody isn't the same as completely agreeing with all of their decisions.\"", 15);

            result.emotions[6] = new String[]{"Smile"};
            result.screens[6].attach("\"In any case, now that I've confirmed that you aren't trying to stand in the way of our research, I have no reason to stop you!  I hope that information helps you do whatever it is you're trying to do.\"\n\n", 15);
            result.screens[6].attach("Really?  There's nothing else " + heShe(15) + " wants from you?\n\n");
            result.screens[6].attach("\"All I want is to go back to my research.  Though, I'd appreciate it if you could return those files here once you're done with them.\"\n\n", 15);
            result.screens[6].attach("Return them how?  Should you mail them to " + himHer(15) + "?\n\n");
            result.screens[6].attach("\"Sure.  Or you could come back in person.  Even if you don't have the expertise indicated on your ID, your insight is actually pretty good.\"", 15);

            result.characters[7] = new String[0];
            result.backgrounds[7] = "black";
            result.screens[7].attach("You figure that it might be a good idea to get out of here before " + heShe(15) + " changes " + hisHer(15) + " mind.  The scientist waves to you as you leave the records room.\n\n");
            result.screens[7].attach("Sure enough, you aren't accosted by security on your way out of The Tower.  After a quick phone call to " + Hashimoto() + " to let " + himHer(0) + " know that you're on your way, you head over to " + hisHer(0) + " place.  It seems like it'd be best to look through these files as soon as possible.");

            result.characters[8] = new String[]{"hashimoto"};
            result.outfits[8] = new String[]{""};
            result.emotions[8] = new String[]{"Frown"};
            result.backgrounds[8] = "hideout";
            result.tracks[8] = Music.DARKNESS;
            result.screens[8].attach("\"Shit.  If one of the other scientists had caught you, you could've been in serious trouble.  I never should've given you that ID.\"\n\n", 0);
            result.screens[8].attach("It was really your own fault for not being careful enough.  And the important thing is that it all worked out.\n\n");
            result.screens[8].attach("For now, all that's left is to take a look at these files and see what they say.\n\n");
            result.screens[8].attach("\"... Yeah.  I wouldn't want your work to go to waste.\"", 0);

            result.emotions[9] = new String[]{"Neutral"};
            result.screens[9].attach("You divide the stack of papers in half, handing one half to " + Hashimoto() + " and keeping the other for yourself.  The room falls silent except for the sound of pages turning.\n\n");
            result.screens[9].attach("Your half seems to be mostly a record of " + Hashimoto() + "'s medical examinations at The Tower over the years.  It looks like " + hisHer(0) + " parents moved over here after " + heShe(0) + " got diagnosed, and " + heShe(0) + "'s been getting " + hisHer(0) + " brain looked at on a regular basis ever since " + heShe(0) + " was a little kid.\n\n");
            result.screens[9].attach("But your reading is interrupted when you notice " + Hashimoto() + " suddenly sit up straighter.");

            result.emotions[10] = new String[]{"Surprise"};
            result.screens[10].attach("\"This is it.  Patient prognosis...\"\n\n", 0);
            result.screens[10].attach(Hashimoto() + " looks at the page, then rubs " + hisHer(0) + " eyes, then looks at the page again.\n\n");
            result.screens[10].attach("\"Chance of entering spontaneous terminal coma before age 30... five percent.\"", 0);

            result.emotions[11] = new String[]{"Grin"};
            result.screens[11].attach("\"Five percent?  Hah!  Only five percent!  Hahahah!\"\n\n", 0);
            result.screens[11].attach(Hashimoto() + " throws " + hisHer(0) + " stack of papers into the air, and they rain down like confetti.  The reaction is a bewildering one.  Who would be happy to learn that they have a 5% chance of... entering a spontaneous terminal coma?  Is it saying that " + heShe(0) + "'s at risk of sudden brain death?\n\n");
            result.screens[11].attach("\"It's only five fucking percent!  Seriously, I thought I was pretty much guaranteed to pass out and never wake up in the next few years.  But only five percent... and thirty fucking years old!  That's plenty of time!  If I haven't made my impact on the world by age thirty, then it's my own fucking fault!\"\n\n", 0);
            result.screens[11].attach("This is a lot for you to take in.  Does it mean that " + Hashimoto() + "'s parents were actually telling the truth about " + himHer(0) + " making some sort of miraculous recovery and not needing the surgery after all?");

            result.emotions[12] = new String[]{"Angry"};
            result.screens[12].attach("\"Fuck no!  Those shitheads told me that it was less than a 1% chance of it happening in my entire life.  Fuckers wouldn't know honesty if it bit them on the ass.\"\n\n", 0);
            result.screens[12].attach("But it's still better odds than " + heShe(0) + " thought " + heShe(0) + " had.\n\n");
            result.screens[12].attach("\"Still a lie.  I'm not gonna forgive 'em for it that easily.\"", 0);

            result.emotions[13] = new String[]{"Grin"};
            result.screens[13].attach("\"But that doesn't matter now!  I'm seriously gonna live past thirty!\"\n\n", 0);
            result.screens[13].attach("If " + Hashimoto() + "'s condition were looking like it was going to kill " + himHer(0) + " that young, then it's no wonder that The Tower was willing to do something as extreme as removing a chunk of " + hisHer(0) + " brain.\n\n");
            result.screens[13].attach("\"Yeah, well, there's no need for that now!  Seems like those nerds were actually doing their job properly.  I was on board with the operation when I thought I was definitely gonna die otherwise, but... if it's only a five percent chance?  Compared to a one-hundred percent chance of dealing with brain surgery, and maybe just dying on the operating table anyway?  Yeah, can't blame 'em.\"", 0);

            result.emotions[14] = new String[]{"Neutral"};
            result.screens[14].attach("\"And now...  Fuck.  I've actually got to make long-term plans and shit.\"\n\n", 0);
            result.screens[14].attach("What is " + heShe(0) + " going to do?\n\n");
            result.screens[14].attach("\"I dunno.  Maybe I actually will try to become some sort of bigshot business" + manWoman(0) + ".  Ugh, makes me feel dirty to say it.  But if I want to change the world...\"", 0);

            result.emotions[15] = new String[]{"Uncomfy"};
            result.screens[15].attach("\"Though, before that...  I should tell you that I'm sorry about not being totally up-front about my condition.  I didn't want you to treat me differently.\"\n\n", 0);
            if (currentPlaythrough.romance[0] > 0) {
                result.screens[15].attach("Is that why " + Hashimoto() + " was so reluctant about confessing " + hisHer(0) + " feelings toward you?\n\n");
                result.screens[15].attach("\"I guess.  It felt like it was really shitty of me to get into a relationship with you when I was sure I was gonna die soon.  But at the same time... I didn't want to die without letting you know how I felt.  And... it was too hard to come out and tell you that I was gonna die.  So... I'm really sorry.\"\n\n", 0);
                result.screens[15].attach("It's all in the past now.  Especially since it's looking like you and " + Hashimoto() + " will actually be able to enjoy a long life together.");
            } else {
                result.screens[15].attach("Well, it wasn't really any of your business.\n\n");
                result.screens[15].attach("\"It was still really shitty of me to keep it secret, after everything you've done to help me!  Even if it wasn't 'wrong', I still feel really bad about it.  So... I'm sorry.\"\n\n", 0);
                result.screens[15].attach("You accept " + Hashimoto() + "'s apology.  And if " + heShe(0) + " really feels the need to make it up to you... then at least you now know that " + heShe(0) + " has plenty of time to do so.");
            }

            result.emotions[16] = new String[]{"Grin"};
            result.screens[16].attach("\"Yeah!  Up until now... I really haven't been able to live my life, always thinking that I might end up basically 'dying' any day now.  But you gave me my life back.  Yeah, I can really say that I owe you my life.\"\n\n", 0);
            result.screens[16].attach("That's a pretty dramatic way of putting it.  But considering how much effort it took to get to this point, it might be fine to let " + Hashimoto() + " praise you a little.\n\n");
            result.screens[16].attach("This is the start of a new chapter of " + Hashimoto() + "'s life.  " + HeShe(0) + " won't have to be in such a rush to make " + hisHer(0) + " impact on the world.  Maybe you'll invite " + himHer(0) + " to play some games with you at the arcade.");

            result.characters[17] = new String[0];
            result.screens[17].attach("As you look at the papers scattered on the floor, you see the page that " + Hashimoto() + " got " + hisHer(0) + " five percent figure from.  More precisely, it says that " + heShe(0) + " has a 5.93% chance of going permanently comatose before age 30.  It would probably be more accurate to round that up to six percent instead of five.  But now that " + Hashimoto() + "'s in a good mood, this isn't the time to say something like that.\n\n");
            result.screens[17].attach("You feel like you finally understand what " + Hashimoto() + "'s been going through since you met " + himHer(0) + ".  " + HisHer(0) + " experience with thinking " + heShe(0) + " was going to die spurred " + himHer(0) + " onward toward trying to find meaning in " + hisHer(0) + " own existence.  Even without your help, " + heShe(0) + " probably would have found " + hisHer(0) + " answer eventually.\n\n");
            result.screens[17].attach("You think you can apply some of those lessons to your own outlook on life as well.  Helping " + Hashimoto() + " out definitely hasn't been a waste of time.  And that's even before considering the skills you learned while infiltrating The Tower.  Working alone, developing skills quickly in a trial-by-fire...  You might actually be well-suited to this kind of thing.\n\n");
            result.screens[17].attach("Before you can join " + Hashimoto() + " in this new chapter of " + hisHer(0) + " life, you have some matters you need to attend to in your own life first.  You feel like you're ready.");
        } else if (g.index == 25) {
			result = new Scene(3);

			result.backgrounds[0] = "dorm";
			result.screens[0].attach("It's been hard to decide when exactly you can consider yourself 'fluent enough' to go after " + Tanaka() + ".  There's no telling what's happening to " + himHer(5) + " with every day you delay, but the earlier you head out, the more likely it is that you'll run into a situation where just a little more proficiency in the language could have let you avoid a catastrophic outcome.  You might fail to pick up a clue and miss your chance to find " + himHer(5) + ".  You might die.\n\n");
			result.screens[0].attach("In the end, you've settled on using an automated online proficiency test to determine whether you've reached the 'lower intermediate' level of fluency.  If you pass, then ");
			if (getAttributeLevel(2, false).compareTo(BigInteger.valueOf(11)) >= 0) {
				result.screens[0].attach("you'll consider yourself ready to go.  ");
			} else {
				result.screens[0].attach("it'll be time to shift your focus toward obtaining the permit that will let you enter the country.  ");
			}
			result.screens[0].attach("If you fail, then you'll need to devote more time to studying the language, and " + Tanaka() + "... will just have to wait.");

			result.screens[1].attach("The process of taking the online test is stressful.  The people who wrote it certainly didn't intend for it to be used to decide such a high-stakes question.  But how much more stress will you be under when you're actually using this language in the field?  You might be held at gunpoint, trying to talk your way out of a tense standoff.  Or you might be holding somebody else at gunpoint, asking where " + Tanaka() + " is being kept.\n\n");
			result.screens[1].attach("You're covered in cold sweat as you fill out the questions.  The timer for how long you have to complete the test ticks downward.\n\n");
			result.screens[1].attach("And then, it's time to submit your answers.  You click the button and await your score...");

			result.screens[2].attach("You pass.  The cheerful screen that pops up to congratulate you is possibly even more alarming than a failure would have been.  Are you really fluent enough to handle yourself?  You feel like you really don't know the language that well at all.\n\n");
			result.screens[2].attach("But you met the standard you set for yourself.  You can't back out now.  ");
			if (getAttributeLevel(2, false).compareTo(BigInteger.valueOf(11)) >= 0) {
				result.screens[2].attach("It's time to set your plan in motion.");
			} else {
				result.screens[2].attach("All that remains is to obtain your permit and then get on the plane.");
			}
		} else if (g.index == 26) {
			if (g.tier == 0) {
				result = new Scene(2);

				result.backgrounds[0] = "cleaner";
				if (getGoalLevel(9, false) == 0) {
					result.backgrounds[0] = "dump";
				}
				result.screens[0].attach("Today, you and " + Yumeno() + " uploaded your first game to the Internet.  It's a tiny project that doesn't really even have any gameplay to speak of, but at least it's functional.");

				result.screens[1].attach("As always, " + Yumeno() + " only cares about the skills " + heShe(1) + " gained while making it.  " + HeShe(1) + " seems very pleased with " + himHer(1) + "self, and " + heShe(1) + "'s already eager to try to push " + himHer(1) + "self further in the next project.\n\n");
				result.screens[1].attach("For your part, you had a pretty good time too.  And it feels nice to see the comments from people who found it worthwhile to spend a few hours of their time playing what you made for them.  Will they now be approaching life a tiny bit differently than they would have if they hadn't played your game?\n\n");
				result.screens[1].attach("If you have enough time, it'd be nice to work on a sequel with " + Yumeno() + ".");
			}
		} else if (g.index == 27) {
			if (g.tier == 0) {
				result = new Scene(12);

				result.backgrounds[0] = "hideout";
				result.tracks[0] = Music.DARKNESS;
				result.screens[0].attach("Although you're hanging out with " + Hashimoto() + " during the day now, the way that you spend your time isn't that much different.  Instead of spraying graffiti while chatting together, you're reading books while chatting together.  " + Hashimoto() + " is a surprisingly voracious reader.  Now that " + heShe(0) + "'s not causing trouble all night, " + heShe(0) + " seems to be spending most of " + hisHer(0) + " free time alternately working out and reading through the backlog of stolen books " + heShe(0) + "'s collected in " + hisHer(0) + " hideout.\n\n");
				result.screens[0].attach("If " + heShe(0) + " were going to be doing something solitary like that anyway, then there was no need for " + himHer(0) + " change " + hisHer(0) + " schedule.  But " + Hashimoto() + " is adamant that " + heShe(0) + " wants to get into the habit of being awake at the same time as everybody else.  In " + hisHer(0) + " view, it's an important step toward doing something that's actually meaningful with " + hisHer(0) + " life.\n\n");
				result.screens[0].attach("However, even though " + Hashimoto() + " is spending so much of " + hisHer(0) + " time reading books, " + heShe(0) + " doesn't actually seem to like any of them.  Whenever you meet up, " + heShe(0) + "'s always bursting with complaints about whichever author " + heShe(0) + " was reading when you left " + himHer(0) + " last.");

				result.characters[1] = new String[]{"hashimoto"};
				result.emotions[1] = new String[]{"Angry"};
				result.screens[1].attach("\"This is complete bullshit!  If direct election of the country's representatives doesn't work, then why should having workers' councils vote for them be any better?  It just adds another layer of politicians between the voters and the people who hold the real power in society.\"\n\n", 0);
				result.screens[1].attach(Hashimoto() + " throws the book across the room.  Normally, this would be the part where you either agree with " + himHer(0) + " or play the devil's advocate, but this time, it seems like " + heShe(0) + " isn't in the mood.  " + HeShe(0) + "'s already rummaging through the pile of books next to " + himHer(0) + ".\n\n");
				result.screens[1].attach(HeShe(0) + "'s been doing that more often lately.  At first, when you would show up at " + hisHer(0) + " hideout, you'd find " + himHer(0) + " absorbed in a book and eager to tell you about what " + heShe(0) + " had found.  You'd quickly catch up, reading through the passages " + heShe(0) + " had highlighted, and then the two of you could discuss it.\n\n");
				result.screens[1].attach("But now, " + heShe(0) + " seems to be less and less satisfied with what " + heShe(0) + "'s finding.");

				result.emotions[2] = new String[]{"Frown"};
				result.screens[2].attach("It's as if " + heShe(0) + "'s bounced from one extreme straight to its opposite.  When you first met " + himHer(0) + ", " + heShe(0) + " was convinced that the only way to make " + hisHer(0) + " mark on the world was to be completely antisocial, getting in others' way just to cause trouble for its own sake.  And now " + heShe(0) + "'s delving into political theory, trying to identify which system of governance will solve all of society's ills and achieve perfect harmony for everybody.\n\n");
				result.screens[2].attach("\"It makes sense, doesn't it?  If you want your life to be meaningful, then you should try to change others' lives.  The effect will be bigger if you can find a group of other people who want to bring about the same kind of change that you do.  And when a bunch of people work together to change how other people lives their lives... that's how 'politics' happens, right?\"\n\n", 0);
				result.screens[2].attach("Up until this point, " + Hashimoto() + " has seemed pretty cynical about how society is structured.  Does " + Hashimoto() + " really want to immerse " + himHer(0) + "self in the world of politics?\n\n");
				result.screens[2].attach("\"Well, obviously the mainstream parties are all shit, but some of the smaller ones are run by people who actually believe what they're saying.  The only problem is that even the honest ones are mostly idiots whose ideas would never work.\"", 0);

				result.emotions[3] = new String[]{"Uncomfy"};
				result.screens[3].attach("\"So I figured that I'd do some reading, identify which political philosophy was correct, then find the people who were working to bring it about.  I could join them, go canvassing.  It's why I wanted to be awake during the day, so I could be ready to make my impact on the world like that.  The only problem is...\"\n\n", 0);
				result.screens[3].attach(HeShe(0) + " doesn't seem to be satisfied that any of those political philosophies is actually 'correct'.\n\n");
				result.screens[3].attach("\"Yeah, I guess that's what it comes down to.  In autocratic systems, the biggest asshole is the one who will fight the hardest to seize power.  In democratic systems, the majority will fuck over the minority.  If you try to use some sort of constitution to put limits on whoever's in charge, then you have to decide whose job it is to 'interpret' that constitution.  And they can just claim that it says whatever they want it to say, which means that you're back to square one.\"", 0);

				result.emotions[4] = new String[]{"Frown"};
				result.screens[4].attach("\"It makes me think that everyone's missing the point.  Designing a political system that works is easy, as long as everyone involved wants to make it work.  The actual problem is that you'll always have a few shitheads who want to screw the whole thing up.\"\n\n", 0);
				result.screens[4].attach("That's actually a serious problem, though.  It's hard to imagine a political system that automatically filters people out if they hit a given shittiness threshold.\n\n");
				result.screens[4].attach("\"Yeah, I'm officially giving up on finding a political solution to the world's problems.  The real way to improve society is to find whoever's being shittiest at the moment, and get rid of 'em.  Just put a bullet in his head and move on to the next-shittiest person.  Rinse and repeat until society improves.\"\n\n", 0);
				result.screens[4].attach("Without any sort of due process?\n\n");
				result.screens[4].attach("\"Like I said, it's not a political solution.  It's just something an individual person could do to make a positive impact on the world.\"", 0);

				result.emotions[5] = new String[]{"Neutral"};
				result.screens[5].attach("This conversation took a pretty dark turn, all of a sudden.  " + Hashimoto() + " must be pretty frustrated.  When " + heShe(0) + " talks about killing whoever's being 'shittiest', " + heShe(0) + "'s not just talking about murderers and rapists, is " + heShe(0) + "?\n\n");
				result.screens[5].attach("\"Most murderers kill, what, one or two people?  A politician that starts a war can end up killing tens of thousands.  A business that fights against safety regulations is basically killing people too.  Why do we let them get away with it?\"\n\n", 0);
				result.screens[5].attach("Because there are laws that determine when a person can be held legally responsible for a death.\n\n");
				result.screens[5].attach("\"Fuck the law.  If the rich and powerful were more afraid of their decisions coming back to bite them, maybe they'd be a little less willing to sacrifice other people for their ambitions.  That would be an improvement, wouldn't it?\"", 0);

				result.emotions[6] = new String[]{"Frown"};
				result.screens[6].attach("You can at least see where " + Hashimoto() + "'s coming from, but it's a moot point.  There's no way that political assassinations like that could ever become commonplace.  Successfully killing a public figure is hard enough, and escaping afterward is unheard of.  Whenever someone tries and gets punished for it, they serve as an example to deter anyone else from trying the same thing.\n\n");
				result.screens[6].attach("\"History is full of people who were willing to face imprisonment and death in order to change the world.  The only reason that political assassination isn't more common is that it never even occurs to most people as an option.  The punishment has nothing to do with it.\"\n\n", 0);
				result.screens[6].attach("Does that mean that " + Hashimoto() + " is offering to face that punishment " + himHer(0) + "self?\n\n");
				result.screens[6].attach("\"Maybe I am.\"", 0);

				result.emotions[7] = new String[]{"Uncomfy"};
				result.screens[7].attach(HeShe(0) + "'s serious.  This goes beyond just being frustrated.  Until this point, " + Hashimoto() + " was actually starting to give you the impression that " + heShe(0) + " isn't an inherently violent person at all.  Even when you were scuffling at the arcade, " + heShe(0) + " wasn't able to make " + himHer(0) + "self throw a serious punch.\n\n");
				result.screens[7].attach("\"That's just because I wasn't actually angry at you specifically.  If I had a real shithead in my sights, I know that I could... could pull the trigger...  Probably...\"\n\n", 0);
				result.screens[7].attach("Is " + Hashimoto() + " really willing to sacrifice " + hisHer(0) + " life for something like that?\n\n");
				result.screens[7].attach("\"Your life is one of those 'use it or lose it' type things.  If you wait too long to do something with it, then you might miss your chance.\"", 0);

				result.emotions[8] = new String[]{"Angry"};
				result.screens[8].attach("There's more than one way to use your life.  You and " + Hashimoto() + " are still young.  Even if its impact isn't as immediate, the total effect of a person working to change the world over the course of a few decades-\n\n");
				result.screens[8].attach("\"Is that it?  Is that your only argument?  Then what about someone with one foot in the grave?  Would you have any objection to them bringing some shithead down with them?\"\n\n", 0);
				result.screens[8].attach("Someone with one foot in the grave?  Like an elderly person with most of his life behind him?\n\n");
				result.screens[8].attach("\"Sure, that works.  That person doesn't have much longer to live anyway, so they're not losing much.  There's nothing to complain about, right?\"", 0);

				result.emotions[9] = new String[]{"Surprise"};
				result.screens[9].attach("If they only had a few hours to live, then that would be one thing.  But no matter how old you get, your life expectancy doesn't get that short.  Most people don't make it to a hundred years old, but once you get there, you actually stand a pretty good chance of making it at least one more year.  Even the most aggressive cancers give you a few months.\n\n");
				result.screens[9].attach("\"A few months is basically nothing.\"\n\n", 0);
				result.screens[9].attach("It's longer than the time it took to meet " + Hashimoto() + " and have " + himHer(0) + " become a part of your life.\n\n");
				result.screens[9].attach("\"Oh.\"", 0);

				result.emotions[10] = new String[]{"Uncomfy"};
				result.screens[10].attach(Hashimoto() + "'s life is still having an impact on you.  " + HisHer(0) + " death would have one too, and it wouldn't be a good one.\n\n");
				result.screens[10].attach("\"...  Sorry.  I was being pretty selfish just now.  I don't know what came over me.\"\n\n", 0);
				result.screens[10].attach("Spending that much time reading about politics would be enough to drive anybody crazy.\n\n");
				result.screens[10].attach("\"Yeah.  Let's call it a day.\"", 0);

				result.characters[11] = new String[0];
				result.screens[11].attach("Today's debate with " + Hashimoto() + " was a bit more exhausting than usual.  Fortunately, it seems to have turned out alright.\n\n");
				if (simulatedRelationships[3].equals(BigInteger.ZERO)) {
					result.screens[11].attach("Even so " + Hashimoto() + "'s words are still lodged in the back of your mind.  If you ever are put in the kind of situation where your life expectancy is best measured in hours or days, you'll be prepared to put everything on the line.");
				} else if (loopRoutineCount(RoutineElements.CANCERJUICE, currentPlaythrough) > 0) {
					result.screens[11].attach("Even so, " + Hashimoto() + "'s mindset isn't completely wrong.  " + HeShe(0) + " doesn't know it, but now that you've taken " + Heilig() + "'s cancer juice, you really don't have that much time left.  Maybe it's time to start living like it.");
				} else {
					result.screens[11].attach("Even so, " + Hashimoto() + "'s mindset isn't completely wrong.  You aren't old or sick, but when you consider the chance that you'll get shot while working with " + Jackal() + ", you really could end up dead on any given day.  Maybe it's time to start living like it.");
				}
			} else if (g.tier == 1) {
				result = new Scene(13);

				result.tracks[0] = Music.DARKNESS;
				result.backgrounds[0] = "hideout";
				result.screens[0].attach("As soon as you arrive at " + Hashimoto() + "'s hideout, you can tell that something is different today.  Usually, you'll find " + himHer(0) + " with a book in hand and already eager to launch into an argument about it.  But today, " + heShe(0) + "'s just standing in front of the window, looking out at the skyline.  " + HeShe(0) + " hardly seems to notice your entrance.\n\n");
				result.screens[0].attach("When you call out " + hisHer(0) + " name, " + heShe(0) + " turns around with an expression of inner conflict on " + hisHer(0) + " face.");

				result.characters[1] = new String[]{"hashimoto"};
				result.emotions[1] = new String[]{"Uncomfy"};
				result.screens[1].attach("\"Oh.  Hey.\"\n\n", 0);
				result.screens[1].attach("Something's definitely off about " + himHer(0) + " today.  What's the matter?\n\n");
				result.screens[1].attach("\"Is it that obvious?  I've, uh... I've just reached a decision.\"\n\n", 0);
				result.screens[1].attach(Hashimoto() + " isn't planning on something dangerous, is " + heShe(0) + "?\n\n");
				result.screens[1].attach("\"No.  Nothing like that.  At least not for myself.\"", 0);

				result.emotions[2] = new String[]{"Frown"};
				result.screens[2].attach("\"Listen, there's something I need to come clean about.  I didn't want to bring this up, but... I guess you deserve to know.\"\n\n", 0);
				result.screens[2].attach("It's rare to see " + Hashimoto() + " acting so hesitant.  Normally, when " + heShe(0) + " wants to say something, " + heShe(0) + " just comes out and says it.\n\n");
				result.screens[2].attach("\"Yeah, well, this is an uncomfortable subject for me.  On several levels.\"\n\n", 0);
				result.screens[2].attach("Well, you're listening\n\n");
				if (currentPlaythrough.currentDay < 20) {
					result.screens[2].attach("\"Just a few days ago, I was a patient at The Tower.\"", 0);
				} else if (currentPlaythrough.currentDay < 60) {
					result.screens[2].attach("\"Up until a few weeks ago, I was a patient at The Tower.\"", 0);
				} else {
					result.screens[2].attach("\"Up until a couple of months ago, I was a patient at The Tower.\"", 0);
				}

				result.backgrounds[3] = "elohim1";
				result.characters[3] = new String[0];
				if (getGoalLevel(15, false) >= 3) {
					result.screens[3].attach("It's not that surprising to hear that " + Hashimoto() + " also has a history with The Tower.  After all, they're the city's largest health care provider.  Most of their dealings with the public really are just routine medical treatment.\n\n");
				} else {
					result.screens[3].attach("The name is familiar to you, as it is to everybody who lives here.  The Tower is a research institute located in the city center.  Academics from around the world congregate here to take part in cutting-edge research.  Over the years, a prestigious college was built around The Tower.  And as the college grew, so did the surrounding town.\n\n");
				}
				result.screens[3].attach("When you look at the window, the horizon is dominated by the building that hosts the research institute.  So, that's what " + Hashimoto() + " was looking at.");

				result.backgrounds[4] = "hideout";
				result.characters[4] = new String[]{"hashimoto"};
				result.emotions[4] = new String[]{"Uncomfy"};
				result.screens[4].attach("But why is " + Hashimoto() + " treating that like it's a big deal?  " + HeShe(0) + " wasn't actually caught up in some sort of shady medical experiment, right?\n\n");
				result.screens[4].attach("\"No.  Well, not really.  I have a... a rare medical condition.\"\n\n", 0);
				result.screens[4].attach("What kind of medical condition?\n\n");
				result.screens[4].attach("\"That doesn't matter.  The important part is that it has less than a dozen recorded cases worldwide.  There's no recognized treatment, so normally, I'd just have to deal with it and hope for the best.\"", 0);

				result.emotions[5] = new String[]{"Neutral"};
				result.screens[5].attach("\"But my parents have a friend of a friend who works at The Tower.  They talked about it, and apparently there's a proposal for how to treat the disease.  The only problem is that it's pretty extreme, so it hasn't been legally approved for use.\"\n\n", 0);
				result.screens[5].attach("It's considered too extreme to be used?  Just how extreme is it?\n\n");
				result.screens[5].attach("\"Extreme enough to involve cutting out a few chunks of my brain.\"\n\n", 0);
				result.screens[5].attach("Is that why " + Hashimoto() + " isn't a patient at The Tower anymore?  Did " + heShe(0) + " not want that treatment?\n\n");
				result.screens[5].attach("\"No, I would've been happy to go through with it.  But apparently, someone at The Tower got cold feet.\"", 0);

				result.emotions[6] = new String[]{"Frown"};
				result.screens[6].attach("\"The surgeon could've gotten in trouble for performing the operation, after all.  Maybe he was scared of getting found out.  All I know is that, after finishing the last round of medical tests with me, the doctors came in and said that my condition had miraculously improved, and so there was no need to do the operation after all.\"\n\n", 0);
				result.screens[6].attach(Hashimoto() + " doesn't think they were telling the truth?\n\n");
				result.screens[6].attach("\"Definitely not.  I know how to recognize a liar.  I was raised by the best of 'em.\"", 0);

				result.emotions[7] = new String[]{"Uncomfy"};
				result.screens[7].attach("Why would they lie to " + himHer(0) + "?  " + HeShe(0) + " was their patient.\n\n");
				result.screens[7].attach("\"I was their patient, but my parents were their customer.  This whole arrangement was happening under the table, so it's not like they'd need to worry about being charged with falsifying medical records or whatever.\"\n\n", 0);
				result.screens[7].attach("Then do " + Hashimoto() + "'s parents know the truth?\n\n");
				result.screens[7].attach("\"Probably.  But when I asked them about it, they just blew me off and said I was being paranoid.  That's when I decided I was done with going back home to them every night.  I figured I'd blow off some steam at the arcade, and then...  Well, you know the rest.\"", 0);

				result.sounds[8] = Effect.RUSTLE;
				result.modifiers[8] = new Modifier[]{Modifier.CLOSEUP};
				result.emotions[8] = new String[]{"Neutral"};
				result.screens[8].attach("\"Anyway, here.  I want you to have this.\"\n\n", 0);
				result.screens[8].attach(Hashimoto() + " steps forward and hands you a small plastic card.  It has The Tower's logo on it along with somebody's name and credential information.  It looks like an ID card, but the photo is conspicuously missing.\n\n");
				result.screens[8].attach("How exactly did " + Hashimoto() + " get ahold of this?\n\n");
				result.screens[8].attach("\"I paid off one of the HR people who work at The Tower.  My thought was that I could use a fake ID to get in there, snoop around, and find whatever files they had on me.  I wanted to know the truth.\"", 0);

				result.emotions[9] = new String[]{"Frown"};
				result.screens[9].attach("\"But too many of the doctors there know my face.  And honestly, I think I'd do a really shitty job of pretending to be some sort of nerdy scientist.\"\n\n", 0);
				result.screens[9].attach("Bribing someone who works at a prestigious institution like The Tower can't have been cheap.  How did " + Hashimoto() + " get that kind of money?\n\n");
				result.screens[9].attach("\"Stole my dad's favorite car on the way out.  It was hard to find a dealer who would buy it without asking any questions, but I managed.\"", 0);

				result.emotions[10] = new String[]{"Uncomfy"};
				result.screens[10].attach("It sounds like " + Hashimoto() + " is asking for your help to find out the truth.\n\n");
				result.screens[10].attach("\"I'm not asking for anything.  It's just that every time I felt that damn piece of plastic in my pocket, it reminded me what an idiot I am.  It's worthless to me, so I might as well let you see if you can make any use of it.\"\n\n", 0);
				result.screens[10].attach("But surely " + heShe(0) + "'d be happy if you went in there and found what " + heShe(0) + " had wanted to find.\n\n");
				result.screens[10].attach("\"It would be nice to know, but it wouldn't fix my problems.  They're not gonna change their minds and do the operation just cause I caught them lying.\"\n\n", 0);
				result.screens[10].attach("Just how serious is " + Hashimoto() + "'s medical condition, that " + heShe(0) + " was willing to go through with such a serious surgery?\n\n");
				result.screens[10].attach("\"I don't wanna talk about it.\"", 0);

				result.emotions[11] = new String[]{"Neutral"};
				result.screens[11].attach("You look down at the card in your hand.  ");
				if (getGoalLevel(15, false) >= 3) {
					result.screens[11].attach("This would give you more freedom to move through The Tower.  ");
					if (getGoalLevel(18, false) >= 1) {
						result.screens[11].attach("The only one who really knows your face is " + Heilig() + " " + himHer(4) + "self, and you know " + hisHer(4) + " schedule, so you could probably avoid running into " + himHer(4) + ".  But ");
					} else {
						result.screens[11].attach("Only a couple of the technicians there are actually familiar with your face, so as long as you stay out of the departments where they work, it shouldn't be too risky.  But ");
					}
				} else {
					result.screens[11].attach("You've never even been inside The Tower.  And ");
				}
				result.screens[11].attach("if you're caught, you could face some serious consequences.  This isn't the kind of mission to undertake lightly.\n\n");
				result.screens[11].attach("\"I wasn't trying to give you a mission.  I just figured you had earned some honesty.  If you want to use the card, then I'll give you the contact info of the guy I paid off, and all you'll have to do is put your own photo on the front.  If not, then maybe you can find somebody else who's interested in having a fake ID that lets them into The Tower.  Either way, I'm just happy to be rid of it.\"\n\n", 0);

				result.characters[12] = new String[0];
				result.screens[12].attach("After that, you and " + Hashimoto() + " return to a pretty normal session of hanging out together.  But now you have a better idea of what's going on inside " + hisHer(0) + " mind as " + heShe(0) + " searches for meaning inside the books you're reading together.  " + HeShe(0) + " must be grappling with some pretty heavy questions.\n\n");
				result.screens[12].attach("All the while, the fake ID card sits in your pocket.  If " + Hashimoto() + " paid for this by selling off a rich guy's favorite car, then this really might be the most expensive gift you've ever received.  And if you're willing to take the risk, then it could prove useful enough to be worth that cost.");
			}
		} else if (g.index == 28) {
			if (g.tier == 0) {
				result = new Scene(41);

				result.backgrounds[0] = "metropolis";
				result.screens[0].attach("As tempting as it was to just rush in the front door to rescue " + Tanaka() + " as soon as you arrived here, it seemed more prudent to wait until after dark.  It's given you a chance to get a feel for the city, to practice the language with actual native speakers, and to plan.\n\n");
				result.screens[0].attach("You have no doubt that the address " + Jackal() + " gave you is the right one.  It points to a sprawling compound not far from the city center, all of it newly-constructed.  The buildings look nothing like the street view available online, though.  Everything has been demolished and replaced sometime in the last couple of months.\n\n");
				result.screens[0].attach("The entire compound is surrounded by a high wall, like a fortress right in the middle of the city.  However, by making your way to the rooftops of the nearby buildings, you've still been able to get a pretty good view of the inside.  The compound is packed full of men equipped with military gear.  Is it normal for the gangs in this country to be so well-armed?\n\n");
				result.screens[0].attach("On top of that, some of the buildings look to be storage warehouses, and there's a steady stream of heavy trucks passing through the compound's main gate to unload their cargo inside.  You've even caught sight of a couple of helicopters landing on the roof of the largest central building.  Just how big of an operation are they running here?");

				result.screens[1].attach("Maybe it would have been smarter to spend a few days investigating this group before making your move.  This is on a completely different scale from the small-time gangs ");
                if (getGoalLevel(15, false) < 2) {
                    result.screens[1].attach(Jackal() + " told you about ");
                } else {
                    result.screens[1].attach("you went up against ");
                }
                result.screens[1].attach("back home.  But at the same time, every extra day spent delaying is another chance for the trail to go cold again.  As soon as night falls, you begin your final preparations.\n\n");
				result.screens[1].attach("It seems like the streets of this city are never completely empty, but even with a few pedestrians around, you can still do what you need to do.  The wall isn't actually much of an obstacle.  All you have to do is tie a metal hook to the end of a rope, throw it over, and climb up.  You hear some startled exclamations from below, but you pay them no mind, swinging yourself over the top of the wall, pulling the rope up after you, and then sliding back down to the ground on the other side.\n\n");
                result.screens[1].attach("That was the easy part.  Now, things will get more difficult.");

                result.backgrounds[2] = "black";
                result.sounds[2] = Effect.RUN;
                result.screens[2].attach("It's possible that some of the pedestrians who saw you will call the police - which, in this city, is apparently just the same as calling the gangs themselves.  In the worst-case scenario, you might've just tripped some sort of automated detection system or even been spotted through a security camera.  You have to assume that they know you're here.\n\n");
                result.screens[2].attach("And so you start running.  The nice thing about the compound being so big is that it's more likely for there to be at least one easily-overlooked spot where you can lay low while you wait for the gang's lookouts to exhaust their patience and stop searching for you.\n\n");
                result.screens[2].attach("You've memorized the compound's layout as well as you could with your view from the nearby rooftops.  And you picked your infiltration point carefully.  Your first destination is the unloading area for the cargo trucks that have been showing up all day.");

                result.backgrounds[3] = "tanaka7";
                result.screens[3].attach("There are still some trucks moving through, even at this hour, but the trucks in the line closest to the wall don't appear to be going anywhere anytime soon.  You dive under one of them, then peek out to make sure you weren't seen.\n\n");
                result.screens[3].attach("Sure enough, there are pairs of legs running toward the spot where you climbed over the wall.  It looks like you just barely managed to avoid them.  After they find that you aren't lingering by the spot where you climbed in, they'll spread out and begin a proper search.  This spot under the truck might hide you from casual observation, but they'll definitely check for you here when they come back.\n\n");
                result.screens[3].attach("Time to move again.");

                result.backgrounds[4] = "black";
				result.sounds[4] = Effect.RUN;
                result.screens[4].attach("You need a better hiding spot.  You had hoped that you'd be able to sneak into a storage area and maybe steal a uniform or something, but there are still too many people around, even at this hour.  You'll need to try something else.\n\n");
				result.screens[4].attach("Your backup plan was to see if you could enter the ventilation system.  You doubt that you'll be able to use it to get inside the buildings, since the ducts will get too small to crawl through.  But the vents that exchange air with the outside are larger, big enough that they caught your attention while you were scouting the compound from the rooftops.  If you can unscrew the cover on one of those and climb inside, you should be able to hide for as long as you want to.\n\n");
				result.screens[4].attach("And you had already memorized the locations of all of them.  You move swiftly, turning around the corner that will lead you to the nearest air conditioning unit-");

				result.backgrounds[5] = "tanaka8";
				result.screens[5].attach("Only to come face-to-face with a trio of patrolling soldiers.\n\n");
				result.screens[5].attach("These ones are equipped differently than the ones you saw from the rooftops.  Their armor is different, bulkier, with not even an inch of skin showing.  The helmets have integrated gas masks, and red light shines from within the visor.\n\n");
				result.screens[5].attach("Were these soldiers dispatched as a result of your intrusion?  You haven't heard any audible alarm, but maybe the entire compound is on high alert.");

				result.backgrounds[6] = "black";
				result.tracks[6] = Music.SILENCE;
				result.sounds[6] = Effect.GUNFIRE;
				result.screens[6].attach("The soldiers raise their guns, and you duck back around the corner only a moment before they open fire.  Dozens of bulletholes appear in the wall just behind where you were standing.\n\n");
				result.screens[6].attach("It suddenly occurs to you that you might have underestimated this 'gang'.\n\n");
				if (getGoalLevel(15, false) >= 2) {
					result.screens[6].attach("You had been following the same playbook that you had used alongside " + Jackal() + " when dealing with the local gangs back home.  ");
				} else {
					result.screens[6].attach("You had been following the advice that " + Jackal() + " gave you for dealing with gangs like the ones back home.  ");
				}
				result.screens[6].attach("It might have worked well against street thugs with little motivation and even less loyalty toward their gang bosses.  Getting past them is just a matter of waiting for them to get lazy and let their guard down.\n\n");
				result.screens[6].attach("But this organization is something completely different.  It's obvious by now that they can't just be called a 'gang'.  They're a full-fledged paramilitary force.  They have coordination, they have armaments, and they have the willingness to kill without hesitation.  Even if you had taken the time to fully prepare, it's hard to imagine how you'd be able to triumph against all of that.");

				result.sounds[7] = Effect.RUN;
				result.screens[7].attach("You start running again, but this time, your only goal is your own immediate survival.  You hear pursuing footsteps behind.\n\n");
				result.screens[7].attach("Even as you run, your mind races.  What should you do now?  Try breaking a window or kicking down a door?  But even if you had the time, going deeper into the compound will just leave you completely surrounded by the enemy.  It might be time to give up on finding a clue to " + Tanaka() + "'s whereabouts here.  For now, you just need to avoid getting shot or captured.\n\n");
				result.screens[7].attach("And even that might be too much to hope for.  You hear approaching footsteps from ahead, too.  The soldiers are closing in.  You have no choice but to head back for the cargo loading area.  If you can reach the wall, then maybe you can climb back over it.");

				result.backgrounds[8] = "tanaka7";
				result.sounds[8] = Effect.GUNFIRE;
				result.screens[8].attach("Gunfire tears up the ground beneath your feet as you make the last sprint toward the compound's wall.  You dive down behind a cargo pallet, and you can feel it shake with the impact of the bullets.  Some officer here is probably going to be pretty annoyed at having his shipment shot up.\n\n");
				result.screens[8].attach("But this might be the end of the road for you.  By now, half a dozen soldiers have their sights trained on your position.  If you try to climb back over the wall, they'll fill you with holes before you're even halfway up.\n\n");
                result.screens[8].attach("Making a run for it again might let you survive a bit longer, since there are other cargo pallets to use as cover.  But there must be soldiers closing in from all directions now.  If climbing back over the wall is difficult now, then giving the soldiers more time to surround you will only make it harder.\n\n");
                result.screens[8].attach("Should you surrender?  The soldiers seemed eager to shoot you on-sight, but if you make it clear that you won't run, they might prefer to capture you instead.\n\n");
                result.screens[8].attach("Would that really be any better, though?  Once they capture you, you won't have any way of escaping.  A tiny chance of climbing up over the wall might be better than a certain death in captivity.");

                result.screens[9].attach("Before you can make your decision, a voice calls out.\n\n");
                result.screens[9].attach("\"Hold your fire!  " + HeShe(-1) + "'s one of ours!\"\n\n", 5);
                result.screens[9].attach("One of theirs?  Does " + heShe(5) + " think you're somebody else?\n\n");
                result.screens[9].attach("You don't have time to ponder the meaning of " + hisHer(5) + " words, though.  If your only chance to escape is to take advantage of a case of mistaken identity, then you can't afford to pass it up.  By the time " + heShe(5) + " realizes that you aren't who " + heShe(5) + " thinks you are, you'll be back over the wall.\n\n");
                result.screens[9].attach("As you ready your grappling hook, you glance back to make sure that the soldiers really are lowering their weapons.");

                result.backgrounds[10] = "tanaka9";
                result.screens[10].attach("But when you see who the voice belongs to, you forget all thought of escape.\n\n");
                result.screens[10].attach("\"Hey there.  It's really good to see you again.\"\n\n", 5);
                result.screens[10].attach("It's " + himHer(5) + ".");

                result.screens[11].attach("What's " + Tanaka() + " doing here?  Why is " + heShe(5) + " issuing orders to these soldiers, and in their own language?  Did " + heShe(5) + " manage to steal an officer's uniform?  For " + himHer(5) + " to manage that at the very same time that you tried to sneak into the compound would be a pretty big coincidence.\n\n");
                result.screens[11].attach("The soldiers seem to accept " + hisHer(5) + " authority over them, at least.  They're lowering their weapons, though one does voice his misgivings.\n\n");
                result.screens[11].attach("\"Are you sure, " + SirMaam(5) + "?  " + HeShe(-1) + " could be a spy from the Branch.\"\n\n");
                result.screens[11].attach("\"" + HeShe(-1) + " isn't.  I hand-picked " + himHer(-1) + " from my hometown.  The Branch doesn't have any operations there.\"\n\n", 5);
                result.screens[11].attach("The Branch?  You aren't sure what they're talking about, but " + Tanaka() + " seems to have a plan, so maybe it's best to let " + himHer(5) + " do the talking.");

                result.screens[12].attach("The soldier doesn't seem to be satisfied yet, though.  He positions himself between you and " + Tanaka() + ", as if trying to protect " + himHer(5) + " from you.\n\n");
                result.screens[12].attach("\"Then " + heShe(-1) + "'s an outsider.  Why bring in somebody from outside the Syndicate?\"\n\n");
                result.screens[12].attach("\"Because I needed somebody who wasn't already authorized to be here.  I hired " + himHer(-1) + " to sneak in, in order to test our security response.  I must say that you all exceeded my expectations.  Well done.\"\n\n", 5);
                result.screens[12].attach("Really?  " + HeShe(5) + "'s saying that you were just testing them?  That's the lie " + heShe(5) + "'s going with?");

                result.screens[13].attach("But as you watch, the soldiers straighten up and puff out their chests with pride, slapping each other on the back.  Even the soldier who voiced his doubts seems to be convinced.\n\n");
                result.screens[13].attach("Of course.  You should have seen this coming.  " + Tanaka() + " already has all of them completely under " + hisHer(5) + " spell.");

                result.screens[14].attach("\"Now, I'll be debriefing " + himHer(-1) + " in the officers' lounge.  At ease, men.  " + Artemis() + " planned for this.\"\n\n", 5);
                result.screens[14].attach("The soldiers repeat the last sentence back to " + Tanaka() + ", their voices all mingling into one.\n\n");
                result.screens[14].attach("\"" + Artemis() + " planned for this.\"\n");
                result.screens[14].attach("\"" + Artemis() + " planned for this.\"\n");
                result.screens[14].attach("\"" + Artemis() + " planned for this.\"\n\n");
                result.screens[14].attach("With they way they say it, it sounds like some sort of religious affirmation.  You suppress your unease and ask " + Tanaka() + " to lead the way.  There's a flicker of surprise in " + hisHer(5) + " eyes, but you quickly realize that it's because " + heShe(5) + "'s never heard you speak this language before.  " + HeShe(5) + " must have assumed that you came here without learning it.");

                result.backgrounds[15] = "black";
                result.screens[15].attach(Tanaka() + " leads you deeper into the compound.  There are too many soldiers passing by, so " + heShe(5) + " seems to judge it safest to remain silent.\n\n");
                result.screens[15].attach("Your head is still spinning at how quickly the situation here reversed itself.  One moment, you were getting shot at, on the edge of death...\n\n");
                result.screens[15].attach("And now " + Tanaka() + " is right here.  You've found " + himHer(5) + ".\n\n");
                result.screens[15].attach("But if " + heShe(5) + " has the freedom to move around this place as " + heShe(5) + " wants, then why doesn't " + heShe(5) + " leave?  What's keeping " + himHer(5) + " here?");

                result.backgrounds[16] = "lounge";
                result.tracks[16] = Music.WAY;
                result.screens[16].attach("Eventually, you arrive at what seems to be a private lounge for the officers here.  There are a couple of others here wearing uniforms similar to " + Tanaka() + "'s, but they don't even look up when the two of you walk in.\n\n");
                result.screens[16].attach(Tanaka() + " heads for a booth in the corner, and you follow " + himHer(5) + ".");

                result.characters[17] = new String[]{"tanaka"};
                result.outfits[17] = new String[]{"Syndicate"};
                result.emotions[17] = new String[]{"Uncomfy"};
                result.screens[17].attach("\"I had hoped that we'd be the only ones here at this hour, but I guess this is as good as we're going to get.  We'll just have to keep our voices down.\"\n\n", 5);
                result.screens[17].attach(HeShe(5) + " doesn't have a private room you can go to together?\n\n");
                result.screens[17].attach("\"No.  Not even the commanders get their own rooms.  We're all one big close-knit community.\"\n\n", 5);
                result.screens[17].attach("So, " + Tanaka() + " isn't actually the boss here.  With all that business about '" + Artemis() + " planned for this', you were starting to get the impression that " + heShe(5) + " had become some sort of cult leader.\n\n");
                result.screens[17].attach("\"More like... cult middle management.  I have some authority, but if the other commanders suspect that I'm acting outside my orders, they'll... get rid of me.\"", 5);

                result.emotions[18] = new String[]{"Shifty"};
                result.screens[18].attach("The situation is starting to become more clear.  You don't even need to ask whether " + Tanaka() + " feels any loyalty toward this organization.  It's plain that " + heShe(5) + " doesn't want to be here.\n\n");
                result.screens[18].attach("\"...\"\n\n", 5);
                result.screens[18].attach("So why hasn't " + Tanaka() + " come home?  " + HeShe(5) + " could just order the soldiers at the gate to step aside, right?\n\n");
                result.screens[18].attach("\"You can see how powerful this organization is.  If I disobey " + Artemis() + ", " + heShe(17) + "'ll send them to punish me.  I've been... Um, I mean, I've seen it happen.\"", 5);

                result.emotions[19] = new String[]{"Neutral"};
                result.screens[19].attach("Who exactly is " + Artemis() + "?\n\n");
                result.screens[19].attach("\"Our leader.  The leader of the Lunar Syndicate.  The entire organization exists to serve " + himHer(17) + ".\"\n\n", 5);
                result.screens[19].attach("But why do the other members of the Syndicate serve " + himHer(17) + "?  If everybody's only staying here because they're afraid of being pursued by the others, then surely it would make more sense for all of them to just quit and go home at the same time.  If nobody serves " + Artemis() + " anymore, then " + heShe(17) + "'ll have no power to punish them.\n\n");
                result.screens[19].attach("\"Not everyone is only staying here because they're afraid.  For a lot of them, the real draw is the promise of power.\"", 5);

                result.emotions[20] = new String[]{"Uncomfy"};
                result.screens[20].attach("\"I should know, since I'm usually the one making those promises to them.\"\n\n", 5);
                result.screens[20].attach(Tanaka() + " is involved in recruiting people for the Lunar Syndicate?\n\n");
                result.screens[20].attach("\"Yes.  The 'recruitment' party goes out and grabs someone off the street... and brings them to me.  And then it's up to me to turn them from an unwilling abductee into a new recruit eager to serve the Lunar Syndicate.  Sometimes, " + Artemis() + " leaves me a note with advice on which tactics to use in order to get them on our side.  Threats, encouragement, a position in the new world order... sex appeal.  It can take a few days in a holding cell before they start to listen to me.\"", 5);

                result.emotions[21] = new String[]{"Neutral"};
                result.screens[21].attach("\"But when " + Artemis() + " leaves me 'advice' on how to recruit somebody, they always join up right away.  " + Artemis() + " tells me to mention the person's lifelong dream, or mention somebody else's name, or promise to use some specific torture technique if he refuses to become one of us.  And the person's eyes light up with recognition, and he agrees, without hesitation.  It's like " + Artemis() + " knows everything about us.  Some people even call " + himHer(17) + "'s a 'god'.\"\n\n", 5);
                result.screens[21].attach("A person referred to as a god?  Why does that sound familiar?  It feels like it triggers a memory just at the edge of recollection, but the harder you try to seize it, the faster it slips away.\n\n");
                result.screens[21].attach("But that doesn't matter.  You've never killed anyone before, but at hearing what " + Artemis() + " is doing here, you're certain that you'd be able to go through with killing " + himHer(17) + ".  And if " + heShe(17) + " has accomplices in this insane plot, then you'll deal with them, too.  Every last one of them.\n\n");
                result.screens[21].attach("\"Please don't say that.  I'm... I'm afraid of " + Artemis() + ", and I'm not ashamed to admit it.\"", 5);

                result.emotions[22] = new String[]{"Uncomfy"};
                result.screens[22].attach("Why be afraid of " + Artemis() + "?  Without " + hisHer(17) + " 'Lunar Syndicate', " + heShe(17) + "'d just be a regular " + manWoman(17) + ".  " + Tanaka() + " doesn't actually buy into that stuff about " + himHer(17) + " being a god, right?\n\n");
                result.screens[22].attach("\"I don't believe in the supernatural.  But... " + heShe(17) + " does know things.  Things " + heShe(17) + " shouldn't possibly be able to know.  " + HeShe(17) + " knew exactly what to say in order to get me to join the Lunar Syndicate, too.\"\n\n", 5);
                result.screens[22].attach("Who was put in charge of recruiting " + Tanaka() + "?\n\n");
                result.screens[22].attach("\"Nobody.  I was one of the earlier recruits, so after they grabbed me off the street, they just shoved me into the back of their van and handed me a note.  A note from " + Artemis() + ".  And once I read it, I stopped resisting and just quietly boarded the plane with them.\"", 5);

                result.emotions[23] = new String[]{"Shifty"};
                result.screens[23].attach("And what did " + Artemis() + " write in the note?\n\n");
                if (getGoalLevel(1, false) < 4) {
                    result.screens[23].attach("\"... Lots of things.\"\n\n", 5);
                    result.screens[23].attach("Well, if " + Artemis() + "'s words were enough to convince " + Tanaka() + " to leave " + hisHer(5) + " entire life behind, then it makes sense that they'd be something intensely personal to " + himHer(5) + ".  It's no surprise that " + heShe(5) + "'s not comfortable with sharing them.\n\n");
                    result.screens[23].attach("\"I'm sorry.  I can at least tell you that " + heShe(5) + " knew about secrets I had never told anybody else.  Secrets I had hardly even been willing to admit to myself.  And... " + heShe(17) + " demonstrated that " + heShe(17) + " knew exactly which words would hurt me most.\"", 5);

                    result.emotions[24] = new String[]{"Uncomfy"};
                    result.screens[24].attach("If " + Artemis() + " knows everything, then how is it that you were able to meet up with " + Tanaka() + " like this?  Does " + Artemis() + "'s plan involve you?\n\n");
                    result.screens[24].attach("\"I... I don't think so.  Based on what was in my letter, it wouldn't make any sense.\"\n\n", 5);
                } else {
                    result.screens[23].attach("\"That " + heShe(17) + " knew about my feelings for you, to start.  ", 5);
                    if (currentPlaythrough.progress.archivedLoops[0].archivedActions[5][1][3] == Action.RESCUETANAKA) {
                        result.screens[23].attach("That " + heShe(17) + " had ordered " + hisHer(17) + " men to spare your life.  ", 5);
                    } else {
                        result.screens[23].attach("That I had asked you to walk me home that day.  ", 5);
                    }
                    result.screens[23].attach("And if I refused to join the Lunar Syndicate, you'd be the first one " + heShe(17) + "'d kill in retaliation.\"", 5);

                    result.emotions[24] = new String[]{"Uncomfy"};
                    result.screens[24].attach("But if " + Artemis() + " was threatening you in order to get " + Tanaka() + "'s cooperation, then " + heShe(17) + " couldn't have foreseen that you'd show up here yourself.  Now that you're prepared for " + Artemis() + " to come after you, " + hisHer(17) + " threat seems much less serious.\n\n");
                    result.screens[24].attach("\"It does.  Though I'm worried about " + Artemis() + " coming after my family too, of course...\"\n\n", 5);
                }
                result.screens[24].attach("The important thing is that you and " + Tanaka() + " can work together now.  With " + himHer(5) + " working within the Syndicate, and you with the freedom to work outside it, maybe you'll be able to figure out a way to get " + Tanaka() + " out of here.  Collapse the whole organization, or at least make enough chaos that " + Tanaka() + " can slip away without giving " + Artemis() + " any reason to retaliate against " + himHer(5) + ".\n\n");
                result.screens[24].attach("And then you'll be able to go back home and return to your peaceful lives.\n\n");
                result.screens[24].attach("\"...\"", 5);

                result.emotions[25] = new String[]{"Shifty"};
                result.screens[25].attach("Oddly, " + Tanaka() + " doesn't seem excited by the prospect of going back home.  " + HeShe(5) + "  doesn't want to be here, right?  So what's wrong?\n\n");
                result.screens[25].attach("\"I don't think I can go back to my old life.\"\n\n", 5);
                result.screens[25].attach("Why not?\n\n");
                result.screens[25].attach("\"You saw me back there.  When I tell the men not to kill somebody they want to kill, they listen to me.\"\n\n", 5);
                result.screens[25].attach("Of course.\n\n");
                result.screens[25].attach("\"Well...  When I tell them to kill somebody they don't want to kill... they listen to me then, too.\"", 5);

                result.emotions[26] = new String[]{"Happy"};
                result.screens[26].attach("\"I haven't been here for long, but I've already gotten so many people killed.  Not just the Syndicate's enemies, either.  Our own men... half of them aren't really men, they're boys who aren't even old enough to drink.  They join because they believe what I'm telling them, or just because they're attracted to me and they want to impress me.  And then they die.\"\n\n", 5);
                result.screens[26].attach(Tanaka() + "'s making an effort to keep a nonchalant expression and tone, but emotion breaks through in " + hisHer(5) + " voice.  One of the commanders sitting on the opposite corner of the room glances up from his drink, and " + Tanaka() + " lowers " + hisHer(5) + " voice further to ensure that nobody else can hear " + himHer(5) + ".\n\n");
                result.screens[26].attach("\"So, I really don't have any right to complain, do I?  I don't deserve to go home and live a happy life after everything I've done here.  But " + Artemis() + " told me that if I... if I die, then that'll be treated the same as if I ran away.  So all I can do is keep digging myself deeper and deeper...\"", 5);

                result.emotions[27] = new String[]{"Shifty"};
                result.screens[27].attach(Tanaka() + " is breaking under all the pressure that's been placed on " + himHer(5) + ".  You had been prepared on some level for " + himHer(5) + " to be traumatized when you found " + himHer(5) + ", but not like this.  If " + heShe(5) + " doesn't think that " + heShe(5) + " deserves to be saved, then that will only make it more difficult to save " + himHer(5) + ".\n\n");
                if (getGoalLevel(1, false) < 4) {
                    result.screens[27].attach("\"I know that look.  Is all my self-pitying talk just making you even more determined to rescue me?  Looks like I'm so used to playing with people's hearts that I do it without even trying to.\"\n\n", 5);
                    result.screens[27].attach("It's not playing with your heart if those are truly " + Tanaka() + "'s honest feelings.\n\n");
                    result.screens[27].attach("\"I don't even know what my honest feelings are anymore.  Really, I should have tried to convince you that I was fine here.  ", 5);
                } else {
                    result.screens[27].attach("\"I'm sorry.  You must be really bored of hearing my self-pity, but as soon as we meet up on the other side of the world, I go right back to it.  I don't know why you bothered to come rescue me.\"\n\n", 5);
                    result.screens[27].attach("You don't really need a reason.\n\n");
                    result.screens[27].attach("\"Yeah, I guess you don't.  But even if you would've seen through it right away, I still feel like I should've tried to convince you that I was fine here.  ", 5);
                }
                result.screens[27].attach("Claim that I was one of " + Artemis() + "'s true believers, call you a creep for following me here.  Tell you to just go away.  Then, maybe you'd be safe.\"", 5);

                result.emotions[28] = new String[]{"Neutral"};
                result.screens[28].attach("\"But I missed my chance to do that.  So, I guess I have no choice but to be honest.\"\n\n", 5);
                result.screens[28].attach(Tanaka() + " takes a deep breath.\n\n");
                result.screens[28].attach("\"Thank you.  Thank you for coming here to find me.  Those should have been the first words out of my mouth when we got here.  ", 5);
                if (getGoalLevel(1, false) < 3) {
                    result.screens[28].attach("Back home, I was starting to think that you actually hated me.  But as soon as I got in trouble... there you were, ready to take on an entire crime syndicate for my sake.  You really, really have no idea how nice that made me feel.  ", 5);
                } else if (getGoalLevel(1, false) == 3) {
                    result.screens[28].attach("I thought that after I pushed you away back home, you'd be able to just forget about me and go live your own life.  I never thought I'd see you again.  I'm really, really happy that I was wrong.  ", 5);
                } else {
                    result.screens[28].attach("To be honest, I wanted to burst into tears and throw my arms around you the moment I saw you.  I had to play it cool and act like you were just an acquaintance, but... honestly, I've never felt so much happiness and relief in my entire life.  ", 5);
                }
                result.screens[28].attach("So... thanks.\"", 5);

                result.emotions[29] = new String[]{"Uncomfy"};
                result.screens[29].attach("The doors to the lounge abruptly swing open, and " + Tanaka() + " tenses up, but it's just another commander here to relax.  He pays you no attention and heads over to pour a drink with one of the other commanders already here.\n\n");
                result.screens[29].attach("\"Just thanking you like that feels... way too cheap.  I want to find a way to express my gratitude better, but... it'll have to wait for another time.\"\n\n", 5);
                result.screens[29].attach("Is " + Tanaka() + " worried about the other commanders finding out who you really are?\n\n");
                result.screens[29].attach("\"Yeah.  I'm definitely not acting like my usual self right now.  If one of them gets suspicious and starts to investigate you, then we could be in trouble.\"", 5);

                result.emotions[30] = new String[]{"Neutral"};
                result.screens[30].attach("\"In the future, we'll probably have to keep our meetings shorter.  Late at night like this is good, though.  But there's one thing I have to tell you right now, just in case we don't get a chance to talk again.\"\n\n", 5);
                result.screens[30].attach("What is it?\n\n");
                result.screens[30].attach("\"The Lunar Syndicate is currently fighting for control of the city against the criminal gangs that ran things before we got here.  The biggest of those gangs is an international crime family called the Branch.\"", 5);

                result.emotions[31] = new String[]{"Uncomfy"};
                result.screens[31].attach("\"Currently, the Syndicate's main strategy is to recruit government officials to our side.  The Branch intends to counter that by staging a coup and replacing the upper levels of the government with their own people.\"\n\n", 5);
                result.screens[31].attach("This crime family is going to try to take over a whole country?\n\n");
                result.screens[31].attach("\"Not directly.  The global superpowers have always fought over control of this place, and the Branch has been playing them against each other for decades.  But now, the Branch is going to throw their weight behind a 'revolution' planned by foreign intelligence agencies.  The support from the locals will make it look more like a genuine popular movement, and in return, a bunch of Branch capos will be installed in high-ranking positions in the new government.\"", 5);

                result.emotions[32] = new String[]{"Neutral"};
                result.screens[32].attach("Is the Syndicate just going to let that happen?\n\n");
                result.screens[32].attach("\"Of course not.  " + Artemis() + " planned for this.  The Branch doesn't realize just how much we know about their plot.  Even most of the Syndicate footsoldiers don't know what's coming.  But I've been tasked with helping to make sure that we're ready.\"\n\n", 5);
                result.screens[32].attach("And what does that involve?\n\n");
                result.screens[32].attach("\"Striking first.  The Branch is planning their coup on December 30th.  We'll stage our own coup on the 29th.  If we hit the city's communication infrastructure, the Branch won't be able to coordinate a response with their foreign allies.  That will buy us time to wipe the Branch from the city and present our own deal to the global superpowers.\"", 5);

                result.emotions[33] = new String[]{"Uncomfy"};
                result.screens[33].attach("It's a lot to take in.  There's going to be a war here, and soon.  Thousands of people are going to die.  Maybe even tens or hundreds of thousands.\n\n");
                result.screens[33].attach("\"That's what I'm counting on.  Before you got here, I was planning to try and fake my own death during the fighting.  A lot of our people really are going to end up dead, and " + Artemis() + " will probably be too busy in the aftermath to spend too much effort looking for potential deserters.  If I miss the chance, then it'll only get harder to disappear afterward.\"\n\n", 5);
                result.screens[33].attach("It sounds like " + Tanaka() + " has already thought this through.\n\n");
                result.screens[33].attach("\"Well, I'm still not sure exactly how I'll be able to pull it off.  I'm always being watched here.  I don't have a chance to arrange for... for a body from the morgue to be made up to look like me or something like that.  I haven't even been trusted with the exact details of how our operation on the 29th will be conducted.  At this point, I only have a vague outline of a plan.\"", 5);

                result.emotions[34] = new String[]{"Neutral"};
                result.screens[34].attach("\"I just want to make sure you aren't caught by surprise.  It might even be best for you to go back home before then.\"\n\n", 5);
                result.screens[34].attach("Without " + Tanaka() + "?\n\n");
                result.screens[34].attach("\"Even in the worst-case scenario where I can't find a way to make my plan work, it'll just mean that I'm stuck working for the Syndicate for awhile longer.  I'm useful to " + Artemis() + ", so " + heShe(17) + " probably won't put me anywhere dangerous.  But if you stay here... you could end up being killed in the fighting.\"\n\n", 5);
                result.screens[34].attach("Maybe it really would be a good idea for you to head home a few days beforehand, then.  But in the meantime, you can help with " + Tanaka() + "'s plan to fake " + hisHer(5) + " own death.\n\n");

                result.emotions[35] = new String[]{"Shifty"};
                result.screens[35].attach("\"After you traveled halfway across the world to find me, I feel like I don't have any right to ask you for more.  But... I guess you must actually be good at this, huh?  Cloak and dagger stuff, I mean.  I want to ask you all about it, but...\"\n\n", 5);
                result.screens[35].attach("It sounds like it might be better to save that until next time.\n\n");
                result.screens[35].attach("\"Yeah.  Someday, we'll be able to talk as long as we want, without needing to worry about what the Syndicate or anybody else thinks.  Just like the old days.  I'll never take it for granted ever again...\"", 5);

                result.characters[36] = new String[0];
                result.backgrounds[36] = "black";
                result.screens[36].attach(Tanaka() + " leads you out of the officers' lounge and down to the front gate of the Syndicate's headquarters.  " + HeShe(5) + " makes arrangements for you to be let inside next time with no need to climb over the wall.\n\n");
                result.screens[36].attach("You and " + Tanaka() + " part ways without any displays of affection, all the better to make it look like you're nothing more than a professional contact of " + hisHers(5) + ".  As the gate closes, you catch one last glimpse of " + himHer(5) + " looking back at you over " + hisHer(5) + " shoulder.");

                result.backgrounds[37] = "metropolis";
                result.screens[37].attach("And then you're left back on the street, alone.  The sky is still dark.  You really weren't in there for that long.\n\n");
                result.screens[37].attach("You've been given a lot to think about.  " + Tanaka() + "'s situation isn't anything like you could have expected, but " + heShe(5) + " still needs your help.  And providing that help is going to be a lot more complicated than just sneaking " + himHer(5) + " out from some gang hideout.\n\n");
                result.screens[37].attach("Fortunately, " + Tanaka() + " isn't helpless.  The two of you will be able to work together to find a way to free " + himHer(5) + " from the Lunar Syndicate's clutches.\n\n");
                result.screens[37].attach("But even if you were to find a way to rescue " + himHer(5) + " tomorrow, " + heShe(5) + "'s already been changed by " + hisHer(5) + " time here.  The coming coup will be a tragedy that will result in many deaths, but " + Tanaka() + " was able to calmly approach it as an opportunity to accomplish " + hisHer(5) + " goals.  Would the old " + Tanaka() + " have been able to do that?");

                result.backgrounds[38] = "tanaka10";
                result.screens[38].attach("The old " + Tanaka() + ".  The new " + Tanaka() + ".  It's easy to think of them as different people, but they aren't.  If you take the old " + Tanaka() + " and add the experiences " + heShe(5) + "'s had in this city, then the result is the new " + Tanaka() + ".\n\n");
                result.screens[38].attach("The biggest problem might be " + Tanaka() + "'s feelings of guilt over those experiences.  If " + heShe(5) + " really does feel that " + heShe(5) + " doesn't deserve to be saved, then " + heShe(5) + " won't be as motivated to find a way to escape the Syndicate.  " + HeShe(5) + " wasn't joking when " + heShe(5) + " advised you to be ready to go home without " + himHer(5) + ".\n\n");
                result.screens[38].attach("After you escape with " + himHer(5) + ", will it be possible to wash away those guilty feelings with new, happier experiences?  Or has " + hisHer(5) + " soul been irreversibly scarred?");

                result.screens[39].attach("Even if " + heShe(5) + " can recover from this, the resulting " + Tanaka() + " won't be the same as the old one, either.  It's probably pointless to dream about the carefree days you used to spend together.  The past is already behind you.  There's no way to go back and see how things might have turned out differently.\n\n");
                result.screens[39].attach("For now, all you can do is try to familiarize yourself with the situation in this city so that you can help.  It might even be a good idea to head back home and see if " + Jackal() + " can teach you any more useful lessons.  ");
                if (currentPlaythrough.currentDay < 99) {
                    result.screens[39].attach("You still have some time before December 29th, so there's no need to rush into things unprepared.");
                } else {
                    result.screens[39].attach("Though, there's no telling whether the airlines will resume their regular flights before December 29th.");
                }

                result.backgrounds[40] = "metropolis";
                if (currentPlaythrough.weeklyActions[weekDayNumber()][3].ownSpot == Spot.HOTEL || currentPlaythrough.weeklyActions[weekDayNumber()][5].ownSpot == Spot.HOTEL) {
                    result.screens[40].attach("You head back to your hotel room.  It's a nice place, so you aren't entirely unhappy to have an excuse to stay there longer.");
                } else {
                    result.screens[40].attach("You head back to your apartment to finish unpacking your things.  Seems like you might need to get used to sleeping there.");
                }
			}
		}
		return result;
	}
	
	public static String resolveAction(Action a, Boolean takeEffect, Boolean barMove) {
		BigInteger healthStorage = simulatedHealth;
		if (a.availableSlot == 0) {
			BigInteger difference = maxHealth().subtract(currentPlaythrough.yesterdayMaxHealth);
			if (difference.compareTo(BigInteger.ZERO) > 0) {
				addHealth(difference, barMove);
			}
		}
		String result = "";
		BigInteger staminaSpent = getStaminaEffect(a);
		if (staminaSpent.compareTo(simulatedStamina) > 0) {
			staminaSpent = simulatedStamina;
		}
		BigInteger healthSpent = getHealthEffect(a);
		BigInteger financesSpent = reducedFinancesCost(a.financesCost);
		BigInteger[] gainedTypes = gainedProgress(a, staminaSpent);
		BigInteger gainedRelationship = gainedTypes[0];
		BigInteger gainedAttribute = gainedTypes[1];
		BigInteger gainedGoal = gainedTypes[2];
		staminaSpent = staminaSpent.add(getBodyArmorAdjustment(a));
		healthSpent = healthSpent.subtract(getBodyArmorAdjustment(a).divide(BigInteger.valueOf(3)));
		if (staminaSpent.compareTo(BigInteger.ZERO) < 0) {
			result = "+" + format(staminaSpent.negate()) + " Stamina";
		} else if (staminaSpent.compareTo(BigInteger.ZERO) > 0) {
			result = format(staminaSpent.negate()) + " Stamina";
		} else if (a.isDaydream()) {
			result = "Times daydreamt +1";
			if (barMove) {
				if (stanceRoutine() == RoutineElements.TRIUMPHANT) {
					currentPlaythrough.daydreams = currentPlaythrough.daydreams.add(BigInteger.valueOf(5));
				} else {
					currentPlaythrough.daydreams = currentPlaythrough.daydreams.add(BigInteger.ONE);
				}
				
			}
		} else if (a.baseCost.compareTo(BigInteger.ZERO) > 0) {
			result = "No Stamina to spend";
		} else if (a.baseCost.compareTo(BigInteger.ZERO) < 0) {
			result = "Stamina already at max";
		}
		if (a.healthCost.compareTo(BigInteger.ZERO) != 0) {
			if (!result.isEmpty()) {
				result += ", ";
			}
			if (healthSpent.compareTo(BigInteger.ZERO) < 0) {
				result += "+" + format(healthSpent.negate()) + " Health";
			} else {
				if (healthSpent.equals(BigInteger.ZERO)) {
					result += "-";
				}
				result += format(healthSpent.negate()) + " Health";
			}
		}
		if (gainedRelationship.compareTo(BigInteger.ZERO) > 0) {
			result += "\n+" + format(gainedRelationship) + " " + currentPlaythrough.personNames[a.relationship] + "'s relationship";
		}
		boolean attributeLineStarted = false;
		if (gainedAttribute.compareTo(BigInteger.ZERO) > 0) {
			attributeLineStarted = true;
			result += "\n+" + format(gainedAttribute) + " " + attributeNames[a.attribute] + " experience";
		}
		BigInteger adaptiveGains = BigInteger.ZERO;
		if (stanceRoutine() == RoutineElements.ADAPTIVE && healthSpent.compareTo(BigInteger.ZERO) > 0) {
			adaptiveGains = gainedProgress(Action.ADAPTIVEACTION, healthSpent.multiply(BigInteger.valueOf(20)))[1];
			if (attributeLineStarted) {
				result += ", " + format(adaptiveGains) + " " + attributeNames[3] + " experience";
			} else {
				result += "\n+" + format(adaptiveGains) + " " + attributeNames[3] + " experience";
			}
		}
		Goal usedGoal = getVisibleGoal(a, false);
		Goal previousGoal = usedGoal;
		int[] finishedGoal = new int[0];
		Boolean goalMatch = getVisibleGoal(currentPlaythrough.currentLocale.currentSpot.currentAction, false) != null && usedGoal != null && getVisibleGoal(currentPlaythrough.currentLocale.currentSpot.currentAction, false).index == usedGoal.index;
		boolean numericalGoalProgress = !gainedGoal.equals(BigInteger.ZERO);
		if (usedGoal != null) {
			boolean allDone = false;
			while (!allDone && gainedGoal.add(simulatedGoals[usedGoal.index]).subtract(usedGoal.previousRequirements).compareTo(usedGoal.requirement) >= 0) {
				boolean newlyCompleted = false;
				if (simulatedGoals[usedGoal.index].subtract(usedGoal.previousRequirements).compareTo(usedGoal.requirement) < 0) {
					if (takeEffect && barMove) {
						newlyCompleted = true;
						if (a == Action.HIREFIXER) {
							healthDisplay.setValue(1000);
							updateActionInfo(Action.FIXERTALK);
						}
						if (a == Action.LOITER) {
							updateActionInfo(Action.DANCE);
						}
					}
					if (getVisibleGoal(getCurrentAction(), false) == usedGoal && takeEffect && barMove) {
						if (usedGoal.getNextGoal() != null && simulatedGoals[usedGoal.index].subtract(usedGoal.previousRequirements).compareTo(usedGoal.requirement) != 0) {
							Goal newDisplayedGoal = usedGoal.getNextGoal();
							if (usedGoal.index != newDisplayedGoal.index) {
								newDisplayedGoal = getVisibleGoal(newDisplayedGoal.index, false);
							}
							newDisplayedGoal.previousString = usedGoal.storedString;
						}
						goalProgressBar.loops--;
						goalProgressBar.initialLoops--;
					}
					result += "\n" + usedGoal.completionText;
					numericalGoalProgress = false;
				}
				previousGoal = usedGoal;
				if (usedGoal.getNextGoal() != null) {
					if (usedGoal.index != usedGoal.getNextGoal().index) {
						int[] newFinished = new int[finishedGoal.length+1];
						for (int i = 0; i < finishedGoal.length; i++) {
							newFinished[i] = finishedGoal[i];
						}
						newFinished[finishedGoal.length] = usedGoal.index;
						finishedGoal = newFinished;
						gainedGoal = gainedGoal.subtract(usedGoal.requirement.add(usedGoal.previousRequirements).subtract(simulatedGoals[usedGoal.index]));
					}
					usedGoal = usedGoal.getNextGoal();
				} else {
					if (takeEffect && goalMatch && barMove) {
						usedGoal.previousString = usedGoal.storedString;
					}
					allDone = true;
				}
				if (newlyCompleted) {
					for (int i = 0; i < Action.values().length; i++) {
						if (Action.values()[i].requiredGoal == previousGoal.index && Action.values()[i].requiredGoalLevel == previousGoal.tier+1) {
							if (Action.values()[i].previousAction != null) {
								addNewEntry(Action.values()[i].previousAction.name);
							} else {
								addNewEntry(Action.values()[i].name);
							}
						}
						if (previousGoal.index == 14 && currentPlaythrough.personStatus[5] == Locale.METROPOLIS) {
							addNewEntry(Action.AIRPORT.name);
						}
					}
					for (int i = 0; i < RoutineElements.values().length; i++) {
						if (RoutineElements.values()[i].requiredGoal == previousGoal.index && RoutineElements.values()[i].requiredLevel == previousGoal.tier+1) {
							addNewEntry(RoutineElements.values()[i].name);
						}
					}
				}
				if (takeEffect && barMove && currentGoal != null && currentGoal.index == previousGoal.index) {
					changeGoal(usedGoal);
				}
			}
		}
		if (numericalGoalProgress) {
			result += "\n+" + format(gainedGoal) + " goal progress";
		}
		if (takeEffect) {
			addStamina(staminaSpent.negate(), barMove);
			addHealth(healthSpent.negate(), barMove);
			if (a.relationship >= 0 && gainedRelationship.compareTo(BigInteger.ZERO) > 0) {
				addRelationshipExperience(a.relationship, gainedRelationship, barMove);
			}
			if (a.attribute >= 0 && gainedAttribute.compareTo(BigInteger.ZERO) > 0) {
				addAttributeExperience(a.attribute, gainedAttribute, barMove);
			}
			if (!a.financesCost.equals(BigInteger.ZERO)) {
				addAttributeExperience(2, financesSpent.negate(), barMove);
			}
			if (adaptiveGains.compareTo(BigInteger.ZERO) > 0) {
				addAttributeExperience(3, adaptiveGains, barMove);
			}
			if (usedGoal != null && (gainedGoal.compareTo(BigInteger.ZERO) > 0) || finishedGoal.length > 0) {
				for (int i = 0; i < finishedGoal.length; i++) {
					simulatedGoals[finishedGoal[i]] = getGoalRequirement(finishedGoal[i]);
				}
				simulatedGoals[usedGoal.index] = simulatedGoals[usedGoal.index].add(gainedGoal);
				if (barMove) {
					usedGoal.storedString = usedGoal.name + ": " + format(simulatedGoals[usedGoal.index].subtract(usedGoal.previousRequirements), usedGoal.requirement) + "/" + format(usedGoal.requirement);
					if (simulatedGoals[usedGoal.index].subtract(usedGoal.previousRequirements).compareTo(usedGoal.requirement) >= 0) {
						usedGoal.barDisplay = 0;
						usedGoal.barEnd = 0;
						usedGoal.previousString = usedGoal.storedString;
						usedGoal.storedString = "All goals complete!";
					} else {
						//usedGoal.barDisplay = 1000 - goals[usedGoal.index].subtract(usedGoal.previousRequirements).multiply(thousand).divide(usedGoal.requirement).intValue();
						if (a.availableSlot == currentTimeSlot.placement) {
							currentGoal = usedGoal;
						}
						usedGoal.barEnd = 1000 - simulatedGoals[usedGoal.index].subtract(usedGoal.previousRequirements).multiply(THOUSAND).divide(usedGoal.requirement).intValue();
					}
					if (goalMatch || !autoOn) {
						goalProgressBar.endValue = usedGoal.barEnd;
					} else {
						usedGoal.barDisplay = usedGoal.barEnd;
						if (usedGoal.nextGoal != null) {
							usedGoal.nextGoal.barDisplay = usedGoal.barDisplay;
						}
					}
				}
			}
			if (takeEffect && barMove) {
				if (staminaSpent.compareTo(BigInteger.ZERO) > 0) {
					currentPlaythrough.totalStamina = currentPlaythrough.totalStamina.add(staminaSpent);
				}
				if (healthSpent.compareTo(BigInteger.ZERO) > 0) {
					currentPlaythrough.totalHealth = currentPlaythrough.totalHealth.add(healthSpent);
				}
				if (!a.financesCost.equals(BigInteger.ZERO)) {
					currentPlaythrough.totalFinances = currentPlaythrough.totalFinances.add(financesSpent);
				}
				
				if (a == Action.HOBNOB || a == Action.FIXERTALK) {
					currentPlaythrough.duMontFeat = true;
				}
				if (a == Action.ENDURANCE) {
					currentPlaythrough.heiligFeat = true;
				}
				updateActionInfo(a);
				if (a == Action.FIXERTALK) {
					updateActionInfo(Action.HIREFIXER);
				}
			}
			a.resolutionText = result;
		} else {
			simulatedHealth = healthStorage;
		}
		return result;
	}
	
	public static WindowContents getActionFlavor(Action a) {
		WindowContents result = new WindowContents();
		switch (a) {
		case HANGOUT:
			if (recentCompletion && getGoalLevel(1, false) == 3) {
				result.attach("What are you supposed to do now?");
			} else if (currentPlaythrough.currentDay == 0) {
				result.attach("Maybe you should come here earlier tomorrow.");
			} else if (stanceRoutine() == RoutineElements.VULNERABLE) {
				result.attach("As the two of you socialize with " + hisHer(5) + " admirers, " + Tanaka() + " seems amused to notice that you're using the tricks " + heShe(5) + " taught you.\n\n");
				if (!recentCompletion) {
					result.attach("\"You might have a talent for this.\"", 5);
				}
			} else if (stanceRoutine() == RoutineElements.GENEROUS) {
				result.attach("You buy lunch for the entire group.  " + Tanaka() + " has a good time.\n\n");
				if (!recentCompletion) {
					result.attach("\"Thank you so much!\"", 5);
				}
			} else if (stanceRoutine() == RoutineElements.TOUGH) {
				result.attach(Tanaka() + " seems to be paying more attention to you.  Are tough ");
				if (currentPlaythrough.ownGender.presentation() == Gender.MALE) {
					result.attach("guys ");
				} else {
					result.attach("girls ");
				}
				result.attach(hisHer(5) + " type?\n\n");
				if (!recentCompletion) {
					result.attach("\"You seem different lately.  But I like this side of you, too.\"", 5);
				}
			} else {
				result.attach("You have a good time with " + Tanaka() + " and " + hisHer(5) + " friends.\n\n");
				if (!recentCompletion) {
					result.attach("\"This was fun, but I'd better be going now.\"", 5);
				}
			}
			break;
		case PLAYTOGETHER:
			if (recentCompletion && getGoalLevel(2, false) == 3) {
				result.attach("You might be too busy to play games together for awhile.");
			} else if (stanceRoutine() == RoutineElements.VULNERABLE) {
				result.attach("You have a heart-to-heart with " + Yumeno() + " as you play together.  " + HeShe(1) + " responds with earnest concern.\n\n");
				if (!recentCompletion) {
					result.attach("\"I don't think you should worry so much...\"", 1);
				}
			} else if (stanceRoutine() == RoutineElements.GENEROUS) {
				result.attach("You manage to get " + Yumeno() + " to accept your offer of drinks and snacks.  " + HeShe(1) + " doesn't eat much, but " + heShe(1) + " still seems really happy that you insisted on treating " + himHer(1) + ".\n\n");
				if (!recentCompletion) {
					result.attach("\"Y-You're so nice to me...\"", 1);
				}
			} else if (stanceRoutine() == RoutineElements.TOUGH) {
				result.attach("You challenge " + Yumeno() + " to some competitive games.  " + HeShe(1) + " seems to be playing you seriously.\n\n");
				if (!recentCompletion) {
					result.attach("\"A-Alright, I won't go easy on you...!\"", 1);
				}
			} else {
				if (recentCompletion && getGoalLevel(2, false) == 2) {
					result.attach("Looks like you have a bunch of new games to try out.");
				} else {
					result.attach("You play a few rounds of cooperative arcade games with " + Yumeno() + ".\n\n");
				}
				if (!recentCompletion) {
					result.attach("\"You did really well, that time!\"", 1);
				}
			}
			break;
		case GETBULLIED:
			if (currentPlaythrough.currentDay == 0) {
				result.attach("The arcade closes for the night.");
			} else if (stanceRoutine() == RoutineElements.VULNERABLE) {
				result.attach("You let " + Hashimoto() + " abuse you for awhile.  By the end, " + heShe(0) + " actually seems to be feeling guilty about it.\n\n");
				if (!recentCompletion) {
					result.attach("\"C-Come on, fight back or something!\"", 0);
				}
			} else if (stanceRoutine() == RoutineElements.TOUGH) {
				result.attach("You stoically endure " + Hashimoto() + "'s bullying.  " + HeShe(0) + " seems a little impressed with your toughness.\n\n");
				if (!recentCompletion) {
					result.attach("\"Hmph.  Not gonna react at all?  Fine.\"", 0);
				}
			} else {
				result.attach(Hashimoto() + " harasses you until the arcade staff throw " + himHer(0) + " out again.\n\n");
				if (!recentCompletion) {
					result.attach("\"Damn it, I'm not done with you yet...\"", 0);
				}
			}
			break;
		case DAYDREAMMORNING:
		case DAYDREAMNOON:
		case DAYDREAMAFTERNOON:
		case DAYDREAMEVENING:
		case METDREAMMORNING:
		case METDREAMNOON:
		case METDREAMAFTERNOON:
		case METDREAMEVENING:
			result.attach("You allow your imagination to carry you to another world.");
			break;
		case MEETUP:
			if (recentCompletion && getGoalLevel(1, false) == 3) {
				result.attach("What are you supposed to do now?");
			} else if (stanceRoutine() == RoutineElements.VULNERABLE) {
				result.attach("You use your time alone with " + Tanaka() + " to charm " + himHer(5) + " as best you can.  It seems to be working?\n\n");
				if (!recentCompletion) {
					result.attach("\"It's really nice to start my day by seeing you.\"", 5);
				}
			} else if (stanceRoutine() == RoutineElements.GENEROUS) {
				result.attach("You bring " + Tanaka() + " some small presents.  " + HeShe(5) + " seems very happy to receive them.\n\n");
				if (!recentCompletion) {
					result.attach("\"You're so sweet!\"", 5);
				}
			} else if (stanceRoutine() == RoutineElements.TOUGH) {
				result.attach("You help " + Tanaka() + " get ready and then head out together.  " + HeShe(5) + "'s happy to rely on you.\n\n");
				if (!recentCompletion) {
					result.attach("\"Having you around is really reassuring.\"", 5);
				}
			} else {
				result.attach("\"You walk " + Tanaka() + " to the usual hangout spot.\n\n");
				if (!recentCompletion) {
					result.attach("\"Well, I suppose it's time to head out.\"", 5);
				}
			}
			break;
		case BARTEND:
			if (stanceRoutine() == RoutineElements.GENEROUS) {
				result.attach("You aren't too aggressive about fishing for tips - best not to come across as greedy.");
			} else {
				result.attach("You serve some drinks and collect some tips.");
			}
			break;
		case BARTENDEARLY:
			if (stanceRoutine() == RoutineElements.FOCUSED) {
				result.attach("You work fast, getting the bar ready and then delivering orders as quickly as the customers can make them.");
			} else {
				result.attach("You help get the bar ready, then start serving the first customers of the night.");
			}
			break;
		case BARTENDLATE:
			if (stanceRoutine() == RoutineElements.TOUGH) {
				result.attach("You take a firm hand with the drunken patrons who are reluctant to call it a night.");
			} else {
				result.attach("You serve the last few patrons and herd them outside at closing time.");
			}
			break;
		case DANCE:
			if (equipmentRoutine() == RoutineElements.EYECATCHING || equipmentRoutine() == RoutineElements.OSTENTATIOUS) {
				result.attach("With how well you're dressed, you naturally become the focus of the dance floor.  " + DuMont() + " is only one of many who are watching your every move.");
			} else {
				result.attach("You join the nightclub's other patrons on the dance floor.  " + currentPlaythrough.personNames[2] + " watches from the VIP platform.  It's clear that she likes what she sees.");
			}
			if (!recentCompletion) {
				if (getGoalLevel(6, true) < 2) {
					result.attach("\n\n(Hm...  Perhaps I should make a spot for ", 2);
					if (currentPlaythrough.ownGender.presentation() == Gender.MALE) {
						result.attach("him...)", 2);
					} else {
						result.attach("her...)", 2);
					}
				} else {
					result.attach("\n\n(I wonder how ", 2);
					if (currentPlaythrough.ownGender.presentation() == Gender.MALE) {
						result.attach("he's doing...)", 2);
					} else {
						result.attach("she's doing...)", 2);
					}
				}
			}
			break;
		case DANCEEARLY:
			if (dietRoutine() == RoutineElements.MOSTLYCOFFEE) {
				result.attach("You chug some coffee to give you the energy to stay on the dance floor.");
			} else {
				result.attach("You take to the dance floor and socialize with your peers.");
			}
			break;
		case DANCELATE:
			if (stanceRoutine() == RoutineElements.GENEROUS) {
				result.attach("After closing time, you buy some snacks for your friends and hang out with them for a little while before sending them home.");
			} else {
				result.attach("You stay until closing time.  None of your friends want to leave before you do.");
			}
			break;
		case ASKFORHELP:
			if (getGoalLevel(6, false) == 0) {
				result.attach("You're too tired to stay for long.");
			} else {
				if (recentCompletion && getGoalLevel(6, true) == 0) {
					result.attach("It's time to decide what you care about most.");
				} else if (stanceRoutine() == RoutineElements.VULNERABLE) {
					result.attach("You share your difficulties with " + DuMont() + ", using every trick " + Tanaka() + " taught you to elicit sympathy.  It seems to be working.");
				} else {
					result.attach("You discuss your problems with " + DuMont() + ".  Even though " + heShe(2) + " isn't willing to help directly, " + heShe(2) + " does treat you to a good meal, so that frees up a bit of your budget.");
				}
				if (!recentCompletion) {
					if (getGoalLevel(28, true) == 0) {
						result.attach("\n\n\"You should focus more on your own happiness.\"", 2);
					} else {
						result.attach("\n\n\"To think that your friend's abduction would be linked to some vast conspiracy...  Frankly, I feel like I'm out of my depth here.\"", 2);
					}
				}
			}
			break;
		case LOITER:
			if (getGoalLevel(4, true) == 0) {
				result.attach("You spend some time getting to know " + Tanaka() + "'s admirers.  Seems like most of them just like the idea of following somebody.");
			} else {
				result.attach("You spend some time with your own little group of admirers.");
			}
			break;
		case PLAYLATE:
			if (recentCompletion && getGoalLevel(2, true) == 1) {
				result.attach("You're looking forward to eating " + Yumeno() + "'s cooking again.");
			} else if (recentCompletion && getGoalLevel(2, true) == 2) {
				result.attach("You might be too busy to play games together for awhile.");
			} else if (stanceRoutine() == RoutineElements.TOUGH) {
				result.attach("You play some competitive games against " + Yumeno() + ", and you both get so engaged that you're surprised when you hear that it's already closing time.");
			} else {
				result.attach("You and " + Yumeno() + " keep playing until the arcade closes.");
			}
			if (!recentCompletion) {
				if (currentPlaythrough.currentDay >= classStartDay) {
					result.attach("\n\n\"I'd better head home.  I don't like to stay up too late.\"", 1);
				} else {
					result.attach("\n\n\"If we play this one back here, " + Hashimoto() + " probably won't find us.\"", 1);
				}
			}
			break;
		case PLAYCONSOLE:
			if (stanceRoutine() == RoutineElements.VULNERABLE) {
				result.attach("You let " + Yumeno() + " teach you how to play some of " + hisHer(1) + " older games.  " + HeShe(1) + " seems to enjoy being able to talk on a subject " + heShe(1) + "'s confident about.");
			} else {
				result.attach("You and " + Yumeno() + " play together until " + heShe(1) + " notices that it's Arcade Infinity's opening time.");
			}
			if (!recentCompletion) {
				if (currentPlaythrough.weeklyActions[(weekDayNumber()+6)%7][1] == Action.HANGOUT && currentPlaythrough.goals[8].compareTo(BigInteger.valueOf(3000)) >= 0) {
					result.attach("\n\n\"Did you have fun with " + Tanaka() + " yesterday?\"", 1);
				} else {
					result.attach("\n\n\"D-Do you want to come to the arcade with me?\"", 1);
				}
			}
			break;
		case CONSOLEEARLY:
			if (currentPlaythrough.weeklyActions[(weekDayNumber()+6)%7][5] == Action.SLEEPOVER) {
				result.attach("When you get up, " + Yumeno() + " is already awake.  The two of you immediately jump into a game together.");
			} else {
				result.attach("You head over to " + Yumeno() + "'s house early in the morning and immediately start playing console games together.");
			}
			if (!recentCompletion) {
				if (equipmentRoutine() == RoutineElements.EYECATCHING) {
					result.attach("\n\n\"Wow...!  Y-You look... r-really good today...\"", 1);
				} else {
					result.attach("\n\n\"Heheh, I set my alarm to make sure I wouldn't miss you...\"", 1);
				}
			}
			break;
		case PICKAFIGHT:
			if (equipmentRoutine() == RoutineElements.HANDHELDGAMES) {
				result.attach("You get " + Hashimoto() + "'s attention, then start playing some handheld games while " + heShe(0) + "'s trying to talk to you.  " + HeShe(0) + " gets pretty angry.");
				if (!recentCompletion) {
					result.attach("\n\n\"Wh-What the fuck do you think you're doing!?  I'm talking to you!\"", 0);
				}
			} else if (equipmentRoutine() == RoutineElements.EYECATCHING) {
				result.attach("Dressed like this, you stick out from the crowd enough that " + Hashimoto() + " finds you immediately.");
				if (!recentCompletion) {
					result.attach("\n\n\"I'm not gonna hold back just 'cause you aren't dressed for a fight...\"", 0);
				}
			} else {
				result.attach("This time, you're the one to initiate the confrontation with " + Hashimoto() + ".");
				if (!recentCompletion) {
					result.attach("\n\n\"Hah, saves me the trouble of tracking you down!\"", 0);
				}
			}
			break;
		case DATE:
			if (stanceRoutine() == RoutineElements.GENEROUS) {
				result.attach("You take " + Tanaka() + " out to a decently expensive restaurant.");
			} else {
				result.attach("You and " + Tanaka() + " find a secluded spot to hang out.");
			}
			if (!recentCompletion) {
				if (equipmentRoutine() == RoutineElements.OSTENTATIOUS) {
					result.attach("\n\n\"I think the other " + guyGirl(5) + "s are envious of me for being with you.  What a funny feeling.\"", 5);
				} else {
					result.attach("\n\n\"Hehe, you sure know how to make a " + guyGirl(5) + " feel special...\"", 5);
				}
			}
			break;
		case CLEANUP:
			if (getGoalLevel(9, true) == 0) {
				result.attach("Before heading out for the day, the two of you do some cleaning.");
			} else if (recentCompletion) {
				result.attach(Yumeno() + " seems hopeful that you'll be visiting " + himHer(1) + " more often now.");
			} else {
				result.attach("You make sure to leave " + Yumeno() + "'s house a little cleaner than it was when you got there.");
			}
			if (!recentCompletion) {
				if (stanceRoutine() == RoutineElements.TOUGH) {
					result.attach("\n\n\"Phew, sometimes it's hard to keep up with you...\"", 1);
				} else {
					result.attach("\n\n\"You've helped me plenty.  Let's call it a day, alright?\"", 1);
				}
			}
			break;
		case CLEANEARLY:
			if (getGoalLevel(9, true) == 0) {
				result.attach("You and " + Yumeno() + " get to work right away on cleaning up " + hisHer(1) + " house.");
			} else if (recentCompletion) {
				result.attach("Now, what should you do with the rest of your day?");
			} else {
				result.attach("You and " + Yumeno() + " start off by cleaning up some of the lesser-used rooms of the house.");
			}
			if (!recentCompletion) {
				if (stanceRoutine() == RoutineElements.GENEROUS) {
					result.attach("\n\n\"Y-You should let me help more!\"", 1);
				} else {
					result.attach("\n\n\"Good morning!  And thanks again for the help...\"", 1);
				}
			}
			break;
		case VANDALISM:
			if (equipmentRoutine() == RoutineElements.HANDHELDGAMES) {
				result.attach("You hang out and play handheld games while chatting with " + Hashimoto() + ".");
			} else {
				result.attach("You chat with " + Hashimoto() + " while causing some minor mischief together.");
			}
			if (!recentCompletion) {
				if (stanceRoutine() == RoutineElements.FOCUSED) {
					result.attach("\n\n\"Heh.  Talking with you is never a waste of time.\"", 0);
				} else {
					result.attach("\n\n\"Let's leave our mark on the city.\"", 0);
				}
			}
			break;
		case VANDALISMLATE:
			if (dietRoutine() == RoutineElements.MOSTLYCOFFEE) {
				result.attach(Hashimoto() + " seems impressed that you've managed to stay up this late.");
			} else {
				result.attach("You stay up until daybreak with " + Hashimoto() + ", though you know you'll be regretting it in a few hours.");
			}
			if (!recentCompletion) {
				if (stanceRoutine() == RoutineElements.VULNERABLE) {
					result.attach("\n\n\"Are you gonna be alright tomorrow?  Or, I guess now it's 'today'.\"", 0);
				} else {
					result.attach("\n\n\"The sun's coming up.  Time really flies, doesn't it?\"", 0);
				}
			}
			break;
		case HISTORY:
			if (stanceRoutine() == RoutineElements.FOCUSED) {
				result.attach("You pay close attention to the lesson, seriously thinking about how it might be applicable to your own life.");
			} else {
				result.attach("You do your best to stay awake through the lesson.");
			}
			break;
		case MATH:
			if (stanceRoutine() == RoutineElements.VULNERABLE) {
				result.attach("You swallow your pride and ask " + Yumeno() + " for help understanding the lesson.");
			} else {
				result.attach(Yumeno() + " is happy to chat about the practical applications of math.");
			}
			if (!recentCompletion) {
				if (equipmentRoutine() == RoutineElements.HANDHELDGAMES) {
					result.attach("\n\n\"Oh!  Today's lesson should actually help with the game you're playing.\"", 1);
				} else {
					result.attach("\n\n\"See?  The earlier you change the derivative, the greater the effect on the function's final value.\"", 1);
				}
			}
			break;
		case GYM:
			if (equipmentRoutine() == RoutineElements.EYECATCHING) {
				result.attach("You slack off and chat with " + Tanaka() + ".  Apparently " + heShe(5) + " has some ideas about helping you put together a more attractive but still gym-suitable outfit.");
			} else {
				result.attach("You have the strangest feeling that " + Tanaka() + " is showing off for you as " + heShe(5) + " exercises.");
			}
			if (!recentCompletion) {
				if (equipmentRoutine() == RoutineElements.HANDHELDGAMES) {
					result.attach("\n\n(Is that game really so interesting?  Why isn't " + heShe(-1) + " watching me?)", 5);
				} else {
					result.attach("\n\n\"Feels so good to get out here and move my body!\"", 5);
				}
			}
			break;
		case ALLOUT:
			if (stanceRoutine() == RoutineElements.FOCUSED) {
				result.attach("You push your body to its absolute limit.  " + Tanaka() + " cheers you on.");
			} else {
				result.attach("Having " + Tanaka() + " here makes it easier to find the motivation to exercise.");
			}
			if (!recentCompletion) {
				if (stanceRoutine() == RoutineElements.VULNERABLE) {
					result.attach("\n\n\"You can do it!  Fight fight fight!\"", 5);
				} else {
					result.attach("\n\n\"Here, you can have some of my water.\"");
				}
			}
			break;
		case GYMREGULAR:
			if (stanceRoutine() == RoutineElements.FOCUSED) {
				result.attach("You work out hard.  You'll need to be in the best possible shape for what you need to do.");
			} else {
				result.attach("Now that " + Tanaka() + "'s gone, it feels like there's no point in being here.");
			}
			break;
		case RESCUETANAKA:
			if (getGoalLevel(12, false) > 0) {
				result.attach("You have a plan.");
			} else {
				result.attach("You're too tired to wait for " + Tanaka() + " to finish what " + heShe(5) + "'s doing, so you leave early.  It's only later that you find out that " + heShe(5) + " never made it home.");
			}
			break;
		case MANSIONMORNING:
			result.attach("You're already working when the sun comes up.");
			break;
		case MANSIONNOON:
			result.attach("You keep working with only a brief break for lunch.");
			break;
		case MANSIONAFTERNOON:
			result.attach("By the time you're done with your shift, the sun is well on its way down to the horizon.");
			break;
		case MANSIONEVENING:
			result.attach(DuMont() + "'s home, but you're too busy to chat with " + himHer(2) + ".");
			break;
		case MANSIONMIDNIGHT:
			result.attach("The mansion is quieter now, but there are still things that need to be done.");
			break;
		case MANSIONPREDAWN:
			result.attach("The sky begins to lighten, and tomorrow's morning shift shows up to relieve you.");
			break;
		case DUMONTAFTERNOON:
			if (stanceRoutine() == RoutineElements.GENEROUS) {
				result.attach("You show off for " + DuMont() + ", pushing yourself to complete your work and return to " + hisHer(2) + " side as quickly as possible.");
			} else {
				result.attach("You accompany " + DuMont() + " downtown and complete the errands " + heShe(2) + " gives you.");
			}
			if (!recentCompletion) {
				if (stanceRoutine() == RoutineElements.VULNERABLE) {
					result.attach("\n\n\"Do you need to sit down for a bit?  I don't want to overwork you...\"", 2);
				} else {
					result.attach("\n\n\"You really are such a hardworking " + boyGirl(-1) + "\"", 2);
				}
			}
			break;
		case HIREFIXER:
			if (stanceRoutine() == RoutineElements.VULNERABLE) {
				result.attach("You share your story with " + Jackal() + ".  It takes time that " + heShe(3) + "'d otherwise be spending on the hunt for " + Tanaka() + ", but at least " + heShe(3) + " seems to sympathize more with you by the end.");
			} else {
				result.attach("You discuss the case with " + Jackal() + " before sending " + himHer(3) + " off to search.");
			}
			if (!recentCompletion) {
				if (stanceRoutine() == RoutineElements.FOCUSED) {
					result.attach("\n\n\"Thank you for your input.  This may prove useful.\"", 3);
				} else {
					result.attach("\n\n\"I should head out.\"", 3);
				}
			}
			break;
		case JACKALTRAINING:
			if (stanceRoutine() == RoutineElements.GENEROUS) {
				result.attach("You do your best to be a good student for " + Jackal() + ".");
			} else {
				result.attach("You try to learn something from having " + Jackal() + " beat you up.");
			}
			if (!recentCompletion) {
				if (simulatedStamina.compareTo(BigInteger.ZERO) > 0) {
					result.attach("\n\n\"We had best stop here if you want to be able to walk in the morning.\"", 3);
				} else {
					result.attach("\n\n\"Take this seriously.  There is no point in training if you are already half-asleep by the time you get here.\"", 3);
				}
			}
			break;
		case GAMEDESIGN:
			if (stanceRoutine() == RoutineElements.SELFDESTRUCTIVE) {
				result.attach("You pull out all the stops and work hard on the game.");
			} else {
				result.attach("You and " + Yumeno() + " work together to make something worth playing.");
			}
			if (!recentCompletion) {
				int level = getGoalLevel(26, false);
				if (level == 0) {
					result.attach("\n\n\"Why isn't the text showing up?  Did we set the foreground and the background to the same color again?\"", 1);
				} else if (level == 1) {
					result.attach("\n\n\"The first game was good, but maybe this one should actually have some, um, gameplay...\"", 1);
				} else if (level == 2) {
					result.attach("\n\n\"We put so many options in the last game, but everyone just used the same two or three.  Game balance is hard...\"", 1);
				} else if (level == 3) {
					result.attach("\n\n\"Hold on, one of our players beat my high score.  I can't let this stand...\"", 1);
				} else if (level == 4) {
					result.attach("\n\n\"Check it out, we got more fanart of our last game!\"", 1);
				} else if (level == 5) {
					result.attach("\n\n\"I want to make the NPC reactions as realistic and believable as possible...\"", 1);
				} else if (level == 6) {
					result.attach("\n\n\"The NPCs should all go about their daily lives even while the player isn't watching!\"", 1);
				} else if (level == 7) {
					result.attach("\n\n\"With this, the NPCs' actions should be tracked in as much depth as the player's own actions.\"", 1);
				} else if (level == 8) {
					result.attach("\n\n\"Some of these interactions between NPCs are getting pretty deep.  I keep being surprised by what they do in order to fulfill their programmed 'desires'.\"", 1);
				} else if (level == 9) {
					result.attach("\n\n\"I tried adding the ability for NPCs to feel 'bored', but then they started behaving in some pretty bizarre ways.\"", 1);
				} else if (level == 10) {
					result.attach("\n\n\"Woah, the NPCs are actually starting to make little 'games' of their own...\"", 1);
				} else if (level == 11) {
					result.attach("\n\n\"This NPC came up with a cool game idea.  Maybe we can use it in our next game.\"", 1);
				} else if (level == 12) {
					result.attach("\n\n\"Hey, this NPC is making a simulation game... which seems pretty similar to the game it's in.\"", 1);
				} else if (level == 13) {
					result.attach("\n\n\"This NPC just made a game... where one of the NPCs is working on making a game...\"", 1);
				}
			}
			break;
		case STANDGUARD:
			if (stanceRoutine() == RoutineElements.FOCUSED) {
				result.attach("You stay cold and professional, doing the job without any mistakes, and you earn yourself a bonus.");
			} else if (getAttributeLevel(3, false).compareTo(BigInteger.valueOf(5)) >= 0) {
				result.attach("The local troublemakers can tell that they're better off not trying to bother you.");
			} else {
				result.attach("You get into a few scuffles with troublemakers who think they can drive you off.");
			}
			break;
		case RECEIVETREATMENT:
			if (stanceRoutine() == RoutineElements.GENEROUS) {
				result.attach("You bribe one of the security guards to let you poke around the laboratory while you're supposed to be laying in bed.");
			} else if (getGoalLevel(17, true) > 0) {
				result.attach("You relax as the lab technicians stitch you up.");
			} else {
				result.attach("You make smalltalk with the lab technicians as they stitch you up, asking them about what other procedures they offer here.");
			}
			break;
		case VOLUNTEER:
			if (recentCompletion && getGoalLevel(18, true) == 0) {
				result.attach("You bring the package home.");
			} else if (stanceRoutine() == RoutineElements.GENEROUS) {
				result.attach("You open up to " + Heilig() + " and give " + himHer(4) + " all the information " + heShe(4) + " asks for.");
			} else {
				result.attach("You show up and do as " + Heilig() + " tells you.");
			}
			if (!recentCompletion) {
				if (stanceRoutine() == RoutineElements.VULNERABLE) {
					result.attach("\n\n\"You've already been through so much...\"");
				} else {
					result.attach("\n\n\"Thank you.  This is enough for tonight.\"");
				}
			}
			break;
		case ENDURANCE:
			if (simulatedStamina.equals(BigInteger.ZERO)) {
				result.attach("You exercise to the point of passing out.  " + Heilig() + " stays around to make sure you're alright.");
			} else {
				result.attach("You exercise for a couple of hours.  " + Heilig() + " seems shocked that you can handle it.");
			}
			if (!recentCompletion) {
				if (stanceRoutine() == RoutineElements.SELFDESTRUCTIVE) {
					result.attach("\n\n\"Impossible...  This makes no sense at all...\"", 4);
				} else {
					result.attach("\n\n\"Another anomalous data point...\"", 4);
				}
			}
			break;
		case ARGUE:
			if (stanceRoutine() == RoutineElements.SELFDESTRUCTIVE) {
				result.attach("As you live on the edge, your arguments can tap into the raw force of your unfiltered experiences.");
			} else {
				result.attach("Keeping up with " + Hashimoto() + "'s arguments is hard work.");
			}
			if (!recentCompletion) {
				if (stanceRoutine() == RoutineElements.FOCUSED) {
					result.attach("\n\n\"You say that " + Yumeno() + " taught you to think like that?  Hmph, maybe " + heShe(1) + "'s not such a wimp after all...\"", 0);
				} else {
					result.attach("\n\n\"Here.  Read this paragraph and tell me what you think of it.\"", 0);
				}
			}
			break;
        case DUMONTNOON:
            if (stanceRoutine() == RoutineElements.GENEROUS) {
                result.attach("You use the alone time with " + DuMont() + " to get to know " + himHer(2) + " better.");
            } else {
                result.attach("You serve " + DuMont() + " breakfast and make some light conversation with " + himHer(2) + " while " + heShe(2) + " eats.");
            }
            if (!recentCompletion) {
                if (stanceRoutine() == RoutineElements.VULNERABLE) {
                    result.attach("\n\n\"You haven't been overworking yourself, have you?  Here, sit next to me and have a few bites for yourself.\"", 2);
                } else {
                    result.attach("\n\n\"So, what are your plans for today?\"", 2);
                }
            }
            break;
		case INFILTRATEEARLY:
			if (stanceRoutine() == RoutineElements.SELFDESTRUCTIVE) {
				result.attach("You throw yourself into your role completely.");
			} else {
				result.attach("You show up before everyone else and poke around a bit before getting out of there.");
			}
			break;
		case INFILTRATE:
			if (stanceRoutine() == RoutineElements.SELFDESTRUCTIVE) {
				result.attach("Everyone's busiest at this hour, and so are you.");
			} else {
				result.attach("After everyone has gotten immersed in their research, you show up and move unnoticed among them.");
			}
			break;
		case INFILTRATELATE:
			if (stanceRoutine() == RoutineElements.SELFDESTRUCTIVE) {
				result.attach("You stay late, helping the actual scientists with their work.");
			} else {
				result.attach("You show up after most of the scientists have gone home, allowing you to act with minimal scrutiny.");
			}
			break;
		case HOBNOB:
			if (stanceRoutine() == RoutineElements.GENEROUS) {
				result.attach("As the socialites tell each other about their problems, you listen intently and try to interject with helpful advice.");
			} else {
				result.attach("You play along with " + DuMont() + "'s plan, allowing everyone to get accustomed to seeing you around the country club.");
			}
			if (!recentCompletion) {
				if (equipmentRoutine() == RoutineElements.EYECATCHING) {
					result.attach("\n\n\"I detect a hint of envy in the glances of my peers, and I believe you're the cause.\"", 2);
				} else {
					result.attach("\n\n\"I do enjoy having you here with me.\"", 2);
				}
			}
			break;
		case FIXERTALK:
			if (stanceRoutine() == RoutineElements.FOCUSED) {
				result.attach("You listen intently as " + Jackal() + " gives you advice.");
			} else {
				result.attach("You and " + Jackal() + " chat a bit about " + hisHer(3) + " work.");
			}
			if (!recentCompletion) {
				if (equipmentRoutine() == RoutineElements.LARCENY) {
					result.attach("\n\n\"You really brought lockpicks to a place like this?  Hmph...  I guess I should take this chance to show you how to use them.\"", 3);
				} else {
					result.attach("\n\n\"I cannot really demonstrate any moves for you here, but at least I can explain the theory.\"", 3);
				}
			}
			break;
		case SEARCHTOGETHER:
			if (stanceRoutine() == RoutineElements.SELFDESTRUCTIVE) {
				result.attach("You throw yourself into the search with almost suicidal abandon.");
			} else {
				result.attach("You act as " + Jackal() + "'s backup, enabling " + himHer(3) + " to search less cautiously.");
			}
			if (!recentCompletion) {
				if (getAttributeLevel(3, false).compareTo(BigInteger.valueOf(4)) < 0) {
					result.attach("\n\n\"Pace yourself.  You will not be rescuing anybody if you are dead.\"", 3);
				} else {
					result.attach("\n\n\"We are making progress.  Good work.\"", 3);
				}
			}
			break;
		case LANGUAGEMORNING:
			result.attach("Just how many grammatical cases does a language need?");
			break;
		case LANGUAGENOON:
			result.attach("You must refer to chairs as feminine, but couches as masculine.  Apparently this made sense to somebody.");
			break;
		case LANGUAGEAFTERNOON:
			result.attach("Trying to learn about all the rules regarding stressed vowels is stressful.");
			break;
		case LANGUAGEEVENING:
			result.attach("In order to achieve fluency, you need to memorize all the 'irregulars', which is linguistic terminology for 'nonsensical rules which only serve to trip up people trying to learn the language'.");
			break;
		case LANGUAGEMIDNIGHT:
			result.attach("Apparently it's more polite to talk to somebody in the third person, as if they aren't even there, which feels pretty backwards.");
			break;
		case LANGUAGEPREDAWN:
			result.attach("As you study vocabulary, you notice the sun filtering in through the blinds.");
			break;
		case LANGUAGECOURSE:
			if (stanceRoutine() == RoutineElements.GENEROUS) {
				result.attach("You buy a gift for your instructor to show your appreciation.");
			} else {
				result.attach("Having an actual human to coach you through the learning process is quite helpful.");
			}
			break;
		case WORKTOGETHER:
			if (stanceRoutine() == RoutineElements.TRIUMPHANT) {
				result.attach("Now that you've seen the Metropolis, the jobs around here don't seem so scary.");
			} else {
				result.attach("You join " + Jackal() + " on " + hisHer(3) + " usual fixer work.");
			}
			if (!recentCompletion) {
				if (stanceRoutine() == RoutineElements.SELFDESTRUCTIVE) {
					result.attach("\n\n\"You put yourself out there to protect me, so you should take a larger cut of the paycheck.  Do not argue.\"", 3);
				} else {
					result.attach("\n\n\"Another easy payday.  Good work.\"", 3);
				}
			}
			break;
		case SERIOUSTRAINING:
			if (stanceRoutine() == RoutineElements.SELFDESTRUCTIVE) {
				result.attach("You put your body on the line in order to help " + Jackal() + " deal with some of the rougher local criminal elements.");
			} else {
				result.attach("You help " + Jackal() + " deter the local gangs from getting involved in the trade of sex and drugs.");
			}
			if (!recentCompletion) {
				if (stanceRoutine() == RoutineElements.TRIUMPHANT) {
					result.attach("\n\n\"You have been different ever since you got back.  In a good way, I think.\"", 3);
				} else {
					result.attach("\n\n\"Thank you for the help.  Lately, the gangs have been getting bold enough to start targeting children.\"", 3);
				}
			}
			break;
		case AIRPORT:
			if (loopActionFirstUsed(Action.FLYTOMETROPOLIS, currentPlaythrough) >= 0) {
				result.attach("You're getting used to going through security.");
			} else if (currentPlaythrough.weeklyActions[weekDayNumber()][1] != Action.FLYTOMETROPOLIS) {
				result.attach("You have no idea what you're doing here.");
			} else if (getGoalLevel(23, false) > 0) {
				result.attach("When " + Hashimoto() + " sees you off at the airport, " + heShe(0) + "'s cracking jokes about how you'll have to be sure to come back before " + heShe(0) + " turns 30.  Seems " + heShe(0) + "'s in good spirits.");
			} else if (getGoalLevel(3, false) >= 3) {
				result.attach(Hashimoto() + " sees you off at the airport.  " + HeShe(0) + " seems oddly emotional, as if " + heShe(0) + " doesn't expect to see you again.  Maybe " + heShe(0) + " doesn't have much faith in your chances.");
			} else {
				result.attach("You go through security alone.  It's a bit lonely.");
			}
			break;
		case FLYTOMETROPOLIS:
			if (loopActionFirstUsed(Action.FLYTOMETROPOLIS, currentPlaythrough) >= 0) {
				result.attach("Once again, your hometown shrinks away below you.");
			} else if (getGoalLevel(2, false) < 7) {
				result.attach(Yumeno() + " actually refused to come to the airport to say goodbye.  The last time you saw " + himHer(1) + ", " + heShe(0) + " stormed off in a tearful huff, calling you a fool for leaving.  Hopefully you'll be able to mend your relationship when you get back.");
			} else {
				result.attach("Even though " + Yumeno() + " agreed to help you prepare, " + heShe(1) + " still seemed sad to see you go.  Maybe you can make it up to " + himHer(1) + " when you get back.");
			}
			break;
		case METROPOLISFLIGHTONE:
			if (loopActionFirstUsed(Action.FLYTOMETROPOLIS, currentPlaythrough) >= 0) {
				result.attach("You relax and pick out an in-flight movie.");
			} else {
				result.attach("With " + DuMont() + "'s help, you managed to get your papers in order ahead of time.  There shouldn't be any trouble getting through customs when you land.");
			}
			break;
		case METROPOLISFLIGHTTWO:
			if (loopActionFirstUsed(Action.FLYTOMETROPOLIS, currentPlaythrough) >= 0) {
				result.attach("You make smalltalk with the other passengers.");
			} else {
				result.attach(Jackal() + " was full of tips about how to handle yourself on the streets of an unfamiliar country.  And " + heShe(3) + " made sure you knew that you could call " + himHer(3) + " for more advice anytime.");
			}
			break;
		case METROPOLISFLIGHTTHREE:
			if (loopActionFirstUsed(Action.FLYTOMETROPOLIS, currentPlaythrough) >= 0) {
				result.attach("Even with practice, sleeping on a plane isn't easy.");
			} else {
				result.attach("Your nerves make it difficult to sleep.");
			}
			break;
		case METROPOLISFLIGHTFOUR:
			if (loopActionFirstUsed(Action.FLYTOMETROPOLIS, currentPlaythrough) >= 0) {
				result.attach("And the quality of the sleep is never great.");
			} else {
				result.attach("Eventually, you do manage to get some shuteye.");
			}
			break;
		case METROPOLISFLIGHTFIVE:
			if (loopActionFirstUsed(Action.METROPOLISFLIGHTFIVE, currentPlaythrough) >= 0) {
				result.attach("You're almost at the layover, so there's no point in trying to get back to sleep.");
			} else {
				result.attach("You're definitely going to be jetlagged by the time you get there.  Maybe you should have factored that into your rescue plans.");
			}
			break;
		case METROPOLISFLIGHTSIX:
			if (loopActionFirstUsed(Action.METROPOLISFLIGHTFIVE, currentPlaythrough) >= 0) {
				result.attach("At least you don't have to go through security again.");
			} else {
				result.attach("It's your first time in an unfamiliar city.  But you won't have the chance to get familiar with this one.");
			}
			break;
		case METROPOLISFLIGHTSEVEN:
			if (loopActionFirstUsed(Action.METROPOLISFLIGHTFIVE, currentPlaythrough) >= 0) {
				result.attach("You take the chance to stretch your legs.");
			} else {
				result.attach("You force yourself to eat something at one of the airport restaurants.  You'll need your strength.");
			}
			break;
		case METROPOLISFLIGHTEIGHT:
			if (loopActionFirstUsed(Action.METROPOLISFLIGHTFIVE, currentPlaythrough) >= 0) {
				result.attach("This flight is shorter, thankfully.");
			} else {
				result.attach("This is it.  When you land again, you'll be in the Metropolis.");
			}
			break;
		case METROPOLISFLIGHTNINE:
			if (loopActionFirstUsed(Action.METROPOLISFLIGHTFIVE, currentPlaythrough) >= 0) {
				result.attach("You should be able to get a little more sleep.");
			} else {
				if (getGoalLevel(18, false) > 0) {
					if (loopRoutineCount(RoutineElements.CANCERJUICE, currentPlaythrough) > 0) {
						result.attach(Heilig() + " sent you off with plenty of " + hisHer(4) + " 'cancer juice', so you shouldn't need to worry about running out.");
					} else {
						result.attach(Heilig() + "'s 'cancer juice' is sitting in your carry-on.  Hopefully you won't need to resort to using it.");
					}
				} else {
					result.attach("You really should try to get some sleep now, while there's nothing better to do with your time, but it's difficult.");
				}
			}
			break;
		case METROPOLISFLIGHTTEN:
			if (loopActionFirstUsed(Action.METROPOLISFLIGHTFIVE, currentPlaythrough) >= 0) {
				result.attach("Finally.  You're almost there.");
			} else {
				result.attach("When you wake from your nap, you can see the lights of the city on the nighttime horizon.");
			}
			break;
		case METROPOLISLANDING:
			if (loopActionFirstUsed(Action.METROPOLISLANDING, currentPlaythrough) >= 0) {
				result.attach("It actually feels good to be back.");
			} else {
				result.attach("As you disembark, you're already finalizing your plan in your head.");
			}
			break;
		case METAIRPORT:
			result.attach("Airport security is even worse in bigger cities.");
			break;
		case FLYHOME:
			result.attach("Soon, you'll be sleeping back in your own bed.");
			break;
		case HOMEFLIGHTONE:
			result.attach("You're in the sky again.");
			break;
		case HOMEFLIGHTTWO:
			result.attach("You do your best to cope with the boredom of the flight.");
			break;
		case HOMEFLIGHTTHREE:
			result.attach("Before you can sleep in your own bed, you'll have to sleep on the plane.");
			break;
		case HOMEFLIGHTFOUR:
			result.attach("You doze off intermittently.");
			break;
		case HOMEFLIGHTFIVE:
			result.attach("You wake up with another unfamiliar city below.");
			break;
		case HOMEFLIGHTSIX:
			result.attach("You allow yourself to be herded off the plane alongside the other passengers.");
			break;
		case HOMEFLIGHTSEVEN:
			result.attach("Time to check out the local cuisine.");
			break;
		case HOMEFLIGHTEIGHT:
			result.attach("You board the airplane which will bring you home.");
			break;
		case HOMEFLIGHTNINE:
			result.attach("It's been awhile since you've been surrounded by people speaking your mother tongue.");
			break;
		case HOMEFLIGHTTEN:
			result.attach("You doze off again.");
			break;
		case HOMELANDING:
			result.attach("You step out into familiar surroundings.");
			break;
		case RENDEZVOUS:
            if (!achievementEverEarned(currentPlaythrough, Achievement.SAVIOR)) {
                result.attach("Congratulations on clearing Release 1 of Cultivation Spiral!  You found " + Tanaka() + " on Loop " + (currentPlaythrough.loops+1) + ", Day " + (currentPlaythrough.currentDay+1) + ".  ");
                if (currentPlaythrough.loops+1 <= 4) {
                    if (currentPlaythrough.loops+1 <= devLoop && currentPlaythrough.currentDay+1 < devDay) {
                        result.attach("This beats the developer's high score!!  ");
                    } else if (currentPlaythrough.loops+1 == devLoop && currentPlaythrough.currentDay+1 == devDay) {
                        result.attach("This matches the developer's high score!  ");
                    }
                    result.attach("If you want to be included in next release's leaderboard, send your currentSave.sav file to cultivationspiral@gmail.com");
                } else {
                    result.attach("If you enjoyed the game, why not start over from Loop 1 in order to try for a better score?");
                }
            } else {
                result.attach("You meet up with " + Tanaka() + " and discuss the situation here.");
                if (!recentCompletion) {
                    result.attach("\n\n\"I still can hardly believe that you came to save me...\"", 5);
                }
            }
			break;
		case LABOREARLY:
			result.attach("You work hard for little pay.");
			break;
		case LABORLATE:
			result.attach("The workday ends, and the workers go home.");
			break;
		case JOGEARLY:
			result.attach("Somehow, the city's morning air smells a bit less rancid.");
			break;
		case JOGLATE:
			result.attach("You work up a sweat.  It feels good.");
			break;
		case CLUBEARLY:
			result.attach("You're one of the first through the club's doors.");
			break;
		case CLUB:
			result.attach("You celebrate your continued survival with some mild hedonism.");
			break;
		case CLUBLATE:
			result.attach("You shamble out into the morning light, feeling much less stressed.");
			break;
		case OFFICEMORNING:
			result.attach("You sit down in your cubicle and get to work.");
			break;
		case OFFICENOON:
			result.attach("You speak when it's your turn and remain mostly silent otherwise.");
			break;
		case OFFICEAFTERNOON:
			result.attach("You do your best to look busy.");
			break;
		case OFFICEEVENING:
			result.attach("As the other workers head home, you have more chances to slack off.");
			break;
		case PARTYEARLY:
			result.attach("You do your best to pretend to enjoy the company of your coworkers.");
			break;
		case PARTYLATE:
			result.attach("At least the refreshments are free.");
			break;
        case COMBATTHEORYMORNING:
            result.attach("You and " + Yumeno() + " get an early start to your training.");
            if (!recentCompletion) {
                result.attach("\n\n\"Now it's my turn to spend my mornings helping you!\"", 1);
            }
            break;
        case COMBATTHEORYNOON:
            result.attach("You work up a sweat under the noonday sun.");
            if (!recentCompletion) {
                result.attach("\n\n\"Keep it up!\"", 1);
            }
            break;
        case COMBATTHEORYAFTERNOON:
            result.attach("After eating the lunch " + Yumeno() + " makes for you, you get back to your training.");
            if (!recentCompletion) {
                result.attach("\n\n\"It says here that you'll need a lot more calories to keep up with this level of activity.\"", 1);
            }
            break;
        case COMBATTHEORYEVENING:
            result.attach("You continue to train even after the sun goes down.");
            if (!recentCompletion) {
                result.attach("\n\n\"Let me grab some floodlights...\"", 1);
            }
            break;
        case EXTRATHEORYMORNING:
            result.attach(Yumeno() + " looks nervous about skipping class to help you.");
            if (!recentCompletion) {
                result.attach("\n\n\"It feels like I'm doing something bad... b-but don't worry, I won't get cold feet now!\"", 1);
            }
            break;
        case EXTRATHEORYNOON:
            result.attach("This is normally when you'd have Math class together.");
            if (!recentCompletion) {
                result.attach("\n\n\"Well, it's not like I was in any danger of failing Math...\"", 1);
            }
            break;
        case EXTRATHEORYAFTERNOON:
            result.attach("While you and " + Yumeno() + " practice, you can see the students walking home from class on the nearby street.");
            if (!recentCompletion) {
                result.attach("\n\n\"Do you want to keep going?\"", 1);
            }
            break;
        case EXTRATHEORYMIDNIGHT:
            result.attach(Yumeno() + " is clearly battling with " + hisHer(1) + " own sleepiness in order to keep helping you train.");
            if (!recentCompletion) {
                result.attach("\n\n\"I-I'm still awake!\"", 1);
            }
            break;
        case EXTRATHEORYPREDAWN:
            result.attach("You and " + Yumeno() + " are already training when the sun comes up.");
            if (!recentCompletion) {
                result.attach("\n\n\"Heheh, you really weren't kidding about how much you wanted to train...\"", 1);
            }
            break;
		default:
			break;
		}
		return result;
	}
	
	public static Action getCurrentAction() {
		return currentPlaythrough.weeklyActions[weekDayNumber()][timeSlotNumber()];
	}
	
	public static Action getDisplayedAction() {
		return currentPlaythrough.currentLocale.currentSpot.currentAction;
	}
	
	public static void updateNewEntries() {
		for (int i = 0; i < currentPlaythrough.currentLocale.allSpots.length; i++) {
			boolean spotAlreadyThere = false;
			for (int j = 0; j < currentPlaythrough.progress.newEntries.length; j++) {
				if (currentPlaythrough.progress.newEntries[j].equals(currentPlaythrough.currentLocale.allSpots[i].name)) {
					spotAlreadyThere = true;
					break;
				}
			}
			for (int j = 0; !spotAlreadyThere && j < currentPlaythrough.progress.newEntries.length; j++) {
				boolean addNewEntry = false;
				for (int k = 0; k < currentPlaythrough.currentLocale.allSpots[i].allActions.length && !spotAlreadyThere && !addNewEntry; k++) {
					if (currentPlaythrough.progress.newEntries[j].equals(currentPlaythrough.currentLocale.allSpots[i].allActions[k].name)) {
						addNewEntry = true;
                        break;
					}
				}
				if (addNewEntry) {
					String[] newNewEntries = new String[currentPlaythrough.progress.newEntries.length+1];
					for (int k = 0; k < currentPlaythrough.progress.newEntries.length; k++) {
						newNewEntries[k] = currentPlaythrough.progress.newEntries[k];
					}
					newNewEntries[currentPlaythrough.progress.newEntries.length] = currentPlaythrough.currentLocale.allSpots[i].name;
					currentPlaythrough.progress.newEntries = newNewEntries;
				}
			}
		}
		for (int i = 0; i < RoutineSettings.values().length; i++) {
			boolean routineAlreadyThere = false;
			for (int j = 0; j < currentPlaythrough.progress.newEntries.length; j++) {
				if (currentPlaythrough.progress.newEntries[j].equals(RoutineSettings.values()[i].name)) {
					routineAlreadyThere = true;
					break;
				}
			}
			for (int j = 0; !routineAlreadyThere && j < currentPlaythrough.progress.newEntries.length; j++) {
				Boolean addNewEntry = false;
				for (int k = 0; k < RoutineSettings.values()[i].allElements.length && !routineAlreadyThere && !addNewEntry; k++) {
					if (currentPlaythrough.progress.newEntries[j].equals(RoutineSettings.values()[i].allElements[k].name)) {
						addNewEntry = true;
                        break;
					}
				}
				if (addNewEntry) {
					String[] newNewEntries = new String[currentPlaythrough.progress.newEntries.length+1];
					for (int k = 0; k < currentPlaythrough.progress.newEntries.length; k++) {
						newNewEntries[k] = currentPlaythrough.progress.newEntries[k];
					}
					newNewEntries[currentPlaythrough.progress.newEntries.length] = RoutineSettings.values()[i].name;
					currentPlaythrough.progress.newEntries = newNewEntries;
				}
			}
		}
		for (int i = 0; i < AchievementCategory.values().length; i++) {
			boolean categoryAlreadyThere = false;
			for (int j = 0; j < currentPlaythrough.progress.newEntries.length; j++) {
				if (currentPlaythrough.progress.newEntries[j].equals(getAchievementCategoryDisplay(AchievementCategory.values()[i]))) {
					categoryAlreadyThere = true;
					break;
				}
			}
			for (int j = 0; !categoryAlreadyThere && j < currentPlaythrough.progress.newEntries.length; j++) {
				boolean addNewEntry = false;
				for (int k = 0; k < getVisibleAchievements(AchievementCategory.values()[i]).length; k++) {
					if (currentPlaythrough.progress.newEntries[j].equals(getVisibleAchievements(AchievementCategory.values()[i])[k])) {
						addNewEntry = true;
					}
				}
				if (addNewEntry) {
					String[] newNewEntries = new String[currentPlaythrough.progress.newEntries.length+1];
					for (int k = 0; k < currentPlaythrough.progress.newEntries.length; k++) {
						newNewEntries[k] = currentPlaythrough.progress.newEntries[k];
					}
					newNewEntries[currentPlaythrough.progress.newEntries.length] = getAchievementCategoryDisplay(AchievementCategory.values()[i]);
					currentPlaythrough.progress.newEntries = newNewEntries;
				}
			}
		}
	}
	
	public static String getRoutineElementSummary(RoutineElements e) {
		String result = "";
		if (e == RoutineElements.FASTFOOD) {
			result = "Living on this stuff is supposed to decrease your life expectancy.  But in order to eat better, you need to spend time either cooking or earning money.  Which option costs the smallest chunk of your life?\n\nNo effects.";
		} else if (e == RoutineElements.HOMECOOKING) {
			result = "The more effort you put into your meals, the better they taste.\n\nAt the start of every day, restore Stamina equal to 25% of your Stamina left over from the end of the previous day.";
		} else if (e == RoutineElements.CHEAPCLOTHES) {
			result = "Some take pride in treating everyone equally, regardless of whether they look rich or poor.  Others can't afford that luxury.\n\nNo effects.";
		} else if (e == RoutineElements.EYECATCHING) {
			result = "Being the center of attention is sometimes useful, but always exhausting.\n\nx1.5 action Stamina costs, x2 relationship progress";
		} else if (e == RoutineElements.UNASSUMING) {
			result = "If your main goal is survival, then it's best to keep your head down and go with the flow.  However, some goals run contrary to survival.\n\nNo effects.";
		} else if (e == RoutineElements.TOUGH) {
			result = "It's easier to be successful when you have a positive mindset.  It's easier to have a positive mindset when you're successful.\n\nGoals gain +10 Stamina worth of progress.";
		} else if (e == RoutineElements.MOSTLYCOFFEE) {
			result = "Your body wants to be awake during the day and asleep at night.  Of course, you know what you need better than it does.\n\nAll Stamina-restoring Actions restore 30 Stamina, regardless of Max Stamina.";
		} else if (e == RoutineElements.HANDHELDGAMES) {
			result = "It's easier than ever to access stories told by people from all over the world.  But it's harder than ever to keep up with all of them.\n\nx0.5 action Stamina costs, gain 100 Stamina worth of Focus progress at the end of the day.";
		} else if (e == RoutineElements.VULNERABLE) {
			result = "Some want to protect the weak.  Some want to exploit them.  Both impulses can be used to your own advantage.\n\nRelationships gain +50 Stamina worth of progress.";
		} else if (e == RoutineElements.GENEROUS) {
			result = "A little bit of disposable income can go a long way.\n\nGoals and relationships gain +25 Stamina worth of progress.";
		} else if (e == RoutineElements.FOCUSED) {
			if (currentPlaythrough.personStatus[5] == Locale.COLLEGETOWN) {
				result = "Your life is pretty good right now.  But if things get worse, you'll be ready...";
			} else {
				result = "You'll bring " + himHer(5) + " back.";
			}
			result += "\n\nGoals, relationships, and attributes all gain +15 Stamina worth of progress.";
		} else if (e == RoutineElements.FINEDINING) {
			result = "The common wisdom says that the food enjoyed by the rich isn't actually any better than what everybody else gets to eat.  It's a comforting thing to believe.\n\nAll Stamina-restoring Actions restore double Stamina.";
		} else if (e == RoutineElements.RESTAURANT) {
			result = "Fast, cheap, good.  They say you can only pick two, but 'cheap' is a relative term.\n\nAll Stamina-restoring Actions restore double Stamina.";
		} else if (e == RoutineElements.LARCENY) {
			result = "The tools that are useful for burglary can be useful for other purposes as well.\n\nGoal progress rate +50%, and gain 100 Stamina worth of Finances progress at the end of the day.";
		} else if (e == RoutineElements.BODYARMOR) {
			result = "Your body starts getting sore when you wear this for too long.  But it still probably hurts less than getting shot.\n\nWhile Stamina remains, every 1 Health loss is converted into 3 Stamina loss (which does not grant experience).";
		} else if (e == RoutineElements.SELFDESTRUCTIVE) {
			result = "Man is both propellant and payload.\n\nWhen spending 40 or more Stamina on an action, goals and attributes gain +100 Stamina worth of progress.";
		} else if (e == RoutineElements.OSTENTATIOUS) {
			result = "The key to social success is to be so memorable that people are thinking about you even when you're not around.\n\nx1.5 action Stamina costs, and at the end of each day, all discovered relationships in the same city gain 60 Stamina worth of progress.";
		} else if (e == RoutineElements.HEALTHY) {
			result = "Everyone's body tells a story.  At this point, your story is a short one.\n\n100 maximum Health.\nAfter changing to a new Body state, it's no longer possible to return to ones higher on this list!";
		} else if (e == RoutineElements.SCARRED) {
			result = "Our bodies respond to trauma by producing tough fibrous tissue.  Our souls do the same.\n\n150 maximum Health.  x0.8 relationship progress rate.";
		} else if (e == RoutineElements.CANCERJUICE) {
			result = "This is probably less healthy than living on fast food.\n\nEvery action which restores any Stamina also restores 5 Health.";
		} else if (e == RoutineElements.TRAINED) {
			result = "If only you had already been in better shape back when this phenomenon started.\n\n125 maximum Health.  x2 Vitality experience rate.";
		} else if (e == RoutineElements.ADAPTIVE) {
			result = "What doesn't kill you makes you stronger.  Or at least, you'll be stronger after you're done healing up from being almost-killed.\n\nEvery point of Health lost from Actions is converted to 20 Stamina worth of Wetwork experience.";
		} else if (e == RoutineElements.TRIUMPHANT) {
			result = "Maybe you can relax now?\n\nEvery 1 time slot spent daydreaming is treated as 5 for the purpose of the associated achievement.";
		} else if (e == RoutineElements.LONER) {
            result = "Leaving the nest will force you to become stronger.\n\nGoals and attributes gain +35 Stamina worth of progress.";
        }
		if (!e.maxStaminaCost.equals(BigInteger.ZERO)) {
			result += "\nWhile this Routine is active, Max Stamina is decreased by " + format(e.maxStaminaCost);
		}
		if (!routineElementAllowed(e)) {
			BigInteger currentCost = currentPlaythrough.weeklyRoutine[weekDayNumber()][e.ownRoutineSettings.placement].maxStaminaCost;
			if (e.maxStaminaCost.subtract(currentCost).compareTo(maxStamina().add(currentPlaythrough.yesterdayRoutineCost).subtract(todayRoutineCost())) >= 0) {
				result += "\nMaximum Stamina is not high enough.";
			} else if (e.requiredFinances > 0 && e.requiredFinances > getAttributeLevel(2, true).intValue()) {
				result += "\nCannot be selected when Finances level is less than " + e.requiredFinances + ".";
			} else if (e == RoutineElements.TOUGH) {
				result += "\nCannot be selected when starting the day with less than 100 Stamina.";
			} else if (e == RoutineElements.VULNERABLE) {
				result += "\nCannot be selected when starting the day with more than 100 Stamina.";
			} else if (e == RoutineElements.FOCUSED) {
				result += "\nCannot be selected before a certain event occurs on Day " + (classStartDay+1) + ".";
			} else if (e == RoutineElements.SELFDESTRUCTIVE) {
				result += "\nCannot be selected when starting the day with more than 20 Health.";
			} else if (e == RoutineElements.ADAPTIVE) {
				result += "\nCannot be selected when starting the day with less than 50 Health.";
			} else if (e == RoutineElements.TRIUMPHANT) {
				result += "\nCannot be used when " + Tanaka() + "'s status is unknown.";
            } else if (e == RoutineElements.LONER) {
                result += "\nCannot be used in the College Town.";
			} else if (e.ownRoutineSettings.placement == 3) {
				result += "\nCannot return to higher Body status";
			} else {
				result += "\nCannot currently use this routine.";
			}
		} else {
			if (e == RoutineElements.TOUGH) {
				result += "\nCan only be selected when starting the day with 100 or more Stamina.";
			} else if (e == RoutineElements.VULNERABLE) {
				result += "\nCan only be selected when starting the day with 100 or less Stamina.";
			} else if (e == RoutineElements.FOCUSED) {
				result += "\nCan only be selected while " + currentPlaythrough.personNames[5] + " is missing.";
			} else if (e == RoutineElements.SELFDESTRUCTIVE) {
				result += "\nCan only be selected when starting the day with 20 or less Health.";
			} else if (e == RoutineElements.ADAPTIVE) {
				result += "\nCan only be selected when starting the day with 50 or more Health.";
			} else if (e == RoutineElements.TRIUMPHANT) {
                result += "\nCan only be selected when " + Tanaka() + "'s status is known.";
            } else if (e == RoutineElements.LONER) {
                result += "\nCan only be selected when not in the College Town.";
			} else if (e.requiredFinances > 0) {
				result += "\nCan only be selected when Finances level is " + e.requiredFinances + " or higher.";
				if (!e.financesCost.equals(BigInteger.ZERO)) {
					result += "\nCosts " + format(reducedFinancesCost(e.financesCost)) + " Finances XP (" + xpSignificance(2, reducedFinancesCost(e.financesCost)) + " current level progress) per day.";
				}
			}
		}
		return result + "\n";
	}
	
	public static String getAchievementSummary(Achievement e) {
		String result = "this is a summary for " + getAchievementDisplay(e);
		BigInteger providedScore = BigInteger.ZERO;
		if (e == Achievement.DAYDREAM) {
			BigInteger nextLevelCost = HUNDRED;
			BigInteger counter = currentPlaythrough.daydreams.multiply(HUNDRED);
			BigInteger initialValue = counter;
			while (counter.compareTo(nextLevelCost) >= 0) {
				counter = counter.subtract(nextLevelCost);
				providedScore = providedScore.add(HUNDRED);
				nextLevelCost = nextLevelCost.add(HUNDRED);
			}
			BigInteger remaining = nextLevelCost.subtract(counter);
			result = "Why spend every moment trying to achieve something?\n\nGrants Meaning of Life based on the number of time slots you've spent on the Daydream action (currently " + format(initialValue) + ").\nNext level: " + format(remaining) + " more Daydream";
			if (remaining.compareTo(HUNDRED) > 0) {
				result += "s";
			}
			result += ".";
		} else if (e == Achievement.DEVELOPMENT) {
			if (getGoalLevel(2, true) >= 6) {
				result = "You do have a story worth telling.\n\nGrants +10 Meaning of Life for every level of 'Release a game' completed.";
			} else {
				result = "Do you really have a story worth telling?\n\nUnlocked through interacting with " + currentPlaythrough.personNames[1] + ".";
			}
		} else if (e == Achievement.BELOVED) {
			result = "Everybody has a different piece of the big puzzle of reality.\n\nGrants Meaning of Life equal to the sum of your Relationship levels.";
		} else if (e == Achievement.POLYMATH) {
			result = "Being more capable is never a bad thing.\n\nGrants Meaning of Life equal to the sum of your Attribute levels.";
		} else if (e == Achievement.INDEPENDENCE) {
			if (currentPlaythrough.wealthOne) {
				result = "Being given money means that somebody considers you useful.";
			} else {
				result = "There are lots of things you want to do, and none of them are made easier by living on a stipend.";
			}
			result += "\n\nReach Lv 10 Finances.\nReward: +5 Meaning of Life";
		} else if (e == Achievement.UPPERMIDDLE) {
			if (currentPlaythrough.wealthTwo) {
				result = "You could actually live comfortably off this much money, if you didn't have more pressing concerns.";
			} else {
				result = "It's not that you're greedy.  You just need money in order to do the unreasonable things that need to be done.";
			}
			result += "\n\nReach Lv 20 Finances.\nReward: +10 Meaning of Life";
		} else if (e == Achievement.MILLIONAIRE) {
			if (currentPlaythrough.wealthThree) {
				result = "Anybody who goes from penniless to millionaire in less than a year is clearly involved in some shady business.  At least you have a good excuse for your own behavior.";
			} else {
				result = "Okay, maybe you are greedy.";
			}
			result += "\n\nReach Lv 30 Finances.\nReward: +15 Meaning of Life";
		} else if (e == Achievement.BLUEBLOOD) {
			if (currentPlaythrough.duMontFeat) {
				result = "Day " + (currentPlaythrough.currentDay+1) + ": they still don't realize that you're a commoner.";
			} else {
				result = "People go to a lot of trouble to reach the upper crust of society.  Is it worth it?";
			}
			String usedName = "???";
			if (barVisible(2) || achievementEverEarned(currentPlaythrough, e)) {
				usedName = currentPlaythrough.personNames[2];
			}
			result += "\n\nAccept " + usedName + "'s invitation to " + hisHer(2) + " country club's charity luncheon.\nReward: +5 Meaning of Life";
			if (!achievementEverEarned(currentPlaythrough, e)) {
				result += ", new " + perk();
			}
		} else if (e == Achievement.BATTLETESTED) {
			if (currentPlaythrough.jackalFeat) {
				result = "Violence is easy.  Achieving useful things with violence is hard.";
			} else {
				result = "Everybody dreams of being a badass.";
			}
			String usedName = "???";
			if (barVisible(3) || achievementEverEarned(currentPlaythrough, e)) {
				usedName = currentPlaythrough.personNames[3];
			}
			result += "\n\nEarn some battle scars while working for " + usedName + "'s friends.\nReward: +10 Meaning of Life";
			if (!achievementEverEarned(currentPlaythrough, e)) {
				result += ", new " + perk();
			}
		} else if (e == Achievement.ASSISTANT) {
			if (currentPlaythrough.heiligFeat) {
				result = "Reaching your limits is the first step toward extending them.";
			} else {
				result = "You still haven't reached your own limits.";
			}
			String usedName = "???";
			if (barVisible(4) || achievementEverEarned(currentPlaythrough, e)) {
				usedName = currentPlaythrough.personNames[4];
			}
			result += "\n\nParticipate in " + usedName + "'s endurance testing.\nReward: +10 Meaning of Life";
			if (!achievementEverEarned(currentPlaythrough, e)) {
				result += ", new " + perk();
			}
		} else if (e == Achievement.CHARMING) {
			if (currentPlaythrough.tanakaFeat) {
				if (currentPlaythrough.personStatus[5] == Locale.METROPOLIS) {
					result = "At the moment " + heShe(5) + " was taken away, " + heShe(5) + " definitely knew that you'd come after " + himHer(5) + ".";
				} else {
					result = "Suffice it to say that you've made a good impression on " + himHer(5) + ".";
				}
			} else if (currentPlaythrough.currentDay > classStartDay) {
				if (currentPlaythrough.personStatus[5] == Locale.METROPOLIS && currentPlaythrough.currentLocale != Locale.METROPOLIS) {
					result = "You still need to make " + himHer(5) + " notice you.";
				} else {
					result = "Maybe you should have spent more time with " + himHer(5) + " back when you had nothing but free time.";
				}
			} else {
				result = "It would be nice if " + heShe(5) + "'d notice you.";
			}
			result = result + "\n\nReach Lv 1 Relationship with " + currentPlaythrough.personNames[5] + " before the end of Day " + (classStartDay+1) + ".\nReward: +10 Meaning of Life";
			if (!achievementEverEarned(currentPlaythrough, e)) {
				result += ", new " + perk();
			}
		} else if (e == Achievement.INVESTIGATOR) {
			if (currentPlaythrough.saviorFeat) {
				result = "Seems like everything turned out alright in the end.";
			} else if (currentPlaythrough.investigatorFeat) {
				result = "Only one obstacle remains...";
			} else if (currentPlaythrough.currentDay > classStartDay) {
				result = "If you're going to save " + himHer(5) + ", then you first need to figure out where " + heShe(5) + " is.";
			} else {
				result = "You have a bad feeling...";
			}
			result = result + "\n\nDetermine where " + currentPlaythrough.personNames[5] + " is taken.\nReward: +5 Meaning of Life";
			if (!achievementEverEarned(currentPlaythrough, e)) {
				result += ", new " + perk();
			}
		} else if (e == Achievement.SAVIOR) {
            if (currentPlaythrough.saviorFeat) {
                result = "Even if your help wasn't as urgently needed as you thought, it doesn't change the fact that you did something pretty cool.";
            } else if (currentPlaythrough.currentDay > classStartDay) {
                result = "You can do this...";
            } else {
                result = "Why does this all seem so familiar?";
            }
            result = result + "\n\nReunite with " + currentPlaythrough.personNames[5] + " after Day " + (classStartDay + 1) + ".\nReward: +15 Meaning of Life";
            if (!achievementEverEarned(currentPlaythrough, e)) {
                result += ", new " + perk();
            }
        } else if (e == Achievement.TRUTHSEEKER) {
            if (currentPlaythrough.hashimotoFeat) {
                result = Hashimoto() + " can finally look to the future.";
            } else {
                result = "Something is preventing " + Hashimoto() + " from turning " + hisHer(0) + " gaze to the future.";
            }
            result = result + "\n\nMeet " + Heilig() + "'s protege while exploring The Tower on " + Hashimoto() + "'s behalf.\nReward: +10 Meaning of Life";
            if (!achievementEverEarned(currentPlaythrough, e)) {
                result += ", new " + perk();
            }
		} else if (e == Achievement.COLLEGETOWNDESTROYED) {
			result = "Nothing lasts forever.";
			result += "\n\nExperience ";
			if (achievementEverEarned(currentPlaythrough, e)) {
				result += "the attack on " + Locale.COLLEGETOWN.name;
			} else {
				result += "???";
			}
			result += " on Day 100\nReward: +10 Meaning of Life";
		} else if (e == Achievement.METROPOLISFALLEN) {
			result = "Out of the frying pan, and into the oven.";
			result += "\n\nExperience ";
			if (achievementEverEarned(currentPlaythrough, e)) {
				result += "the coup in the Metropolis";
			} else {
				result += "??? in the Metropolis";
			}
			result += " on Day 150\nReward: +10 Meaning of Life";
		}
		return result;
	}
	
	public static Font getStateSummaryFont() {
		Insets insets = frame.getInsets();
		int actualHeight = frame.getHeight() - insets.top - insets.bottom;
		int stateSummarySize = actualHeight/35;
		return new Font("Franklin Gothic Medium Cond", Font.PLAIN, stateSummarySize);
	}
	
	public static Spot[] getViableSpots(Locale o, TimeSlot t) {
		Spot[] keptSpots = new Spot[o.allSpots.length];
		int found = 0;
		for (int i = 0; i < keptSpots.length; i++) {
			if (getAllowedActions(o.allSpots[i], t).length > 0) {
				keptSpots[found] = o.allSpots[i];
				found++;
			}
		}
		if (found < o.allSpots.length) {
			Spot[] finalSpots = new Spot[found];
			for (int i = 0; i < found; i++) {
				finalSpots[i] = keptSpots[i];
			}
			return finalSpots;
		}
		return keptSpots;
	}
	
	public static Spot[] getAllowedSpots(Locale o, TimeSlot t) {
		Spot[] keptSpots = new Spot[o.allSpots.length];
		int found = 0;
		for (int i = 0; i < keptSpots.length; i++) {
			if (getVisibleActions(o.allSpots[i], t).length > 0) {
				keptSpots[found] = o.allSpots[i];
				found++;
			}
		}
		if (found < o.allSpots.length) {
			Spot[] finalSpots = new Spot[found];
			for (int i = 0; i < found; i++) {
				finalSpots[i] = keptSpots[i];
			}
			return finalSpots;
		}
		return keptSpots;
	}
	
	public static String[] getVisibleSpots(Locale o, TimeSlot t) {
		Spot[] named = getAllowedSpots(o, t);
		String[] names = new String[named.length];
		for (int i = 0; i < names.length; i++) {
			names[i] = named[i].name;
		}
		return names;
	}
	
	public static Action[] getAllowedActions(Spot p, TimeSlot t) {
		if (p == null || t == null) {
			return new Action[0];
		}
		Action[] keptActions = new Action[p.allActions.length];
		int found = 0;
		for (int i = 0; i < keptActions.length; i++) {
			if (actionIsAllowed(p.allActions[i], t)) {
				keptActions[found] = p.allActions[i];
				found++;
			}
		}
		if (found < p.allActions.length) {
			Action[] finalActions = new Action[found];
			for (int i = 0; i < found; i++) {
				finalActions[i] = keptActions[i];
			}
			return finalActions;
		}
		return keptActions;
	}
	
	public static Action[] getVisibleActions(Spot p, TimeSlot t) {
		if (p == null || t == null) {
			return new Action[0];
		}
		Action[] keptActions = new Action[p.allActions.length];
		int found = 0;
		for (int i = 0; i < keptActions.length; i++) {
			if (actionIsVisible(p.allActions[i], t)) {
				keptActions[found] = p.allActions[i];
				found++;
			}
		}
		if (found < p.allActions.length) {
			Action[] finalActions = new Action[found];
			for (int i = 0; i < found; i++) {
				finalActions[i] = keptActions[i];
			}
			return finalActions;
		}
		return keptActions;
	}
	
	public static Boolean classRestricted(Action a) {
        return (a.ownSpot == Spot.YUMENOSHOUSE || a.ownSpot == Spot.TANAKASHOUSE || a == Action.MEETUP || a == Action.HANGOUT || a == Action.PLAYTOGETHER) && currentPlaythrough.currentDay >= classStartDay && weekDayNumber() >= 1 && weekDayNumber() <= 5 && a.availableSlot < TimeSlot.EVENING.placement;
    }
	
	public static Boolean actionIsVisible(Action a, TimeSlot t) {
		if (a == null || t == null || a.forbidden) {
			return false;
		}
		if (a.availableSlot != t.placement) {
			return false;
		}
		if (a.ownSpot == null || a.ownSpot.ownLocale != currentPlaythrough.currentLocale) {
			return false;
		}
		if (a.ownSpot.ownLocale == Locale.METROPOLIS && a.availableSlot == 4 && currentPlaythrough.personStatus[5] == Locale.METROPOLIS && a != Action.RENDEZVOUS && getGoalLevel(28, true) == 0) {
			return false;
		}
		if (a == Action.FLYTOMETROPOLIS) {
			if (currentPlaythrough.weeklyActions[weekDayNumber()][0] == Action.AIRPORT && currentPlaythrough.personStatus[5] == Locale.METROPOLIS && getGoalLevel(14, true) > 0) {
				return true;
			}
		} else if (a == Action.FLYHOME) {
			if (currentPlaythrough.currentDay > 96) {
				return false;
			}
		} else if (a == Action.HIREFIXER || a == Action.SEARCHTOGETHER) {
			if (currentPlaythrough.personStatus[5] == Locale.COLLEGETOWN || getGoalLevel(14, true) > 0) {
				return false;
			}
		} else if (a == Action.HOTELCHECKMIDNIGHT) {
			if (currentPlaythrough.weeklyActions[weekDayNumber()][3] == Action.HOTELCHECKEVENING) {
				return false;
			}
		} else if (a == Action.HOTELCHECKPREDAWN) {
			if (currentPlaythrough.weeklyActions[weekDayNumber()][3] == Action.HOTELCHECKEVENING || currentPlaythrough.weeklyActions[weekDayNumber()][4] == Action.HOTELCHECKMIDNIGHT) {
				return false;
			}
		} else if (a == Action.HOTELMIDNIGHT) {
			if (currentPlaythrough.weeklyActions[weekDayNumber()][3] != Action.HOTELCHECKEVENING) {
				return false;
			}
		} else if (a == Action.HOTELPREDAWN) {
			if (currentPlaythrough.weeklyActions[weekDayNumber()][3] != Action.HOTELCHECKEVENING && currentPlaythrough.weeklyActions[weekDayNumber()][4] != Action.HOTELCHECKMIDNIGHT) {
				return false;
			}
		} else if (a == Action.HOTELMORNING || a == Action.HOTELNOON) {
			if (currentPlaythrough.weeklyActions[(weekDayNumber()+6)%7][3] != Action.HOTELCHECKEVENING && currentPlaythrough.weeklyActions[(weekDayNumber()+6)%7][4] != Action.HOTELCHECKMIDNIGHT && currentPlaythrough.weeklyActions[(weekDayNumber()+6)%7][5] != Action.HOTELCHECKPREDAWN) {
				return false;
			}
		}
		if (a.requiredGoal > 0) {
			if (getGoalLevel(a.requiredGoal, true) < a.requiredGoalLevel) {
				if (a.alternativeGoal < 1 || getGoalLevel(a.alternativeGoal, true) < a.alternativeRequiredLevel) {
					return false;
				}
			}
		}
		if (a.relationship >= 0 && currentPlaythrough.personStatus[a.relationship] != a.ownSpot.ownLocale) {
			return false;
		}
		if (a == Action.HISTORYSNOOZE && currentPlaythrough.currentDay < classStartDay) {
			return false;
		}
		if (a == Action.DOORUNLOCKED && currentPlaythrough.currentDay < classStartDay) {
			return false;
		}
		if (a == Action.DOORUNLOCKEDVACATION && currentPlaythrough.currentDay >= classStartDay) {
			return false;
		}
		if (a.ownSpot == Spot.HISTORYCLASS || a.ownSpot == Spot.MATHCLASS || a.ownSpot == Spot.GYMCLASS) {
			if (currentPlaythrough.currentDay < classStartDay) {
				return false;
			}
		}
		if (classRestricted(a)) {
			return false;
		}
		if ((a == Action.HIREFIXER || a == Action.GYMREGULAR || a == Action.ASKFORHELP) && currentPlaythrough.personStatus[5] == Locale.COLLEGETOWN) {
			return false;
		}
		if (a == Action.RESCUETANAKA && currentPlaythrough.currentDay != classStartDay) {
			return false;
		}
        if (a == Action.DATE && currentPlaythrough.currentDay == classStartDay) {
            return false;
        }
		if ((a == Action.DANCEEARLY || a == Action.DANCELATE) && getGoalLevel(4, true) < 1) {
			return false;
		}
		if (a.isLanguage() && getGoalLevel(25, true) > 0) {
			return false;
		}
		if (currentPlaythrough.currentDay == 0) {
			if (a.isDaydream() && a != Action.DAYDREAMMORNING) {
				return false;
			}
			if (a == Action.LAZEAROUND || a == Action.NAP || a == Action.TRYTOSLEEP) {
				return false;
			}
		}
		Action previousAction;
		if (t.placement > 0) {
			previousAction = currentPlaythrough.weeklyActions[weekDayNumber()][t.placement-1];
		} else {
			previousAction = currentPlaythrough.weeklyActions[(weekDayNumber()+6)%7][5];
		}
		if (previousAction != null && previousAction.setNext && a.previousAction != previousAction) {
			return false;
		} else if (a.previousAction != null) {
			if (a.previousAction != previousAction && (a.alternativePrevious != previousAction || previousAction == null)) {
				return false;
			}
		}
		if (a == Action.AIRPORT || a == Action.METAIRPORT) {
			boolean visibleFollowup = false;
			for (int i = 0; i < Action.values().length; i++) {
				if (Action.values()[i].previousAction == a) {
					if (Action.values()[i].requiredGoal == 0 || getGoalLevel(Action.values()[i].requiredGoal, true) >= Action.values()[i].requiredGoalLevel || (Action.values()[i].alternativeGoal > 0 && getGoalLevel(Action.values()[i].alternativeGoal, true) >= Action.values()[i].alternativeRequiredLevel)) {
						visibleFollowup = true;
					}
				}
			}
			if (a == Action.AIRPORT && currentPlaythrough.personStatus[5] == Locale.METROPOLIS && getGoalLevel(14, true) > 0) {
				visibleFollowup = true;
			}
			if (!visibleFollowup) {
				return false;
			}
		}
		return true;
	}
	
	public static Boolean actionIsAllowed(Action a, TimeSlot t) {
		if (a == null || t == null) {
			return false;
		}
		if (!actionIsVisible(a, t)) {
			return false;
		}
		if (a == Action.FLYTOMETROPOLIS) {
			if (getGoalLevel(25, true) == 0) {
				return false;
			}
		}
		if (!a.availableDays[weekDayNumber()]) {
			return false;
		}
		if (a.requiredFinances > 0 && a.requiredFinances > getAttributeLevel(2, false).intValue()) {
			return false;
		}
		BigInteger healthIncreaseEffect = BigInteger.ZERO;
		if (t.placement == 0 && !a.healthCost.equals(BigInteger.ZERO)) {
			healthIncreaseEffect = maxHealth().subtract(currentPlaythrough.yesterdayMaxHealth);
		}
		if (getHealthEffect(a).subtract(getBodyArmorAdjustment(a).divide(BigInteger.valueOf(3))).compareTo(simulatedHealth.add(healthIncreaseEffect)) > 0) {
			return false;
		}
		return true;
	}
	
	public static AutoStopReason actionIsShown(Action a) {
        if (actionTriggeredEvent(a) != null) {
            return AutoStopReason.ALWAYSSTOP;
        }
        if (a == null || (a.sleep && a.ownGoal == null && a.ownSpot != Spot.COLLEGETOWNFLIGHT && a.ownSpot != Spot.METFLIGHT && a.ownSpot != Spot.BETWEENCITIES)) {
            return AutoStopReason.NOSTOP;
        }
		if (skipOption() == OptionElements.RESULTSKIPOFF && !autoOn) {
			return AutoStopReason.ALWAYSSTOP;
		}
		if (getVisibleGoal(a, false) != null && resolveAction(a, false, false).contains(getVisibleGoal(a, false).completionText) && (skipOption().placement <= OptionElements.RESULTSKIPUNLOCK.placement || getCompletionScene(getVisibleGoal(a, false)) != null)) {
			return AutoStopReason.NEWUNLOCK;
		}
		if (skipOption().placement <= OptionElements.RESULTSKIPUNSEEN.placement && (currentPlaythrough.progress.seenVariants.get(a) == null || previousOutputOfAction(a) != null)) {
			return AutoStopReason.NEWFLAVOR;
		}
		return AutoStopReason.NOSTOP;
	}
	
	public static String previousOutputOfAction(Action a) {
		String actionFlavor = getActionFlavor(a).rawString();
		String[] previousFlavors = currentPlaythrough.progress.seenVariants.get(a);
		if (previousFlavors == null || previousFlavors.length == 0) {
			return null;
		}
		for (int i = 0; i < previousFlavors.length; i++) {
			if (actionFlavor.equals(previousFlavors[i])) {
				return null;
			}
		}
		return previousFlavors[previousFlavors.length-1];
	}
	
	public static RoutineSettings[] getAllowedRoutineSettings() {
		RoutineSettings[] keptSettings = new RoutineSettings[RoutineSettings.values().length];
		int found = 0;
		for (int i = 0; i < keptSettings.length; i++) {
			if (routineSettingsEnabled()[i]) {
				keptSettings[found] = RoutineSettings.values()[i];
				found++;
			}
		}
		if (found < RoutineSettings.values().length) {
			RoutineSettings[] finalSettings = new RoutineSettings[found];
			for (int i = 0; i < found; i++) {
				finalSettings[i] = keptSettings[i];
			}
			return finalSettings;
		}
		return keptSettings;
	}
	
	public static boolean[] routineSettingsEnabled() {
		boolean[] result = new boolean[RoutineSettings.values().length];
		for (int i = 0; i < result.length; i++) {
			if (i == 0) {
				result[i] = true;
			} else {
				for (int j = 1; j < RoutineSettings.values()[i].allElements.length; j++) {
					if (routineElementVisible(RoutineSettings.values()[i].allElements[j])) {
						result[i] = true;
						break;
					}
				}
			}
		}
		return result;
	}
	
	public static String[] getVisibleRoutineSettings() {
		RoutineSettings[] named = getAllowedRoutineSettings();
		String[] names = new String[named.length];
		for (int i = 0; i < names.length; i++) {
			names[i] = named[i].name;
		}
		return names;
	}
	
	public static RoutineElements[] getAllowedRoutineElements(RoutineSettings r) {
		RoutineElements[] keptElements = new RoutineElements[r.allElements.length];
		int found = 0;
		for (int i = 0; i < keptElements.length; i++) {
			if (routineElementAllowed(r.allElements[i])) {
				keptElements[found] = r.allElements[i];
				found++;
			}
		}
		if (found < r.allElements.length) {
			RoutineElements[] finalElements = new RoutineElements[found];
			for (int i = 0; i < found; i++) {
				finalElements[i] = keptElements[i];
			}
			return finalElements;
		}
		return keptElements;
	}
	
	public static Boolean routineElementAllowed(RoutineElements e) {
		if (e == null) {
			return false;
		}
		if (!routineElementVisible(e)) {
			return false;
		}
		if (currentPlaythrough.weeklyRoutine[weekDayNumber()][e.ownRoutineSettings.placement] != null) {
			BigInteger currentCost = currentPlaythrough.weeklyRoutine[weekDayNumber()][e.ownRoutineSettings.placement].maxStaminaCost;
			if (e.maxStaminaCost.subtract(currentCost).compareTo(maxStamina().add(currentPlaythrough.yesterdayRoutineCost).subtract(todayRoutineCost())) >= 0) {
				return false;
			}
		}
		if (e.requiredFinances > 0) {
			if (getAttributeLevel(2, true).intValue() < e.requiredFinances) {
				return false;
			}
		}
		if (e == RoutineElements.TOUGH) {
			if (currentPlaythrough.currentStamina.compareTo(TEN_THOUSAND) < 0) {
				return false;
			}
		} else if (e == RoutineElements.VULNERABLE) {
			if (currentPlaythrough.currentStamina.compareTo(TEN_THOUSAND) > 0) {
				return false;
			}
		} else if (e == RoutineElements.SELFDESTRUCTIVE) {
			if (currentPlaythrough.currentHealth.compareTo(THOUSAND.multiply(BigInteger.valueOf(2))) > 0) {
				return false;
			}
		} else if (e == RoutineElements.ADAPTIVE) {
			if (currentPlaythrough.currentHealth.compareTo(BigInteger.valueOf(5000)) < 0) {
				return false;
			}
		} else if (e == RoutineElements.FOCUSED) {
			if (currentPlaythrough.personStatus[5] == Locale.COLLEGETOWN) {
				return false;
			}
        } else if (e == RoutineElements.LONER) {
            if (currentPlaythrough.currentLocale == Locale.COLLEGETOWN) {
                return false;
            }
		} else if (e.ownRoutineSettings == RoutineSettings.BODY && currentPlaythrough.weeklyRoutine[(weekDayNumber()+6)%7][e.ownRoutineSettings.placement] != null && currentPlaythrough.weeklyRoutine[(weekDayNumber()+6)%7][e.ownRoutineSettings.placement].placement > e.placement) {
			return false;
		}
		return true;
	}
	
	public static RoutineElements[] getKnownRoutineElements(RoutineSettings r) {
		RoutineElements[] keptElements = new RoutineElements[r.allElements.length];
		int found = 0;
		for (int i = 0; i < keptElements.length; i++) {
			if (routineElementVisible(r.allElements[i])) {
				keptElements[found] = r.allElements[i];
				found++;
			}
		}
		if (found < r.allElements.length) {
			RoutineElements[] finalElements = new RoutineElements[found];
			for (int i = 0; i < found; i++) {
				finalElements[i] = keptElements[i];
			}
			return finalElements;
		}
		return keptElements;
	}

    public static OptionElements[] getKnownCharacters() {
        OptionElements[] keptElements = new OptionElements[23];
        int found = 0;
        for (int i = 0; i < keptElements.length; i++) {
            if (optionElementVisible(OptionSettings.GENDERS.allElements[i])) {
                keptElements[found] = OptionSettings.GENDERS.allElements[i];
                found++;
            }
        }
        if (found < OptionSettings.GENDERS.allElements.length) {
            OptionElements[] finalElements = new OptionElements[found];
            for (int i = 0; i < found; i++) {
                finalElements[i] = keptElements[i];
            }
            return finalElements;
        }
        return keptElements;
    }

    public static Boolean optionElementVisible(OptionElements e) {
        if (e.ownOptionSettings == OptionSettings.GENDERS) {
            if (e.placement == 0 || e.placement == 22) {
                return true;
            }
            if (currentPlaythrough.relationships[e.placement-1].equals(BigInteger.ZERO)) {
                return false;
            }
        }
        if (e == OptionElements.LOOPLYSCHEDULE && !achievementEverEarned(currentPlaythrough, Achievement.SAVIOR)) {
            return false;
        }
        return true;
    }
	
	public static Boolean routineElementVisible(RoutineElements e) {
		if (e == null) {
			return false;
		}
		if (e.requiredGoal >= 1 && e.requiredLevel >= 1) {
			if (getGoalLevel(e.requiredGoal, true) < e.requiredLevel) {
				return false;
			}
		}
        if (e == RoutineElements.FOCUSED && getGoalLevel(28, true) > 0) {
            return false;
        }
		return true;
	}

    public static OptionElements[] getKnownOptionElements(OptionSettings r) {
        if (r == OptionSettings.GENDERS) {
            return getKnownCharacters();
        }
        return r.allElements;
    }

    public static String[] getVisibleOptionElements(OptionSettings r) {
        if (r == null) {
            return new String[0];
        }
        OptionElements[] named = r.allElements;
        if (r == OptionSettings.GENDERS) {
            named = getKnownCharacters();
        }
        String[] names = new String[named.length];
        for (int i = 0; i < names.length; i++) {
            if (r == OptionSettings.GENDERS) {
                if (named[i] == OptionElements.PLAYERGENDER) {
                    names[i] = "Protagonist: " + currentPlaythrough.ownGender.description;
                } else if (named[i] == OptionElements.UNMETGENDER) {
                    names[i] = "Unmet Characters: " + currentPlaythrough.unmetGender.description;
                } else {
                    names[i] = currentPlaythrough.personNames[named[i].placement-1] + ": " + currentPlaythrough.personGenders[named[i].placement-1].description;
                }
            } else {
                names[i] = named[i].name;
            }
        }
        return names;
    }
	
	public static String[] getVisibleRoutineElements(RoutineSettings r) {
		if (r == null) {
			return new String[0];
		}
		RoutineElements[] named = getKnownRoutineElements(r);
		String[] names = new String[named.length];
		for (int i = 0; i < names.length; i++) {
			names[i] = named[i].name;
		}
		return names;
	}
	
	public static void setAchievementCategoryDisplay(AchievementCategory c) {
		String result = c.name;
		if (c.lastRecordedScore == null) {
			c.lastRecordedScore = BigInteger.ZERO;
			for (int i = 0; i < getKnownAchievements(c).length; i++) {
				c.lastRecordedScore = c.lastRecordedScore.add(getScore(currentPlaythrough, getKnownAchievements(c)[i]));
			}
			if (c.lastRecordedScore.compareTo(BigInteger.ZERO) > 0) {
				result = result + " (" + format(c.lastRecordedScore) + ")";
			}
		}
		if (c.lastRecordedScore.compareTo(BigInteger.ZERO) > 0) {
			result = result + " (" + format(c.lastRecordedScore) + ")";
		}
		c.lastRecordedDisplay = result;
	}
	
	public static String getAchievementCategoryDisplay(AchievementCategory c) {
		if (c.lastRecordedDisplay == null) {
			setAchievementCategoryDisplay(c);
		}
		return c.lastRecordedDisplay;
	}
	
	public static StatsCategory[] getAllowedStats() {
		StatsCategory[] keptCategories = new StatsCategory[StatsCategory.values().length];
		int found = 0;
		for (int i = 0; i < keptCategories.length; i++) {
			if (statsAllowed(StatsCategory.values()[i])) {
				keptCategories[found] = StatsCategory.values()[i];
				found++;
			}
		}
		if (found < StatsCategory.values().length) {
			StatsCategory[] finalCategories = new StatsCategory[found];
			for (int i = 0; i < found; i++) {
				finalCategories[i] = keptCategories[i];
			}
			return finalCategories;
		}
		return keptCategories;
	}
	
	public static String[] getVisibleStats() {
		StatsCategory[] named = getAllowedStats();
		String[] names = new String[named.length];
		for (int i = 0; i < names.length; i++) {
			names[i] = named[i].name;
		}
		return names;
	}
	
	public static StatsElements[] getAllowedStatsElements(StatsCategory c) {
		StatsElements[] keptElements = new StatsElements[c.allStats.length];
		int found = 0;
		for (int i = 0; i < keptElements.length; i++) {
			if (statsElementAllowed(c.allStats[i])) {
				keptElements[found] = c.allStats[i];
				found++;
			}
		}
		if (found < keptElements.length) {
			StatsElements[] finalElements = new StatsElements[found];
			for (int i = 0; i < found; i++) {
				finalElements[i] = keptElements[i];
			}
			return finalElements;
		}
		return keptElements;
	}
	
	public static String[] getVisibleStatsElements(StatsCategory c) {
		StatsElements[] named = getAllowedStatsElements(c);
		String[] names = new String[named.length];
		for (int i = 0; i < names.length; i++) {
			names[i] = named[i].name;
			if (named[i].associatedUpgrade >= 0) {
				names[i] = names[i] + " (" + currentPlaythrough.upgradeLevels[named[i].associatedUpgrade] + ")";
			} else if (named[i].ownCategory == StatsCategory.SIMULATOR) {
				if (named[i].placement < 21) {
					names[i] = currentPlaythrough.personNames[named[i].placement] + personSymbols[named[i].placement] + attributeNames[named[i].placement];
				} else {
					names[i] = "Unaligned\u2370Goals";
				}
			}
		}
		return names;
	}
	
	public static Boolean statsAllowed(StatsCategory c) {
		if (c == StatsCategory.UPGRADES) {
			for (int i = 0; i < currentPlaythrough.upgradeLevels.length; i++) {
				if (currentPlaythrough.upgradeLevels[i] > 0) {
					return true;
				}
			}
			return false;
			
		}
		return true;
	}
	
	public static Boolean statsElementAllowed(StatsElements e) {
		if (e.associatedUpgrade >= 0 && currentPlaythrough.upgradeLevels[e.associatedUpgrade] == 0) {
			return false;
		}
		if (e.ownCategory == StatsCategory.SIMULATOR && e.placement < 21 && !barVisible(e.placement)) {
			return false;
		}
		return true;
	}
	
	public static Achievement[] getKnownAchievements(AchievementCategory c) {
		Achievement[] keptAchievements = new Achievement[c.allAchievements.length];
		int found = 0;
		for (int i = 0; i < keptAchievements.length; i++) {
			if (achievementAllowed(c.allAchievements[i])) {
				keptAchievements[found] = c.allAchievements[i];
				found++;
			}
		}
		if (found < keptAchievements.length) {
			Achievement[] finalAchievements = new Achievement[found];
			for (int i = 0; i < found; i++) {
				finalAchievements[i] = keptAchievements[i];
			}
			return finalAchievements;
		}
		return keptAchievements;
	}
	
	public static String[] getVisibleAchievements(AchievementCategory c) {
		if (c == null) {
			return new String[0];
		}
		Achievement[] named = getKnownAchievements(c);
		String[] names = new String[named.length];
		for (int i = 0; i < names.length; i++) {
			names[i] = getAchievementDisplay(named[i]);
		}
		return names;
	}
	
	public static void setAchievementDisplay(Achievement e) {
		String result = e.name;
		if (e.lastRecordedScore == null) {
			e.lastRecordedScore = getScore(currentPlaythrough, e);
		}
		if (e.lastRecordedScore.compareTo(BigInteger.ZERO) > 0) {
			result = result + " (" + format(e.lastRecordedScore) + ")";
		}
		e.lastRecordedDisplay = result;
	}
	
	public static String getAchievementDisplay(Achievement e) {
		if (e.lastRecordedDisplay == null) {
			setAchievementDisplay(e);
		}
		return e.lastRecordedDisplay;
	}
	
	public static Boolean achievementAllowed(Achievement e) {
		for (int i = 0; i < e.placement; i++) {
			if (!e.ownCategory.allAchievements[i].nonBlocking && !achievementEverEarned(currentPlaythrough, e.ownCategory.allAchievements[i])) {
				return false;
			}
		}
		if (e.otherRequirement != null) {
			if (!achievementEverEarned(currentPlaythrough, e.otherRequirement)) {
				return false;
			}
		}
		return true;
	}
	
	public static String[] getCurrentSelections() {
		String[] result = new String[2+getAllowedRoutineSettings().length];
		result[0] = getCurrentAction().name;
		result[1] = getCurrentAction().ownSpot.name;
		for (int i = 0; i < getAllowedRoutineSettings().length; i++) {
			result[i+2] = currentPlaythrough.weeklyRoutine[weekDayNumber()][getAllowedRoutineSettings()[i].placement].name;
		}
		return result;
	}
	
	public static String getActionSummary(Action a) {
		String result = "this is an action summary for " + a.name;
		switch (a) {
		case HANGOUT:
			if (getGoalLevel(1, true) > 1) {
				result = "It'll be fun, as long as you can endure the envious stares.";
			} else if (barVisible(5)) {
				result = "This is your chance to catch up with " + Tanaka() + ".";
			} else {
				result = "What should you do today?";
			}
			break;
		case PLAYTOGETHER:
			if (barVisible(1)) {
				result = "It's more fun to play with friends.";
			} else {
				result = "This has been your default passtime.";
			}
			break;
		case GETBULLIED:
			if (getGoalLevel(10, true) > 1) {
				result = Hashimoto() + " is still " + Hashimoto() + ".";
			} else if (barVisible(0)) {
				result = "If you ignore " + Hashimoto() + ", maybe " + heShe(0) + "'ll go away.";
			} else {
				result = "You never know who you might meet.";
			}
			break;
		case SLEEPIN:
			result = "Your bed sure is comfy.";
			break;
		case DAYDREAMMORNING:
			result = "The dreams you have while awake are more interesting.";
			break;
		case LAZEAROUND:
			result = "It's harder to sleep in the daytime.";
			break;
		case DAYDREAMNOON:
			result = "Is this the most interesting thing you can be doing right now?";
			break;
		case NAP:
			result = "You can faintly hear the sound of people living their lives outside.";
			break;
		case DAYDREAMAFTERNOON:
			result = "It's okay to take a break.";
			break;
		case DAYDREAMEVENING:
			result = "What interesting things might happen tomorrow?";
			break;
		case TRYTOSLEEP:
			result = "You might have something big planned tomorrow.  Or later tonight.";
			break;
		case SLEEP:
			result = "It's best not to stay up late without a good reason.";
			break;
		case SLEEPDEEPLY:
			result = "Pretty much everybody is asleep by now.";
			if (dietRoutine() == RoutineElements.MOSTLYCOFFEE) {
				result = "Even if you could stay up, it doesn't mean you have to.";
			}
			break;
		case METSLEEPMORNING:
			result = "Unfortunately, the city is starting to wake up.";
			break;
		case METSLEEPNOON:
			result = "This was the best apartment you could find on such short notice.";
			break;
		case METSLEEPAFTERNOON:
			result = "Try to ignore the sound of your neighbors seemingly trying to kill each other.";
			break;
		case METSLEEPEVENING:
			result = "Apparently people in this city don't realize that this is when you're supposed to wind down for the night.";
			break;
		case METSLEEPMIDNIGHT:
			result = "It's a bit quieter now, but the mattress still feels like it's made out of rocks.";
			break;
		case METSLEEPPREDAWN:
			result = "You have to fall asleep eventually.";
			if (getGoalLevel(28, true) == 0 && getGoalLevel(14, true) > 0) {
				result = "If you live this long, then you definitely deserve a rest.";
			}
			break;
		case METDREAMMORNING:
			result = "Well, what is there to do now?";
			break;
		case METDREAMNOON:
			result = "A new city brings new dreams.";
			break;
		case METDREAMAFTERNOON:
			result = "You can bring your old dreams with you too.";
			break;
		case METDREAMEVENING:
			result = "Where will you go next?";
			break;
		case MEETUP:
			result = "It's fortunate that " + Tanaka() + " lives so close.";
			break;
		case BARTEND:
			result = "Keep the drinks and the money flowing.";
			break;
		case BARTENDEARLY:
			result = "People come to the bar to buy human interaction.  The booze is only incidental.";
			break;
		case BARTENDLATE:
			result = "The crowds start to thin out before closing time.";
			break;
		case DANCE:
			result = "You know that " + DuMont() + " likes to watch.";
			if (getGoalLevel(6, true) == 0) {
				result = "Why not see just what makes this place so special?";
			}
			break;
		case DANCEEARLY:
			result = "You don't have to wait until the sun goes down.";
			break;
		case DANCELATE:
			result = DuMont() + " has gone home, but there are plenty of other people to mingle with.";
			break;
		case ASKFORHELP:
			result = "If you can get " + DuMont() + " to help even a little bit more...";
			if (getGoalLevel(6, true) == 0) {
				result = "There must be somebody here who can help...";
			}
			break;
		case LOITER:
			if (currentPlaythrough.personStatus[5] == Locale.COLLEGETOWN) {
				result = "On the off chance that " + Tanaka() + " shows up early, " + hisHer(5) + " admirers are ready.";
			} else {
				result = "Even though " + Tanaka() + "'s gone, " + hisHer(5) + " admirers still gather here out of habit.";
			}
			break;
		case DATE:
			result = Tanaka() + " wants to spend time together.";
			break;
		case PLAYLATE:
			result = Yumeno() + " always plays until closing time, then immediately goes home to sleep.";
			break;
		case PLAYCONSOLE:
			result = "The arcade isn't quite open yet.";
			break;
		case CONSOLEEARLY:
			result = "Apparently " + Yumeno() + "'s actually a morning person.";
			break;
		case CLEANUP:
			result = "You can at least leave the place cleaner than it was when you got here.";
			break;
		case CLEANEARLY:
			result = "While " + Yumeno() + " cooks breakfast, you can help straighten up.";
			break;
		case SLEEPOVER:
			result = "You can wake up early and jump right into a game together.";
			break;
		case PICKAFIGHT:
			result = Hashimoto() + " can't harass you if you harass " + himHer(0) + " first.";
			if (getGoalLevel(10, true) >= 2) {
				result = "Why not have a scuffle for old time's sake?";
			} else if (getGoalLevel(3, true) == 3) {
				result = Hashimoto() + "'s not bothering you as much anymore... but you can still bother " + himHer(0) + ".";
			}
			break;
		case VANDALISM:
			result = "It's easier to have fun when other people are the ones dealing with the consequences.";
			break;
		case VANDALISMLATE:
			result = "Come to think of it, you're actually not sure when " + Hashimoto() + " sleeps.";
			if (currentPlaythrough.currentDay >= classStartDay) {
				result = "So, this is why " + Hashimoto() + " sleeps in class.";
			}
			break;
		case RESCUETANAKA:
			result = "Everything changes in a single moment...";
			break;
		case HISTORY:
			result = Hashimoto() + " is here, sleeping with " + hisHer(0) + " head on " + hisHer(0) + " desk.";
			if (getGoalLevel(10, true) >= 2) {
				result = "You can share your notes with " + Hashimoto() + " later.";
			}
			break;
		case HISTORYSNOOZE:
			result = Hashimoto() + " might have the right idea.";
			break;
		case DOORUNLOCKED:
			result = "You think you can trust " + Hashimoto() + ".";
			break;
		case DOORUNLOCKEDVACATION:
			result = "You think you can trust " + Hashimoto() + ".";
			break;
		case MATH:
			result = "According to " + Yumeno() + ", some of these lessons are actually useful in real life.";
			break;
		case GYM:
			result = "You originally took this elective just for a chance to spend time with " + Tanaka() + ".";
			break;
		case ALLOUT:
			result = Tanaka() + " is watching.";
			break;
		case GYMREGULAR:
			result = "What are you supposed to do with this restless energy?";
			break;
		case DUMONTAFTERNOON:
			result = "Maybe " + DuMont() + " will notice your hard work.";
			break;
		case DUMONTNOON:
			result = "A prestigious job, and one that offers access to the ";
			if (currentPlaythrough.personGenders[2].presentation() == Gender.MALE) {
				result += "Master ";
			} else {
				result += "Mistress ";
			}
			result += himHer(2) + "self.";
			break;
		case DUMONTEVENING:
			result = "Time to show " + DuMont() + " how reliable you are.";
			break;
		case MANSIONMORNING:
			result = "The pay is pretty good, and the skills may prove useful.";
			break;
		case MANSIONNOON:
			result = "Maintaining a mansion takes a lot of work.";
			break;
		case MANSIONAFTERNOON:
			result = "In the eyes of the other social elites, the state of the mansion reflects on " + DuMont() + "'s character.";
			break;
		case MANSIONEVENING:
			result = "The mansion is bustling with activity.";
			break;
		case MANSIONMIDNIGHT:
			result = "The night shift pays better.";
			break;
		case MANSIONPREDAWN:
			result = "There are things you can do today to make tomorrow go more smoothly.";
			break;
		/*case FILESEARLY:
			result = "Time to take stock of what you managed to bring back.";
			break;
		case FILESLATE:
			result = "There are a lot of files to read through.";
			break;*/
		case ARGUE:
			result = "You each have questions that the other has never even considered.";
			break;
		case INFILTRATE:
			result = "In the process, you might be able to learn something about how the world really works.";
			break;
		case INFILTRATEEARLY:
			result = "If you're going to find what you're after, then you need to blend in.";
			break;
		case INFILTRATELATE:
			result = "Some of this data is actually really interesting.";
			break;
		case GAMEDESIGN:
			result = "The game's story may be fictional, but the experience of playing it will be real.";
			break;
		case COMBATTHEORYMORNING:
			result = "It's a good thing " + Yumeno() + "'s a morning person.";
			break;
		case COMBATTHEORYNOON:
			result = "Even if the lessons are of questionable value, it feels good to be moving around.";
			break;
		case COMBATTHEORYAFTERNOON:
			result = "It beats spending all day in the arcade.";
			break;
		case COMBATTHEORYEVENING:
			result = Yumeno() + " doesn't have practical experience, but " + heShe(1) + " does have good study skills.";
			break;
		case EXTRATHEORYMORNING:
			result = Yumeno() + "'s willing to skip class to help you.";
			break;
		case EXTRATHEORYNOON:
			result = "It's not like " + Yumeno() + " was ever in danger of failing " + hisHer(1) + " Math class.";
			break;
		case EXTRATHEORYAFTERNOON:
			result = "Apparently this is normally when " + Yumeno() + " would be in " + hisHer(1) + " Biology class.";
			break;
		case EXTRATHEORYMIDNIGHT:
			result = Yumeno() + " seems to be trying to synch " + hisHer(1) + " sleep schedule with yours.  Must be rough.";
			break;
		case EXTRATHEORYPREDAWN:
			result = "Even if " + Yumeno() + "'s becoming sleep-deprived, " + hisHer(1) + " mind is still sharp as ever.";
			break;
		case STANDGUARD:
			result = "Because you're an unfamiliar face, the hoodlums will want to see what you're made of.";
			break;
		case VIPESCORT:
			result = "You're the last line of defense.";
			break;
		case JACKALTRAINING:
			result = "A little pain now can prevent a lot of pain later.";
			break;
		case HIREFIXER:
			result = "Good help doesn't come cheap.";
			if (getGoalLevel(13, true) > 0) {
				result = "It's against " + Jackal() + "'s principles to work for free.";
			}
			break;
		case SEARCHTOGETHER:
			result = "If " + Jackal() + " has someone to watch " + hisHer(3) + " back, " + heShe(3) + " can work more than twice as fast.";
			break;
		case WORKTOGETHER:
			result = "Instead of paying to work with " + Jackal() + ", you can work with " + himHer(3) + " to get paid.";
			break;
		case SERIOUSTRAINING:
			result = "There are other people who need help.";
			break;
		case WARSTORIES:
			result = "How did " + Jackal() + " become the way " + heShe(3) + " is?";
			break;
		case VOLUNTEER:
			result = "It's time to get to the bottom of this.";
			if (getGoalLevel(18, true) > 0) {
				result = "What other technology might they be hiding here?";
			}
			break;
		case RECEIVETREATMENT:
			result = "It's still hard to believe that medical treatments like this really exist.";
			break;
		case ENDURANCE:
			result = "It's time to see just how far you can push your body.";
			break;
		case HOBNOB:
			result = "There are some very powerful people here.  How can you make their power yours?";
			break;
		case FIXERTALK:
			result = Jackal() + " looks bored.";
			if (getGoalLevel(13, true) == 0) {
				result = "It's surprising to see someone so dangerous-looking at a classy gathering like this.";
			} else if (getGoalLevel(21, true) == 0) {
				result = "Wait, is that who you think it is?";
			}
			break;
		case DUMONTSPA:
			result = "Does this really count as work?";
			break;
		case SPAALONE:
			result = "You can always come here on your own.";
			break;
		case AIRPORT:
			result = "They can't stop you from bringing what you need to bring, but they can waste your time.";
			break;
		case FLYTOMETROPOLIS:
			result = "You're so close to finding " + himHer(5) + "...";
			if (getGoalLevel(28, true) > 0 || currentPlaythrough.personStatus[5] == Locale.COLLEGETOWN) {
				result = "Greater things await.";
			}
			break;
		case METROPOLISFLIGHTONE:
			result = "Hopefully you get a good seat.";
			break;
		case METROPOLISFLIGHTTWO:
			result = "You should be crossing the border around here.";
			break;
		case METROPOLISFLIGHTTHREE:
			result = "It's a long flight.";
			break;
		case METROPOLISFLIGHTFOUR:
			result = "After all, you're going all the way to the other side of the world.";
			break;
		case METROPOLISFLIGHTFIVE:
			result = "The city below is unfamiliar.";
			break;
		case METROPOLISFLIGHTSIX:
			result = "At least you'll have a chance to stretch your legs.";
			break;
		case METROPOLISFLIGHTSEVEN:
			result = "Unfortunately, the airlines' schedule was not designed with your convenience in mind.";
			break;
		case METROPOLISFLIGHTEIGHT:
			result = "This flight will be shorter.";
			break;
		case METROPOLISFLIGHTNINE:
			result = "When you wake, you'll be at your destination.";
			break;
		case METROPOLISFLIGHTTEN:
			result = "Hopefully your nerves don't keep you up again.";
			break;
		case METROPOLISLANDING:
			result = "You're here.";
			break;
		case METAIRPORT:
            if (currentPlaythrough.currentDay > 96) {
                result = "The airlines have stopped offering their usual selection of flights, and you can't put together a flight plan that actually gets you home.  ";
                if (getGoalLevel(28, true) > 0) {
                    result += "Is this related to the political maneuverings " + Tanaka() + "'s been telling you about?";
                } else {
                    result += "Hopefully whatever's stopping them is cleared up soon.";
                }
            } else {
                result = "So many things are different here, but going through airport security is still a pain.";
            }
			break;
		case FLYHOME:
			result = "It might be nice to go see everyone again.";
			break;
		case HOMEFLIGHTONE:
			result = "It's a shame that going back and forth takes so long.";
			break;
		case HOMEFLIGHTTWO:
			result = "If only you had a private jet...";
			break;
		case HOMEFLIGHTTHREE:
			result = "You might be able to get used to sleeping on a plane.";
			break;
		case HOMEFLIGHTFOUR:
			result = "Hopefully you'll be able to avoid getting jetlagged too badly.";
			break;
		case HOMEFLIGHTFIVE:
			result = "You don't really feel rested.";
			break;
		case HOMEFLIGHTSIX:
			result = "The connecting flight is somewhere else this time.";
			break;
		case HOMEFLIGHTSEVEN:
			result = "Maybe you should pick up some souvenirs?";
			break;
		case HOMEFLIGHTEIGHT:
			result = "Just one more short flight.";
			break;
		case HOMEFLIGHTNINE:
			result = "Soon, you'll be able to sleep in your own bed again.";
			break;
		case HOMEFLIGHTTEN:
			result = "Almost there...";
			break;
		case HOMELANDING:
			result = "The scenery out the window is familiar.";
			break;
		case LANGUAGEMORNING:
			result = "You can study with online tools.";
			break;
		case LANGUAGENOON:
			result = "Draw the blinds, put on some headphones, and focus.";
			break;
		case LANGUAGEAFTERNOON:
			result = "There might be a better way to do this, but you don't have time to find it.";
			if (getGoalLevel(20, true) >= 2) {
				result = "Hiring an expert to teach you would be faster, but what if you need those funds later?";
			}
			break;
		case LANGUAGEEVENING:
			result = "It doesn't really matter whether it's daytime or not.";
			break;
		case LANGUAGEMIDNIGHT:
			result = "Do you have time to sleep?";
			break;
		case LANGUAGEPREDAWN:
			result = "You have to remember to pace yourself...";
			break;
		case LANGUAGECOURSE:
			result = "It's pricey, but time is money...";
			break;
		case RENDEZVOUS:
			result = "This is it.  The moment of truth.";
			if (getGoalLevel(28, true) > 0) {
				result = "Even if " + Tanaka() + "'s okay for now, that doesn't mean " + heShe(5) + "'s safe.";
			}
			break;
		case HOTELCHECKEVENING:
			result = "Checking in early maximizes how much time you have to enjoy the facilities.";
			break;
		case HOTELCHECKMIDNIGHT:
			result = "A good room doesn't come cheap.";
			break;
		case HOTELMIDNIGHT:
			result = "You miss sleeping in your own bed, but this one is objectively better.";
			break;
		case HOTELCHECKPREDAWN:
			result = "Better to check in late than never.";
			break;
		case HOTELPREDAWN:
			result = "Blissful silence.";
			break;
		case HOTELMORNING:
			result = "It'd be nice to enjoy this bed for as long as possible.";
			break;
		case HOTELNOON:
			result = "A quick soak in the hot tub will help you get ready for the rest of the day.";
			break;
		case LABOREARLY:
			result = "It's hard for a foreigner to find work that pays well.";
			break;
		case LABORLATE:
			result = "Fortunately, you've gotten pretty strong.";
			break;
		case JOGEARLY:
			result = "Gotta keep in shape.";
			break;
		case JOGLATE:
			result = "Around this time, the streets get too crowded for a proper jog.";
			break;
		case CLUBEARLY:
			result = "The nightlife here seems pretty wild.";
			break;
		case CLUB:
			result = "You deserve to take some time off and celebrate.";
			break;
		case CLUBLATE:
			result = "Whatever tomorrow brings, at least you can enjoy tonight.";
			break;
		case OFFICEMORNING:
			result = "You can score some points with the big wigs this way.";
			break;
		case OFFICENOON:
			result = "Everybody competes to stand out as the most obviously valuable.";
			break;
		case OFFICEAFTERNOON:
			result = "You serve as one gear in a very large machine.";
			break;
		case OFFICEEVENING:
			result = "Nobody wants to be seen leaving the office first.";
			break;
		case PARTYEARLY:
			result = "You aren't being paid to attend, but the networking opportunities are valuable in their own right.";
			break;
		case PARTYLATE:
			result = "Identify the most important people here and use this chance to get close to them.";
			break;
		default:
			result = "No description found.";
			break;
		}
		if (!actionIsAllowed(a, currentTimeSlot)) {
			BigInteger totalHealthCost = BigInteger.ZERO;
			if (!a.healthCost.equals(BigInteger.ZERO)) {
				totalHealthCost = getTotalHealthEffect(a);
			}
			boolean explained = false;
			if (!a.availableDays[weekDayNumber()]) {
				explained = true;
				int weekend = 0;
				int weekday = 0;
				if (a.availableDays[0]) {
					weekend++;
				}
				if (a.availableDays[6]) {
					weekend++;
				}
				for (int i = 1; i < 6; i++) {
					if (a.availableDays[i]) {
						weekday++;
					}
				}
				if (weekend+weekday == 6) {
					result += "\nNot available on ";
					for (int i = 0; i < 7; i++) {
						if (!a.availableDays[i]) {
							result += WeekDay.values()[i].name + "s";
						}
					}
				} else if (weekday == 5) {
					result += "\nNot available on weekends";
				} else if (weekend+weekday == 5) {
					result += "\nNot available on ";
					boolean found = false;
					for (int i = 0; i < 7; i++) {
						if (!a.availableDays[i]) {
							result += WeekDay.values()[i].name + "s";
							if (!found) {
								result += " and ";
							}
							found = true;
						}
					}
				} else if (weekend+weekday == 4) {
					result += "\nNot available on ";
					int found = 0;
					for (int i = 0; i < 7; i++) {
						if (!a.availableDays[i]) {
							result += WeekDay.values()[i].name + "s";
							if (found == 0) {
								result += ", ";
							} else if (found == 1) {
								result += " and ";
							}
							found++;
						}
					}
				} else if (weekend == 2 && weekday == 1) {
					result += "\nOnly available on weekends and ";
					for (int i = 0; i < 7; i++) {
						if (a.availableDays[i]) {
							result += WeekDay.values()[i].name + "s";
						}
					}
				} else if (weekend+weekday == 3) {
					result += "\nOnly available on ";
					int found = 0;
					for (int i = 0; i < 7; i++) {
						if (a.availableDays[i]) {
							result += WeekDay.values()[i].name + "s";
							if (found == 0) {
								result += ", ";
							} else if (found == 1) {
								result += " and ";
							}
							found++;
						}
					}
				} else if (weekend == 2) {
					result += "\nOnly available on weekends";
				} else if (weekend+weekday == 2) {
					result += "\nOnly available on ";
					boolean found = false;
					for (int i = 0; i < 7; i++) {
						if (!a.availableDays[i]) {
							result += WeekDay.values()[i].name + "s";
							if (!found) {
								result += " and ";
							}
							found = true;
						}
					}
				} else if (weekend+weekday == 1) {
					result += "\nOnly available on ";
					for (int i = 0; i < 7; i++) {
						if (a.availableDays[i]) {
							result += WeekDay.values()[i].name + "s";
						}
					}
				}
				result += ".";
			}
			if (a.requiredFinances > 0 && a.requiredFinances > getAttributeLevel(2, false).intValue()) {
				explained = true;
				result += "\nRequires Lv " + a.requiredFinances + " Finances.";
			}
			if (!a.healthCost.equals(BigInteger.ZERO) && totalHealthCost.compareTo(simulatedHealth) > 0) {
				explained = true;
				result += "\n" + format(simulatedHealth, totalHealthCost) + "/" + format(totalHealthCost) + " required Health";
			}
			if (a == Action.HISTORYSNOOZE && currentPlaythrough.currentDay < classStartDay) {
				explained = true;
				result += "\nClass is not in session.";
			}
			if (a == Action.FLYTOMETROPOLIS && getGoalLevel(25, true) == 0) {
				explained = true;
				result += "\nMust learn the language first.";
			}
			if (!explained) {
				result += "\nAction not currently possible.";
			}
		} else if (currentStopReason == AutoStopReason.NEWFLAVOR) {
			result += "\nAuto-Continue stopped: unseen action result";
		} else if (currentStopReason == AutoStopReason.NEWUNLOCK) {
			result += "\nAuto-Continue stopped: new unlock";
		}
		return result;
	}
	
	public static void assembleButtonPanel() {
		Font stateSummaryFontObject = getStateSummaryFont();
        Insets insets = frame.getInsets();
        int actualHeight = frame.getHeight() - insets.top - insets.bottom;
        int actualWidth = frame.getWidth() - insets.left - insets.right;
        Font buttonFont = new Font(buttonSymbolFont, Font.PLAIN, actualHeight/30);
		interfaceSwap.setFont(stateSummaryFontObject);
        routineButton.setFont(buttonFont);
        achievementButton.setFont(buttonFont);
        plannerButton.setFont(buttonFont);
        statsButton.setFont(buttonFont);
		boolean otherScreenNewEntry = false;
        boolean newAchievement = false;
        boolean newRoutine = false;
		for (int i = 0; i < currentPlaythrough.progress.newEntries.length; i++) {
			if (currentMiddleDisplay != MiddleDisplay.ROUTINE) {
				for (int j = 0; j < getAllowedRoutineSettings().length; j++) {
					for (int k = 0; k < getVisibleRoutineElements(getAllowedRoutineSettings()[j]).length; k++) {
						if (currentPlaythrough.progress.newEntries[i].equals(getVisibleRoutineElements(getAllowedRoutineSettings()[j])[k])) {
							otherScreenNewEntry = true;
                            newRoutine = true;
						}
					}
				}
			}
			if (currentMiddleDisplay != MiddleDisplay.ACHIEVEMENTS) {
				for (int j = 0; j < AchievementCategory.values().length; j++) {
					for (int k = 0; k < getVisibleAchievements(AchievementCategory.values()[j]).length; k++) {
						if (currentPlaythrough.progress.newEntries[i].equals(getVisibleAchievements(AchievementCategory.values()[j])[k])) {
							otherScreenNewEntry = true;
                            newAchievement = true;
						}
					}
				}
			}
		}
		
		if (currentMiddleDisplay == MiddleDisplay.NEXTLOOP) {
			String swapText = "-1 Lv";
			BigInteger toBeSpent = BigInteger.ZERO;
			int checkedLevel = 0;
			if (selectedUpgrade < 42) {
				checkedLevel = currentPlaythrough.upgradeLevels[selectedUpgrade];
				if (checkedLevel > 0) {
					toBeSpent = upgradeLevelCost(selectedUpgrade, checkedLevel-1);
				}
			}
			if (toBeSpent.compareTo(BigInteger.ZERO) > 0) {
				swapText = "<html><center>-1 Lv ("+ format(toBeSpent) + ")</center></html>";
				defaultState(interfaceSwap);
			} else {
				disabledState(interfaceSwap);
			}
			interfaceSwap.setText(swapText);
            buttonSet.add(interfaceSwap);
            buttonSet.remove(routineButton);
            buttonSet.remove(achievementButton);
            buttonSet.remove(plannerButton);
            buttonSet.remove(statsButton);
		} else if (currentMiddleDisplay.Next != null) {
			if (otherScreenNewEntry) {
				newThingState(interfaceSwap);
			} else {
				defaultState(interfaceSwap);
			}
			interfaceSwap.setText(currentMiddleDisplay.Next.display);
            buttonSet.remove(interfaceSwap);
            buttonSet.add(routineButton);
            buttonSet.add(achievementButton);
            buttonSet.add(plannerButton);
            buttonSet.add(statsButton);
            defaultState(routineButton);
            defaultState(achievementButton);
            defaultState(plannerButton);
            defaultState(statsButton);
            if (newRoutine) {
                newThingState(routineButton);
            }
            if (newAchievement) {
                newThingState(achievementButton);
            }
            if (currentMiddleDisplay == MiddleDisplay.ROUTINE) {
                disabledState(routineButton);
            } else if (currentMiddleDisplay == MiddleDisplay.ACHIEVEMENTS) {
                disabledState(achievementButton);
            } else if (currentMiddleDisplay == MiddleDisplay.PLANNER) {
                disabledState(plannerButton);
            } else if (currentMiddleDisplay == MiddleDisplay.STATS) {
                disabledState(statsButton);
            }
		} else {
			disabledState(interfaceSwap);
            disabledState(routineButton);
            disabledState(achievementButton);
            disabledState(plannerButton);
            disabledState(statsButton);
		}
		back.setFont(stateSummaryFontObject);
		if (currentMiddleDisplay == MiddleDisplay.NEXTLOOP) {
			String backText = "Lv 0";
			BigInteger toBeSpent = BigInteger.ZERO;
			if (selectedUpgrade < 42) {
				toBeSpent = totalUpgradeCost(selectedUpgrade, currentPlaythrough.upgradeLevels[selectedUpgrade]);
			}
			if (toBeSpent.compareTo(BigInteger.ZERO) > 0) {
				backText = "<html><center>Lv 0<br>("+ format(toBeSpent) + ")</center></html>";
				defaultState(back);
			} else {
				disabledState(back);
			}
			back.setText(backText);
		} else if (currentMiddleDisplay == MiddleDisplay.STATS && currentStatsCategory == StatsCategory.SIMULATOR) {
			back.setText("<html><center>-1<br>Stam</center></html>");
			specialState(back);
		} else if (currentMiddleDisplay == MiddleDisplay.OPTIONS && currentOptionSettings == OptionSettings.SAVES && selectedSave < saveNames.length) {
			back.setText("Delete");
			specialState(back);
		} else if (currentMiddleDisplay == MiddleDisplay.OPTIONS && currentOptionSettings == OptionSettings.AUDIO && (currentPlaythrough.currentOptions[OptionSettings.AUDIO.index] == OptionElements.BGMVOLUME || currentPlaythrough.currentOptions[OptionSettings.AUDIO.index] == OptionElements.SFXVOLUME)) {
			back.setText("-");
			specialState(back);
		} else {
			back.setText("<html><center>&lt;<br>Back</center></html>");
			if (((currentTimeSlot == TimeSlot.values()[0] && currentMiddleDisplay  == MiddleDisplay.ACTION) || currentMiddleDisplay == MiddleDisplay.NEWDAY || currentMiddleDisplay == MiddleDisplay.RESULTS || (currentMiddleDisplay == MiddleDisplay.STORY && sceneProgress == 0)) && currentMiddleDisplay.Previous == null) {
				disabledState(back);
			} else {
				defaultState(back);
			}
		}
		defaultState(forward);
		if (currentMiddleDisplay == MiddleDisplay.NEXTLOOP) {
			String forwardText = "+1 Lv";
			BigInteger toBeSpent = BigInteger.ZERO;
			if (selectedUpgrade < 42 && (upgradeMaxLevels[selectedUpgrade] == 0 || currentPlaythrough.upgradeLevels[selectedUpgrade] < upgradeMaxLevels[selectedUpgrade])) {
				toBeSpent = upgradeLevelCost(selectedUpgrade, currentPlaythrough.upgradeLevels[selectedUpgrade]);
			}
			if (selectedUpgrade == 42) {
				if (nextLoopArmed) {
					forwardText = "<html><center>Begin<br>Loop " + (currentPlaythrough.loops+2) + "</center></html>";
				} else {
					forwardText = "Wake Up";
				}
			} else if (selectedUpgrade == 43) {
				BigInteger amountReset = todayMOL.add(currentPlaythrough.startMOL).subtract(remainingMOL);
				forwardText = "<html><center>Reset Upgrades<br>(" + format(amountReset) + ")</center></html>";
				if (amountReset.compareTo(BigInteger.ZERO) > 0) {
					defaultState(forward);
				} else {
					disabledState(forward);
				}
			} else if (toBeSpent.compareTo(BigInteger.ZERO) > 0 && toBeSpent.compareTo(remainingMOL) <= 0) {
				forwardText = "<html><center>+1 Lv<br>("+ format(toBeSpent) + ")</center></html>";
				defaultState(forward);
			} else {
				disabledState(forward);
			}
			forward.setText(forwardText);
		} else if (currentMiddleDisplay == MiddleDisplay.STATS && currentStatsCategory == StatsCategory.SIMULATOR) {
			if (simulatorType == 0) {
				forward.setText("Attribute");
			} else if (simulatorType == 1) {
				forward.setText("Goal");
			} else {
				forward.setText("Relationship");
			}
			specialState(forward);
		} else if (currentMiddleDisplay == MiddleDisplay.OPTIONS && currentOptionSettings == OptionSettings.SAVES && selectedSave < saveNames.length) {
            if (deleting) {
                forward.setText("DELETE");
                specialState(forward);
                forward.firstColor = Color.RED;
            } else if (verifying) {
                forward.setText("<html><center>LOAD<br>AND TEST</center></html>");
                newThingState(forward);
            } else {
                forward.setText("Save/Load");
                specialState(forward);
            }
        } else if (currentMiddleDisplay == MiddleDisplay.OPTIONS && currentOptionSettings == OptionSettings.GENDERS) {
            forward.setText("Change");
            specialState(forward);
		} else if (autoOn) {
			forward.setText("<html>&nbsp;&nbsp;&nbsp;&nbsp;||<br>&nbsp;Pause&nbsp;</html>");
		} else if (currentMiddleDisplay == MiddleDisplay.OPTIONS && currentOptionSettings == OptionSettings.AUDIO && currentPlaythrough.currentOptions[OptionSettings.AUDIO.index] == OptionElements.BGMVOLUME) {
			int representation = ((int)(currentPlaythrough.bgmVolume) + 80)*10/8;
			if (representation < 0) {
				representation = 0;
			}
			forward.setText(representation + "%");
		} else if (currentMiddleDisplay == MiddleDisplay.OPTIONS && currentOptionSettings == OptionSettings.AUDIO && currentPlaythrough.currentOptions[OptionSettings.AUDIO.index] == OptionElements.SFXVOLUME) {
			int representation = ((int)(currentPlaythrough.sfxVolume) + 80)*10/8;
			if (representation < 0) {
				representation = 0;
			}
			forward.setText(representation + "%");
		} else if (currentMiddleDisplay == MiddleDisplay.ACTION) {
			String result;
			if (currentTimeSlot == TimeSlot.values()[TimeSlot.values().length-1]) {
				result = "&gt<br>Resolve Day";
			} else {
				result = "&gt<br>Set Action&nbsp;";
			}
			forward.setText("<html><center>" + result + "</center></html>");
		} else if (currentMiddleDisplay == MiddleDisplay.RESULTS) {
			String result = "";
			boolean anotherAction = false;
			for (int i = timeSlotNumber()+1; i < TimeSlot.values().length; i++) {
				resolveAction(currentPlaythrough.weeklyActions[weekDayNumber()][i], true, false);
				if (actionIsShown(currentPlaythrough.weeklyActions[weekDayNumber()][i]) != AutoStopReason.NOSTOP) {
					anotherAction = true;
					break;
				}
			}
			currentPlaythrough.sendStats();
			for (int i = 0; i < timeSlotNumber()+1; i++) {
				if (i == timeSlotNumber()) {
					int barHeight = actualHeight/100;
					if (barHeight < 13) {
						barHeight = 13;
					}
					Goal usedGoal = getVisibleGoal(currentPlaythrough.weeklyActions[weekDayNumber()][i], false);
					if (usedGoal != null) {
						usedGoal.barEnd = 1000 - simulatedGoals[usedGoal.index].subtract(usedGoal.previousRequirements).multiply(THOUSAND).divide(usedGoal.requirement).intValue();
						usedGoal.barDisplay = usedGoal.barEnd;
						setGoalBar(usedGoal, false);
						rightFullPane.setBounds(actualWidth/2, 0, actualWidth/2, actualHeight*2/5 - actualWidth/10 - barHeight);
						rightFullArea.setBounds(2, 2, actualWidth/2 - 4, actualHeight*2/5 - actualWidth/10 - barHeight - 4);
						goalProgressBar.setBounds(actualWidth/2, actualHeight*2/5 - actualWidth/10 - barHeight-1, actualWidth/2, barHeight);
						goalProgressBar.setVisible(true);
						goalProgressBar.setFont(new Font(subheaderFont, Font.PLAIN, barHeight*12/13));
						goalProgressBar.setPreferredSize(new Dimension(actualWidth/2, barHeight));
						if (allGoalsComplete(usedGoal.index, false)) {
							goalProgressBar.setToolTipText("No further Goals for this Action");
						} else {
							goalProgressBar.setToolTipText(usedGoal.toolTip);
						}
					}
					resolveAction(currentPlaythrough.weeklyActions[weekDayNumber()][i], true, true);
				} else {
					resolveAction(currentPlaythrough.weeklyActions[weekDayNumber()][i], true, false);
				}
			}
			if (!anotherAction) {
				result = "&gt<br>&nbsp;Next Day";
			} else {
				result = "&gt<br>Continue&nbsp;";
			}
			forward.setText("<html><center>" + result + "</center></html>");
		} else if (currentMiddleDisplay == MiddleDisplay.NEWDAY) {
			forward.setText("Begin");
		} else if (currentMiddleDisplay == MiddleDisplay.STORY) {
			if (sceneProgress < currentScene.screens.length - 1) {
				forward.setText("Forward");
			} else {
				forward.setText("End");
			}
		} else if (currentMiddleDisplay == MiddleDisplay.OPTIONS) {
			forward.setText(MiddleDisplay.OPTIONS.Previous.display);
		} else {
			forward.setText(MiddleDisplay.ACTION.display);
		}
		forward.setFont(stateSummaryFontObject);
		if (currentMiddleDisplay == MiddleDisplay.NEXTLOOP) {
			String allText = "All";
			BigInteger toBeSpent = BigInteger.ZERO;
			int checkedLevel = 0;
			if (selectedUpgrade < 42) {
				checkedLevel = currentPlaythrough.upgradeLevels[selectedUpgrade];
				while ((upgradeMaxLevels[selectedUpgrade] == 0 || checkedLevel < upgradeMaxLevels[selectedUpgrade]) && (remainingMOL.subtract(toBeSpent)).compareTo(upgradeLevelCost(selectedUpgrade, checkedLevel)) >= 0) {
					toBeSpent = toBeSpent.add(upgradeLevelCost(selectedUpgrade, checkedLevel));
					checkedLevel++;
				}
			}
			if (toBeSpent.compareTo(BigInteger.ZERO) > 0) {
				allText = "<html><center>Lv " + checkedLevel + "<br>("+ format(toBeSpent) + ")</center></html>";
				defaultState(auto);
			} else {
				disabledState(auto);
			}
			auto.setText(allText);
		} else if (currentMiddleDisplay == MiddleDisplay.STATS && currentStatsCategory == StatsCategory.SIMULATOR) {
			auto.setText("<html><center>+1<br>Stam</center></html>");
			specialState(auto);
		} else if (currentMiddleDisplay == MiddleDisplay.OPTIONS && currentOptionSettings == OptionSettings.SAVES && selectedSave < saveNames.length) {
			auto.setText("Test");
			specialState(auto);
		} else if (currentMiddleDisplay == MiddleDisplay.OPTIONS && currentOptionSettings == OptionSettings.AUDIO && (currentPlaythrough.currentOptions[OptionSettings.AUDIO.index] == OptionElements.BGMVOLUME || currentPlaythrough.currentOptions[OptionSettings.AUDIO.index] == OptionElements.SFXVOLUME)) {
			auto.setText("+");
			specialState(auto);
		} else {
			if (!autoOn) {
	    		auto.setText("<html><center>&gt;&gt;&gt;<br>Auto</center></html>");
			}
			if ((currentPhase != GamePhase.ACTIONPHASE || currentMiddleDisplay == MiddleDisplay.OPTIONS) && currentMiddleDisplay != MiddleDisplay.NEXTLOOP && currentMiddleDisplay != MiddleDisplay.STORY) {
				disabledState(auto);
            } else if (autoOption() == OptionElements.ONEDAY && currentMiddleDisplay != MiddleDisplay.STORY) {
                auto.setText("<html><center>&gt;&gt;&gt;<br>Next</center></html>");
                if (currentMiddleDisplay == MiddleDisplay.NEWDAY) {
                    disabledState(auto);
                } else {
                    defaultState(auto);
                }
			} else {
				if (autoOn) {
					newThingState(auto);
				} else {
					defaultState(auto);
				}
			}
		}
		auto.setFont(stateSummaryFontObject);
		options.setText("Options");
		if (currentPhase == GamePhase.RESULTSPHASE) {
			disabledState(options);
		} else {
			defaultState(options);
			for (int i = 0; i < currentPlaythrough.progress.newEntries.length && currentMiddleDisplay != MiddleDisplay.OPTIONS; i++) {
				if (currentPlaythrough.progress.newEntries[i].equals("Unseen") || currentPlaythrough.progress.newEntries[i].equals("Looply")) {
					newThingState(options);
				}
			}
		}
		options.setFont(stateSummaryFontObject);
	}
	
	public static void defaultState(SpecialJButton b) {
		if (textBackground.equals(Color.WHITE)) {
			b.firstColor = defaultButtonColor;
			b.secondColor = Color.WHITE;
			b.setDead(false);
			b.setForeground(Color.BLACK);
		} else {
			b.firstColor = Color.BLACK;
			b.secondColor = new Color(50, 50, 50);
			b.setDead(false);
			if (currentMiddleDisplay == MiddleDisplay.NEXTLOOP && !nextLoopArmed && b == forward && selectedUpgrade == 42) {
				b.setForeground(new Color(255, 155, 0));
			} else {
				b.setForeground(Color.WHITE);
			}
		}
	}
	
	public static void specialState(SpecialJButton b) {
		if (textBackground.equals(Color.WHITE)) {
			b.firstColor = new Color(150, 150, 0);
			b.secondColor = Color.WHITE;
			b.setDead(false);
			b.setForeground(Color.BLACK);
		} else {
			b.firstColor = Color.BLACK;
			b.secondColor = new Color(100, 100, 0);
			b.setDead(false);
			b.setForeground(Color.WHITE);
		}
	}
	
	public static void disabledState(SpecialJButton b) {
		if (textBackground.equals(Color.WHITE)) {
			b.firstColor = defaultButtonColor;
			b.secondColor = defaultButtonColor;
			b.setDead(true);
			b.setForeground(Color.BLACK);
		} else {
			b.firstColor = new Color(75, 75, 75);
			b.secondColor = new Color(75, 75, 75);
			b.setDead(true);
			b.setForeground(Color.WHITE);
		}
	}
	
	public static void newThingState(SpecialJButton b) {
		if (textBackground.equals(Color.WHITE)) {
			b.firstColor = newButtonColor;
			b.secondColor = Color.WHITE;
			b.setDead(false);
			b.setForeground(Color.BLACK);
		} else {
			b.firstColor = new Color(0, 0, 0);
			b.secondColor = new Color(0, 125, 0);
			b.setDead(false);
			b.setForeground(Color.WHITE);
		}
	}
	
	public static void upgradeState(SpecialJButton b) {
		if (b == nextLoopButton) {
			b.firstColor = Color.BLACK;
			b.secondColor = new Color(25, 25, 25);
			b.setForeground(new Color(255, 150, 0));
			b.setText("Wake Up");
		} else if (b == upgradeResetButton) {
			b.firstColor = Color.BLACK;
			b.secondColor = new Color(25, 25, 25);
			b.setForeground(Color.WHITE);
			b.setText("<html><center>Reset<br>(" + format(todayMOL.add(currentPlaythrough.startMOL).subtract(remainingMOL)) + ")</center></html>");
		} else {
			if ((upgradeMaxLevels[b.upgradeID] == 0 || currentPlaythrough.upgradeLevels[b.upgradeID] < upgradeMaxLevels[b.upgradeID]) && remainingMOL.compareTo(upgradeLevelCost(b.upgradeID, currentPlaythrough.upgradeLevels[b.upgradeID])) >= 0) {
				b.firstColor = Color.BLACK;
				b.secondColor = speechColors[b.upgradeID%21];
			} else {
				b.firstColor = speechColors[b.upgradeID%21].darker().darker().darker();
				b.secondColor = b.firstColor;
			}
			b.setDead(false);
			b.setForeground(Color.WHITE);
		}
		if (selectedUpgrade == b.upgradeID) {
			b.setBorder(BorderFactory.createLineBorder(new Color(205, 115, 0), 2));
		} else {
			b.setBorder(UIManager.getBorder("Button.border"));
		}
	}
	
	public static void printStats() {
		if (currentStatsCategory.currentStats.associatedUpgrade >= 0) {
			describeUpgrade(currentStatsCategory.currentStats.associatedUpgrade);
		} else if (currentStatsCategory.currentStats == StatsElements.EXPENDITURES) {
			add(RIGHT, "Resources Expended");
			if (currentPlaythrough.loops > 0) {
				add(RIGHT, " This Loop (Total)");
			}
			add(RIGHT, "\n\nStamina spent: " + format(currentPlaythrough.totalStamina));
			if (currentPlaythrough.loops > 0) {
				add(RIGHT, " (" + format(currentPlaythrough.progress.totalStamina.add(currentPlaythrough.totalStamina)) + ")");
			}
			if (barVisible(2) || !currentPlaythrough.progress.totalFinances.equals(BigInteger.ZERO)) {
				add(RIGHT, "\nFinances spent: " + format(currentPlaythrough.totalFinances));
				if (currentPlaythrough.loops > 0) {
					add(RIGHT, " (" + format(currentPlaythrough.progress.totalFinances.add(currentPlaythrough.totalFinances)) + ")");
				}
				add(RIGHT, " xp");
			}
			if (barVisible(3) || !currentPlaythrough.progress.totalHealth.equals(BigInteger.ZERO)) {
				add(RIGHT, "\nHealth spent: " + format(currentPlaythrough.totalHealth));
				if (currentPlaythrough.loops > 0) {
					add(RIGHT, " (" + format(currentPlaythrough.progress.totalHealth.add(currentPlaythrough.totalHealth)) + ")");
				}
			}
		} else if (currentStatsCategory == StatsCategory.SIMULATOR) {
			if (currentStatsCategory.currentStats.placement == 21) {
				simulatorType = 2;
			}
			currentPlaythrough.sendStats();
			BigInteger runningTotal = simulatorCost;
			add(RIGHT, "When spending " + format(runningTotal) + " Stamina on ");
			if (simulatorType == 0) {
				add(RIGHT, currentPlaythrough.personNames[currentStatsCategory.currentStats.placement] + "'s relationship", currentStatsCategory.currentStats.placement);
			} else if (simulatorType == 1) {
				add(RIGHT, attributeNames[currentStatsCategory.currentStats.placement], currentStatsCategory.currentStats.placement);
			} else if (simulatorType == 2) {
				if (currentStatsCategory.currentStats.placement < 21) {
					add(RIGHT, currentPlaythrough.personNames[currentStatsCategory.currentStats.placement] + "'s goal", currentStatsCategory.currentStats.placement);
				} else {
					add(RIGHT, "unaligned goal");
				}
			}
			if (stanceRoutine() == RoutineElements.TOUGH && simulatorType == 2) {
				runningTotal = runningTotal.add(ten(1));
				add(RIGHT, "\n" + format(runningTotal) + " after " + RoutineElements.TOUGH.name + " (+10)", 0);
			} else if (stanceRoutine() == RoutineElements.VULNERABLE && simulatorType == 0) {
				runningTotal = runningTotal.add(ten(5));
				add(RIGHT, "\n" + format(runningTotal) + " after " + RoutineElements.VULNERABLE.name + " (+50)", 5);
			} else if (stanceRoutine() == RoutineElements.GENEROUS && (simulatorType == 0 || simulatorType == 2)) {
				runningTotal = runningTotal.add(one(25));
				add(RIGHT, "\n" + format(runningTotal) + " after " + RoutineElements.GENEROUS.name + " (+25)", 2);
			} else if (stanceRoutine() == RoutineElements.FOCUSED) {
				runningTotal = runningTotal.add(one(15));
				add(RIGHT, "\n" + format(runningTotal) + " after " + RoutineElements.FOCUSED.name + " (+15)", 1);
			} else if (stanceRoutine() == RoutineElements.SELFDESTRUCTIVE && simulatorCost.compareTo(ten(4)) >= 0 && simulatorType != 0) {
				runningTotal = runningTotal.add(hundred(1));
				add(RIGHT, "\n" + format(runningTotal) + " after " + RoutineElements.SELFDESTRUCTIVE.name + " (+100)", 0);
			} else if (stanceRoutine() == RoutineElements.LONER && simulatorType != 0) {
                runningTotal = runningTotal.add(one(35));
                add(RIGHT, "\n" + format(runningTotal) + " after " + RoutineElements.LONER.name + " (+35)", 0);
            }
			if (equipmentRoutine() == RoutineElements.EYECATCHING && simulatorType == 0) {
				runningTotal = runningTotal.add(runningTotal);
				add(RIGHT, "\n" + format(runningTotal) + " after " + RoutineElements.EYECATCHING.name + " (x2)", 5);
			} else if (equipmentRoutine() == RoutineElements.LARCENY && simulatorType == 2) {
				runningTotal = runningTotal.multiply(BigInteger.valueOf(3)).divide(BigInteger.valueOf(2));
				add(RIGHT, "\n" + format(runningTotal) + " after " + RoutineElements.LARCENY.name + " (x1.5)", 0);
			}
			if (bodyRoutine() == RoutineElements.TRAINED && simulatorType == 1 && currentStatsCategory.currentStats.placement == 0) {
				runningTotal = runningTotal.add(runningTotal);
				add(RIGHT, "\n" + format(runningTotal) + " after " + RoutineElements.TRAINED.name + " (x2)", 4);
			} else if (bodyRoutine() == RoutineElements.SCARRED && simulatorType == 0) {
				runningTotal = runningTotal.multiply(BigInteger.valueOf(4)).divide(BigInteger.valueOf(5));
				add(RIGHT, "\n" + format(runningTotal) + " after " + RoutineElements.SCARRED.name + " (x0.8)", 3);
			}
			if (currentStatsCategory.currentStats != StatsElements.OTHER) {
				BigInteger relationshipMulti = relationshipMultiplier(currentStatsCategory.currentStats.placement);
				if (simulatorType != 0 && relationshipMulti.compareTo(HUNDRED) > 0) {
					runningTotal = runningTotal.multiply(relationshipMulti).divide(HUNDRED);
					BigInteger[] splitMulti = relationshipMulti.divideAndRemainder(HUNDRED);
					add(RIGHT, "\n" + format(runningTotal) + " after relationship with " + currentPlaythrough.personNames[currentStatsCategory.currentStats.placement] + " (x" + format(splitMulti[0].multiply(HUNDRED)), currentStatsCategory.currentStats.placement);
					if (!splitMulti[1].equals(BigInteger.ZERO)) {
						splitMulti = splitMulti[1].divideAndRemainder(BigInteger.TEN);
						add(RIGHT, "." + splitMulti[0], currentStatsCategory.currentStats.placement);
						if (!splitMulti[1].equals(BigInteger.ZERO)) {
							add(RIGHT, splitMulti[1].toString(), currentStatsCategory.currentStats.placement);
						}
					}
					add(RIGHT, ")", currentStatsCategory.currentStats.placement);
				}
			}
			BigInteger statMulti;
			if (simulatorType == 0) {
				statMulti = charismaMultiplier();
			} else if (simulatorType == 1) {
				statMulti = academicsMultiplier();
			} else {
				statMulti = focusMultiplier();
			}
			if (statMulti.compareTo(HUNDRED) > 0) {
				int color = 5;
				if (simulatorType == 1) {
					color = 4;
				} else if (simulatorType == 2) {
					color = 1;
				}
				runningTotal = runningTotal.multiply(statMulti).divide(HUNDRED);
				BigInteger[] splitMulti = statMulti.divideAndRemainder(HUNDRED);
				add(RIGHT, "\n" + format(runningTotal) + " after ", color);
				if (simulatorType == 0) {
					add(RIGHT, "Charisma", color);
				} else if (simulatorType == 1) {
					add(RIGHT, "Academics", color);
				} else {
					add(RIGHT, "Focus", color);
				}
				add(RIGHT, " (x" + format(splitMulti[0].multiply(HUNDRED)), color);
				if (!splitMulti[1].equals(BigInteger.ZERO)) {
					splitMulti = splitMulti[1].divideAndRemainder(BigInteger.TEN);
					add(RIGHT, "." + splitMulti[0], color);
					if (!splitMulti[1].equals(BigInteger.ZERO)) {
						add(RIGHT, splitMulti[1].toString(), color);
					}
				}
				add(RIGHT, ")", color);
			}
			if (simulatorType == 0) {
				add(RIGHT, "\nFinal relationship progress: ");
			} else if (simulatorType == 1) {
				add(RIGHT, "\nFinal attribute progress: ");
			} else if (simulatorType == 2) {
				add(RIGHT, "\nFinal goal progress: ");
			}
			if (currentStatsCategory.currentStats == StatsElements.OTHER) {
				add(RIGHT, format(runningTotal) + "xp");
			} else {
				add(RIGHT, format(runningTotal) + "xp", currentStatsCategory.currentStats.placement);
			}
		}
	}
	
	public static void describeSave(Playthrough p) {
		add(RIGHT, "Day " + (p.currentDay+1));
		if (p.loops > 0 || currentPlaythrough.loops > 0) {
			add(RIGHT, ", Loop " + (p.loops+1));
		}
		BigInteger foundMOL = BigInteger.ZERO;
		for (int i = 0; i < Achievement.values().length; i++) {
			foundMOL = foundMOL.add(getScore(p, Achievement.values()[i]));
		}
		add(RIGHT, "\n" + format(foundMOL));
		if (!p.startMOL.equals(BigInteger.ZERO)) {
			add(RIGHT, "+" + format(p.startMOL));
		}
		add(RIGHT, " Meaning of Life\n");
		boolean[] addSymbol = new boolean[21];
		boolean[] symbolColored = new boolean[21];
		for (int i = 2; i < 42; i++) {
			if (upgradeAllowed(p, i)) {
				if (addSymbol[i%21]) {
					symbolColored[i%21] = true;
				} else {
					addSymbol[i%21] = true;
					if (i % 21 < 2) {
						symbolColored[i%21] = true;
					}
				}
			}
		}
		for (int i = 0; i < 21; i++) {
			if (addSymbol[i]) {
				if (symbolColored[i]) {
					add(RIGHT, personSymbols[i], 0);
				} else {
					add(RIGHT, personSymbols[i]);
				}
			}
		}
	}

    public static void setSkipFactor(PlotEvent associatedEvent, int index, int tier) {
        skipFactor = 1;
        if (associatedEvent == null) {
            switch (index) {
                case 1:
                    if (tier < 2) {
                        skipFactor = 3;
                    } else {
                        skipFactor = 2;
                    }
                    break;
                case 2:
                    if (tier < 6) {
                        skipFactor = 3;
                    } else {
                        skipFactor = 2;
                    }
                    break;
                case 3:
                    skipFactor = 3;
                    break;
                case 4:
                    skipFactor = 3;
                    break;
                case 5:
                    skipFactor = 3;
                    break;
                case 6:
                    if (tier < 2) {
                        skipFactor = 3;
                    } else if (tier < 3) {
                        skipFactor = 2;
                    }
                    break;
                case 7:
                    skipFactor = 3;
                    break;
                case 8:
                    skipFactor = 3;
                    break;
                case 9:
                    skipFactor = 3;
                    break;
                case 10:
                    skipFactor = 3;
                    break;
                case 11:
                    if (tier < 3) {
                        skipFactor = 3;
                    } else {
                        skipFactor = 2;
                    }
                    break;
                case 12:
                    skipFactor = 3;
                    break;
                case 13:
                    skipFactor = 3;
                    break;
                case 14:
                    skipFactor = 2;
                    break;
                case 15:
                    if (tier < 2) {
                        skipFactor = 3;
                    } else if (tier < 3) {
                        skipFactor = 2;
                    }
                    break;
                case 16:
                    skipFactor = 2;
                    break;
                case 17:
                    skipFactor = 2;
                    break;
                case 18:
                    if (tier < 1) {
                        skipFactor = 2;
                    }
                    break;
                case 19:
                    skipFactor = 2;
                    break;
                case 20:
                    if (tier < 1) {
                        skipFactor = 2;
                    }
                    break;
                case 21:
                    skipFactor = 2;
                    break;
                case 22:
                    skipFactor = 2;
                    break;
                case 23:
                    break;
                case 24:
                    //empty
                    break;
                case 25:
                    skipFactor = 2;
                    break;
                case 26:
                    skipFactor = 2;
                    break;
                case 27:
                    skipFactor = 2;
                    break;
                case 28:
                    break;
            }
        } else {
            switch (associatedEvent) {
                case ABDUCTIONMISSED:
                    skipFactor = 3;
                    break;
                case COLLEGETOWNDESTRUCTION:
                    skipFactor = 3;
                    break;
                case HELINTRO:
                    skipFactor = 3;
                    break;
                case METROPOLISINVASION:
                    break;
            }
        }
        if (!achievementEverEarned(currentPlaythrough, Achievement.INVESTIGATOR)) {
            skipFactor -= 2;
        } else if (!achievementEverEarned(currentPlaythrough, Achievement.SAVIOR)) {
            skipFactor -= 1;
        }
        if (skipFactor < 1) {
            skipFactor = 1;
        }
    }
	
	public static void assembleMiddlePanel() {
		/*leftHalfPane.setVisible(false);
		rightHalfPane.setVisible(false);
		leftFullPane.setVisible(false);
		rightFullPane.setVisible(false);
		goalProgressBar.setVisible(false);*/
		/*leftHalfPane.removeAll();
		rightHalfPane.removeAll();*/
		leftFullArea.getHighlighter().removeAllHighlights();
		Insets insets = frame.getInsets();
		int actualWidth = frame.getWidth() - insets.left - insets.right;
		int actualHeight = frame.getHeight() - insets.top - insets.bottom;
		leftHalfPane.setBounds(0, 0, actualWidth/4, actualHeight*2/5 - actualWidth/10);
		rightHalfPane.setBounds(actualWidth/4, 0, actualWidth/4, actualHeight*2/5 - actualWidth/10);
		leftFullPane.setBounds(0, 0, actualWidth/2, actualHeight*2/5 - actualWidth/10);
		//leftFullArea.setBounds(2, 2, actualWidth/2 - 4, actualHeight*2/5 - actualWidth/10 - 4);
		rightFullPane.setBounds(actualWidth/2, 0, actualWidth/2, actualHeight*2/5 - actualWidth/10);
		//rightFullArea.setBounds(2, 2, actualWidth/2 - 4, actualHeight*2/5 - actualWidth/10 - 4);
		leftFullArea.setText("");
		rightFullArea.setText("");
		int fullTextSize = (actualHeight*2/5 - actualWidth/10)/7 - 2;
		StyleConstants.setFontSize(leftFullAttributes, fullTextSize);
		StyleConstants.setFontSize(rightFullAttributes, fullTextSize);
		rightFullArea.selectAll();
		StyleConstants.setLineSpacing(rightFullAttributes, -0.25f);
		rightStyledDoc.setParagraphAttributes(0, 0, rightFullAttributes, false);
		leftFullArea.selectAll();
		//StyleConstants.setLineSpacing(leftFullAttributes, -0.25f);
		leftStyledDoc.setParagraphAttributes(0, 0, leftFullAttributes, false);
		Goal visibleGoal = null;
		int barHeight = actualHeight/100;
		if (barHeight < 13) {
			barHeight = 13;
		}
		for (int i = 0; i < 7; i++) {
			weekDayLabels[i].setVisible(false);
		}
		if (currentMiddleDisplay == MiddleDisplay.ACTION) {
			currentOptionMenu = null;
			leftHalfPane.setVisible(true);
			rightHalfPane.setVisible(true);
			leftFullPane.setVisible(false);
			rightFullPane.setVisible(true);
			
			currentPlaythrough.sendStats();
			for (int i = 0; i < currentTimeSlot.placement; i++) {
				resolveAction(currentPlaythrough.weeklyActions[weekDayNumber()][i], true, false);
			}
			
			if (currentSpotMenu == null || currentSpotMenu.ownLocale != currentPlaythrough.currentLocale) {
				currentSpotMenu = new SpotMenu(currentPlaythrough.currentLocale);
			}
			currentSpotList = currentSpotMenu.getList();
			leftHalfPane.setViewportView(currentSpotList);
			
			if (currentActionMenu == null || currentActionMenu.ownSpot != currentPlaythrough.currentLocale.currentSpot || currentPlaythrough.currentLocale.currentSpot.currentAction.availableSlot != currentTimeSlot.placement) {
				currentActionMenu = new ActionMenu(currentPlaythrough.currentLocale.currentSpot);
			}
			currentActionList = currentActionMenu.getList();
			rightHalfPane.setViewportView(currentActionList);
			
			add(RIGHT, getActionSummary(currentPlaythrough.currentLocale.currentSpot.currentAction));
			BigInteger staminaSpent = getTotalStaminaEffect(currentPlaythrough.currentLocale.currentSpot.currentAction);
			BigInteger baseStaminaSpent = getStaminaEffect(currentPlaythrough.currentLocale.currentSpot.currentAction);
			boolean restoring = false;
			if (staminaSpent.compareTo(BigInteger.ZERO) > 0) {
				if (staminaSpent.compareTo(simulatedStamina) > 0) {
					add(RIGHT, "\n-" + format(simulatedStamina, staminaSpent) + "/" + format(staminaSpent) + " Stamina", 3);
					baseStaminaSpent = simulatedStamina;
					staminaSpent = simulatedStamina;
				} else {
					add(RIGHT, "\n-" + format(staminaSpent) + " Stamina");
				}
				if (!getBodyArmorAdjustment(getDisplayedAction()).equals(BigInteger.ZERO)) {
					add(RIGHT, " (" + format(staminaSpent.subtract(getBodyArmorAdjustment(getDisplayedAction()))) + " base)");
				}
			} else if (staminaSpent.compareTo(BigInteger.ZERO) < 0) {
				restoring = true;
                String qualifier;
				if (dietRoutine() == RoutineElements.MOSTLYCOFFEE) {
                    qualifier = "";
				} else if (dietRoutine() == RoutineElements.FINEDINING || dietRoutine() == RoutineElements.RESTAURANT) {
					qualifier = currentPlaythrough.currentLocale.currentSpot.currentAction.baseCost.multiply(BigInteger.valueOf(2)).negate() + "% (";
				} else {
                    qualifier = currentPlaythrough.currentLocale.currentSpot.currentAction.baseCost.negate() + "% (";
				}
                add(RIGHT, "\nRestore " + qualifier);
                if (simulatedStamina.subtract(staminaSpent).compareTo(maxStamina()) <= 0) {
                    add(RIGHT, format(staminaSpent.negate()));
                } else {
                    add(RIGHT, format(maxStamina().subtract(simulatedStamina)), 3);
                    add(RIGHT, "/" + format(staminaSpent.negate()));
                }
                if (!qualifier.isEmpty()) {
                    add(RIGHT, ")");
                }
                add(RIGHT, " Stamina");
			}
			BigInteger healthSpent = getTotalHealthEffect(currentPlaythrough.currentLocale.currentSpot.currentAction);
			if (healthSpent.compareTo(BigInteger.ZERO) > 0) {
				if (!restoring) {
					add(RIGHT, ", ");
				} else {
					add(RIGHT, ", -", 3);
				}
				add(RIGHT, format(healthSpent) + " Health", 3);
				restoring = false;
			} else if (healthSpent.compareTo(BigInteger.ZERO) < 0) {
				if (restoring) {
					add(RIGHT, ", ");
				} else {
					add(RIGHT, ", restore ");
				}
				add(RIGHT, format(healthSpent.negate()) + " Health", 0);
				restoring = true;
			}
			BigInteger financesSpent = getFinancesEffect(currentPlaythrough.currentLocale.currentSpot.currentAction);
			if (financesSpent.compareTo(BigInteger.ZERO) > 0) {
				if (!restoring) {
					add(RIGHT, ", ");
				} else {
					add(RIGHT, ", -", 2);
				}
				add(RIGHT, format(financesSpent) + " Finances xp (" + xpSignificance(2, financesSpent) + " levels)", 2);
				restoring = false;
			}
			if (actionIsAllowed(currentPlaythrough.currentLocale.currentSpot.currentAction, currentTimeSlot)) {
				BigInteger[] projectedProgress = gainedProgress(currentPlaythrough.currentLocale.currentSpot.currentAction, baseStaminaSpent);
				if (projectedProgress[0].compareTo(BigInteger.ZERO) > 0 && relationshipProgress[currentPlaythrough.currentLocale.currentSpot.currentAction.relationship].isVisible() && (getDisplayedAction() != Action.RENDEZVOUS || getGoalLevel(28, true) > 0)) {
					BigInteger[] multiplier = getRelationshipMultiplier(currentPlaythrough.currentLocale.currentSpot.currentAction).divideAndRemainder(HUNDRED);
					if (multiplier[0].compareTo(BigInteger.ONE) > 0 || !multiplier[1].equals(BigInteger.ZERO)) {
						String added = "x" + multiplier[0];
						if (!multiplier[1].equals(BigInteger.ZERO)) {
							added = added + "." + multiplier[1].divide(BigInteger.TEN);
							BigInteger lastDigit = multiplier[1].divideAndRemainder(BigInteger.TEN)[1];
							if (!lastDigit.equals(BigInteger.ZERO)) {
								added = added + lastDigit;
							}
						}
						boldAdd(RIGHT, "\n+" + format(projectedProgress[0]) + " " + currentPlaythrough.personNames[currentPlaythrough.currentLocale.currentSpot.currentAction.relationship] + "'s relationship (" + added + ")", currentPlaythrough.currentLocale.currentSpot.currentAction.relationship);
					} else {
						add(RIGHT, "\n+" + format(projectedProgress[0]) + " " + currentPlaythrough.personNames[currentPlaythrough.currentLocale.currentSpot.currentAction.relationship] + "'s relationship", currentPlaythrough.currentLocale.currentSpot.currentAction.relationship);
					}
					BigInteger[] info = levelInfo(getDisplayedAction().relationship*3, simulatedRelationships[getDisplayedAction().relationship]);
					if (projectedProgress[0].compareTo(info[2].subtract(info[1])) > 0) {
						boldAdd(RIGHT, " [Lv up!]", getDisplayedAction().relationship);
					}
				}
				boolean attributeLineStarted = false;
				if (projectedProgress[1].compareTo(BigInteger.ZERO) > 0 && attributeProgress[currentPlaythrough.currentLocale.currentSpot.currentAction.attribute].isVisible()) {
					attributeLineStarted = true;
					BigInteger[] multiplier = getAttributeMultiplier(currentPlaythrough.currentLocale.currentSpot.currentAction).divideAndRemainder(HUNDRED);
					if (multiplier[0].compareTo(BigInteger.ONE) > 0 || !multiplier[1].equals(BigInteger.ZERO)) {
						String added = "x" + multiplier[0];
						if (!multiplier[1].equals(BigInteger.ZERO)) {
							added = added + "." + multiplier[1].divide(BigInteger.TEN);
							BigInteger lastDigit = multiplier[1].divideAndRemainder(BigInteger.TEN)[1];
							if (!lastDigit.equals(BigInteger.ZERO)) {
								added = added + lastDigit;
							}
						}
						boldAdd(RIGHT, "\n+" + format(projectedProgress[1]) + " " + attributeNames[currentPlaythrough.currentLocale.currentSpot.currentAction.attribute] + " experience (" + added + ")", currentPlaythrough.currentLocale.currentSpot.currentAction.attribute);
					} else {
						add(RIGHT, "\n+" + format(projectedProgress[1]) + " " + attributeNames[currentPlaythrough.currentLocale.currentSpot.currentAction.attribute] + " experience", currentPlaythrough.currentLocale.currentSpot.currentAction.attribute);
					}
					BigInteger[] info = levelInfo(getDisplayedAction().attribute*3, simulatedAttributes[getDisplayedAction().attribute]);
					if (projectedProgress[1].compareTo(info[2].subtract(info[1])) > 0) {
						boldAdd(RIGHT, " [Lv up!]", getDisplayedAction().attribute);
					}
				}
				if (stanceRoutine() == RoutineElements.ADAPTIVE && healthSpent.compareTo(BigInteger.ZERO) > 0) {
					if (attributeLineStarted) {
						add(RIGHT, ", ", 3);
					} else {
						add(RIGHT, "\n+", 3);
					}
					BigInteger extraAddition = gainedProgress(Action.ADAPTIVEACTION, healthSpent.multiply(BigInteger.valueOf(20)))[1];
					add(RIGHT, format(extraAddition) + " " + attributeNames[3] + " experience", 3);
					BigInteger baseAmount = simulatedAttributes[3];
					if (getDisplayedAction().attribute == 3) {
						baseAmount = baseAmount.add(projectedProgress[1]);
					}
					BigInteger[] info = levelInfo(9, baseAmount);
					if (extraAddition.compareTo(info[2].subtract(info[1])) > 0) {
						boldAdd(RIGHT, " [Lv up!]", 3);
					}
				}
				if (projectedProgress[2].compareTo(BigInteger.ZERO) > 0) {
					BigInteger[] multiplier = getGoalMultiplier(currentPlaythrough.currentLocale.currentSpot.currentAction).divideAndRemainder(HUNDRED);
					if (multiplier[0].compareTo(BigInteger.ONE) > 0 || !multiplier[1].equals(BigInteger.ZERO)) {
						String added = "x" + multiplier[0];
						if (!multiplier[1].equals(BigInteger.ZERO)) {
							added = added + "." + multiplier[1].divide(BigInteger.TEN);
							BigInteger lastDigit = multiplier[1].divideAndRemainder(BigInteger.TEN)[1];
							if (!lastDigit.equals(BigInteger.ZERO)) {
								added = added + lastDigit;
							}
						}
						boldAdd(RIGHT, "\n+" + format(projectedProgress[2]) + " goal progress (" + added + ")");
					} else {
						add(RIGHT, "\n+" + format(projectedProgress[2]) + " goal progress");
					}
					Goal usedGoal = getVisibleGoal(getDisplayedAction(), false);
					if (projectedProgress[2].compareTo(usedGoal.requirement.add(usedGoal.previousRequirements).subtract(simulatedGoals[usedGoal.index])) >= 0) {
						boldAdd(RIGHT, " [Complete!]");
					}
				}
			}
			boolean removeEntry = false;
			int removedIndex = 0;
			for (int i = 0; i < currentPlaythrough.progress.newEntries.length; i++) {
				if (currentPlaythrough.progress.newEntries[i].equals(currentPlaythrough.currentLocale.currentSpot.currentAction.name)) {
					removedIndex = i;
					removeEntry = true;
				}
			}
			if (removeEntry) {
				String[] newNewEntries = new String[currentPlaythrough.progress.newEntries.length-1];
				for (int i = 0; i < currentPlaythrough.progress.newEntries.length; i++) {
					if (i < removedIndex) {
						newNewEntries[i] = currentPlaythrough.progress.newEntries[i];
					} else if (i > removedIndex) {
						newNewEntries[i-1] = currentPlaythrough.progress.newEntries[i];
					}
				}
				currentPlaythrough.progress.newEntries = newNewEntries;
			}
			visibleGoal = getVisibleGoal(currentPlaythrough.currentLocale.currentSpot.currentAction, true);
			if (currentPlaythrough.currentDay == 0 && currentPlaythrough.loops == 0 && getDisplayedAction() == Action.SLEEPIN) {
				add(RIGHT, "\n\nYour Stamina is already full, so try selecting 'Daydream' instead.");
			}
		} else if (currentMiddleDisplay == MiddleDisplay.ROUTINE) {
			leftHalfPane.setVisible(true);
			rightHalfPane.setVisible(true);
			leftFullPane.setVisible(false);
			rightFullPane.setVisible(true);
			if (currentRoutineSettings == null) {
				currentRoutineSettings = getAllowedRoutineSettings()[0];
			}
			if (currentRoutineMenu == null) {
				currentRoutineMenu = new RoutineMenu();
			}
			currentRoutineList = currentRoutineMenu.getList();
			leftHalfPane.setViewportView(currentRoutineList);
			
			if (currentRoutineElementMenu == null || currentRoutineSettings != currentRoutineElementMenu.ownRoutineSettings) {
				currentRoutineElementMenu = new RoutineElementMenu(currentRoutineSettings);
			}
			currentRoutineElementsList = currentRoutineElementMenu.getList();
			rightHalfPane.setViewportView(currentRoutineElementsList);
			
			add(RIGHT, getRoutineElementSummary(currentRoutineSettings.currentElement));
			boolean removeEntry = false;
			int removedIndex = 0;
			for (int i = 0; i < currentPlaythrough.progress.newEntries.length; i++) {
				if (currentPlaythrough.progress.newEntries[i].equals(currentRoutineSettings.currentElement.name)) {
					removedIndex = i;
					removeEntry = true;
				}
			}
			if (removeEntry) {
				String[] newNewEntries = new String[currentPlaythrough.progress.newEntries.length-1];
				for (int i = 0; i < currentPlaythrough.progress.newEntries.length; i++) {
					if (i < removedIndex) {
						newNewEntries[i] = currentPlaythrough.progress.newEntries[i];
					} else if (i > removedIndex) {
						newNewEntries[i-1] = currentPlaythrough.progress.newEntries[i];
					}
				}
				currentPlaythrough.progress.newEntries = newNewEntries;
			}
		} else if (currentMiddleDisplay == MiddleDisplay.ACHIEVEMENTS) {
			leftHalfPane.setVisible(true);
			rightHalfPane.setVisible(true);
			leftFullPane.setVisible(false);
			rightFullPane.setVisible(true);
			if (currentAchievementCategory == null) {
				currentAchievementCategory = AchievementCategory.values()[0];
			}
			if (currentAchievementCategory.currentAchievement == null) {
				currentAchievementCategory.currentAchievement = getKnownAchievements(currentAchievementCategory)[0];
			}
			if (currentAchievementCategoryMenu == null) {
				currentAchievementCategoryMenu = new AchievementCategoryMenu();
			}
			currentAchievementCategoryList = currentAchievementCategoryMenu.getList();
			leftHalfPane.setViewportView(currentAchievementCategoryList);
			
			if (currentAchievementMenu == null || currentAchievementCategory != currentAchievementMenu.ownAchievementCategory) {
				currentAchievementMenu = new AchievementMenu(currentAchievementCategory);
			}
			currentAchievementList = currentAchievementMenu.getList();
			rightHalfPane.setViewportView(currentAchievementList);
			
			add(RIGHT, getAchievementSummary(currentAchievementCategory.currentAchievement));
			boolean removeEntry = false;
			int removedIndex = 0;
			for (int i = 0; i < currentPlaythrough.progress.newEntries.length; i++) {
				if (currentPlaythrough.progress.newEntries[i].equals(getAchievementDisplay(currentAchievementCategory.currentAchievement))) {
					removedIndex = i;
					removeEntry = true;
				}
			}
			if (removeEntry) {
				String[] newNewEntries = new String[currentPlaythrough.progress.newEntries.length-1];
				for (int i = 0; i < currentPlaythrough.progress.newEntries.length; i++) {
					if (i < removedIndex) {
						newNewEntries[i] = currentPlaythrough.progress.newEntries[i];
					} else if (i > removedIndex) {
						newNewEntries[i-1] = currentPlaythrough.progress.newEntries[i];
					}
				}
				currentPlaythrough.progress.newEntries = newNewEntries;
			}
		} else if (currentMiddleDisplay == MiddleDisplay.RESULTS) {
			leftHalfPane.setVisible(false);
			rightHalfPane.setVisible(false);
			leftFullPane.setVisible(true);
			rightFullPane.setVisible(true);
			Action resolvedAction = getCurrentAction();
			
			WindowContents actionFlavor = getActionFlavor(resolvedAction);
			actionFlavor.print(LEFT);
			String[] previousFlavors = currentPlaythrough.progress.seenVariants.get(resolvedAction);
			if (previousFlavors == null) {
				previousFlavors = new String[0];
			}
			String compared = previousOutputOfAction(resolvedAction);
			if (compared != null) {
				int startIndex = -1;
				int endIndex = actionFlavor.rawString().length();
				int difference = actionFlavor.rawString().length() - compared.length();
				while (startIndex < actionFlavor.rawString().length() - 1 && startIndex < compared.length() - 1) {
					startIndex++;
					if (actionFlavor.rawString().charAt(startIndex) != compared.charAt(startIndex)) {
						break;
					}
				}
				while (endIndex > 0 && endIndex > difference) {
					endIndex--;
					if (actionFlavor.rawString().charAt(endIndex) != compared.charAt(endIndex - difference)) {
						break;
					}
				}
                if (endIndex >= actionFlavor.rawString().length()-1) {
                    endIndex = actionFlavor.rawString().length()-2;
                }
				if (!actionFlavor.rawString().equals(compared)) {
                    try {
                        leftFullArea.getHighlighter().addHighlight(startIndex, endIndex+1, leftAreaPainter);
                    } catch (BadLocationException e) {
                        System.out.println("error highlighting results");
                        System.out.println(e);
                    }
				}
			}
			if (previousFlavors.length == 0 || compared != null) {
				String[] newPreviousFlavors = new String[previousFlavors.length+1];
				for (int i = 0; i < previousFlavors.length; i++) {
					newPreviousFlavors[i] = previousFlavors[i];
				}
				newPreviousFlavors[previousFlavors.length] = actionFlavor.rawString();
				currentPlaythrough.progress.seenVariants.put(resolvedAction, newPreviousFlavors);
			}
			
			add(RIGHT, resolvedAction.resolutionText);
			visibleGoal = getVisibleGoal(resolvedAction, false);
		} else if (currentMiddleDisplay == MiddleDisplay.NEWDAY) {
			leftHalfPane.setVisible(false);
			rightHalfPane.setVisible(false);
			leftFullPane.setVisible(true);
			rightFullPane.setVisible(true);
			
			getNewDayFlavor().print(LEFT);
			getNewDayContents().print(RIGHT);
		} else if (currentMiddleDisplay == MiddleDisplay.OPTIONS) {
			leftHalfPane.setVisible(true);
			rightHalfPane.setVisible(true);
			leftFullPane.setVisible(false);
			rightFullPane.setVisible(true);
			if (currentOptionSettings == null) {
				currentOptionSettings = OptionSettings.values()[0];
			}
			if (currentOptionMenu == null) {
				currentOptionMenu = new OptionMenu();
			}
			currentOptionList = currentOptionMenu.getList();
			leftHalfPane.setViewportView(currentOptionList);
			
			if (currentOptionElementMenu == null || currentOptionSettings != currentOptionElementMenu.ownOptionSettings) {
				currentOptionElementMenu = new OptionElementMenu(currentOptionSettings);
			}
			currentOptionElementsList = currentOptionElementMenu.getList();
			rightHalfPane.setViewportView(currentOptionElementsList);

            if (currentOptionSettings == OptionSettings.GENDERS) {
                if (currentPlaythrough.currentOptions[currentOptionSettings.index] == OptionElements.PLAYERGENDER) {
                    if (currentPlaythrough.ownGender.presentation() == Gender.MALE) {
                        add(RIGHT, "The protagonist will be male");
                    } else if (currentPlaythrough.ownGender == Gender.FUTANARI) {
                        add(RIGHT, "The protagonist will be female, and will have a penis");
                    } else {
                        add(RIGHT, "The protagonist will be female");
                    }
                    if (currentPlaythrough.ownGender.sexScenes) {
                        add(RIGHT, ".  There will be the potential for romantic relationships between " + himHer(-1) + " and all other characters.");
                    } else {
                        add(RIGHT, ", and sexual scenes will not occur.");
                    }
                    if (currentPlaythrough.ownGender == Gender.FEMALE) {
                        add(RIGHT, "\n\nAs of Version " + version + ", the images in the default set will not reflect this setting.", 3);
                    }
                } else if (currentPlaythrough.currentOptions[currentOptionSettings.index] == OptionElements.UNMETGENDER) {
                    if (currentPlaythrough.unmetGender.presentation() == Gender.MALE) {
                        add(RIGHT, "Major characters not mentioned above will be male");
                    } else if (currentPlaythrough.unmetGender == Gender.FUTANARI) {
                        add(RIGHT, "Major characters not mentioned above will be female, and will have penises");
                    } else {
                        add(RIGHT, "Major characters not mentioned above will be female");
                    }
                    if (currentPlaythrough.unmetGender.sexScenes) {
                        add(RIGHT, ".  There will be the potential for romantic relationships between them and the protagonist.");
                    } else {
                        add(RIGHT, ", and sexual scenes will not occur with them by default.");
                    }
                    if (currentPlaythrough.unmetGender.presentation() == Gender.MALE || currentPlaythrough.unmetGender == Gender.FUTANARI) {
                        add(RIGHT, "\n\nAs of Version " + version + ", the images in the default set won't support this setting for at least some characters.", 3);
                    }
                } else {
                    int index = currentPlaythrough.currentOptions[currentOptionSettings.index].placement-1;
                    add(RIGHT, currentPlaythrough.personNames[index] + " will be ");
                    if (currentPlaythrough.personGenders[index].presentation() == Gender.MALE) {
                        add(RIGHT, "male");
                    } else if (currentPlaythrough.personGenders[index] == Gender.FUTANARI) {
                        add(RIGHT, "female, and will have a penis");
                    } else {
                        add(RIGHT, "female");
                    }
                    if (currentPlaythrough.personGenders[index].sexScenes) {
                        add(RIGHT, ".  Sexual events featuring " + himHer(index) + " may occur.");
                    } else {
                        add(RIGHT, ", and sexual scenes featuring " + himHer(index) + " will not occur.");
                    }
                    if (index == 0) {
                        if (currentPlaythrough.personGenders[index].presentation() != Gender.FEMALE || currentPlaythrough.personGenders[index] == Gender.FUTANARI) {
                            add(RIGHT, "\n\nAs of Version " + version + ", the images in the default set will not reflect this setting.", 3);
                        }
                    } else if (index == 1) {
                        if (currentPlaythrough.personGenders[index].presentation() != Gender.FEMALE || currentPlaythrough.personGenders[index] == Gender.FUTANARI) {
                            add(RIGHT, "\n\nAs of Version " + version + ", the images in the default set will not reflect this setting.", 3);
                        }
                    } else {
                        if (currentPlaythrough.personGenders[index].presentation() != Gender.FEMALE) {
                            add(RIGHT, "\n\nAs of Version " + version + ", the images in the default set will not reflect this setting.", 3);
                        }
                    }
                }
            } else if (currentOptionSettings != OptionSettings.SAVES) {
				add(RIGHT, currentPlaythrough.currentOptions[currentOptionSettings.index].description);
			} else if (selectedSave < saveNames.length) {
				describeSave(examinedSave);
			} else {
				add(RIGHT, "No save files found.");
			}
		} else if (currentMiddleDisplay == MiddleDisplay.STATS) {
			leftHalfPane.setVisible(true);
			rightHalfPane.setVisible(true);
			leftFullPane.setVisible(false);
			rightFullPane.setVisible(true);
			if (currentStatsCategory == null) {
				currentStatsCategory = getAllowedStats()[0];
			}
			if (currentStatsCategoryMenu == null) {
				currentStatsCategoryMenu = new StatsCategoryMenu();
			}
			currentStatsList = currentStatsCategoryMenu.getList();
			leftHalfPane.setViewportView(currentStatsList);
			
			if (currentStatsMenu == null || currentStatsCategory != currentStatsMenu.ownStatsCategory) {
				currentStatsMenu = new StatsMenu(currentStatsCategory);
			}
			if (currentStatsCategory.currentStats == null) {
				currentStatsCategory.currentStats = getAllowedStatsElements(currentStatsCategory)[0];
			}
			currentStatsElementsList = currentStatsMenu.getList();
			Game.rightHalfPane.setViewportView(Game.currentStatsElementsList);
			
			printStats();
		} else if (currentMiddleDisplay == MiddleDisplay.PLANNER) {
			leftHalfPane.setVisible(false);
			rightHalfPane.setVisible(false);
			leftFullPane.setVisible(false);
			rightFullPane.setVisible(false);
			
			for (int i = 0; i < 7; i++) {
				weekDayLabels[i].setText("");
				StyledDocument doc = weekDayLabels[i].getStyledDocument();
				SimpleAttributeSet center = new SimpleAttributeSet();
				StyleConstants.setAlignment(center, StyleConstants.ALIGN_CENTER);
				StyleConstants.setLineSpacing(center, -0.4f);
				doc.setParagraphAttributes(0, doc.getLength(), center, false);
				String scheduleDisplay = "";
				if (weekDayNumber() == i) {
					try {
						doc.insertString(doc.getLength(), "vvvvv", center);
					} catch (BadLocationException e) {
						System.out.println(e);
					}
				}
				StyleConstants.setBold(center, true);
				try {
					doc.insertString(doc.getLength(), "\n" + WeekDay.values()[i%7].name, center);
				} catch (BadLocationException e) {
					System.out.println(e);
				}
				StyleConstants.setBold(center, false);
				for (int j = 0; j < 6; j++) {
					if (currentPlaythrough.weeklyActions[i][j] != null) {
						scheduleDisplay += "\n" + currentPlaythrough.weeklyActions[i][j].name;
					} else {
						scheduleDisplay += "\n(none)";
					}
				}
				scheduleDisplay += "\n-";
				for (int j = 0; j < getAllowedRoutineSettings().length; j++) {
					if (currentPlaythrough.weeklyRoutine[i][getAllowedRoutineSettings()[j].placement] != null) {
						scheduleDisplay += "\n" + currentPlaythrough.weeklyRoutine[i][getAllowedRoutineSettings()[j].placement].name;
					} else {
						scheduleDisplay += "\n(none)";
					}
				}
				try {
					doc.insertString(doc.getLength(), scheduleDisplay, center);
				} catch (BadLocationException e) {
					System.out.println(e);
				}
				int fontSize = (actualHeight*2/5 - actualWidth/10 - 2)/13;
				weekDayLabels[i].setFont(new Font(subheaderFont, Font.PLAIN, fontSize));
				weekDayLabels[i].setAlignmentX(Component.CENTER_ALIGNMENT);
				weekDayLabels[i].setBounds(5 + (actualWidth-10)*i/7, -5, (actualWidth-10)/7, actualHeight*2/5 - actualWidth/10 - 4);
				weekDayLabels[i].setOpaque(false);
				weekDayLabels[i].setVisible(true);
			}
		} else {
			interfacePanel.add(new JLabel("derp"));
		}
		if (visibleGoal != null) {
			rightFullPane.setBounds(actualWidth/2, 0, actualWidth/2, actualHeight*2/5 - actualWidth/10 - barHeight);
			rightFullArea.setBounds(2, 2, actualWidth/2 - 4, actualHeight*2/5 - actualWidth/10 - barHeight - 4);
			goalProgressBar.setBounds(actualWidth/2, actualHeight*2/5 - actualWidth/10 - barHeight-1, actualWidth/2, barHeight);
			goalProgressBar.setVisible(true);
			goalProgressBar.setFont(new Font(subheaderFont, Font.PLAIN, barHeight*12/13));
			goalProgressBar.setPreferredSize(new Dimension(actualWidth/2, barHeight));
			if (allGoalsComplete(visibleGoal.index, false)) {
				goalProgressBar.setToolTipText("No further Goals for this Action");
			} else {
				goalProgressBar.setToolTipText(visibleGoal.toolTip);
			}
		} else {
			goalProgressBar.setVisible(false);
		}
		updateNewEntries();
		if (leftHalfPane.getViewport().getView() != null && leftHalfPane.isVisible()) {
			JList usedList = ((JList)leftHalfPane.getViewport().getView());
			//usedList.setBounds(2, 2, actualWidth/4 - 4, actualHeight*2/5 - actualWidth/10 - 4);
			int fontSize = (actualHeight*2/5 - actualWidth/10 - 28)/6;
			int cellHeight = (actualHeight*2/5 - actualWidth/10)/6;
			usedList.setFont(new Font("SansSerif", Font.BOLD, fontSize));
			usedList.setFixedCellHeight(cellHeight);
			usedList.setBackground(textBackground);
			if (textBackground.equals(Color.WHITE)) {
				usedList.setForeground(Color.BLACK);
			} else {
				usedList.setForeground(Color.WHITE);
			}
			usedList.ensureIndexIsVisible(usedList.getSelectedIndex());
		}
		if (rightHalfPane.getViewport().getView() != null && rightHalfPane.isVisible()) {
			JList usedList = ((JList)rightHalfPane.getViewport().getView());
			//usedList.setBounds(2, 2, actualWidth/4 - 4, actualHeight*2/5 - actualWidth/10 - 4);
			int fontSize = (actualHeight*2/5 - actualWidth/10 - 28)/6;
			int cellHeight = (actualHeight*2/5 - actualWidth/10)/6;
			usedList.setFont(new Font("SansSerif", Font.BOLD, fontSize));
			usedList.setFixedCellHeight(cellHeight);
			usedList.setBackground(textBackground);
			if (textBackground.equals(Color.WHITE)) {
				usedList.setForeground(Color.BLACK);
			} else {
				usedList.setForeground(Color.WHITE);
			}
			usedList.ensureIndexIsVisible(usedList.getSelectedIndex());
		}
		add(LEFT, "\n");
		add(RIGHT, "\n");
	}
	
	public static void assembleRoutinePanel() {
		if (currentPhase != GamePhase.RESULTSPHASE) {
			currentPlaythrough.sendStats();
		}
		Font stateSummaryFontObject = getStateSummaryFont();
		for (int i = 0; i < TimeSlot.values().length; i++) {
			String result = TimeSlot.values()[i].name + ":";
			if (currentTimeSlot == TimeSlot.values()[i]) {
				result = "->" + result;
			} else if (currentPhase == GamePhase.ACTIONPHASE) {
				boolean found = false;
				for (int j = 0; j < currentPlaythrough.progress.newEntries.length && !found; j++) {
					for (int k = 0; k < Action.values().length; k++) {
						if (Action.values()[k].name.equals(currentPlaythrough.progress.newEntries[j]) && actionIsVisible(Action.values()[k], TimeSlot.values()[i])) {
							result = "(!) " + result;
							found = true;
						}
					}
				}
			}
			timeSlotFields[i].setText(String.format("%25s", result));
			timeSlotFields[i].setPreferredSize(new Dimension(frame.getWidth()/6, stateSummaryFontObject.getSize()+1));
			result = "(none)";
			if (currentPhase == GamePhase.ACTIONPHASE && !actionIsAllowed(currentPlaythrough.weeklyActions[weekDayNumber()][i], TimeSlot.values()[i])) {
				currentPlaythrough.weeklyActions[weekDayNumber()][i] = getAllowedActions(getAllowedSpots(currentPlaythrough.currentLocale, TimeSlot.values()[i])[0], TimeSlot.values()[i])[0];
			}
			if (currentPlaythrough.weeklyActions[weekDayNumber()][i] != null) {
				result = currentPlaythrough.weeklyActions[weekDayNumber()][i].name;
				if (currentPhase == GamePhase.ACTIONPHASE) {
					BigInteger added = getTotalStaminaEffect(currentPlaythrough.weeklyActions[weekDayNumber()][i]);
					if (simulatedStamina.subtract(added).compareTo(BigInteger.ZERO) < 0) {
						added = simulatedStamina;
						timeSlotContents[i].setForeground(new Color(100, 100, 100));
					} else if (simulatedStamina.subtract(added).compareTo(maxStamina()) > 0) {
						added = simulatedStamina.subtract(maxStamina());
						timeSlotContents[i].setForeground(new Color(100, 100, 100));
					} else {
						if (mainPanel.getBackground().equals(defaultBackground) || mainPanel.getBackground().equals(romanceColor)) {
							timeSlotContents[i].setForeground(new Color(0, 0, 0));
						} else {
							timeSlotContents[i].setForeground(Color.WHITE);
						}
					}
					if (!currentPlaythrough.weeklyActions[weekDayNumber()][i].baseCost.equals(BigInteger.ZERO)) {
						result = result + " (";
						if (added.compareTo(BigInteger.ZERO) < 0) {
							result = result + "+";
						} else if (added.equals(BigInteger.ZERO)) {
							if (currentPlaythrough.weeklyActions[weekDayNumber()][i].baseCost.compareTo(BigInteger.ZERO) > 0) {
								result = result + "-";
							} else {
								result = result + "+";
							}
						}
						result = result + format(added.negate()) + ")";
					}
					resolveAction(currentPlaythrough.weeklyActions[weekDayNumber()][i], true, false);
				} else {
					if (mainPanel.getBackground().equals(defaultBackground) || mainPanel.getBackground().equals(romanceColor)) {
						timeSlotContents[i].setForeground(new Color(0, 0, 0));
					} else {
						timeSlotContents[i].setForeground(Color.WHITE);
					}
				}
			}
			if (currentPhase == GamePhase.NEXTLOOPPHASE) {
				result = "(Dead)";
			}
			timeSlotContents[i].setText(String.format("%-25s", result));
			timeSlotContents[i].setFont(stateSummaryFontObject);
			timeSlotContents[i].setPreferredSize(new Dimension(frame.getWidth()/6, stateSummaryFontObject.getSize()+1));
        }
		staminaSummaryField.setFont(stateSummaryFontObject);
		staminaSummaryField.setPreferredSize(new Dimension(frame.getWidth()/6, stateSummaryFontObject.getSize()+1));
		staminaSummaryContents.setFont(stateSummaryFontObject);
		staminaSummaryContents.setPreferredSize(new Dimension(frame.getWidth()/6, stateSummaryFontObject.getSize()+1));
        BigInteger nextDayStartStamina = simulatedStamina;
        boolean graySummary = false;
        BigInteger homeCookingFill = BigInteger.ZERO;
        if (dietRoutine() == RoutineElements.HOMECOOKING) {
            nextDayStartStamina = nextDayStartStamina.add(nextDayStartStamina.divide(BigInteger.valueOf(4)));
            if (nextDayStartStamina.compareTo(maxStamina()) > 0) {
                graySummary = true;
                homeCookingFill = nextDayStartStamina.subtract(currentPlaythrough.currentStamina);
                nextDayStartStamina = maxStamina();
            }
        }
		String summary = format(nextDayStartStamina.subtract(currentPlaythrough.currentStamina)) + " = " + format(nextDayStartStamina) + " Stamina";
        if (graySummary && currentPhase != GamePhase.RESULTSPHASE) {
            summary = format(homeCookingFill) + " = " + format(nextDayStartStamina);
            if (homeCookingFill.compareTo(BigInteger.ZERO) >= 0) {
                summary = "+" + summary;
            }
        } else {
            if (currentPlaythrough.currentStamina.compareTo(nextDayStartStamina) <= 0) {
                summary = "+" + summary;
            }
        }
		if (currentPhase == GamePhase.NEXTLOOPPHASE) {
			summary = "(Dead)";
		}
		if (currentPhase != GamePhase.RESULTSPHASE) {
			staminaSummaryField.setText(String.format("%25s", "Total:"));
            if (dietRoutine() == RoutineElements.HOMECOOKING) {
                staminaSummaryField.setText(String.format("%25s", "Total (w/ home cooking):"));
            }
			staminaSummaryContents.setText(String.format("%-25s", summary));
            if (graySummary) {
                staminaSummaryContents.setForeground(new Color(100, 100, 100));
            } else {
                if (mainPanel.getBackground().equals(defaultBackground) || mainPanel.getBackground().equals(romanceColor)) {
                    staminaSummaryContents.setForeground(new Color(0, 0, 0));
                } else {
                    staminaSummaryContents.setForeground(Color.WHITE);
                }
            }
		} else {
			staminaSummaryField.setText(String.format("%25s", " "));
			staminaSummaryContents.setText(String.format("%-25s", " "));
		}
		for (int i = 0; i < RoutineSettings.values().length; i++) {
			if (routineSettingsEnabled()[i]) {
				routineFields[i].setText(String.format("%25s", RoutineSettings.values()[i].name + ":"));
				routineFields[i].setFont(stateSummaryFontObject);
				routineFields[i].setVisible(true);
				routineFields[i].setPreferredSize(new Dimension(frame.getWidth()/6, stateSummaryFontObject.getSize()+1));
				String result = currentPlaythrough.weeklyRoutine[weekDayNumber()][i].name;
				BigInteger difference = BigInteger.ZERO;
				if (currentPlaythrough.weeklyRoutine[(weekDayNumber()+6)%7][i] != null) {
					difference = currentPlaythrough.weeklyRoutine[weekDayNumber()][i].maxStaminaCost.subtract(currentPlaythrough.weeklyRoutine[(weekDayNumber()+6)%7][i].maxStaminaCost);
				}
				if (!difference.equals(BigInteger.ZERO)) {
					result = result + " (";
					if (difference.compareTo(BigInteger.ZERO) < 0) {
						result = result + "+";
					}
					result = result + format(difference.negate()) + ")";
				}
				if (currentPhase == GamePhase.NEXTLOOPPHASE) {
					result = "(Dead)";
				}
				routineContents[i].setText(String.format("%-25s", result));
				routineContents[i].setFont(stateSummaryFontObject);
				routineContents[i].setVisible(true);
				routineContents[i].setPreferredSize(new Dimension(frame.getWidth()/6, stateSummaryFontObject.getSize()+1));
			} else {
				routineFields[i].setVisible(false);
				routineContents[i].setVisible(false);
			}
		}
	}
	
	public static SpecialJProgressBar[] allProgressBars() {
		SpecialJProgressBar[] result = new SpecialJProgressBar[5 + 21*2];
		result[0] = staminaDisplay;
		result[1] = healthDisplay;
		result[2] = sanityDisplay;
		result[3] = qiDisplay;
		result[4] = goalProgressBar;
		for (int i = 0; i < 21; i++) {
			result[i+5] = relationshipProgress[i];
			result[i+5+21] = attributeProgress[i];
		}
		return result;
	}
	
	public static Boolean barVisible(int index) {
		boolean dayStart = currentPhase != GamePhase.RESULTSPHASE;
		if (index == 0) {
			if (getGoalLevel(3, dayStart) >= 1) {
				return true;
			}
		} else if (index == 1) {
			if (getGoalLevel(2, dayStart) >= 1) {
				return true;
			}
		} else if (index == 2) {
			if (getGoalLevel(6, dayStart) >= 1) {
				return true;
			}
		} else if (index == 3) {
			if (getGoalLevel(13, dayStart) >= 1 || getGoalLevel(2, dayStart) >= 7 || getGoalLevel(21, dayStart) >= 1) {
				return true;
			}
		} else if (index == 4) {
			if (getGoalLevel(18, dayStart) >= 1 || getGoalLevel(27, dayStart) >= 2) {
				return true;
			}
		} else if (index == 5) {
			if (getGoalLevel(1, dayStart) >= 1) {
				return true;
			}
		}
		return false;
	}
	
	public static boolean upgradeAllowed(Playthrough p, int id) {
		if (id == 0 || id == 1) {
			return true;
		} else if (id == 2) {
			if (achievementEverEarned(p, Achievement.BLUEBLOOD)) {
				return true;
			}
		} else if (id == 3) {
			if (achievementEverEarned(p, Achievement.BATTLETESTED)) {
				return true;
			}
		} else if (id == 4) {
			if (achievementEverEarned(p, Achievement.ASSISTANT)) {
				return true;
			}
        } else if (id == 5) {
            if (achievementEverEarned(p, Achievement.SAVIOR)) {
                return true;
            }
        } else if (id == 21) {
            if (achievementEverEarned(p, Achievement.TRUTHSEEKER)) {
                return true;
            }
		} else if (id == 24) {
			if (achievementEverEarned(p, Achievement.INVESTIGATOR)) {
				return true;
			}
		} else if (id == 26) {
			if (achievementEverEarned(p, Achievement.CHARMING)) {
				return true;
			}
		}
		return false;
	}
	
	public static BigInteger upgradeLevelCost(int id, int level) {
		BigInteger cost = upgradeBaseCosts[id];
		while (level > 0) {
			cost = cost.multiply(levelConstant).divide(BILLION);
			level--;
		}
		return cost;
	}
	
	public static BigInteger totalUpgradeCost(int id, int level) {
		BigInteger cost = BigInteger.ZERO;
		while (level > 0) {
			level--;
			cost = cost.add(upgradeLevelCost(id, level));
		}
		return cost;
	}
	
	public static void paintUpgradeButtons() {
		Font stateSummaryFontObject = getStateSummaryFont();
		
		Insets insets = frame.getInsets();
		int actualWidth = frame.getWidth() - insets.left - insets.right;
		int actualHeight = frame.getHeight() - insets.top - insets.bottom;
		int imageWidth = (actualHeight*7/9 - actualWidth/10)*1618/1000;
		if (imageWidth > actualWidth*2/3) {
			imageWidth = actualWidth*2/3;
		}
		int containerHeight = actualHeight*7/9 - actualWidth/10;
		int containerWidth = (actualWidth - imageWidth);
		int buttonWidth = containerHeight*1618/5000;
		int buttonSpacing = (actualWidth - imageWidth)*5/17;
		if (buttonSpacing < buttonWidth) {
			buttonWidth = buttonSpacing;
		}
		if (upgradeScroll > buttonSpacing*(upgradeButtons[0].length-3) - buttonSpacing/3) {
			upgradeScroll = buttonSpacing*(upgradeButtons[0].length-3) - buttonSpacing/3;
		}
		if (upgradeScroll < 0) {
			upgradeScroll = 0;
		}
		for (int i = 0; i < upgradeButtons.length; i++) {
			for (int j = 0; j < upgradeButtons[i].length; j++) {
				if (upgradeButtons[i][j] == nextLoopButton) {
					upgradeButtons[i][j].setFont(stateSummaryFontObject);
					upgradeButtons[i][j].setBounds(2, containerHeight*7/10, (actualWidth - imageWidth)/2, containerHeight/5);
				} else if (upgradeButtons[i][j] == upgradeResetButton) {
					upgradeButtons[i][j].setFont(stateSummaryFontObject);
					upgradeButtons[i][j].setBounds((actualWidth - imageWidth)*4/6, containerHeight*7/10, (actualWidth - imageWidth)*2/6 - 4, containerHeight/5);
				} else {
					String nextLevel = "(" + format(upgradeLevelCost(upgradeButtons[i][j].upgradeID, currentPlaythrough.upgradeLevels[upgradeButtons[i][j].upgradeID])) + ")";
					if (upgradeMaxLevels[upgradeButtons[i][j].upgradeID] != 0 && currentPlaythrough.upgradeLevels[upgradeButtons[i][j].upgradeID] >= upgradeMaxLevels[upgradeButtons[i][j].upgradeID]) {
						nextLevel = "MAX";
					}
					upgradeButtons[i][j].setText("<html><center>" + upgradeNames[upgradeButtons[i][j].upgradeID] + "<br>Lv " + currentPlaythrough.upgradeLevels[upgradeButtons[i][j].upgradeID] + "<br>" + nextLevel + "</center></html>");
					upgradeButtons[i][j].setBounds(2 + buttonSpacing*j - upgradeScroll, containerHeight/10 + containerHeight*i*3/10, buttonWidth, containerHeight/5);
					upgradeButtons[i][j].setFont(stateSummaryFontObject);
				}
				if (i < 2 && selectedUpgrade == upgradeButtons[i][j].upgradeID) {
					lastUpgradeColumn = j;
					if (2 + buttonSpacing*j + buttonWidth - upgradeScroll > containerWidth - 10) {
						upgradeGoal = buttonSpacing*j + buttonWidth + 60 - containerWidth;
					} else if (2 + buttonSpacing*j - upgradeScroll < 0) {
						upgradeGoal = buttonSpacing*j - 60;
					}
				}
				upgradeState(upgradeButtons[i][j]);
			}
		}
		
	}
	
	public static void clearAll() {
		nextLoopArmed = false;
		upgradeImageAlpha = -30f;
		for (int i = 0; i < currentPlaythrough.upgradeLevels.length; i++) {
			currentPlaythrough.upgradeLevels[i] = 0;
		}
		remainingMOL = todayMOL.add(currentPlaythrough.startMOL);
		assembleWindow();
		mainPanel.repaint();
	}
	
	public static void checkMOL() {
		remainingMOL = todayMOL.add(currentPlaythrough.startMOL);
		for (int i = 0; i < currentPlaythrough.upgradeLevels.length; i++) {
			remainingMOL = remainingMOL.subtract(totalUpgradeCost(i, currentPlaythrough.upgradeLevels[i]));
		}
	}
	
	public static String scramble(String s) {
		double inaccuracy = 1.0;
		BigInteger count = todayMOL.add(currentPlaythrough.startMOL);
		while (count.compareTo(TEN_THOUSAND) > 0) {
			count = count.divide(BigInteger.TEN);
			inaccuracy = inaccuracy*0.8;
		}
		for (int i = 0; i < s.length(); i++) {
			char random = (char)((int)(Math.random()*90+33));
			if (random == 64 || random == 35) {
				random = (char)(random + (int)(Math.random()*10));
			}
			if (Math.random() <= inaccuracy) {
				s = s.substring(0, i) + random + s.substring(i+1);
			}
		}
		return s;
	}
	
	public static String formatFraction(BigInteger numerator, BigInteger denominator, int power) {
		String result = "";
		if (power == 0 || numerator.compareTo(denominator) >= 0) {
			return "100%";
		}
		BigInteger baseNumerator = numerator;
		BigInteger baseDenominator = denominator;
		while (power > 1) {
			numerator = numerator.multiply(baseNumerator);
			denominator = denominator.multiply(baseDenominator);
			power--;
		}
		if (numerator.multiply(HUNDRED).compareTo(denominator) >= 0) {
			result = numerator.multiply(HUNDRED).divide(denominator).toString();
			if (numerator.multiply(BigInteger.TEN).compareTo(denominator) >= 0) {
				int hundredths = numerator.multiply(TEN_THOUSAND).divide(denominator).intValue();
				if (hundredths % 100 != 0) {
					result = result + "." + ((hundredths % 100)/10);
					if (hundredths % 10 != 0) {
						result = result + (hundredths % 10);
					}
				}
			} else {
				int thousandths = numerator.multiply(HUNDRED_THOUSAND).divide(denominator).intValue();
				if (thousandths % 1000 != 0) {
					result = result + "." + ((thousandths % 1000)/100);
					if (thousandths % 100 != 0) {
						result = result + ((thousandths % 100)/10);
						if (thousandths % 10 != 0) {
							result = result + (thousandths % 10);
						}
					}
				}
			}
			result = result + "%";
		} else {
			BigInteger decimalization = THOUSAND;
			while (decimalization.compareTo(denominator) < 0) {
				decimalization = decimalization.multiply(BigInteger.TEN);
			}
			BigInteger factor = decimalization.multiply(TEN_THOUSAND).divide(denominator);
			numerator = factor.multiply(TEN_THOUSAND).multiply(numerator);
			decimalization = decimalization.multiply(TEN_THOUSAND).multiply(MILLION);
			while (numerator.compareTo(TEN_THOUSAND) >= 0) {
				numerator = numerator.divide(BigInteger.TEN);
				decimalization = decimalization.divide(BigInteger.TEN);
			}
			String displayedDenominator = format(decimalization);
			boolean truncate = false;
			for (int i = 0; i < displayedDenominator.length(); i++) {
				if (displayedDenominator.charAt(i) == '.') {
					truncate = true;
				}
				if (truncate && (displayedDenominator.charAt(i) == '0' || displayedDenominator.charAt(i) == '.' || displayedDenominator.charAt(i) == ' ')) {
					displayedDenominator = displayedDenominator.substring(0, i) + displayedDenominator.substring(i+1);
					i--;
				}
			}
			return "x" + numerator + "/" + displayedDenominator;
		}
		return result;
	}
	
	public static void describeUpgrade(int upgradeNumber) {
		DisplayArea destination = UPGRADE;
		if (currentMiddleDisplay == MiddleDisplay.STATS) {
			destination = RIGHT;
		}
		describedUpgrade = upgradeNumber;
		upgradeDescriptionArea.setText("");
		if (currentMiddleDisplay != MiddleDisplay.STATS && upgradeNumber < 42) {
			add(destination, upgradeNames[upgradeNumber], upgradeNumber%21);
			add(destination, "\n\n");
		}
		if (upgradeNumber == 0) {
			add(destination, "Every level of Vitality will grant +0.1 extra Max Stamina.\n\nCurrent effect: Vitality grants +");
			int added = 50 + currentPlaythrough.upgradeLevels[upgradeNumber];
			add(destination, (added/10) + "." + (added%10) + " Stamina per level.");
		} else if (upgradeNumber == 1) {
			add(destination, "Every level of Focus will grant +0.05 extra goal progress multiplier.\n\nCurrent effect: Focus grants +");
			int added = 20 + currentPlaythrough.upgradeLevels[upgradeNumber]*5;
			add(destination, (added/100) + ".");
			if (added % 100 < 10 && added % 100 > 0) {
				add(destination, "0");
			}
			add(destination, (added%100) + " goal progress multiplier per level.");
		} else if (upgradeNumber == 2) {
			add(destination, "Finances costs of actions and routines are decreased to 80%.  The decrease is compounded for every time this upgrade is bought.\n\nCurrent effect: Actions and routine Finances xp cost " + formatFraction(BigInteger.valueOf(4), BigInteger.valueOf(5), currentPlaythrough.upgradeLevels[upgradeNumber]) + ".");
		} else if (upgradeNumber == 3) {
			add(destination, "Every level of Wetwork will decrease Health loss from actions by an extra 0.5.\n\nCurrent effect: Wetwork grants -");
			int subtracted = 10 + currentPlaythrough.upgradeLevels[upgradeNumber]*5;
			add(destination, (subtracted/10) + "." + (subtracted%10) + " Health lost from actions per level.");
		} else if (upgradeNumber == 4) {
            add(destination, "Every level of Academics will grant +0.1 extra attribute progress multiplier.\n\nCurrent effect: Academics grants +");
            int added = 20 + currentPlaythrough.upgradeLevels[upgradeNumber] * 10;
            add(destination, (added / 100) + "." + (added % 100) + " attribute progress multiplier per level.");
        } else if (upgradeNumber == 5) {
            add(destination, "Every level of Charisma will grant +0.1 extra relationship progress multiplier.\n\nCurrent effect: Charisma grants +");
            int added = 20 + currentPlaythrough.upgradeLevels[upgradeNumber] * 10;
            add(destination, (added / 100) + "." + (added % 100) + " relationship progress multiplier per level.");
        } else if (upgradeNumber == 21) {
            add(destination, "At the start of the loop, gain the 'Impatient' condition for 1 day per level of this upgrade.  'Impatient' applies a x3 modifier to attribute and relationship progress from actions.\n\nCurrent effect: ");
            if (currentPlaythrough.upgradeLevels[upgradeNumber] > 0) {
                add(destination, "'Impatient' until the end of Day " + currentPlaythrough.upgradeLevels[upgradeNumber] + ".");
            } else {
                add(destination, "None.");
            }
		} else if (upgradeNumber == 24) {
			add(destination, "Actions grant extra relationship, attribute, and goal progress equal to 0.1 per level times the action's Health cost, regardless of how much Health is actually lost.\n\nCurrent effect: +" + (currentPlaythrough.upgradeLevels[upgradeNumber]/10) + "." + (currentPlaythrough.upgradeLevels[upgradeNumber]%10) + " progress per point of Health cost.");
		} else if (upgradeNumber == 26) {
			add(destination, "The goal 'Become popular' will be completed from the start, allowing access to the Nightclub and " + currentPlaythrough.personNames[2] + " on Day 1.\n\n");
			if (currentPlaythrough.upgradeLevels[upgradeNumber] > 0) {
				add(destination, "Currently activated!", 0);
			} else {
				add(destination, "Not currently activated.");
			}
		} else {
			add(destination, "Meaning of Life summary:");
			for (int i = 0; i < AchievementCategory.values().length; i++) {
				String start = "\n\n";
				for (int j = 0; j < AchievementCategory.values()[i].allAchievements.length; j++) {
					BigInteger thisScore = getScore(currentPlaythrough, AchievementCategory.values()[i].allAchievements[j]);
					if (thisScore.compareTo(BigInteger.ZERO) > 0) {
						add(destination, start + format(thisScore) + " from " + AchievementCategory.values()[i].allAchievements[j].name);
						start = ", ";
					}
				}
			}
			add(destination, "\n\n" + format(currentPlaythrough.startMOL) + " carried over from previous loops");
		}
	}
	
	public static void assembleWindow() {
		if (tested != null) {
			return;
		}
        if (currentPhase != GamePhase.NEXTLOOPPHASE && currentMiddleDisplay != MiddleDisplay.NEXTLOOP) {
            nextLoopBackground = null;
        } else if (nextLoopBackground == null) {
            try {
                nextLoopBackground = ImageIO.read(new File(getFilePath() + java.io.File.separator + "assets" + java.io.File.separator + "bg" + java.io.File.separator + getUpgradeBackground() + ".png"));
            } catch (Exception e) {
                System.out.println(e);
            }
        }
		Insets insets = frame.getInsets();
		int actualWidth = frame.getWidth() - insets.left - insets.right;
		int actualHeight = frame.getHeight() - insets.top - insets.bottom;
		mainPanel.remove(interfacePanel);
		mainPanel.remove(bottomPanel);
		mainPanel.remove(storyPanel);
		mainPanel.remove(upgradePanel);
		mainPanel.remove(totalMeaning);
		
		headerDisplay.setBounds(4, 0, actualWidth-4, actualWidth/10);
		
		dateDisplay.setText(String.format("%-30s", date()));
		durationDisplay.setText(String.format("%-40s", duration()));
		deadlineDisplay.setText(String.format("%-40s", deadline()));
		dateDisplay.setAlignmentX(Component.LEFT_ALIGNMENT);
		durationDisplay.setAlignmentX(Component.LEFT_ALIGNMENT);
		deadlineDisplay.setAlignmentX(Component.LEFT_ALIGNMENT);
		
		Font dateFontObject = new Font(dateFont, Font.PLAIN, actualWidth/21);
		dateDisplay.setFont(dateFontObject);
		Font subheaderFontObject  = new Font(subheaderFont, Font.PLAIN, actualWidth/55);
		durationDisplay.setFont(subheaderFontObject);
		deadlineDisplay.setFont(subheaderFontObject);
		timeDisplay.setPreferredSize(new Dimension(actualWidth/2, actualWidth/20));
		
		if (currentPhase == GamePhase.NEXTLOOPPHASE) {
			if (upgradeHeaderOne == null) {
				upgradeHeaderOne = scramble(date());
				upgradeHeaderTwo = scramble(duration());
				upgradeHeaderThree = scramble(deadline());
			}
			dateDisplay.setText(upgradeHeaderOne);
			durationDisplay.setText(upgradeHeaderTwo);
			deadlineDisplay.setText(upgradeHeaderThree);
			dateDisplay.setAlignmentX(Component.CENTER_ALIGNMENT);
			durationDisplay.setAlignmentX(Component.CENTER_ALIGNMENT);
			deadlineDisplay.setAlignmentX(Component.CENTER_ALIGNMENT);
			durationDisplay.setBorder(BorderFactory.createEmptyBorder(0, 5, 0, 5));
			deadlineDisplay.setBorder(BorderFactory.createEmptyBorder(0, 5, 0, 5));
            musicFading = true;
            if (musicControl != null) {
                fadedVolume = musicControl.getMinimum();
            }
		}

		boolean qiVisible = false;
		Font resourceBarFontObject = new Font(subheaderFont, Font.PLAIN, actualWidth/50);
		int barHeight = actualWidth/30;
		if (qiVisible) {
			barHeight = actualWidth/40;
			resourceBarFontObject = new Font(subheaderFont, Font.PLAIN, actualWidth/65);
		}
		firstFiller.changeShape(new Dimension(1, actualWidth/30), new Dimension(1, actualWidth/30), new Dimension(1, actualWidth/30));
		secondFiller.changeShape(new Dimension(1, actualWidth/30), new Dimension(1, actualWidth/30), new Dimension(1, actualWidth/30));
		staminaDisplay.setFont(resourceBarFontObject);
		staminaDisplay.setPreferredSize(new Dimension(actualWidth/2, barHeight));
		healthDisplay.setFont(resourceBarFontObject);
		healthDisplay.setPreferredSize(new Dimension(actualWidth/2, barHeight));
		if (!healthVisible()) {
			healthDisplay.setVisible(false);
			firstFiller.setVisible(true);
		} else {
			healthDisplay.setVisible(true);
			firstFiller.setVisible(false);
		}
		sanityDisplay.setFont(resourceBarFontObject);
		sanityDisplay.setPreferredSize(new Dimension(actualWidth/2, barHeight));
		if (true) {
			sanityDisplay.setVisible(false);
			secondFiller.setVisible(true);
		} else {
			sanityDisplay.setVisible(true);
			secondFiller.setVisible(false);
		}
		qiDisplay.setFont(resourceBarFontObject);
		qiDisplay.setPreferredSize(new Dimension(actualWidth/2, barHeight));
		qiDisplay.setVisible(qiVisible);
		
		int imageWidth = (actualHeight*7/9 - actualWidth/10)*1618/1000;
		if (imageWidth > actualWidth*2/3) {
			imageWidth = actualWidth*2/3;
		}
		int imageHeight = imageWidth*1000/1618;
		storyArea.getHighlighter().removeAllHighlights();
		if (currentMiddleDisplay == MiddleDisplay.STORY) {
            if (currentScene != null && currentScene.associatedEvent == PlotEvent.METROPOLISINVASION && sceneProgress == 5) {
                addStamina(maxStamina().negate(), true);
                addHealth(maxHealth().negate(), true);
            }

			for (int i = 0; i < storyChar.length; i++) {
				storyContainer.remove(storyChar[i]);
			}
			storyContainer.remove(storyBackground);
			storyArea.setText("");
			mainPanel.add(storyPanel);
			storyPanel.setBounds(0, actualWidth/10, actualWidth, actualHeight*7/9 - actualWidth/10);
			storyPane.setBounds(2, 2, actualWidth - imageWidth - 4, actualHeight*7/9 - actualWidth/10);
			//storyArea.setBounds(2, 2, actualWidth - imageWidth - 4, actualHeight*7/9 - actualWidth/10);
			storyContainer.setBounds(actualWidth - imageWidth, 0, imageWidth, imageHeight);
			storyContainer.setLayout(null);
			storyStyledDoc.setParagraphAttributes(0, 0, storyAttributes, false);
			int fullTextSize = (actualHeight*2/5 - actualWidth/10)/7 - 1;
			StyleConstants.setFontSize(storyAttributes, fullTextSize);
			StyleConstants.setFontSize(storyAttributes, fullTextSize);
			storyArea.selectAll();
			StyleConstants.setLineSpacing(storyAttributes, -0.12f);
			currentScene.screens[sceneProgress].print(STORY);
			storyArea.setCaretPosition(0);
			String[] previousStories = currentPlaythrough.progress.getWatchedSceneText(currentScene, sceneProgress);
			if (previousStories == null) {
				previousStories = new String[0];
			}
			String compared = null;
			if (previousStories.length > 0) {
				compared = previousStories[previousStories.length-1];
				for (int i = 0; i < previousStories.length; i++) {
					if (previousStories[i].equals(currentScene.screens[sceneProgress].rawString())) {
						compared = previousStories[i];
					}
				}
			}
			if (compared != null) {
				int startIndex = -1;
				int endIndex = currentScene.screens[sceneProgress].rawString().length();
				int difference = currentScene.screens[sceneProgress].rawString().length() - compared.length();
				while (startIndex < currentScene.screens[sceneProgress].rawString().length() - 1 && startIndex < compared.length() - 1) {
					startIndex++;
					if (currentScene.screens[sceneProgress].rawString().charAt(startIndex) != compared.charAt(startIndex)) {
						break;
					}
				}
				while (endIndex > 0 && endIndex > difference) {
					endIndex--;
					if (currentScene.screens[sceneProgress].rawString().charAt(endIndex) != compared.charAt(endIndex - difference)) {
						break;
					}
				}
				if (!currentScene.screens[sceneProgress].rawString().equals(compared)) {
                    autoOn = false;
                    skippingStory = false;
                    if (endIndex >= currentScene.screens[sceneProgress].rawString().length()-1) {
                        endIndex = currentScene.screens[sceneProgress].rawString().length()-2;
                    }
                    try {
                        storyArea.getHighlighter().addHighlight(startIndex, endIndex + 1, storyAreaPainter);
                    } catch (BadLocationException e) {
                        System.out.println(e);
                    }
				}
			}
			/*if (previousStories.length == 0 || compared != null) {
				String[] newPreviousStories = new String[previousStories.length+1];
				for (int i = 0; i < previousStories.length; i++) {
					newPreviousStories[i] = previousStories[i];
				}
				newPreviousStories[previousStories.length] = currentScene.screens[sceneProgress].rawString();
				if (currentScene.associatedEvent != null) {
					currentPlaythrough.progress.watchedPlotEvents.put(currentScene.associatedEvent, newPreviousStories);
				} else {
					currentPlaythrough.progress.watchedScenes.put(((List<Integer>)new ArrayList<Integer>(Arrays.asList(new Integer[]{currentScene.associatedGoalIndex, currentScene.associatedGoalTier}))), newPreviousStories);
				}
			}*/

			BufferedImage background = null;
			BufferedImage[] foregrounds = new BufferedImage[currentScene.characters[sceneProgress].length];
			storyChar = new JLabel[foregrounds.length];
            if (lastBackground.equals(currentScene.backgrounds[sceneProgress])) {
                background = savedBackground;
            } else {
                try {
                    background = ImageIO.read(new File(getFilePath() + java.io.File.separator + "assets" + java.io.File.separator + "bg" + java.io.File.separator + currentScene.backgrounds[sceneProgress] + ".png"));
                } catch (Exception e) {
                    System.out.println(e);
                }
                savedBackground = background;
                lastBackground = currentScene.backgrounds[sceneProgress];
            }
			for (int i = 0; i < currentScene.characters[sceneProgress].length; i++) {
				try {
					storyChar[i] = new JLabel();
					storyContainer.add(storyChar[i]);
					String imageName = currentScene.characters[sceneProgress][i];
					if (currentScene.outfits[sceneProgress] != null && currentScene.outfits[sceneProgress].length > i && currentScene.outfits[sceneProgress][i] != null) {
						imageName += currentScene.outfits[sceneProgress][i];
					}
					if (currentScene.emotions[sceneProgress] != null && currentScene.emotions[sceneProgress].length > i && currentScene.emotions[sceneProgress][i] != null) {
						imageName += currentScene.emotions[sceneProgress][i];
					}
					foregrounds[i] = ImageIO.read(new File(getFilePath() + java.io.File.separator + "assets" + java.io.File.separator + "char" + java.io.File.separator + imageName + ".png"));
				} catch (Exception e) {
					System.out.println(e);
				}
			}
			if (background != null) {
				Image resized = background.getScaledInstance(imageWidth, imageHeight, Image.SCALE_SMOOTH);
				storyBackground.setIcon(new ImageIcon(resized));
				storyBackground.setBounds(0, 0, imageWidth, imageHeight);
			}
			int offset = imageWidth/(foregrounds.length+1);
			for (int i = 0; i < currentScene.characters[sceneProgress].length; i++) {
				boolean closeUp = false;
				boolean lower = false;
				if (currentScene.modifiers[sceneProgress].length > i) {
					if (currentScene.modifiers[sceneProgress][i] == Modifier.CLOSEUP) {
						closeUp = true;
					} else if (currentScene.modifiers[sceneProgress][i] == Modifier.SHORT) {
						lower = true;
					}
				}
				if (foregrounds.length > i && foregrounds[i] != null) {
					int verticalOffset = 0;
					if (lower) {
						verticalOffset = imageHeight/8;
					}
					Image resizedChar;
					if (closeUp) {
						resizedChar = foregrounds[i].getScaledInstance(imageWidth*5/4, -1, Image.SCALE_SMOOTH);
						storyChar[i].setIcon(new ImageIcon(resizedChar));
						storyChar[i].setBounds(-imageWidth/10 - imageWidth/2 + (i+1)*offset, -imageHeight/3 + verticalOffset, imageWidth*4, imageHeight*4);
					} else {
						resizedChar = foregrounds[i].getScaledInstance(imageWidth*5/8, -1, Image.SCALE_SMOOTH);
						storyChar[i].setIcon(new ImageIcon(resizedChar));
						storyChar[i].setBounds(imageWidth/5 - imageWidth/2 + (i+1)*offset, -imageHeight*9/8 + verticalOffset, imageWidth*4, imageHeight*4);
					}
				} else {
					storyChar[i].setIcon(null);
				}
			}
			
			mainPanel.add(mainControls);
			assembleButtonPanel();
			mainControls.setBounds(actualWidth/3, actualHeight*7/9, actualWidth/3, actualHeight*2/9);
			/*SpecialJProgressBar[] bars = allProgressBars();
			for (int i = 0; i < bars.length; i++) {
				bars[i].setToolTipText(null);
			}*/
			Point locationOnScreen = MouseInfo.getPointerInfo().getLocation();
	        Point locationOnComponent = new Point(locationOnScreen);
			ToolTipManager.sharedInstance().mouseMoved(
                    new java.awt.event.MouseEvent(mainPanel, -1, System.currentTimeMillis(), 0, locationOnComponent.x, locationOnComponent.y,
                            locationOnScreen.x, locationOnScreen.y, 0, false, 0));
			
			if (currentScene.tracks[sceneProgress] != null) {
				if (currentScene.tracks[sceneProgress] == Music.SILENCE) {
					musicFading = true;
				} else {
                    if (musicFading) {
                        resetMusic = true;
                    }
					musicFading = false;
					currentMusic = currentScene.tracks[sceneProgress];
				}
			}
			if (currentScene.sounds[sceneProgress] != null) {
				currentGame.new SFX(currentScene.sounds[sceneProgress]).execute();
			}
			storyContainer.add(storyBackground);
		} else if (currentMiddleDisplay == MiddleDisplay.NEXTLOOP) {
			mainPanel.add(upgradePanel);
			upgradePanel.setBounds(0, actualWidth/10, actualWidth, actualHeight*7/9 - actualWidth/10);
			if (upgradeButtons == null) {
				upgradeContainer.removeAll();
				int firstArrayLength = 0;
				int secondArrayLength = 0;
				for (int i = 0; i < 42; i++) {
					if (upgradeAllowed(currentPlaythrough, i)) {
						if (i < 21) {
							firstArrayLength++;
						} else {
							secondArrayLength++;
						}
					}
				}
				upgradeButtons = new SpecialJButton[3][10];
				upgradeButtons[0] = new SpecialJButton[firstArrayLength];
				upgradeButtons[1] = new SpecialJButton[secondArrayLength];
				upgradeButtons[2] = new SpecialJButton[2];
				for (int i = 0; i < 3; i++) {
					int buttonPlacement = 0;
					for (int j = 0; j < 21; j++) {
						boolean buttonPlaced = false;
						if (i < 2) {
							int id = i*21 + j;
							if (upgradeAllowed(currentPlaythrough, id)) {
								upgradeButtons[i][buttonPlacement] = new SpecialJButton();
								upgradeButtons[i][buttonPlacement].upgradeID = id;
								upgradeButtons[i][buttonPlacement].addActionListener(new ActionListener() {
									public void actionPerformed(ActionEvent e) {
										nextLoopArmed = false;
										selectedUpgrade = ((SpecialJButton)e.getSource()).upgradeID;
										addUpgradeLevel();
										assembleWindow();
										mainPanel.validate();
										mainPanel.repaint();
									}
								});
								buttonPlaced = true;
							}
						} else if (j == 0) {
							upgradeButtons[i][j] = nextLoopButton;
							upgradeButtons[i][j].upgradeID = 42;
							buttonPlaced = true;
						} else if (j == 1) {
							upgradeButtons[i][j] = upgradeResetButton;
							upgradeButtons[i][j].upgradeID = 43;
							buttonPlaced = true;
						}
						if (buttonPlaced) {
							upgradeButtons[i][buttonPlacement].addMouseListener(new MouseListener() {
								public void mouseClicked(MouseEvent e) {
								}
								public void mousePressed(MouseEvent e) {
									blockLoopUpgradeMovement = true;
								}
								public void mouseReleased(MouseEvent e) {
									
								}
								public void mouseEntered(MouseEvent e) {
									
								}
								public void mouseExited(MouseEvent e) {
									
								}
							});
							upgradeContainer.add(upgradeButtons[i][buttonPlacement]);
							buttonPlacement++;
						}
					}
				}
			}
			paintUpgradeButtons();
			upgradeContainer.setBounds(2, 2, actualWidth - imageWidth - 4, actualHeight*7/9 - actualWidth/10);
			
			upgradeArt.setBounds(actualWidth - imageWidth, 0, imageWidth, imageHeight);
			upgradeArt.setLayout(null);
            if (nextLoopBackground != null) {
                if (resizedNextLoopBackground == null || resizedNextLoopBackground.getWidth(null) != imageWidth || resizedNextLoopBackground.getHeight(null) != imageHeight) {
                    resizedNextLoopBackground = nextLoopBackground.getScaledInstance(imageWidth, imageHeight, Image.SCALE_SMOOTH);
                }
                if (resizedNextLoopBackground != null) {
                    upgradeArtBackground.setIcon(new ImageIcon(resizedNextLoopBackground));
                    upgradeArtBackground.setBounds(0, 0, imageWidth, imageHeight);
                }
            }
			
			upgradeDescriptionPane.setBounds(actualWidth - imageWidth, 0, imageWidth, imageHeight);
			//upgradeDescriptionArea.setBounds(2, 2, imageWidth-4, imageHeight-4);
			upgradeStyledDoc.setParagraphAttributes(0, 0, upgradeAttributes, false);
			int fullTextSize = (actualHeight*2/5 - actualWidth/10)/7 - 1;
			StyleConstants.setFontSize(upgradeAttributes, fullTextSize);
			StyleConstants.setFontSize(upgradeAttributes, fullTextSize);
			upgradeDescriptionArea.selectAll();
			StyleConstants.setLineSpacing(upgradeAttributes, -0.12f);
			
			mainPanel.add(mainControls);
			assembleButtonPanel();
			mainControls.setBounds(actualWidth/3, actualHeight*7/9, actualWidth/3, actualHeight*2/9);
			
			totalMeaning.setText("Meaning of Life: " + format(remainingMOL) + " / " + format(todayMOL.add(currentPlaythrough.startMOL)));
			totalMeaning.setFont(new Font(subheaderFont, Font.PLAIN, actualWidth/40));
			totalMeaning.setBounds(actualWidth*2/3, actualHeight*7/9, actualWidth/3, actualWidth/40);
			mainPanel.add(totalMeaning);
			
			describeUpgrade(selectedUpgrade);
			
			Point locationOnScreen = MouseInfo.getPointerInfo().getLocation();
	        Point locationOnComponent = new Point(locationOnScreen);
			ToolTipManager.sharedInstance().mouseMoved(
                    new java.awt.event.MouseEvent(mainPanel, -1, System.currentTimeMillis(), 0, locationOnComponent.x, locationOnComponent.y,
                            locationOnScreen.x, locationOnScreen.y, 0, false, 0));
		} else {
			mainPanel.add(interfacePanel);
			mainPanel.add(bottomPanel);
			centerBottom.add(mainControls);
			assembleMiddlePanel();
			interfacePanel.setBounds(0, actualWidth/10, actualWidth, actualHeight*2/5 - actualWidth/10);
			
			bottomPanel.setPreferredSize(new Dimension(actualWidth, actualHeight/2));
			boolean[] barShown = new boolean[21];
			int totalBars = 0;
			for (int i = 0; i < 21; i++) {
				if (barVisible(i)) {
					barShown[i] = true;
					totalBars = i+2;
				}
			}
			if (totalBars >= 14) {
				totalBars++;
			} else if (totalBars < 9) {
				totalBars = 9;
			}
			int bottomBarSize = actualHeight*3/(5*totalBars);
			int bottomTextSize = bottomBarSize*2/3;
			if (bottomTextSize < 8) {
				bottomTextSize = 8;
			}
			Font bottomFont = new Font(subheaderFont, Font.PLAIN, bottomTextSize);
			
			characters.setFont(bottomFont);
			for (int i = 0; i < 21; i++) {
				if (barShown[i]) {
					relationshipProgress[i].setVisible(true);
					relationshipProgress[i].setFont(bottomFont);
					relationshipProgress[i].setPreferredSize(new Dimension(actualWidth/3, bottomBarSize));
					relationshipBlanks[i].setVisible(false);
					if (i == 12) {
						players.setVisible(true);
						players.setFont(bottomFont);
					}
				} else {
					relationshipProgress[i].setVisible(false);
					relationshipBlanks[i].setVisible(true);
					relationshipBlanks[i].setFont(new Font(subheaderFont, Font.PLAIN, bottomBarSize-4));
					relationshipBlanks[i].setPreferredSize(new Dimension(actualWidth/3, bottomBarSize));
					if (i == 12) {
						players.setVisible(false);
					}
				}
			}
			relationshipPanel.setBounds(0, 0, actualWidth/3, actualHeight*3/5);
			
			Font stateSummaryFontObject = getStateSummaryFont();
			for (int i = 0; i < TimeSlot.values().length; i++) {
				timeSlotFields[i].setFont(stateSummaryFontObject);
				
			}
			assembleRoutinePanel();
			assembleButtonPanel();
			centerBottom.setBounds(actualWidth/3, 0, actualWidth/3, actualHeight*3/5);
			stateSummary.setBounds(0, 0, actualWidth/3, actualHeight*17/45);
			stateFields.setBounds(0, 0, actualWidth/6, actualHeight*17/45);
			stateContents.setBounds(actualWidth/6, 0, actualWidth/6, actualHeight*17/45);
			mainControls.setBounds(0, actualHeight*17/45, actualWidth/3, actualHeight*2/9);
			
			meaning.setText("Meaning of Life: " + format(todayMOL));
			meaning.setFont(bottomFont);
			for (int i = 0; i < 21; i++) {
				if (barShown[i]) {
					attributeProgress[i].setVisible(true);
					attributeProgress[i].setFont(bottomFont);
					attributeProgress[i].setPreferredSize(new Dimension(actualWidth/3, bottomBarSize));
					attributeBlanks[i].setVisible(false);
					if (i == 12) {
						attributeSpacer.setVisible(true);
						attributeSpacer.setFont(bottomFont);
					}
				} else {
					attributeProgress[i].setVisible(false);
					attributeBlanks[i].setVisible(true);
					attributeBlanks[i].setFont(new Font(subheaderFont, Font.PLAIN, bottomBarSize-4));
					attributeBlanks[i].setPreferredSize(new Dimension(actualWidth/3, bottomBarSize));
					if (i == 12) {
						attributeSpacer.setVisible(false);
					}
				}
			}
			attributePanel.setBounds(actualWidth*2/3, 0, actualWidth/3, actualHeight*3/5);
			bottomPanel.setBounds(0, actualHeight*2/5, actualWidth, actualHeight*3/5);
		}
		
		if (currentMiddleDisplay != lastMiddleDisplay) {
			mainPanel.repaint();
		}
		lastMiddleDisplay = currentMiddleDisplay;
		
		interfaceSwap.setBounds(10, 0, actualWidth/3 - 40, actualHeight/20);
        routineButton.setBounds(10, 0, (actualWidth/3 - 40)/4, actualHeight/20);
        achievementButton.setBounds((actualWidth/3 - 40)/4 + 15, 0, (actualWidth/3 - 40)/4 - 7, actualHeight/20);
        plannerButton.setBounds((actualWidth/3 - 40)/2 + 12, 0, (actualWidth/3 - 40)/4 - 7, actualHeight/20);
        statsButton.setBounds((actualWidth/3 - 40)*3/4 + 10, 0, (actualWidth/3 - 40)/4, actualHeight/20);
		back.setBounds(10, actualHeight/20 + 5, (actualWidth/3 - 40)/4, actualHeight/10);
		forward.setBounds((actualWidth/3 - 40)/4 + 15, actualHeight/20 + 5, (actualWidth/3 - 40)/2 - 10, actualHeight/10);
		options.setBounds(10, actualHeight/20 + 10 + actualHeight/10, actualWidth/3 - 40, actualHeight/20);
		auto.setBounds((actualWidth/3 - 40)*3/4 + 10, actualHeight/20 + 5, (actualWidth/3 - 40)/4, actualHeight/10);
		
		//frame.validate();
	}
	
	public static void addStamina(BigInteger n, boolean barMove) {
		simulatedStamina = simulatedStamina.add(n);
		BigInteger max = maxStamina();
		if (simulatedStamina.compareTo(max) > 0) {
			simulatedStamina = max;
		}
		if (simulatedStamina.compareTo(BigInteger.ZERO) < 0) {
			simulatedStamina = BigInteger.ZERO;
		}
		if (barMove) {
			staminaDisplay.setString("Stamina " + format(simulatedStamina, max) + "/" + format(max));
			staminaDisplay.endValue = 1000 - simulatedStamina.multiply(THOUSAND).divide(max).intValue();
		}
	}
	
	public static void addHealth(BigInteger n, boolean barMove) {
		simulatedHealth = simulatedHealth.add(n);
		BigInteger max = maxHealth();
		if (simulatedHealth.compareTo(max) > 0) {
			simulatedHealth = max;
		}
		if (simulatedHealth.compareTo(BigInteger.ZERO) < 0) {
			simulatedHealth = BigInteger.ZERO;
		}
		if (barMove) {
			healthDisplay.setString("Health " + format(simulatedHealth, max) + "/" + format(max));
			healthDisplay.endValue = 1000 - simulatedHealth.multiply(THOUSAND).divide(max).intValue();
		}
	}
	
	public static boolean healthVisible() {
		return barVisible(3)|| getGoalLevel(10, true) >= 5;
	}
	
	public static void addSanity(BigInteger n, boolean barMove) {
		simulatedSanity = simulatedSanity.add(n);
		BigInteger max = maxSanity();
		if (simulatedSanity.compareTo(max) > 0) {
			simulatedSanity = max;
		}
		if (barMove) {
			sanityDisplay.setString("Sanity " + format(simulatedSanity, max) + "/" + format(max));
			sanityDisplay.endValue = 1000 - simulatedSanity.multiply(THOUSAND).divide(max).intValue();
		}
	}
	
	public static void addQi(BigInteger n, boolean barMove) {
		simulatedQi = simulatedQi.add(n);
		BigInteger max = maxQi();
		if (simulatedQi.compareTo(max) > 0) {
			simulatedQi = max;
		}
		if (barMove) {
			qiDisplay.setString("Qi " + format(simulatedQi, max) + "/" + format(max));
			qiDisplay.endValue = 1000 - simulatedQi.multiply(THOUSAND).divide(max).intValue();
		}
	}
	
	public static BigInteger focusMultiplier() {
		BigInteger result = HUNDRED;
		BigInteger gainPerLevel = BigInteger.valueOf(20L + currentPlaythrough.upgradeLevels[1]* 5L);
		result = result.add(getAttributeLevel(1, false).multiply(gainPerLevel));
		return result;
	}
	
	public static BigInteger academicsMultiplier() {
		BigInteger result = HUNDRED;
		BigInteger gainPerLevel = BigInteger.valueOf(20L + currentPlaythrough.upgradeLevels[4]*10L);
		result = result.add(getAttributeLevel(4, false).multiply(gainPerLevel));
		return result;
	}
	
	public static BigInteger charismaMultiplier() {
		BigInteger result = HUNDRED;
		BigInteger gainPerLevel = BigInteger.valueOf(20L + currentPlaythrough.upgradeLevels[5]*10L);
		result = result.add(getAttributeLevel(5, false).multiply(gainPerLevel));
		return result;
	}
	
	public static BigInteger relationshipMultiplier(int index) {
		BigInteger result = HUNDRED;
		BigInteger gainPerLevel = BigInteger.valueOf(20);
		gainPerLevel = gainPerLevel.add(getAttributeLevel(5, false).multiply(BigInteger.valueOf(getGoalLevel(19, false))));
		result = result.add(getRelationshipLevel(index, false).multiply(gainPerLevel));
		return result;
	}
	
	public static void addAttributeExperience(int index, BigInteger n, boolean barMove) {
		BigInteger[] previousLevel = levelInfo(index*3, simulatedAttributes[index]);
		int displayedDecimals = previousLevel[1].multiply(THOUSAND).divide(previousLevel[2]).intValue();
		if (barMove && displayedDecimals == 0 && n.equals(BigInteger.ZERO)) {
			String displayed = attributeNames[index] + " " + previousLevel[0].intValue() + ".";
			if (displayedDecimals == 1000) {
				displayedDecimals = 999;
			}
			if (displayedDecimals < 100) {
				displayed = displayed + "0";
				if (displayedDecimals < 10) {
					displayed = displayed + "0";
				}
			}
			attributeProgress[index].setString(displayed + displayedDecimals);
		}
		simulatedAttributes[index] = simulatedAttributes[index].add(n);
		BigInteger[] currentLevel = levelInfo(index*3, simulatedAttributes[index]);
		if (barMove) {
			int added = currentLevel[0].subtract(previousLevel[0]).intValue();
			attributeProgress[index].loops += added;
			attributeProgress[index].initialLoops += added;
			attributeProgress[index].endValue = currentLevel[1].multiply(THOUSAND).divide(currentLevel[2]).intValue();
			attributeProgress[index].levelDisplay = currentLevel[0].intValue();
			attributeProgress[index].setToolTipText("<html><center>" + attributeSummary(index, currentLevel[0]) + "<br>" + format(currentLevel[1], currentLevel[2]) + " / " + format(currentLevel[2]) + "</center></html>");
			if (added > 0 && index == 2) {
				for (int i = 0; i < Action.values().length; i++) {
					if (Action.values()[i].requiredFinances == currentLevel[0].intValue()) {
						if (Action.values()[i].previousAction != null) {
							addNewEntry(Action.values()[i].previousAction.name);
						} else {
							addNewEntry(Action.values()[i].name);
						}
					}
				}
				for (int i = 0; i < RoutineElements.values().length; i++) {
					if (RoutineElements.values()[i].requiredFinances == currentLevel[0].intValue()) {
						addNewEntry(RoutineElements.values()[i].name);
					}
				}
			}
		}
		/*if (index == 0) {
			if (currentLevel[0].compareTo(previousLevel) > 0) {
				addStamina(currentLevel[0].subtract(previousLevel).multiply(BigInteger.valueOf(500)));
			}
		}*/
	}
	
	public static void addRelationshipExperience(int index, BigInteger n, boolean barMove) {
		BigInteger[] previousLevel = levelInfo(index*3, simulatedRelationships[index]);
		int displayedDecimals = previousLevel[1].multiply(THOUSAND).divide(previousLevel[2]).intValue();
		if (barMove && displayedDecimals == 0 && n.equals(BigInteger.ZERO)) {
			String displayed = currentPlaythrough.personNames[index] + " " + previousLevel[0].intValue() + ".";
			if (displayedDecimals == 1000) {
				displayedDecimals = 999;
			}
			if (displayedDecimals < 100) {
				displayed = displayed + "0";
				if (displayedDecimals < 10) {
					displayed = displayed + "0";
				}
			}
			relationshipProgress[index].setString(displayed + displayedDecimals);
		}
		simulatedRelationships[index] = simulatedRelationships[index].add(n);
		BigInteger[] currentLevel = levelInfo(index*3, simulatedRelationships[index]);
		if (barMove) {
			relationshipProgress[index].loops += currentLevel[0].subtract(previousLevel[0]).intValue();
			relationshipProgress[index].initialLoops = relationshipProgress[index].loops;
			relationshipProgress[index].endValue = currentLevel[1].multiply(THOUSAND).divide(currentLevel[2]).intValue();
			relationshipProgress[index].levelDisplay = currentLevel[0].intValue();
			relationshipProgress[index].setToolTipText("<html><center>" + relationshipSummary(index, currentLevel[0]) + "<br>" + format(currentLevel[1], currentLevel[2]) + " / " + format(currentLevel[2]) + "</center></html>");
		}
	}
	
	public static BigInteger[] levelInfo(int offset, BigInteger exp) {
		//level, remainder, and nextlevel requirement
		BigInteger level = BigInteger.ZERO;
		BigInteger nextLevel = TEN_THOUSAND;
		exp = exp.multiply(LOW_LEVEL_CONSTANT);
		if (exp.compareTo(addLevels(earlyLevelSums[earlyLevelSums.length-1], offset)) <= 0) {
			for (int i = earlyLevelSums.length-1; i >= 0; i--) {
				BigInteger offsetSum = addLevels(earlyLevelSums[i], offset);
				if (exp.compareTo(offsetSum) >= 0) {
					level = BigInteger.valueOf(i);
					exp = exp.subtract(offsetSum);
					exp = exp.divide(LOW_LEVEL_CONSTANT);
					nextLevel = addLevels(levelRequirements[i % 10], offset);
					while (i <= 69) {
						nextLevel = nextLevel.divide(BigInteger.TEN);
						i += 10;
					}
					break;
				}
			}
		} else {
			level = BigInteger.valueOf(91);
			int magnitudes = 0;
			int onesDigit = 0;
			while (exp.compareTo(levelRequirements[0].multiply(levelSum)) < 0) {
				magnitudes -= 1;
				exp = exp.multiply(BigInteger.TEN);
			}
			while (exp.compareTo(levelRequirements[0].multiply(levelSum).multiply(BigInteger.TEN)) > 0) {
				magnitudes += 1;
				exp = exp.divide(BigInteger.TEN);
			}
			for (int i = 9; i >= 0; i--) {
				if (exp.compareTo(levelRequirements[i].multiply(levelSum)) >= 0) {
					exp = exp.subtract(levelRequirements[i].multiply(levelSum));
					onesDigit = i;
					break;
				}
			}
			nextLevel = levelRequirements[(onesDigit+1)%10];
			if (onesDigit == 9) {
				nextLevel = nextLevel.multiply(BigInteger.TEN);
			}
			while (magnitudes > 0) {
				level = level.add(BigInteger.TEN);
				exp = exp.multiply(BigInteger.TEN);
				nextLevel = nextLevel.multiply(BigInteger.TEN);
				magnitudes--;
			}
			while (magnitudes < 0) {
				level = level.subtract(BigInteger.TEN);
				exp = exp.divide(BigInteger.TEN);
				nextLevel = nextLevel.divide(BigInteger.TEN);
				magnitudes++;
			}
			while (onesDigit > 0) {
				level = level.add(BigInteger.ONE);
				onesDigit--;
			}
			exp = exp.divide(LOW_LEVEL_CONSTANT);
			nextLevel = nextLevel.multiply(HUNDRED);
			level = level.subtract(BigInteger.valueOf(offset));
		}
		if (exp.compareTo(nextLevel) == 0) {
			level = level.add(BigInteger.ONE);
			exp = BigInteger.ZERO;
			nextLevel = nextLevel(nextLevel);
		}
		return new BigInteger[]{level, exp, nextLevel};
	}
	
	public static BigInteger nextLevel(BigInteger n) {
		return n.multiply(levelConstant).divide(BILLION);
	}
	
	public static BigInteger addLevels(BigInteger n, int offset) {
		BigInteger result = n;
		while (offset > 9) {
			result = result.multiply(BigInteger.TEN);
			offset -= 10;
		}
		while (offset > 0) {
			result = nextLevel(result);
			offset -= 1;
		}
		return result;
	}
	
	public static BigInteger getAttributeLevel(int index, Boolean dayStart) {
		if (dayStart) {
			return levelInfo(index*3, currentPlaythrough.attributes[index])[0];
		} else {
			return levelInfo(index*3, simulatedAttributes[index])[0];
		}
	}
	
	public static BigInteger getRelationshipLevel(int index, Boolean dayStart) {
		if (dayStart) {
			return levelInfo(index*3, currentPlaythrough.attributes[index])[0];
		} else {
			return levelInfo(index*3, simulatedRelationships[index])[0];
		}
	}
	
	public static BigInteger maxStamina() {
		return TEN_THOUSAND.add(getAttributeLevel(0, false).multiply(BigInteger.valueOf(500L + currentPlaythrough.upgradeLevels[0]*10L))).subtract(currentPlaythrough.yesterdayRoutineCost);
	}
	
	public static BigInteger maxHealth() {
		BigInteger result = hundred(1);
		if (bodyRoutine() == RoutineElements.SCARRED) {
			result = result.add(ten(5));
		} else if (bodyRoutine() == RoutineElements.TRAINED) {
			result = result.add(one(25));
		}
		return result;
	}
	
	public static BigInteger maxSanity() {
		return new BigInteger("100");
	}
	
	public static BigInteger maxQi() {
		return new BigInteger("100");
	}
	
	public static String deadline() {
		if (currentPhase == GamePhase.NEXTLOOPPHASE) {
			return "Our boredom shall not yet destroy us!";
		}
        if (currentMiddleDisplay == MiddleDisplay.ACHIEVEMENTS) {
            return "Achievements:";
        }
        if (currentMiddleDisplay == MiddleDisplay.OPTIONS) {
            return "Options:";
        }
        if (currentMiddleDisplay == MiddleDisplay.PLANNER) {
            return "Planner:";
        }
        if (currentMiddleDisplay == MiddleDisplay.ROUTINE) {
            return "Routine:";
        }
        if (currentMiddleDisplay == MiddleDisplay.STATS) {
            return "Stats:";
        }
		if (currentPlaythrough.loops == 0) {
			return " ";
		} else {
			String result = " ";
			if (flavorDay() < 31) {
				result = (31 - flavorDay()) + " day";
				if (flavorDay() != 30) {
					result += "s";
				}
				result += " until the abduction";
			} else if (flavorDay() == 31) {
				result = "Day of the abduction";
			} else if (flavorDay() < 99) {
				result = (99 - flavorDay()) + " day";
				if (flavorDay() != 98) {
					result += "s";
				}
				result += " until the attack";
			} else if (achievementEverEarned(currentPlaythrough, Achievement.METROPOLISFALLEN)) {
				if (flavorDay() < 149) {
					result = (149 - flavorDay()) + " day";
					if (flavorDay() != 148) {
						result += "s";
					}
					result += " until the coup";
				}
			}
			return result;
		}
	}
	
	public static String duration() {
		if (currentPhase == GamePhase.NEXTLOOPPHASE) {
			return "of the Next Universe";
		}
		int day = flavorDay() + 1;
		if (day >= 0) {
			return "Day " + day + " - " + currentPlaythrough.currentLocale.name;
		} else {
			day = -day;
			return "Day Minus " + day + " - " + currentPlaythrough.currentLocale.name;
		}
	}
	
	public String fixedFormat(BigInteger n) {
		String result = format(n);
		BigInteger comparison = BigInteger.valueOf(10000);
		if (n.compareTo(comparison) < 0) {
			if (n.compareTo(BigInteger.ZERO) <= 0) {
				return "0     ";
			}
			while (n.compareTo(comparison) < 0) {
				result = result + " ";
				n = n.multiply(BigInteger.TEN);
			}
			return result + " ";
		}
		return result;
	}
	
	public static String format(BigInteger n, BigInteger order) {
		if (n == null) {
			return "0";
		}
		String result = "";
		if (order.compareTo(TEN_THOUSAND) < 0) {
			BigInteger[] split = n.divideAndRemainder(HUNDRED);
			result = split[0].toString();
			if (!split[1].equals(BigInteger.ZERO)) {
				result = result + ".";
				BigInteger[] digits = split[1].divideAndRemainder(BigInteger.TEN);
				result = result + digits[0].toString();
				if (!digits[1].equals(BigInteger.ZERO)) {
					result = result + digits[1];
				}
			}
			return result;
		} else if (order.compareTo(TEN_THOUSAND.multiply(BigInteger.TEN)) < 0) {
			BigInteger[] split = n.divideAndRemainder(HUNDRED);
			result = split[0].toString();
			if (split[1].compareTo(BigInteger.TEN) >= 0) {
				result = result + "." + split[1].divide(BigInteger.TEN);
			}
			return result;
		} else if (order.compareTo(MILLION) < 0) {
			return n.divide(HUNDRED).toString();
		} else {
			n = n.divide(HUNDRED);
			order = order.divide(HUNDRED);
			BigInteger[] candidate = null;
			while (order.compareTo(THOUSAND) >= 0) {
				order = order.divide(THOUSAND);
				candidate = n.divideAndRemainder(THOUSAND);
				if (candidate[0].equals(BigInteger.ZERO) && candidate[1].equals(BigInteger.ZERO)) {
					return "0";
				}
				n = candidate[0];
			}
			String secondPart = candidate[1].toString();
			if (candidate[1].compareTo(HUNDRED) < 0) {
				secondPart = "0" + secondPart;
				if (candidate[1].compareTo(BigInteger.TEN) < 0) {
					secondPart = "0" + secondPart;
				}
			}
			if (order.compareTo(HUNDRED) >= 0) {
				secondPart = secondPart.substring(0, 1);
			} else if (order.compareTo(BigInteger.TEN) >= 0) {
				secondPart = secondPart.substring(0, 2);
			}
			return candidate[0].toString() + "." + secondPart + result;
		}
	}
	
	public static String format(BigInteger n) {
		if (n == null) {
			return "0";
		}
		String result = "";
		String prefix = "";
		if (n.compareTo(BigInteger.ZERO) < 0) {
			n = n.negate();
			prefix = "-";
		}
		if (n.compareTo(TEN_THOUSAND) < 0) {
			BigInteger[] split = n.divideAndRemainder(HUNDRED);
			result = split[0].toString();
			if (!split[1].equals(BigInteger.ZERO)) {
				result = result + ".";
				BigInteger[] digits = split[1].divideAndRemainder(BigInteger.TEN);
				result = result + digits[0].toString();
				if (!digits[1].equals(BigInteger.ZERO)) {
					result = result + digits[1];
				}
			}
			return prefix + result;
		} else if (n.compareTo(TEN_THOUSAND.multiply(BigInteger.TEN)) < 0) {
			BigInteger[] split = n.divideAndRemainder(HUNDRED);
			result = split[0].toString();
			if (split[1].compareTo(BigInteger.TEN) >= 0) {
				result = result + "." + split[1].divide(BigInteger.TEN);
			}
			return prefix + result;
		} else if (n.compareTo(MILLION) < 0) {
			return prefix + n.divide(HUNDRED);
		} else {
			int index = -1;
			n = n.divide(HUNDRED);
			BigInteger[] candidate = null;
			while (n.compareTo(THOUSAND) >= 0) {
				candidate = n.divideAndRemainder(THOUSAND);
				n = candidate[0];
				index++;
				if (index == prefixes.length) {
					result = result + prefixes[prefixes.length-1];
					index = 0;
				}
			}
			String secondPart = candidate[1].toString();
			if (candidate[1].compareTo(HUNDRED) < 0) {
				secondPart = "0" + secondPart;
				if (candidate[1].compareTo(BigInteger.TEN) < 0) {
					secondPart = "0" + secondPart;
				}
			}
			if (candidate[0].compareTo(HUNDRED) >= 0) {
				secondPart = secondPart.substring(0, 1);
			} else if (candidate[0].compareTo(BigInteger.TEN) >= 0) {
				secondPart = secondPart.substring(0, 2);
			}
			return prefix + candidate[0] + "." + secondPart + " " + prefixes[index] + result;
		}
	}

    public static int flavorDay() {
        if (currentScene != null && currentScene.associatedEvent == PlotEvent.METROPOLISINVASION) {
            if (sceneProgress >= 5) {
                return 250;
            } else if (sceneProgress >= 3) {
                return 215;
            }
        }
        return currentPlaythrough.currentDay;
    }
	
	public static String date() {
		int month = 0;
		int day = flavorDay() + 212;
		int year = 1;
		int yearLength = 365;
		while (day >= yearLength) {
			day -= yearLength;
			year++;
			if (year % 4 == 2) {
				yearLength = 366;
			} else {
				yearLength = 365;
			}
		}
		while (day < 0) {
			day += yearLength;
			year--;
			if (year % 4 == 2) {
				yearLength = 366;
			} else {
				yearLength = 365;
			}
		}
		if ((year % 4 == 2 && year >= 0) || (year < 0 && (-year) % 4 == 2)) {
			monthLengths[1] = 29;
		} else {
			monthLengths[1] = 28;
		}
		while (day >= monthLengths[month]) {
			day -= monthLengths[month];
			month++;
		}
		day++;
		while (year < 0) {
			year += 10;
		}
		while (year > 9) {
			year -= 10;
		}
		if (currentPhase == GamePhase.NEXTLOOPPHASE) {
			return "Committee on the Creation";
		}
		return weekDayName() + ", " + monthNames[month] + " " + day + ", XXX" + year;
	}
	
	
	
	public static WeekDay weekDay() {
		return WeekDay.values()[weekDayNumber()];
	}
	
	public static int weekDayNumber() {
		int day = flavorDay() + 5;
		while (day < 0) {
			day += 7;
		}
		return day % 7;
	}
	
	public static String weekDayName() {
		return weekDay().name;
	}
	
	public static int timeSlotNumber() {
		for (int i = 0; i < TimeSlot.values().length; i++) {
			if (currentTimeSlot == TimeSlot.values()[i]) {
				return i;
			}
		}
		return 0;
	}
	
	public static OptionElements scheduleOption() {
		return currentPlaythrough.currentOptions[0];
	}
	
	public static OptionElements skipOption() {
		return currentPlaythrough.currentOptions[1];
	}

    public static OptionElements autoOption() { return currentPlaythrough.currentOptions[6]; }
	
	public static RoutineElements dietRoutine() {
		return currentPlaythrough.weeklyRoutine[weekDayNumber()][RoutineSettings.DIET.placement];
	}
	
	public static RoutineElements equipmentRoutine() {
		return currentPlaythrough.weeklyRoutine[weekDayNumber()][RoutineSettings.EQUIPMENT.placement];
	}
	
	public static RoutineElements stanceRoutine() {
		return currentPlaythrough.weeklyRoutine[weekDayNumber()][RoutineSettings.STANCE.placement];
	}
	
	public static RoutineElements bodyRoutine() {
		return currentPlaythrough.weeklyRoutine[weekDayNumber()][RoutineSettings.BODY.placement];
	}
	
	public static Goal getGoal(int i) {
		for (int j = 0; j < Action.values().length; j++) {
			if (Action.values()[j].ownGoal != null && Action.values()[j].ownGoal.index == i) {
				return Action.values()[j].ownGoal;
			}
		}
		return null;
	}
	
	public static int getGoalLevel(int i, boolean dayStart) {
		int result = 0;
		Goal g = getGoal(i);
		BigInteger[] relevantGoals = simulatedGoals;
		if (dayStart) {
			relevantGoals = currentPlaythrough.goals;
		}
		while (g != null && g.index == i && relevantGoals[i].subtract(g.previousRequirements).compareTo(g.requirement) >= 0) {
			result++;
			g = g.getNextGoal();
		}
		return result;
	}
	
	public static BigInteger getGoalRequirement(int i) {
		Goal g = getGoal(i);
		BigInteger result = BigInteger.ZERO;
		while (g != null && g.index == i) {
			result = result.add(g.requirement);
			g = g.getNextGoal();
		}
		return result;
	}
	
	public static boolean allGoalsComplete(int i, boolean dayStart) {
		Goal usedGoal = getGoal(i);
		BigInteger[] relevantGoals = simulatedGoals;
		if (dayStart) {
			relevantGoals = currentPlaythrough.goals;
		}
		while (usedGoal.getNextGoal() != null && relevantGoals[usedGoal.index].subtract(usedGoal.previousRequirements).compareTo(usedGoal.requirement) >= 0) {
			if (relevantGoals[usedGoal.index].subtract(usedGoal.previousRequirements).compareTo(usedGoal.requirement) < 0) {
				return false;
			}
			usedGoal = usedGoal.getNextGoal();
		}
		if (relevantGoals[usedGoal.index].subtract(usedGoal.previousRequirements).compareTo(usedGoal.requirement) < 0) {
			return false;
		}
		return true;
	}
	
	public static Goal getVisibleGoal(Action a, boolean dayStart) {
		if (a == null) {
			return null;
		}
		Goal usedGoal = a.ownGoal;
		BigInteger[] relevantGoals = simulatedGoals;
		if (dayStart) {
			relevantGoals = currentPlaythrough.goals;
		}
		while (usedGoal != null && usedGoal.nextGoal != null && !usedGoal.nextGoal.endPoint && relevantGoals[usedGoal.index].subtract(usedGoal.previousRequirements).compareTo(usedGoal.requirement) >= 0) {
			usedGoal = usedGoal.nextGoal;
		}
		return usedGoal;
	}
	
	public static Goal getVisibleGoal(int i, boolean dayStart) {
		Goal usedGoal = getGoal(i);
		BigInteger[] relevantGoals = simulatedGoals;
		if (dayStart) {
			relevantGoals = currentPlaythrough.goals;
		}
		while (usedGoal != null && usedGoal.nextGoal != null && !usedGoal.nextGoal.endPoint && relevantGoals[usedGoal.index].subtract(usedGoal.previousRequirements).compareTo(usedGoal.requirement) >= 0) {
			usedGoal = usedGoal.nextGoal;
		}
		return usedGoal;
	}
	
	public static BigInteger getBodyArmorAdjustment(Action a) {
		BigInteger swapped = BigInteger.ZERO;
		if (equipmentRoutine() == RoutineElements.BODYARMOR && getHealthEffect(a).compareTo(BigInteger.ZERO) > 0) {
			swapped = getHealthEffect(a).multiply(BigInteger.valueOf(3));
			BigInteger swappable = simulatedStamina.subtract(getStaminaEffect(a));
			if (swappable.compareTo(BigInteger.ZERO) < 0) {
				swappable = BigInteger.ZERO;
			}
			if (swapped.compareTo(swappable) > 0) {
				swapped = swappable;
			}
		}
		return swapped;
	}
	
	public static BigInteger getStaminaEffect(Action a) {
		BigInteger result = a.baseCost;
		if (result.compareTo(BigInteger.ZERO) < 0) {
			if (dietRoutine() == RoutineElements.MOSTLYCOFFEE) {
				result = BigInteger.valueOf(-3000);
			} else {
				result = result.multiply(maxStamina()).divide(HUNDRED);
				if (dietRoutine() == RoutineElements.FINEDINING || dietRoutine() == RoutineElements.RESTAURANT) {
					result = result.add(result);
				}
			}
		} else if (!a.forbidden) {
			if (equipmentRoutine() == RoutineElements.EYECATCHING || equipmentRoutine() == RoutineElements.OSTENTATIOUS) {
				result = result.multiply(BigInteger.valueOf(3)).divide(BigInteger.valueOf(2));
			} else if (equipmentRoutine() == RoutineElements.HANDHELDGAMES) {
				result = result.divide(BigInteger.valueOf(2));
			}
		}
		return result;
	}
	
	public static BigInteger getTotalStaminaEffect(Action a) {
		return getStaminaEffect(a).add(getBodyArmorAdjustment(a));
	}
	
	public static BigInteger getHealthEffect(Action a) {
		BigInteger healthSpent = a.healthCost;
		if (a.healthCost.compareTo(BigInteger.ZERO) > 0) {
			healthSpent = healthSpent.subtract(getAttributeLevel(3, false).multiply(HUNDRED.add(BigInteger.valueOf(50L*currentPlaythrough.upgradeLevels[3]))));
			if (healthSpent.compareTo(BigInteger.ZERO) < 0) {
				healthSpent = BigInteger.ZERO;
			}
		}
		if (dietRoutine() == RoutineElements.CANCERJUICE && getStaminaEffect(a).compareTo(BigInteger.ZERO) < 0) {
			healthSpent = healthSpent.subtract(one(5));
		}
		return healthSpent;
	}
	
	public static BigInteger getTotalHealthEffect(Action a) {
		return getHealthEffect(a).subtract(getBodyArmorAdjustment(a).divide(BigInteger.valueOf(3)));
	}
	
	public static BigInteger getFinancesEffect(Action a) {
		BigInteger financesSpent = a.financesCost;
		if (!financesSpent.equals(BigInteger.ZERO)) {
			financesSpent = reducedFinancesCost(a.financesCost);
		}
		return financesSpent;
	}
	
	public static void setGoalBar(Goal g, boolean dayStart) {
		if (g != null) {
			if (!dayStart) {
				changeGoal(g);
			}
			BigInteger[] relevantGoals = simulatedGoals;
			if (dayStart) {
				relevantGoals = currentPlaythrough.goals;
			}
			goalProgressBar.setString(g.storedString);
			goalProgressBar.startValue = g.barDisplay;
			goalProgressBar.endValue = g.barDisplay;
			goalProgressBar.setValue(g.barDisplay);
            goalProgressBar.ownClock = 0;
			if (g.nextGoal != null && !g.nextGoal.endPoint) {
				g.nextGoal.previousString = g.storedString;
				if (relevantGoals[g.index].subtract(g.previousRequirements).compareTo(g.requirement) >= 0) {
					setGoalBar(g.nextGoal, dayStart);
				}
			}
		}
	}
	
	public static void changeGoal(Goal g) {
		if (currentGoal != null && currentGoal != g) {
			currentGoal.barDisplay = currentGoal.barEnd;
			//currentGoal.previousString = currentGoal.storedString;
			if (allGoalsComplete(g.index, false)) {
				goalProgressBar.setToolTipText("No further Goals for this Action");
			} else {
				goalProgressBar.setToolTipText(g.toolTip);
			}
			goalProgressBar.ownClock = 0;
		}
		currentGoal = g;
	}
	
	public static String xpSignificance(int attribute, BigInteger lost) {
		if (lost.compareTo(simulatedAttributes[attribute]) > 0) {
			lost = simulatedAttributes[attribute];
		}
		BigInteger[] info = levelInfo(attribute*3, simulatedAttributes[attribute]);
		BigInteger[] newInfo = levelInfo(attribute*3, simulatedAttributes[attribute].subtract(lost));
		int difference = info[0].subtract(newInfo[0]).intValue()*1000 + info[1].multiply(THOUSAND).divide(info[2]).intValue() - newInfo[1].multiply(THOUSAND).divide(newInfo[2]).intValue();
		String result = difference/1000 + ".";
		if (difference % 1000 < 100) {
			result = result + "0";
		}
		if (difference % 1000 < 10) {
			result = result + "0";
		}
		result = result + difference % 1000;
		return result;
	}
	
	public static String attributeSummary(int index, BigInteger currentLevel) {
		String result = "";
		if (index == 0) {
			result = "+" + format(currentLevel.multiply(BigInteger.valueOf(500 + currentPlaythrough.upgradeLevels[0]*10L))) + " Max Stamina";
		} else if (index == 1) {
			int hundredths = currentLevel.multiply(BigInteger.valueOf(20 + currentPlaythrough.upgradeLevels[1]*5L)).intValue() + 100;
			if (hundredths % 100 == 0) {
				result = "x" + (hundredths / 100);
			} else if (hundredths % 10 == 0) {
				result = "x" + (hundredths / 100) + "." + ((hundredths%100) / 10);
			} else if (hundredths % 100 / 10 == 0) {
				result = "x" + (hundredths / 100) + ".0" + (hundredths % 100);
			} else {
				result = "x" + (hundredths / 100) + "." + (hundredths % 100);
			}
			result = result + " goal progress";
		} else if (index == 2) {
			result = "Spent to enable various Actions and Routines";
		} else if (index == 3) {
			result = "-" + format((HUNDRED.add(BigInteger.valueOf(50L*currentPlaythrough.upgradeLevels[3]))).multiply(currentLevel)) + " Health cost for Actions";
		} else if (index == 4) {
			int hundredths = currentLevel.multiply(BigInteger.valueOf(20L + currentPlaythrough.upgradeLevels[4]*10L)).intValue() + 100;
			if (hundredths % 100 == 0) {
				result = "x" + (hundredths / 100);
			} else if (hundredths % 10 == 0) {
				result = "x" + (hundredths / 100) + "." + ((hundredths%100) / 10);
			} else if (hundredths % 100 / 10 == 0) {
				result = "x" + (hundredths / 100) + ".0" + (hundredths % 100);
			} else {
				result = "x" + (hundredths / 100) + "." + (hundredths % 100);
			}
			result = result + " attribute progress";
		} else if (index == 5) {
			int hundredths = currentLevel.multiply(BigInteger.valueOf(20L + currentPlaythrough.upgradeLevels[5]*10L)).intValue() + 100;
			if (hundredths % 100 == 0) {
				result = "x" + (hundredths / 100);
			} else if (hundredths % 10 == 0) {
				result = "x" + (hundredths / 100) + "." + ((hundredths%100) / 10);
			} else if (hundredths % 100 / 10 == 0) {
				result = "x" + (hundredths / 100) + ".0" + (hundredths % 100);
			} else {
				result = "x" + (hundredths / 100) + "." + (hundredths % 100);
			}
			result = result + " relationship progress";
            if (getGoalLevel(19, false) > 0) {
                hundredths = currentLevel.intValue()*getGoalLevel(19, false);
                result += "<br>+";
                if (hundredths % 100 == 0) {
                    result += Integer.toString(hundredths / 100);
                } else if (hundredths % 10 == 0) {
                    result += (hundredths / 100) + "." + ((hundredths%100) / 10);
                } else {
                    result += (hundredths / 100) + "." + (hundredths % 100);
                }
                result += " per-level bonus for relationships (";
                hundredths += 20;
                if (hundredths % 100 == 0) {
                    result += Integer.toString(hundredths / 100);
                } else if (hundredths % 10 == 0) {
                    result += (hundredths / 100) + "." + ((hundredths%100) / 10);
                } else {
                    result += (hundredths / 100) + "." + (hundredths % 100);
                }
                result += " total)";
            }
		}
		return result;
	}
	
	public static String relationshipSummary(int index, BigInteger currentLevel) {
		String result = "x";
		int hundredths = currentLevel.intValue()*(20 + getGoalLevel(19, false)*getAttributeLevel(5, false).intValue()) + 100;
		if (hundredths % 100 == 0) {
			result += Integer.toString(hundredths / 100);
		} else if (hundredths % 10 == 0) {
			result += (hundredths / 100) + "." + ((hundredths%100) / 10);
		} else {
			result += (hundredths / 100) + "." + (hundredths % 100);
		}
		result = result + " " + attributeNames[index] + " experience and " + currentPlaythrough.personNames[index] + "'s goal progress";
		return result;
	}
	
	public static void updateActionInfo(Action a) {
		switch (a) {
		case DANCE:
			if (getGoalLevel(6, false) > 0) {
				a.name = "Dance near " + currentPlaythrough.personNames[2];
			} else {
				a.name = "Dance";
			}
			break;
		case FINDTANAKAACTION: 
			if (currentPlaythrough.personStatus[5] == Locale.METROPOLIS) {
				a.ownGoal.name = "Gather clues";
				a.ownGoal.toolTip = "Discover " + currentPlaythrough.personNames[5] + "'s location";
				a.ownGoal.completionText = "New Action unlocked: Learn the language at " + Spot.HOME.name;
			} else {
				a.ownGoal.name = "Stop the abduction";
				a.ownGoal.completionText = "Tanaka rescued!";
				a.ownGoal.toolTip = "Keep Tanaka here in the College Town";
			}
			break;
		case HIREFIXER:
			if (getGoalLevel(21, false) > 0) {
				a.ownGoal.toolTip = "Start tracking " + currentPlaythrough.personNames[5] + " down";
				a.ownGoal.completionText = "Clues gained!";
			} else {
				a.ownGoal.completionText = "New Relationship and Attribute unlocked!\nNew Action unlocked: " + Action.JACKALTRAINING.name + " at " + Spot.NIGHTCLUB.name; 
				a.ownGoal.toolTip = "Unlock a new Relationship and Attribute";
			}
			if (barVisible(3)) {
				a.name = "Hire " + currentPlaythrough.personNames[3];
			} else {
				a.name = "Hire a fixer";
			}
			break;
		case FIXERTALK:
			if (getGoalLevel(13, false) > 0) {
				a.ownGoal.name = "Recognize a familiar face";
				a.ownGoal.toolTip = "See what " + heShe(3) + "'s doing when " + heShe(3) + "'s not helping you";
				a.ownGoal.completionText = currentPlaythrough.personNames[3] + " can now be encountered here as well!";
			} else {
				a.ownGoal.completionText = "New Relationship and Attribute unlocked!\nNew Action unlocked: " + Action.JACKALTRAINING.name + " at " + Spot.NIGHTCLUB.name; 
				a.ownGoal.toolTip = "Unlock a new Relationship and Attribute";
			}
			break;
		case LOITER:
			if (getGoalLevel(6, false) > 0) {
				a.ownGoal.toolTip = "Unlock a new Action at " + Spot.NIGHTCLUB.name;
			} else {
				a.ownGoal.toolTip = "Unlock a new location";
			}
			break;
		case RENDEZVOUS:
			if (getGoalLevel(28, false) > 0) {
				a.name = "Rendezvous w/ " + currentPlaythrough.personNames[5];
			} else {
				a.name = "Find " + currentPlaythrough.personNames[5];
			}
			break;
		default:
			break;
		}
	}
	
	public static void add(DisplayArea d, String s) {
		add(d.doc, d.set, s);
	}
	
	public static void boldAdd(DisplayArea d, String s) {
		StyleConstants.setFontFamily(d.set, "Franklin Gothic Demi Cond");
		add(d, s);
	}
	
	public static void add(DisplayArea d, String s, int index) {
		if (textBackground.equals(Color.WHITE)) {
			StyleConstants.setForeground(d.set, speechColors[index]);
		} else {
			StyleConstants.setForeground(d.set, darkSpeechColors[index]);
		}
		add(d, s);
	}
	
	public static void boldAdd(DisplayArea d, String s, int index) {
		StyleConstants.setFontFamily(d.set, "Franklin Gothic Demi Cond");
		add(d, s, index);
	}
	
	public static void boldAdd(DisplayArea d, String s, Color customColor) {
		StyleConstants.setForeground(d.set, customColor);
		boldAdd(d, s);
	}
	
	public static void add(DisplayArea d, String s, Color customColor) {
		StyleConstants.setForeground(d.set, customColor);
		add(d, s);
	}
	
	public static void add(DisplayArea d, String[] s, Color[] colors) {
		if (s.length == colors.length) {
			for (int i = 0; i < s.length; i++) {
				StyleConstants.setForeground(d.set, colors[i]);
				add(d.doc, d.set, s[i]);
			}
		} else {
			add(d, "ERROR");
		}
	}
	
	public static void add(StyledDocument d, SimpleAttributeSet a, String s) {
		try {
			d.insertString(d.getLength(), s, a);
			if (textBackground.equals(Color.WHITE)) {
				StyleConstants.setForeground(a, Color.black);
			} else {
				StyleConstants.setForeground(a, Color.WHITE);
			}
			StyleConstants.setFontFamily(a, "Franklin Gothic Book");
		} catch (Exception e) {
			System.out.println(e);
		}
	}
	
	public static String perk() {
		if (currentPlaythrough.loops == 0) {
			return "option after Day 100";
		}
		return "Upgrade";
	}
	
	public static String hisHer(int i) {
		if (i == -1) {
			if (currentPlaythrough.ownGender.presentation() == Gender.MALE) {
				return "his";
			} else {
				return "her";
			}
		}
		if (currentPlaythrough != null && currentPlaythrough.personGenders[i].presentation() == Gender.MALE) {
			return "his";
		}
		return "her";
	}
	
	public static String heShe(int i) {
		if (i == -1) {
			if (currentPlaythrough.ownGender.presentation() == Gender.MALE) {
				return "he";
			} else {
				return "she";
			}
		}
		if (currentPlaythrough != null && currentPlaythrough.personGenders[i].presentation() == Gender.MALE) {
			return "he";
		}
		return "she";
	}
	
	public static String HeShe(int i) {
		if (i == -1) {
			if (currentPlaythrough.ownGender.presentation() == Gender.MALE) {
				return "He";
			} else {
				return "She";
			}
		}
		if (currentPlaythrough != null && currentPlaythrough.personGenders[i].presentation() == Gender.MALE) {
			return "He";
		} else {
			return "She";
		}
	}
	
	public static String HisHer(int i) {
		if (i == -1) {
			if (currentPlaythrough.ownGender.presentation() == Gender.MALE) {
				return "His";
			} else {
				return "Her";
			}
		}
		if (currentPlaythrough != null && currentPlaythrough.personGenders[i].presentation() == Gender.MALE) {
			return "His";
		} else {
			return "Her";
		}
	}
	
	public static String himHer(int i) {
		if (i == -1) {
			if (currentPlaythrough.ownGender.presentation() == Gender.MALE) {
				return "him";
			} else {
				return "her";
			}
		}
		if (currentPlaythrough != null && currentPlaythrough.personGenders[i].presentation() == Gender.MALE) {
			return "him";
		}
		return "her";
	}
	
	public static String hisHers(int i) {
		if (i == -1) {
			if (currentPlaythrough.ownGender.presentation() == Gender.MALE) {
				return "his";
			} else {
				return "hers";
			}
		}
		if (currentPlaythrough != null && currentPlaythrough.personGenders[i].presentation() == Gender.MALE) {
			return "his";
		}
		return "hers";
	}
	
	public static String guyGirl(int i) {
		if (i == -1) {
			if (currentPlaythrough.ownGender.presentation() == Gender.MALE) {
				return "guy";
			} else {
				return "girl";
			}
		}
		if (currentPlaythrough != null && currentPlaythrough.personGenders[i].presentation() == Gender.MALE) {
			return "guy";
		}
		return "girl";
	}
	
	public static String boyGirl(int i) {
		if (i == -1) {
			if (currentPlaythrough.ownGender.presentation() == Gender.MALE) {
				return "boy";
			} else {
				return "girl";
			}
		}
		if (currentPlaythrough != null && currentPlaythrough.personGenders[i].presentation() == Gender.MALE) {
			return "boy";
		}
		return "girl";
	}
	
	public static String manWoman(int i) {
		if (i == -1) {
			if (currentPlaythrough.ownGender.presentation() == Gender.MALE) {
				return "man";
			} else {
				return "woman";
			}
		}
		if (currentPlaythrough != null && currentPlaythrough.personGenders[i].presentation() == Gender.MALE) {
			return "man";
		}
		return "woman";
	}
	
	public static String menWomen(int i) {
		if (i == -1) {
			if (currentPlaythrough.ownGender.presentation() == Gender.MALE) {
				return "men";
			} else {
				return "women";
			}
		}
		if (currentPlaythrough != null && currentPlaythrough.personGenders[i].presentation() == Gender.MALE) {
			return "men";
		}
		return "women";
	}
	
	public static String dadMom(int i) {
		if (i == -1) {
			if (currentPlaythrough.ownGender.presentation() == Gender.MALE) {
				return "dad";
			} else {
				return "mom";
			}
		}
		if (currentPlaythrough != null && currentPlaythrough.personGenders[i].presentation() == Gender.MALE) {
			return "dad";
		}
		return "mom";
	}
	
	public static String fatherMother(int i) {
		if (i == -1) {
			if (currentPlaythrough.ownGender.presentation() == Gender.MALE) {
				return "father";
			} else {
				return "mother";
			}
		}
		if (currentPlaythrough != null && currentPlaythrough.personGenders[i].presentation() == Gender.MALE) {
			return "father";
		}
		return "mother";
	}
	
	public static String misterMadame(int i) {
		if (i == -1) {
			if (currentPlaythrough.ownGender.presentation() == Gender.MALE) {
				return "Mister";
			} else {
				return "Madame";
			}
		}
		if (currentPlaythrough != null && currentPlaythrough.personGenders[i].presentation() == Gender.MALE) {
			return "Mister";
		}
		return "Madame";
	}
	
	public static String masterMistress(int i) {
		if (i == -1) {
			if (currentPlaythrough.ownGender.presentation() == Gender.MALE) {
				return "master";
			} else {
				return "mistress";
			}
		}
		if (currentPlaythrough != null && currentPlaythrough.personGenders[i].presentation() == Gender.MALE) {
			return "master";
		}
		return "mistress";
	}

    public static String SirMaam(int i) {
        if (i == -1) {
            if (currentPlaythrough.ownGender.presentation() == Gender.MALE) {
                return "Sir";
            } else {
                return "Ma'am";
            }
        }
        if (currentPlaythrough != null && currentPlaythrough.personGenders[i].presentation() == Gender.MALE) {
            return "Sir";
        }
        return "Ma'am";
    }
	
	public static BigInteger hundred(int i) {
		return TEN_THOUSAND.multiply(BigInteger.valueOf(i));
	}
	
	public static BigInteger thousand(int i) {
		return TEN_THOUSAND.multiply(BigInteger.valueOf(i*10L));
	}
	
	public static BigInteger ten(int i) {
		return THOUSAND.multiply(BigInteger.valueOf(i));
	}
	
	public static BigInteger one(int i) {
		return HUNDRED.multiply(BigInteger.valueOf(i));
	}
	
	public static String getFilePath() {
		String result = Game.class.getProtectionDomain().getCodeSource().getLocation().getPath();
		String fileName = "";
		for (int i = result.length()-1; i >= 0; i--) {
			if (result.charAt(i) != '/') {
				fileName = result.charAt(i) + fileName;
			} else {
				i = -1;
			}
		}
		result = result.substring(0, result.length() - fileName.length() - 1);
		try {
			result = URLDecoder.decode(result,"UTF-8");
		} catch (Exception ex) {
			ex.printStackTrace();
		}
		result = result.replaceAll("file:/", "");
		result = result.replaceAll(java.io.File.separator + "u0020", java.io.File.separator + " ");
		return result;
	}
	
	public static WindowContents getNewDayFlavor() {
		WindowContents result = new WindowContents();
		result.attach("Dawn of Day " + (currentPlaythrough.currentDay+1) + "\n\n");
        if (currentPlaythrough.currentLocale != Locale.TRANSIT) {
            switch (currentPlaythrough.currentDay) {
                case 0:
                    if (currentPlaythrough.loops == 0) {
                        result.attach("Welcome to Cultivation Spiral - Release " + version + ".  In this incremental life simulator, the player selects an action for each time slot of the day, gaining bonuses which allow for easier progress on subsequent days.  At first, there are only a small number of possible actions, but more actions will be unlocked over time.");
                    } else {
                        result.attach("You wake up.  It's just another regular day.");
                    }
                    break;
                case 1:
                    if (currentPlaythrough.loops == 0) {
                        result.attach("You can think of 'Meaning of Life' as being your score.  It will prove useful later.");
                    } else {
                        result.attach("Upgrades carry over between loops, so there's no benefit to leaving Meaning of Life unspent at the start of a new loop.");
                    }
                    break;
                case 2:
                    result.attach("The progress gained from performing an action is based on how much Stamina you spend on that action.  So, a more expensive action generally earns you more progress.  The only penalty for running out of Stamina is that you only gain progress equal to the amount of Stamina actually spent.");
                    break;
                case 3:
                    result.attach("There are three kinds of progress: goals, attributes, and relationships.");
                    break;
                case 4:
                    result.attach("Goals (like 'Tough it out') unlock new gameplay options.  You can hover the mouse over them to see a bit more information about what they'll do for you.");
                    break;
                case 5:
                    result.attach("Attributes (like ");
                    result.attach("Vitality", 0);
                    result.attach(") grant various passive effects.  Each attribute has twice the base cost of the previous one, and only a few are unlocked from the beginning.");
                    break;
                case 6:
                    result.attach("Relationships (like ");
                    result.attach(currentPlaythrough.personNames[0], 0);
                    result.attach("'s and ");
                    result.attach(currentPlaythrough.personNames[1], 1);
                    result.attach("'s) speed up progress for their associated attribute and for Goals attached to their relationship.  Some people are quicker to open their hearts than others.");
                    break;
                case 7:
                    result.attach("Keyboard shortcuts:\nSpacebar: Advance\nZ, X: Back\nQ, W: Change menu\nO: Options");
                    break;
                case 8:
                    result.attach("More keyboard shortcuts:\nE, D: Scroll left menu\nR, F: Scroll right menu\nA, S: Toggle auto advance\nF11: Borderless fullscreen");
                    break;
                case 9:
                    result.attach("The game autosaves every day, and a backup save is created every 10 days.  You can always go back and try a different sequence of actions in order to see how they turn out.");
                    break;
                case 10:
                    result.attach("Events on specific days cause some route branches to open and others to close depending on which conditions you meet.  You'll always have a chance to try other routes, so feel free to pursue whichever relationships you like.");
                    break;
                case 11:
                    result.attach("Classes resume on Monday, September 1st.  Best to spend time with your friends while you still can.");
                    break;
                case 12:
                    if (stanceRoutine() == RoutineElements.UNASSUMING) {
                        result.attach("Another lazy day for your summer vacation.");
                    } else if (stanceRoutine() == RoutineElements.GENEROUS) {
                        result.attach("After checking your finances, it looks like you're doing pretty good.  Might as well put that cash to good use.");
                    } else {
                        result.attach("You're feeling pretty good today.");
                    }
                    break;
                case 13:
                    if (getRelationshipLevel(0, true).compareTo(BigInteger.ONE) > 0) {
                        result.attach("Oddly, you find yourself actually looking forward to butting heads with " + currentPlaythrough.personNames[0] + " again.");
                    } else {
                        result.attach("You've managed to mostly avoid running into " + currentPlaythrough.personNames[0] + " again.  Maybe " + heShe(0) + "'ll find somebody else to bother.");
                    }
                    break;
                case 14:
                    if (dietRoutine() == RoutineElements.FASTFOOD) {
                        result.attach("You aren't feeling great, today.  Maybe you've been eating too much fast food.");
                    } else if (dietRoutine() == RoutineElements.HOMECOOKING) {
                        if (currentPlaythrough.currentStamina.compareTo(BigInteger.valueOf(5000)) >= 0) {
                            result.attach("Before heading out, you prepare some food and put it in the crock pot.  It'll pay off later tonight.");
                        } else {
                            result.attach("You wake up too tired to cook, so you just throw some leftovers in the microwave for breakfast.  Still better than fast food.");
                        }
                    } else {
                        result.attach("Lately you've been so busy that you sometimes forget to eat breakfast.  It's like something is pushing you forward.");
                    }
                    break;
                case 15:
                    if (getRelationshipLevel(1, true).compareTo(BigInteger.ZERO) > 0) {
                        result.attach("A call from " + currentPlaythrough.personNames[1] + " wakes you up.  Apparently " + heShe(1) + "'s excited about a new game that releases today, and " + heShe(1) + " couldn't keep it to " + himHer(1) + "self.");
                    } else {
                        result.attach("As you wake up, you find yourself wondering what " + currentPlaythrough.personNames[1] + "'s doing right now.  Does " + heShe(1) + " just wait outside the arcade until it opens?");
                    }
                    break;
                case 16:
                    if (equipmentRoutine() == RoutineElements.CHEAPCLOTHES) {
                        result.attach("Seems like your favorite shirt got ripped on its last trip through the wash.  Might be time to buy a new one.");
                    } else if (equipmentRoutine() == RoutineElements.EYECATCHING) {
                        result.attach("You take plenty of time getting yourself ready in the morning.  Who knows if you'll be making a first impression on someone today?");
                    } else {
                        result.attach("You take plenty of time getting your things ready before heading out.  Can't hurt to be too careful.");
                    }
                    break;
                case 17:
                    result.attach("Just two weeks left in your summer break.");
                    break;
                case 18:
                    if (currentPlaythrough.relationships[5].compareTo(BigInteger.valueOf(30000)) >= 0) {
                        result.attach("You're surprised to see " + currentPlaythrough.personNames[5] + " outside your window.  Seems " + heShe(5) + " came to get you this time.");
                    } else {
                        result.attach("Through the window, you spot " + Tanaka() + " walking by your dorm.  Is it just your imagination, or was she staring in your direction the whole time?");
                    }
                    break;
                case 19:
                    if (currentPlaythrough.weeklyActions[(weekDayNumber() + 6) % 7][5].ownSpot == Spot.NIGHTCLUB || currentPlaythrough.weeklyActions[(weekDayNumber() + 6) % 7][4].ownSpot == Spot.NIGHTCLUB) {
                        result.attach("You wake up with a hangover.  At least you had a good time last night.");
                    } else {
                        result.attach("You wake up feeling energized.  Maybe this will be a good day.");
                    }
                    break;
                case 20:
                    if (currentPlaythrough.attributes[2].compareTo(BigInteger.ZERO) > 0) {
                        result.attach("It still feels a bit surreal to have a decent chunk of cash in your wallet.  Should you spend it or save it?");
                    } else {
                        result.attach(Yumeno() + " sends you a message about a new game console that's coming out soon.  Unfortunately, it's a bit beyond your price range.");
                    }
                    break;
                case 21:
                    if (getAttributeLevel(0, true).compareTo(BigInteger.valueOf(3)) > 0) {
                        result.attach("You've felt really healthy lately.  It must be because you've been more active.");
                    } else {
                        result.attach("You feel a little bit worn out.  Maybe you should be relaxing more?");
                    }
                    break;
                case 22:
                    if (getAttributeLevel(1, true).compareTo(BigInteger.ONE) > 0) {
                        result.attach("You wake up and immediately get to work on your plans for the day.  Seems like you've gotten better at not wasting time.");
                    } else {
                        result.attach("You feel restless today.  Like you need somewhere to direct all this aimless energy.");
                    }
                    break;
                case 23:
                    if (currentPlaythrough.weeklyActions[(weekDayNumber() + 6) % 7][5].baseCost.compareTo(BigInteger.ZERO) > 0) {
                        result.attach("You're already awake when the sun rises.  The distinction between when one day stops and another starts doesn't mean much right now.");
                    } else {
                        result.attach("You wake up bright and early.  Now you just need to decide whether to go right back to sleep.");
                    }
                    break;
                case 24:
                    result.attach("Just one week left to enjoy your summer break.");
                    break;
                case 25:
                    if (getGoalLevel(1, true) > 2) {
                        result.attach("You dream about " + Tanaka() + " again.");
                    } else {
                        result.attach("You slept pretty well.");
                    }
                    break;
                case 26:
                    if (equipmentRoutine() == RoutineElements.HANDHELDGAMES) {
                        result.attach("You have a game you're planning to try out today, assuming that nobody distracts you too much from it.");
                    } else {
                        result.attach("A part of you wants to laze around and play video games all day, but you have other plans.");
                    }
                    break;
                case 27:
                    if (currentPlaythrough.weeklyActions[(weekDayNumber() + 6) % 7][5].relationship == 0) {
                        result.attach(Hashimoto() + " left " + hisHer(0) + " jacket here yesterday morning.  You'd better get it back to " + himHer(0) + ".");
                    } else {
                        result.attach("It feels a bit lonely around your place.  Maybe you should invite somebody over.");
                    }
                    break;
                case 28:
                    if (currentPlaythrough.weeklyActions[(weekDayNumber() + 6) % 7][5].relationship == 1) {
                        result.attach("You wake up at " + Yumeno() + "'s house.  It's a pretty nice way to start your day.");
                    } else {
                        result.attach("You eat your breakfast alone, thinking to yourself about how you'll spend your day.");
                    }
                    break;
                case 29:
                    if (getGoalLevel(6, true) > 1) {
                        result.attach("Your bedroom is nowhere near as impressive as the ones at " + DuMont() + "'s mansion, but it's good enough.");
                    } else {
                        result.attach("A limousine drives by outside, and you idly wonder what it would be like to have that kind of high-class lifestyle.");
                    }
                    break;
                case 30:
                    result.attach("Classes resume tomorrow.  It's probably normal to feel a sense of dread.");
                    break;
                case 31:
                    result.attach("It's time to see what the next term holds in store for you.");
                    break;
                case 32:
                    if (currentPlaythrough.personStatus[5] == Locale.COLLEGETOWN) {
                        result.attach("You can still hardly believe what happened yesterday.  It feels like a fever dream.");
                    } else {
                        result.attach("It's possible that you'll never see " + Tanaka() + " again.  It doesn't feel right.");
                    }
                    break;
                case 33:
                    result.attach("Finances Lv 1 unlocks the generous stance.  If you use its bonuses wisely, it will pay for itself before too long.");
                    break;
                case 34:
                    result.attach("Finances Lv 2 allows you to buy a larceny kit.  But first, you'd need some scoundrel to teach you how to use those kinds of tools.");
                    break;
                case 35:
                    result.attach("Finances Lv 3 allows you to cook using premium ingredients.  You'll need familiarity with high-class cuisine to obtain the necessary skills.");
                    break;
                case 36:
                    result.attach("Finances Lv 4 will let you hire the fixer recommended by " + DuMont() + ".  Even if you can't afford to hire " + himHer(3) + " regularly, just meeting " + himHer(3) + " for the first time might prove enlightening.");
                    break;
                case 37:
                    result.attach("Finances Lv 5 will be enough to get you through the door of a certain research institute.");
                    break;
                case 38:
                    result.attach("Finances Lv 6 allows you to emulate the fashion of the rich and famous, although having the knowhow to do so successfully is another matter entirely.");
                    break;
                case 39:
                    result.attach("Finances Lv 7 is enough to afford the menu items of some members-only fine dining establishments.");
                    break;
                case 40:
                    result.attach("Finances Lv 8 will get you preferential treatment at the research institute.");
                    break;
                case 41:
                    result.attach("Finances Lv 9 will help unlock a special career opportunity once you've been introduced to the right people.");
                    break;
                case 42:
                    result.attach("Finances Lv 10 unlocks the 'Financially Independent' achievement.");
                    break;
                case 43:
                    result.attach("Finances Lv 11 will allow you to get set up in another city, as long as you've found a good reason for doing so.");
                    break;
                case 44:
                    if (stanceRoutine() == RoutineElements.FOCUSED) {
                        result.attach("You have a plan.  You get up and carry it out.");
                    } else {
                        result.attach("You feel overwhelmed by the events of the past couple of weeks.  The days blur together.");
                    }
                    break;
                case 45:
                    if (dietRoutine() == RoutineElements.FINEDINING) {
                        result.attach("You're busy, but that doesn't mean you can't put some effort into eating a good breakfast.");
                    } else {
                        result.attach("You forget to eat breakfast before you head out.  It's fine, you can make up for it later.");
                    }
                    break;
                case 46:
                    if (equipmentRoutine() == RoutineElements.LARCENY) {
                        result.attach("Before the sun comes up, you head out to 'acquire' some valuables to sell for cash.");
                    } else {
                        result.attach("You had another nightmare about running out of money.  It's hard to try to make your cash honestly.");
                    }
                    break;
                case 47:
                    if (getRelationshipLevel(0, false).intValue() > 7) {
                        result.attach(Hashimoto() + " shows up at your place to see how you're holding up.  " + HeShe(0) + " can actually be pretty considerate.");
                    } else {
                        result.attach("You briefly wonder whether you should tell " + Hashimoto() + " about some of your troubles.  But " + heShe(0) + "'d probably just make fun of you.");
                    }
                    break;
                case 48:
                    if (getRelationshipLevel(1, false).intValue() > 5) {
                        result.attach(Yumeno() + " asks you to come over and just play some mindless video games for the day.  That must be " + hisHer(1) + " way of telling you that you need to relax.");
                    } else {
                        result.attach(Yumeno() + " has been seeming more curious about what's occupying all your time.  You don't want to burden " + himHer(1) + " with it, though.");
                    }
                    break;
                case 49:
                    if (getRelationshipLevel(2, false).intValue() > 3) {
                        result.attach("You spend a little bit of time looking at small-scale investment opportunities.  " + DuMont() + " has given you some good advice for spotting which ones are scams.");
                    } else {
                        result.attach("You spend some time checking your personal finances.  It seems like your money never takes you quite as far as you'd hope.");
                    }
                    break;
                case 50:
                    if (getRelationshipLevel(3, false).intValue() > 1) {
                        result.attach(Jackal() + " calls you in the morning to ask for advice on buying a birthday present for a friend of " + hisHers(3) + ".  It's a shockingly normal conversation.");
                    } else {
                        result.attach("You find yourself daydreaming about what it would be like to be good at fighting.");
                    }
                    break;
                case 51:
                    if (!barVisible(3)) {
                        result.attach("Good weather today.");
                    } else {
                        result.attach("Health is a resource which is easy to spend, but hard to get back.");
                    }
                    break;
                case 52:
                    if (!barVisible(3)) {
                        result.attach("You have a slight sniffle.  Hopefully it's nothing serious.");
                    } else {
                        result.attach("Health is usually restored at a rate of 1 per day.  Other increases are hard to come by.");
                    }
                    break;
                case 53:
                    if (!barVisible(3)) {
                        result.attach("You heard a popular song yesterday, and now it's stuck in your head.");
                    } else if (currentPlaythrough.upgradeLevels[23] > 0) {
                        result.attach("The Adrenaline upgrade grants a bonus depending on action Health costs, but this bonus applies even if the Health loss is cancelled by Wetwork or other effects.");
                    } else {
                        result.attach("Unlike Stamina, there's no inherent benefit to spending Health.");
                    }
                    break;
                case 54:
                    if (!barVisible(3)) {
                        result.attach("Your have homework due today.  You might end up failing a class or two.");
                    } else {
                        result.attach("Actions which cost Health tend to have better multipliers and more powerful goal effects.");
                    }
                    break;
                case 55:
                    if (!barVisible(3)) {
                        result.attach("The pink sunrise lights up a cloud whose shape reminds you of " + Tanaka() + ".");
                    } else {
                        result.attach("When you have enough Wetwork expertise to perform a Health-costing action every day, the result is often strong.");
                    }
                    break;
                case 56:
                    if (!barVisible(3)) {
                        result.attach("Just another regular day.");
                    } else {
                        result.attach("After you have enough Wetwork expertise that you aren't losing Health by performing an action, further Wetwork expertise doesn't help you at all.");
                    }
                    break;
                case 57:
                    if (!barVisible(3)) {
                        result.attach("Your microwave isn't working.  What a pain.");
                    } else {
                        result.attach("After unlocking a new attribute, it often takes awhile before the attribute can be brought to a useful level.  But the related goals can still be valuable.");
                    }
                    break;
                case 58:
                    if (currentPlaythrough.loops == 0) {
                        result.attach("You're in a good mood today.  Maybe everything will be okay.");
                    } else {
                        result.attach("If you don't plan on making use of a routine immediately, then unlocking it doesn't grant you any immediate benefit.  Your Stamina might be better spent elsewhere.");
                    }
                    break;
                case 59:
                    if (currentPlaythrough.loops == 0) {
                        result.attach("Some protesters outside your dorm are claiming that the end of the world is coming.  What nonsense.");
                    } else {
                        result.attach("The earlier you increase a relationship, the more of a chance you have to benefit from the increased multipliers.");
                    }
                    break;
                case 60:
                    if (currentPlaythrough.loops == 0) {
                        result.attach("It's cold today.");
                    } else {
                        result.attach("In the early part of each loop, completing goals makes the biggest difference to allowing you to progress faster.  But the further you progress, the more important attributes become.");
                    }
                    break;
                case 61:
                    if (currentPlaythrough.personStatus[5] == Locale.COLLEGETOWN) {
                        result.attach(Tanaka() + " calls you on the phone.  Seems like " + heShe(5) + " wants to do something nice to commemorate one month since you rescued " + himHer(5) + ".");
                    } else {
                        result.attach("It's been a month since " + Tanaka() + " was abducted.  What has " + heShe(5) + " already gone through?  And how much more will " + heShe(5) + " have to go through?");
                    }
                    break;
                case 62:
                    if (stanceRoutine() == RoutineElements.SELFDESTRUCTIVE) {
                        result.attach("Your whole body hurts.  In other words, you're making thorough use of it.");
                    } else {
                        result.attach("Slow and steady wins the race.");
                    }
                    break;
                case 63:
                    if (equipmentRoutine() == RoutineElements.BODYARMOR) {
                        result.attach("Your body armor took some damage yesterday.  Looks like it should still protect all the important parts.");
                    } else {
                        result.attach("With how active you've been, you're wearing out your clothes a little faster than usual.");
                    }
                    break;
                case 64:
                    if (dietRoutine() == RoutineElements.CANCERJUICE) {
                        result.attach("You're hungry no matter how much you eat.  " + Heilig() + " says that it's important to count your calories and avoid overeating while you're using " + hisHer(4) + " 'cancer juice', because your body won't be able to regulate itself.");
                    } else {
                        result.attach("You have a sudden craving for fast food.  Maybe it wouldn't hurt to grab a few bites just for old time's sake.");
                    }
                    break;
                case 65:
                    if (getAttributeLevel(0, false).intValue() > 10) {
                        result.attach("You feel much healthier than you've ever been.  What exactly changed?");
                    } else {
                        result.attach("This is probably the busiest you've ever been.  It's tiring.");
                    }
                    break;
                case 66:
                    if (getAttributeLevel(1, false).intValue() > 8) {
                        result.attach("You take a few minutes to make a move in a long-running online strategy game " + Yumeno() + " has been playing with you.  It's a pretty brilliant move, if you may say so yourself.");
                    } else {
                        result.attach("You play a quick game with " + Yumeno() + " online before you head out.  As usual, " + heShe(1) + " wins.");
                    }
                    break;
                case 67:
                    if (getAttributeLevel(2, false).intValue() > 6) {
                        result.attach("It suddenly strikes you that you have a lot of money in your bank account.  That's reassuring.");
                    } else {
                        result.attach("You feel like you've been working hard, but your bank account doesn't seem to be growing that fast.");
                    }
                    break;
                case 68:
                    if (getAttributeLevel(3, false).intValue() > 4) {
                        result.attach("A group of dangerous-looking guys passed you on the street yesterday, but you didn't feel worried in the slightest.  You're getting more confident that you can take care of yourself.");
                    } else {
                        result.attach("You hear a news story about crime being on the rise.  You'd best be careful today.");
                    }
                    break;
                case 69:
                    if (getAttributeLevel(4, false).intValue() > 2) {
                        result.attach("The more you learn, the better you understand how the world works.  It feels like you were so ignorant just a couple of months ago.");
                    } else {
                        result.attach("You feel like you've picked up some useful skills, but you still have a lot to learn.  Best not to get complacent.");
                    }
                    break;
                case 70:
                    if (getGoalLevel(10, true) > 3) {
                        result.attach("Looks like " + Hashimoto() + " sent you a book " + heShe(0) + " wants you to read.  You'll have to find the time somehow.");
                    } else {
                        result.attach("On impulse, you buy a novel that looks interesting.  You might not get a chance to read it, though.");
                    }
                    break;
                case 71:
                    if (getGoalLevel(26, true) > 0) {
                        result.attach(Yumeno() + " calls you early in the morning, full of excitement about the game you just made receiving a positive review.");
                    } else {
                        result.attach("Yesterday, " + Yumeno() + " wanted to talk about an idea for a game " + heShe(1) + " wants to make.  You weren't really able to follow " + hisHer(1) + " train of thought.");
                    }
                    break;
                case 72:
                    if (getGoalLevel(11, true) > 2) {
                        result.attach("You have an idea for a breakfast recipe " + DuMont() + " might like.  Maybe you should talk to the chef about it.");
                    } else {
                        result.attach("You decide to try making yourself a fancier breakfast than normal.  It goes pretty well.");
                    }
                    break;
                case 73:
                    if (getGoalLevel(15, true) > 1) {
                        result.attach(Jackal() + " calls to ask how you're feeling.  Seems like " + heShe(3) + " doesn't want you doing anything dangerous if you're at anything less than your best condition.");
                    } else {
                        result.attach("Cold and rainy today.  Maybe it'd be better to stay inside.");
                    }
                    break;
                case 74:
                    if (getGoalLevel(18, true) > 0) {
                        if (loopRoutineCount(RoutineElements.CANCERJUICE, currentPlaythrough) > 0) {
                            result.attach("You wonder how long you'll have before the cancer juice kills you.");
                        } else {
                            result.attach("Not for the first time, you consider sending the cancer juice back to " + Heilig() + ".");
                        }
                    } else {
                        result.attach("You find yourself thinking about the distant future, and what the rest of your life will be like.");
                    }
                    break;
                case 75:
                    if (barVisible(4)) {
                        result.attach("In order to reach useful levels of the lategame relationships and attributes, you'll need to raise your Academics and Charisma.");
                    } else {
                        result.attach("Once it's unlocked, the Academics attribute will multiply all attribute gains, just as Charisma does for relationship gains.");
                    }
                    break;
                case 76:
                    result.attach("Academics and Charisma are expensive, but they'll eventually pay for themselves, especially if gained earlier in the run.");
                    break;
                case 77:
                    result.attach("Academics is difficult to raise outside the College Town.");
                    break;
                case 78:
                    result.attach("The strongest Charisma-related options are located in the College Town, but it's difficult to make good use of them without " + Tanaka() + "'s help...");
                    break;
                case 79:
                    result.attach("Academics increases the progress rate of all attributes, including Academics itself.  This can cause its effective cost to actually go down as its level increases.");
                    break;
                case 80:
                    result.attach("Charisma only increases relationship progress rate, but relationships speed up all attributes and most goals.  So, Charisma's effect is indirect but eventually very powerful.");
                    break;
                case 81:
                    result.attach("Unlike Finances and Wetwork, Academics and Charisma always increase the progress rate of whatever you're doing.  The sooner you can gain each level, the better.");
                    break;
                case 82:
                    if (getGoalLevel(20, true) > 0) {
                        result.attach("The food at the country club really is good.  Maybe you should eat there again today.");
                    } else {
                        result.attach("What should you do today?");
                    }
                    break;
                case 83:
                    if (stanceRoutine() == RoutineElements.TRIUMPHANT) {
                        result.attach("You can probably let yourself relax today.  " + Tanaka() + "'s doing relatively fine.");
                    } else {
                        result.attach("You're keeping busy.");
                    }
                    break;
                case 84:
                    if (equipmentRoutine() == RoutineElements.OSTENTATIOUS) {
                        result.attach("You spend some time browsing through fashion magazines.  It's not vanity, it's important self-maintenance.");
                    } else {
                        result.attach("You catch a glimpse of a news story about some fashion show.  You don't really see the appeal.");
                    }
                    break;
                case 85:
                    if (getAttributeLevel(0, false).intValue() > 13) {
                        result.attach("On a whim, you time yourself running from your dorm to the bus stop at full speed.  But something must be wrong with your watch.  There's no way you're that fast.");
                    } else {
                        result.attach("The weather's getting colder.");
                    }
                    break;
                case 86:
                    if (getAttributeLevel(1, false).intValue() > 11) {
                        result.attach("You set another high score in a simple random puzzle game you've been playing.  " + Yumeno() + " seems impressed.");
                    } else {
                        result.attach("Another warm day.  You'd better enjoy these while they last.");
                    }
                    break;
                case 87:
                    if (getAttributeLevel(2, false).intValue() > 9) {
                        result.attach("An ad for a house on sale near the college catches your eye.  You could probably get a loan to buy it, but you have other plans for your finances.");
                    } else {
                        result.attach("An ad for a house on sale near the college catches your eye.  Well, even if you could afford it, your money would probably be better spent on other things.");
                    }
                    break;
                case 88:
                    if (getAttributeLevel(3, false).intValue() > 7) {
                        result.attach("You stopped a mugging today.  It was no big deal, but the little old lady seemed impressed that you went up against a couple of guys who had knives.");
                    } else {
                        result.attach("Time really flies.");
                    }
                    break;
                case 89:
                    if (getAttributeLevel(4, false).intValue() > 5) {
                        result.attach("Looking through the paperwork you got from the Tower, you catch a mistake made by one of the scientists there.  Better bring it to their attention.");
                    } else {
                        result.attach("Seems like there was a traffic accident on one of the main roads.  You'll be better off walking than taking the bus today.");
                    }
                    break;
                case 90:
                    if (getAttributeLevel(5, false).intValue() > 3) {
                        result.attach("Being popular can actually be a bit exhausting.");
                    } else {
                        result.attach("Someday, you'd like to relax and spend more time with your friends.");
                    }
                    break;
                case 91:
                    if (currentPlaythrough.currentLocale == Locale.COLLEGETOWN) {
                        result.attach("There's a culture festival coming up in a couple of weeks.  Should be a fun time for all involved.");
                    } else {
                        result.attach("You feel a little bit homesick.");
                    }
                    break;
                case 92:
                    if (currentPlaythrough.personStatus[5] == Locale.COLLEGETOWN) {
                        result.attach(Tanaka() + " calls you again, wanting to celebrate two months since you rescued " + himHer(5) + ".  " + HeShe(5) + "'s not going to let this go, is " + heShe(5) + "?");
                    } else {
                        result.attach("Two months since " + Tanaka() + "'s abduction.  How much longer will you continue to think of each month in those terms?");
                    }
                    break;
                case 93:
                    if (getGoalLevel(24, true) > 0) {
                        result.attach("Apparently " + Hashimoto() + "'s planning on taking a proper class on art next term.  " + HeShe(0) + "'s excited to see what " + heShe(0) + " can make.");
                    } else {
                        result.attach(Hashimoto() + " seems to be feeling bothered about something, but " + heShe(0) + " won't tell you what.  It's unlike " + himHer(0) + " to be so evasive.");
                    }
                    break;
                case 94:
                    if (getGoalLevel(2, true) > 6) {
                        result.attach(Yumeno() + " actually asks you for some tips about personal training.  Is " + heShe(1) + " wanting to go along with you?");
                    } else if (currentPlaythrough.currentLocale != Locale.COLLEGETOWN) {
                        result.attach(Yumeno() + " hasn't been returning your calls.");
                    } else {
                        result.attach(Yumeno() + " has been almost... 'clingy' lately.  ");
                        if (currentPlaythrough.romance[1] > 0) {
                            result.attach(HeShe(1) + " must not want you to leave again.");
                        } else {
                            result.attach("It isn't unpleasant, but what exactly does " + heShe(1) + " want from you?");
                        }
                    }
                    break;
                case 95:
                    if (getGoalLevel(6, true) > 3) {
                        if (currentPlaythrough.currentLocale != Locale.COLLEGETOWN) {
                            result.attach(DuMont() + " offers to take you to the spa again once you get back.  " + HeShe(2) + " laughingly promises not to take the chance to hit on you.");
                        } else {
                            result.attach(DuMont() + " offers to take you to the spa again.  " + HeShe(2) + " laughingly promises not to take the chance to hit on you.");
                        }
                    } else {
                        result.attach(DuMont() + " has seemed more interested than usual in your affairs.  Maybe " + heShe(2) + " feels guilty about not helping more.");
                    }
                    break;
                case 96:
                    if (currentPlaythrough.relationships[3].equals(BigInteger.ZERO)) {
                        if (currentPlaythrough.personStatus[5] == Locale.COLLEGETOWN) {
                            result.attach("You're content with your life.  Best to just enjoy these days for as long as you can, right?");
                        } else {
                            result.attach("It's probably too late to do anything to help " + Tanaka() + ".  Best to stop thinking about " + himHer(5) + ".");
                        }
                    } else if (currentPlaythrough.currentLocale != Locale.COLLEGETOWN) {
                        result.attach(Jackal() + " calls to ask how you're doing.  You chat a bit about what it's like to go to another country.");
                    } else if (getGoalLevel(15, true) > 3) {
                        result.attach(Jackal() + " invites you to " + hisHer(3) + " place for breakfast.  Apparently " + heShe(3) + " was gifted way too much food by a client and " + heShe(3) + " doesn't want it to go to waste.");
                    } else {
                        result.attach("It's really stormy today, but apparently " + Jackal() + "'s still available to train if you want to.");
                    }
                    break;
                case 97:
                    if (currentPlaythrough.relationships[4].equals(BigInteger.ZERO)) {
                        result.attach("In passing, you hear a news story about some international political trouble.  As usual, you ignore it.");
                    } else if (loopRoutineCount(RoutineElements.CANCERJUICE, currentPlaythrough) > 0) {
                        result.attach(Heilig() + " calls you up to check on how your body is doing.");
                    } else {
                        result.attach(Heilig() + " calls to check on you, and " + heShe(4) + " seems happy to hear that you still haven't taken the cancer juice.  You still have a long life ahead of you.");
                    }
                    break;
                case 98:
                    if (getRoute() >= 0) {
                        result.attach("You feel like you should be spending more time with " + currentPlaythrough.personNames[getRoute()] + ".");
                    } else if (currentPlaythrough.loops > 0) {
                        result.attach("You feel an odd sense of dread.");
                    } else {
                        result.attach("Another regular day.");
                    }
                    break;
                case 99:
                    if (currentPlaythrough.weeklyActions[weekDayNumber()][0].ownSpot.ownLocale == Locale.METROPOLIS) {
                        result.attach("Today's news is full of speculation about an undersea cable that got damaged and apparently messed up intercontinental communications.  Sure enough, a bunch of websites are down, and you can't reach any of your friends back home.  Hopefully it gets sorted out soon.");
                    } else {
                        result.attach("The other passengers are abuzz with talk about the recent news regarding an undersea cable getting damaged and messing up intercontinental communications.  Apparently you shouldn't plan on being able to get ahold of your friends back home until the repair crew can get it sorted out.");
                    }
                    break;
            }
        } else {
            result.attach("You're still in flight.");
        }

		return result;
	}
	
	public static WindowContents getNewDayContents() {
		return currentPlaythrough.NewDayContents;
	}
	
	public static void updateGoalTooltip() {
		Point locationOnScreen = MouseInfo.getPointerInfo().getLocation();
        Point locationOnComponent = new Point(locationOnScreen);
        SwingUtilities.convertPointFromScreen(locationOnComponent, goalProgressBar);
        if (goalProgressBar.contains(locationOnComponent)) {
            ToolTipManager.sharedInstance().mouseMoved(
                    new java.awt.event.MouseEvent(goalProgressBar, -1, System.currentTimeMillis(), 0, locationOnComponent.x, locationOnComponent.y,
                            locationOnScreen.x, locationOnScreen.y, 0, false, 0));
        }
	}
	
	public static boolean achievementEverEarned(Playthrough p, Achievement h) {
		if (p.progress.highestAchievements.get(h) == null) {
			return false;
		} else if (p.progress.highestAchievements.get(h).equals(BigInteger.ZERO)) {
			return false;
		}
		return true;
	}
	
	public static int loopActionCount(Action a, Playthrough p) {
		if (a == null || p == null) {
			return 0;
		}
		int result = 0;
		for (int i = 0; i < p.archivedActions.length; i++) {
			for (int j = 0; j < 7; j++) {
				if (p.archivedActions[i][j][a.availableSlot] == a) {
					result++;
				}
			}
		}
		for (int i = 0; i < 7 && i <= weekDayNumber(); i++) {
			if (p.weeklyActions[i][a.availableSlot] == a) {
				result++;
			}
		}
		return result;
	}
	
	public static int totalActionCount(Action a) {
		int result = 0;
		for (int i = 0; i < currentPlaythrough.progress.archivedLoops.length; i++) {
			result += loopActionCount(a, currentPlaythrough.progress.archivedLoops[i]);
		}
		result += loopActionCount(a, currentPlaythrough);
		return result;
	}
	
	public static int loopRoutineCount(RoutineElements e, Playthrough p) {
		if (e == null || p == null) {
			return 0;
		}
		int result = 0;
		for (int i = 0; i < p.archivedRoutine.length; i++) {
			for (int j = 0; j < 7; j++) {
				if (p.archivedRoutine[i][j][e.ownRoutineSettings.placement] == e) {
					result++;
				}
			}
		}
		for (int i = 0; i < 7 && i <= weekDayNumber(); i++) {
			if (p.weeklyRoutine[i][e.ownRoutineSettings.placement] == e) {
				result++;
			}
		}
		return result;
	}
	
	public static int totalRoutineCount(RoutineElements e) {
		int result = 0;
		for (int i = 0; i < currentPlaythrough.progress.archivedLoops.length; i++) {
			result += loopRoutineCount(e, currentPlaythrough.progress.archivedLoops[i]);
		}
		result += loopRoutineCount(e, currentPlaythrough);
		return result;
	}

	public static int loopActionFirstUsed(Action a, Playthrough p) {
		int result = -1;
		for (int i = 0; i < p.archivedActions.length; i++) {
			for (int j = 0; j < 7; j++) {
				if (p.archivedActions[i][j][a.availableSlot] == a) {
					return i*7 + j - 5;
				}
			}
		}
		return result;
	}
	
	public static Epoch getEpoch() {
        if (currentPlaythrough.currentLocale == Locale.COLLEGETOWN && (currentPlaythrough.personStatus[5] == Locale.COLLEGETOWN || getGoalLevel(28, true) > 0) && (getGoalLevel(1, true) > 1 || getGoalLevel(2, true) > 1 || getGoalLevel(3, true) > 1 || getGoalLevel(6, true) > 1)) {
			return Epoch.DAILYLIFE;
		} else if (currentPlaythrough.personStatus[5] == Locale.METROPOLIS && getGoalLevel(28, true) == 0) {
			if (getGoalLevel(14, true) > 0) {
				return Epoch.PURSUIT;
			} else {
				return Epoch.ABDUCTION;
			}
		} else if (currentPlaythrough.currentLocale == Locale.METROPOLIS || currentPlaythrough.currentLocale == Locale.TRANSIT) {
			return Epoch.NEWCITY;
		}
		return Epoch.NEWLOOP;
	}
	
	public static String Hashimoto() {
		return currentPlaythrough.personNames[0];
	}
	
	public static String Yumeno() {
		return currentPlaythrough.personNames[1];
	}
	
	public static String DuMont() {
		return currentPlaythrough.personNames[2];
	}
	
	public static String Jackal() {
		return currentPlaythrough.personNames[3];
	}
	
	public static String Heilig() {
		return currentPlaythrough.personNames[4];
	}
	
	public static String Tanaka() {
		return currentPlaythrough.personNames[5];
	}

    public static String Lophii() { return currentPlaythrough.personNames[8]; }

    public static String Artemis() { return currentPlaythrough.personNames[17]; }

	public static String fullName(int i) {
		if (i == 0) {
			if (Hashimoto().equals("Hashimoto")) {
				return "Hashimoto Kiseki";
			} else {
				return Hashimoto();
			}
		} else if (i == 1) {
			if (Yumeno().equals("Yumeno")) {
				return "Yumeno Miko";
			} else {
				return Yumeno();
			}
		} else if (i == 2) {
			if (DuMont().equals("DuMont")) {
				if (currentPlaythrough.personGenders[2].presentation() == Gender.MALE) {
					return "Reginald DuMont";
				} else {
					return "Regina DuMont";
				}
			} else {
				return DuMont();
			}
		} else if (i == 3) {
			return Jackal();
		} else if (i == 4) {
			if (Heilig().equals("Heilig")) {
				if (currentPlaythrough.personGenders[2].presentation() == Gender.MALE) {
					return "Peter Heilig";
				} else {
					return "Petra Heilig";
				}
			} else {
				return Heilig();
			}
		} else if (i == 5) {
			if (Tanaka().equals("Tanaka")) {
				return "Tanaka Ai";
			} else {
				return Tanaka();
			}
		} else if (i == 8) {
            if (Lophii().equals("Lophii")) {
                return "Lux Lophii";
            } else {
                return Lophii();
            }
        }
		return "";
	}

	public static String getUpgradeBackground() {
		String result = "vesta1";
		if (achievementEverEarned(currentPlaythrough, Achievement.SAVIOR)) {
			result = "vesta2";
		}
		if (currentPlaythrough.loops <= 20) {
			result = result+"a";
		} else {
			result = result+"b";
		}
		return result;
	}

	public static void main(String[] args) {
		javax.swing.SwingUtilities.invokeLater(new Runnable() {
            public void run() {
               new Game();
            }
        });
	}

}
